
Balancing_Plate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006af4  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08006af4  0c006af4  0000eaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  08006af4  0c006af4  0000eaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  4 .data         00000c28  20000000  0c006afc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000090  20000c28  0c007724  00010c28  2**2
                  ALLOC
  6 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  7 .debug_aranges 00000d40  00000000  00000000  00010c28  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001ff01  00000000  00000000  00011968  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004721  00000000  00000000  00031869  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d027  00000000  00000000  00035f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002614  00000000  00000000  00042fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00083c37  00000000  00000000  000455c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006fda  00000000  00000000  000c91ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e88  00000000  00000000  000d01d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000d57  00000000  00000000  000d1061  2**0
                  CONTENTS, READONLY
 16 .debug_macro  0001ca22  00000000  00000000  000d1db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 45 18 00 08 b1 02 00 08 b1 02 00 08     ....E...........
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 d1 18 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 1d 19 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	61 12 00 08 b1 02 00 08 55 12 00 08 b1 02 00 08     a.......U.......
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006afc 	.word	0x0c006afc
 800024c:	20000000 	.word	0x20000000
 8000250:	00000c28 	.word	0x00000c28
 8000254:	0c007724 	.word	0x0c007724
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c006afc 	.word	0x0c006afc
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c006afc 	.word	0x0c006afc
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000c28 	.word	0x20000c28
 800027c:	00000090 	.word	0x00000090
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	0800033d 	.word	0x0800033d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08002079 	.word	0x08002079
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080018ed 	.word	0x080018ed

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemCoreClockUpdate>:
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002b4:	4b1d      	ldr	r3, [pc, #116]	; (800032c <SystemCoreClockUpdate+0x78>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	03d9      	lsls	r1, r3, #15

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002ba:	b510      	push	{r4, lr}
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002bc:	d525      	bpl.n	800030a <SystemCoreClockUpdate+0x56>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <SystemCoreClockUpdate+0x7c>)
 80002c0:	68da      	ldr	r2, [r3, #12]
 80002c2:	f012 0f01 	tst.w	r2, #1
 80002c6:	461c      	mov	r4, r3
 80002c8:	d102      	bne.n	80002d0 <SystemCoreClockUpdate+0x1c>
      temp = OFI_FREQUENCY;
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002ca:	f001 f98b 	bl	80015e4 <OSCHP_GetFrequency>
 80002ce:	e000      	b.n	80002d2 <SystemCoreClockUpdate+0x1e>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002d0:	4818      	ldr	r0, [pc, #96]	; (8000334 <SystemCoreClockUpdate+0x80>)
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002d2:	6822      	ldr	r2, [r4, #0]
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <SystemCoreClockUpdate+0x7c>)
 80002d6:	0752      	lsls	r2, r2, #29
 80002d8:	d510      	bpl.n	80002fc <SystemCoreClockUpdate+0x48>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002da:	689a      	ldr	r2, [r3, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80002dc:	6899      	ldr	r1, [r3, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80002de:	689b      	ldr	r3, [r3, #8]
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002e0:	f3c2 6203 	ubfx	r2, r2, #24, #4
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80002e4:	f3c3 4406 	ubfx	r4, r3, #16, #7
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002e8:	1c53      	adds	r3, r2, #1
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80002ea:	fb04 3303 	mla	r3, r4, r3, r3
 80002ee:	fbb0 f0f3 	udiv	r0, r0, r3
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80002f2:	f3c1 2306 	ubfx	r3, r1, #8, #7
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80002f6:	fb03 0000 	mla	r0, r3, r0, r0
 80002fa:	e007      	b.n	800030c <SystemCoreClockUpdate+0x58>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000302:	3301      	adds	r3, #1
      
      temp = (temp / kdiv);
 8000304:	fbb0 f0f3 	udiv	r0, r0, r3
 8000308:	e000      	b.n	800030c <SystemCoreClockUpdate+0x58>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800030a:	480a      	ldr	r0, [pc, #40]	; (8000334 <SystemCoreClockUpdate+0x80>)
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <SystemCoreClockUpdate+0x78>)
 800030e:	68d3      	ldr	r3, [r2, #12]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	3301      	adds	r3, #1
 8000314:	fbb0 f0f3 	udiv	r0, r0, r3
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000318:	6913      	ldr	r3, [r2, #16]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	3301      	adds	r3, #1
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3

  SystemCoreClock = temp;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <SystemCoreClockUpdate+0x84>)
 8000326:	6018      	str	r0, [r3, #0]
 8000328:	bd10      	pop	{r4, pc}
 800032a:	bf00      	nop
 800032c:	50004600 	.word	0x50004600
 8000330:	50004710 	.word	0x50004710
 8000334:	016e3600 	.word	0x016e3600
 8000338:	2000ffc0 	.word	0x2000ffc0

0800033c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800033c:	b538      	push	{r3, r4, r5, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 800033e:	4a09      	ldr	r2, [pc, #36]	; (8000364 <SystemInit+0x28>)
 8000340:	4d09      	ldr	r5, [pc, #36]	; (8000368 <SystemInit+0x2c>)
 8000342:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000346:	4623      	mov	r3, r4
 8000348:	cb03      	ldmia	r3!, {r0, r1}
 800034a:	42ab      	cmp	r3, r5
 800034c:	6010      	str	r0, [r2, #0]
 800034e:	6051      	str	r1, [r2, #4]
 8000350:	461c      	mov	r4, r3
 8000352:	f102 0208 	add.w	r2, r2, #8
 8000356:	d1f6      	bne.n	8000346 <SystemInit+0xa>

  SystemCoreSetup();
 8000358:	f001 f904 	bl	8001564 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800035c:	f001 f946 	bl	80015ec <SystemCoreClockSetup>
 8000360:	bd38      	pop	{r3, r4, r5, pc}
 8000362:	bf00      	nop
 8000364:	2000ffc4 	.word	0x2000ffc4
 8000368:	20000010 	.word	0x20000010

0800036c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800036c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000370:	4403      	add	r3, r0
 8000372:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000374:	f001 0403 	and.w	r4, r1, #3
 8000378:	691e      	ldr	r6, [r3, #16]
 800037a:	00e4      	lsls	r4, r4, #3
 800037c:	25f8      	movs	r5, #248	; 0xf8
 800037e:	40a5      	lsls	r5, r4
 8000380:	ea26 0505 	bic.w	r5, r6, r5
 8000384:	611d      	str	r5, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000386:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8000388:	004f      	lsls	r7, r1, #1
 800038a:	2503      	movs	r5, #3
 800038c:	40bd      	lsls	r5, r7
 800038e:	ea26 0505 	bic.w	r5, r6, r5
 8000392:	6745      	str	r5, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000394:	4d16      	ldr	r5, [pc, #88]	; (80003f0 <XMC_GPIO_Init+0x84>)
 8000396:	42a8      	cmp	r0, r5
 8000398:	d003      	beq.n	80003a2 <XMC_GPIO_Init+0x36>
 800039a:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d107      	bne.n	80003b2 <XMC_GPIO_Init+0x46>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003a2:	6e05      	ldr	r5, [r0, #96]	; 0x60
 80003a4:	2601      	movs	r6, #1
 80003a6:	fa06 f101 	lsl.w	r1, r6, r1
 80003aa:	ea25 0101 	bic.w	r1, r5, r1
 80003ae:	6601      	str	r1, [r0, #96]	; 0x60
 80003b0:	e018      	b.n	80003e4 <XMC_GPIO_Init+0x78>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80003b2:	f992 5000 	ldrsb.w	r5, [r2]
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	da14      	bge.n	80003e4 <XMC_GPIO_Init+0x78>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80003ba:	6855      	ldr	r5, [r2, #4]
 80003bc:	408d      	lsls	r5, r1
 80003be:	6045      	str	r5, [r0, #4]
 80003c0:	08cd      	lsrs	r5, r1, #3
 80003c2:	eb00 0085 	add.w	r0, r0, r5, lsl #2

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80003c6:	f001 0107 	and.w	r1, r1, #7
 80003ca:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80003cc:	0089      	lsls	r1, r1, #2
 80003ce:	2507      	movs	r5, #7
 80003d0:	408d      	lsls	r5, r1
 80003d2:	ea26 0505 	bic.w	r5, r6, r5
 80003d6:	6405      	str	r5, [r0, #64]	; 0x40
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80003d8:	7a16      	ldrb	r6, [r2, #8]
 80003da:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80003dc:	fa06 f101 	lsl.w	r1, r6, r1
 80003e0:	4329      	orrs	r1, r5
 80003e2:	6401      	str	r1, [r0, #64]	; 0x40
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80003e4:	7812      	ldrb	r2, [r2, #0]
 80003e6:	6919      	ldr	r1, [r3, #16]
 80003e8:	40a2      	lsls	r2, r4
 80003ea:	430a      	orrs	r2, r1
 80003ec:	611a      	str	r2, [r3, #16]
 80003ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f0:	48028e00 	.word	0x48028e00

080003f4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	4604      	mov	r4, r0
  uint32_t i;

  SystemCoreClockUpdate();
 80003f8:	f7ff ff5c 	bl	80002b4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <XMC_SCU_lDelay+0x24>)
 80003fe:	4807      	ldr	r0, [pc, #28]	; (800041c <XMC_SCU_lDelay+0x28>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	fbb3 f3f0 	udiv	r3, r3, r0
 8000406:	fb03 f004 	mul.w	r0, r3, r4

  for (i = 0U; i < delay; ++i)
 800040a:	2300      	movs	r3, #0
 800040c:	4283      	cmp	r3, r0
 800040e:	d002      	beq.n	8000416 <XMC_SCU_lDelay+0x22>
  {
    __NOP();
 8000410:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000412:	3301      	adds	r3, #1
 8000414:	e7fa      	b.n	800040c <XMC_SCU_lDelay+0x18>
  {
    __NOP();
  }
}
 8000416:	bd10      	pop	{r4, pc}
 8000418:	2000ffc0 	.word	0x2000ffc0
 800041c:	000f4240 	.word	0x000f4240

08000420 <XMC_SCU_RESET_DeassertPeripheralReset>:
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000420:	0f02      	lsrs	r2, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000422:	230c      	movs	r3, #12
 8000424:	4353      	muls	r3, r2
 8000426:	4a02      	ldr	r2, [pc, #8]	; (8000430 <XMC_SCU_RESET_DeassertPeripheralReset+0x10>)

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000428:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800042c:	5098      	str	r0, [r3, r2]
 800042e:	4770      	bx	lr
 8000430:	50004414 	.word	0x50004414

08000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000434:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000438:	230c      	movs	r3, #12
}

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800043a:	0f00      	lsrs	r0, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800043c:	4358      	muls	r0, r3
 800043e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 8000442:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
 8000446:	58c3      	ldr	r3, [r0, r3]
 8000448:	421a      	tst	r2, r3
}
 800044a:	bf14      	ite	ne
 800044c:	2001      	movne	r0, #1
 800044e:	2000      	moveq	r0, #0
 8000450:	4770      	bx	lr
	...

08000454 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000458:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800045a:	6810      	ldr	r0, [r2, #0]
 800045c:	f003 0301 	and.w	r3, r3, #1
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000460:	40d8      	lsrs	r0, r3
 8000462:	4770      	bx	lr
 8000464:	50004600 	.word	0x50004600
 8000468:	2000ffc0 	.word	0x2000ffc0

0800046c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800046c:	4a03      	ldr	r2, [pc, #12]	; (800047c <XMC_SCU_CLOCK_SetSystemClockSource+0x10>)
 800046e:	68d3      	ldr	r3, [r2, #12]
 8000470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000474:	4318      	orrs	r0, r3
 8000476:	60d0      	str	r0, [r2, #12]
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	50004600 	.word	0x50004600

08000480 <XMC_SCU_CLOCK_SetUsbClockSource>:
}

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 8000482:	6993      	ldr	r3, [r2, #24]
 8000484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000488:	4318      	orrs	r0, r3
 800048a:	6190      	str	r0, [r2, #24]
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	50004600 	.word	0x50004600

08000494 <XMC_SCU_CLOCK_SetWdtClockSource>:
}

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000494:	4a03      	ldr	r2, [pc, #12]	; (80004a4 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 8000496:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000498:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800049c:	4318      	orrs	r0, r3
 800049e:	6250      	str	r0, [r2, #36]	; 0x24
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	50004600 	.word	0x50004600

080004a8 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x1c>)
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004aa:	68d3      	ldr	r3, [r2, #12]

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80004ac:	b920      	cbnz	r0, 80004b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x10>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b2:	f023 0301 	bic.w	r3, r3, #1
 80004b6:	e003      	b.n	80004c0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x18>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	60d3      	str	r3, [r2, #12]
 80004c2:	4770      	bx	lr
 80004c4:	50004710 	.word	0x50004710

080004c8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <XMC_SCU_HIB_SetRtcClockSource+0x18>)
 80004ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80004ce:	071b      	lsls	r3, r3, #28
 80004d0:	d4fa      	bmi.n	80004c8 <XMC_SCU_HIB_SetRtcClockSource>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80004d2:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 80004d4:	68d3      	ldr	r3, [r2, #12]
 80004d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004da:	4318      	orrs	r0, r3
 80004dc:	60d0      	str	r0, [r2, #12]
 80004de:	4770      	bx	lr
 80004e0:	50004000 	.word	0x50004000
 80004e4:	50004300 	.word	0x50004300

080004e8 <XMC_SCU_HIB_SetStandbyClockSource>:
}

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <XMC_SCU_HIB_SetStandbyClockSource+0x18>)
 80004ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80004ee:	071b      	lsls	r3, r3, #28
 80004f0:	d4fa      	bmi.n	80004e8 <XMC_SCU_HIB_SetStandbyClockSource>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <XMC_SCU_HIB_SetStandbyClockSource+0x1c>)
 80004f4:	68d3      	ldr	r3, [r2, #12]
 80004f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004fa:	4318      	orrs	r0, r3
 80004fc:	60d0      	str	r0, [r2, #12]
 80004fe:	4770      	bx	lr
 8000500:	50004000 	.word	0x50004000
 8000504:	50004300 	.word	0x50004300

08000508 <XMC_SCU_CLOCK_SetSystemClockDivider>:
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <XMC_SCU_CLOCK_SetSystemClockDivider+0x10>)
 800050a:	68d3      	ldr	r3, [r2, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800050c:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800050e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000512:	4303      	orrs	r3, r0
 8000514:	60d3      	str	r3, [r2, #12]
 8000516:	4770      	bx	lr
 8000518:	50004600 	.word	0x50004600

0800051c <XMC_SCU_CLOCK_SetCcuClockDivider>:
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <XMC_SCU_CLOCK_SetCcuClockDivider+0x10>)
 800051e:	6a13      	ldr	r3, [r2, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000520:	3801      	subs	r0, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000522:	f023 0301 	bic.w	r3, r3, #1
 8000526:	4303      	orrs	r3, r0
 8000528:	6213      	str	r3, [r2, #32]
 800052a:	4770      	bx	lr
 800052c:	50004600 	.word	0x50004600

08000530 <XMC_SCU_CLOCK_SetCpuClockDivider>:
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <XMC_SCU_CLOCK_SetCpuClockDivider+0x10>)
 8000532:	6913      	ldr	r3, [r2, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000534:	3801      	subs	r0, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000536:	f023 0301 	bic.w	r3, r3, #1
 800053a:	4303      	orrs	r3, r0
 800053c:	6113      	str	r3, [r2, #16]
 800053e:	4770      	bx	lr
 8000540:	50004600 	.word	0x50004600

08000544 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x10>)
 8000546:	6953      	ldr	r3, [r2, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000548:	3801      	subs	r0, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	4303      	orrs	r3, r0
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4770      	bx	lr
 8000554:	50004600 	.word	0x50004600

08000558 <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 800055a:	6993      	ldr	r3, [r2, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800055c:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800055e:	f023 0307 	bic.w	r3, r3, #7
 8000562:	4303      	orrs	r3, r0
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4770      	bx	lr
 8000568:	50004600 	.word	0x50004600

0800056c <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 800056e:	69d3      	ldr	r3, [r2, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000570:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000572:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000576:	4303      	orrs	r3, r0
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4770      	bx	lr
 800057c:	50004600 	.word	0x50004600

08000580 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 8000582:	6a53      	ldr	r3, [r2, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000584:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800058a:	4303      	orrs	r3, r0
 800058c:	6253      	str	r3, [r2, #36]	; 0x24
 800058e:	4770      	bx	lr
 8000590:	50004600 	.word	0x50004600

08000594 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <XMC_SCU_CLOCK_EnableClock+0x8>)
 8000596:	6058      	str	r0, [r3, #4]
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	50004600 	.word	0x50004600

080005a0 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <XMC_SCU_CLOCK_StartUsbPll+0x40>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	f042 0201 	orr.w	r2, r2, #1
 80005a8:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005aa:	695a      	ldr	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80005ac:	3801      	subs	r0, #1

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005ae:	3901      	subs	r1, #1
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80005b0:	0600      	lsls	r0, r0, #24
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005b2:	f042 0210 	orr.w	r2, r2, #16

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005b6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005ba:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005bc:	6159      	str	r1, [r3, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005c4:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	f022 0210 	bic.w	r2, r2, #16
 80005cc:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005d4:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80005d6:	691a      	ldr	r2, [r3, #16]
 80005d8:	0752      	lsls	r2, r2, #29
 80005da:	d5fc      	bpl.n	80005d6 <XMC_SCU_CLOCK_StartUsbPll+0x36>
  {
    /* wait for PLL Lock */
  }

}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	50004710 	.word	0x50004710

080005e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80005e4:	b510      	push	{r4, lr}
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80005e6:	4c0b      	ldr	r4, [pc, #44]	; (8000614 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x30>)
 80005e8:	6863      	ldr	r3, [r4, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80005ea:	2801      	cmp	r0, #1

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	6063      	str	r3, [r4, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80005f2:	d10a      	bne.n	800060a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x26>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80005f4:	6863      	ldr	r3, [r4, #4]
 80005f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005fa:	6063      	str	r3, [r4, #4]
    XMC_SCU_lDelay(100UL);
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f7ff fef9 	bl	80003f4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000602:	6863      	ldr	r3, [r4, #4]
 8000604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000608:	6063      	str	r3, [r4, #4]
  }

  XMC_SCU_lDelay(100UL);
 800060a:	2064      	movs	r0, #100	; 0x64
}
 800060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
  }

  XMC_SCU_lDelay(100UL);
 8000610:	f7ff bef0 	b.w	80003f4 <XMC_SCU_lDelay>
 8000614:	50004710 	.word	0x50004710

08000618 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <XMC_SCU_HIB_EnableHibernateDomain+0x2c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	07d2      	lsls	r2, r2, #31
 800061e:	d504      	bpl.n	800062a <XMC_SCU_HIB_EnableHibernateDomain+0x12>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <XMC_SCU_HIB_EnableHibernateDomain+0x30>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	0590      	lsls	r0, r2, #22
 8000626:	d406      	bmi.n	8000636 <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
 8000628:	4770      	bx	lr
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 800062a:	2201      	movs	r2, #1
 800062c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	07d1      	lsls	r1, r2, #31
 8000632:	d5fc      	bpl.n	800062e <XMC_SCU_HIB_EnableHibernateDomain+0x16>
 8000634:	e7f4      	b.n	8000620 <XMC_SCU_HIB_EnableHibernateDomain+0x8>
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063a:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	0592      	lsls	r2, r2, #22
 8000640:	d4fc      	bmi.n	800063c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
 8000642:	4770      	bx	lr
 8000644:	50004200 	.word	0x50004200
 8000648:	50004400 	.word	0x50004400

0800064c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x10>)
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	f080 0008 	eor.w	r0, r0, #8
}
 8000654:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	50004300 	.word	0x50004300

08000660 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 8000662:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000666:	60da      	str	r2, [r3, #12]
/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 800066a:	69d1      	ldr	r1, [r2, #28]
 800066c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000670:	61d1      	str	r1, [r2, #28]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000672:	6859      	ldr	r1, [r3, #4]
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000674:	0208      	lsls	r0, r1, #8
 8000676:	d5fc      	bpl.n	8000672 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x12>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000678:	490a      	ldr	r1, [pc, #40]	; (80006a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 800067a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800067e:	60c8      	str	r0, [r1, #12]
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000680:	2108      	movs	r1, #8
 8000682:	6051      	str	r1, [r2, #4]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000684:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000686:	0391      	lsls	r1, r2, #14
 8000688:	d5fc      	bpl.n	8000684 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x24>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 800068c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000690:	60d1      	str	r1, [r2, #12]
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000692:	4905      	ldr	r1, [pc, #20]	; (80006a8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 8000694:	68ca      	ldr	r2, [r1, #12]
 8000696:	f042 0208 	orr.w	r2, r2, #8
 800069a:	60ca      	str	r2, [r1, #12]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 800069c:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 800069e:	0312      	lsls	r2, r2, #12
 80006a0:	d5fc      	bpl.n	800069c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>
}
 80006a2:	4770      	bx	lr
 80006a4:	50004074 	.word	0x50004074
 80006a8:	50004300 	.word	0x50004300

080006ac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80006ae:	4d0c      	ldr	r5, [pc, #48]	; (80006e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x34>)

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006b0:	4e0c      	ldr	r6, [pc, #48]	; (80006e4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x38>)
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80006b2:	686b      	ldr	r3, [r5, #4]
 80006b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b8:	606b      	str	r3, [r5, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006ba:	6874      	ldr	r4, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80006bc:	f000 ff92 	bl	80015e4 <OSCHP_GetFrequency>
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x3c>)
 80006c2:	fbb0 f0f3 	udiv	r0, r0, r3
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006c6:	f424 2370 	bic.w	r3, r4, #983040	; 0xf0000
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80006ca:	3801      	subs	r0, #1
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80006d4:	6073      	str	r3, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80006d6:	686b      	ldr	r3, [r5, #4]
 80006d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006dc:	606b      	str	r3, [r5, #4]
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	50004710 	.word	0x50004710
 80006e4:	50004700 	.word	0x50004700
 80006e8:	002625a0 	.word	0x002625a0

080006ec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:
}

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x14>)
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	f400 7060 	and.w	r0, r0, #896	; 0x380
}
 80006f4:	f5a0 7360 	sub.w	r3, r0, #896	; 0x380
 80006f8:	4258      	negs	r0, r3
 80006fa:	4158      	adcs	r0, r3
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	50004710 	.word	0x50004710

08000704 <XMC_SCU_CLOCK_EnableSystemPll>:
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <XMC_SCU_CLOCK_EnableSystemPll+0x10>)
 8000706:	6853      	ldr	r3, [r2, #4]
 8000708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800070c:	f023 0302 	bic.w	r3, r3, #2
 8000710:	6053      	str	r3, [r2, #4]
 8000712:	4770      	bx	lr
 8000714:	50004710 	.word	0x50004710

08000718 <XMC_SCU_CLOCK_DisableSystemPll>:
}

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <XMC_SCU_CLOCK_DisableSystemPll+0x10>)
 800071a:	6853      	ldr	r3, [r2, #4]
 800071c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6053      	str	r3, [r2, #4]
 8000726:	4770      	bx	lr
 8000728:	50004710 	.word	0x50004710

0800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800072c:	4a05      	ldr	r2, [pc, #20]	; (8000744 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x18>)
 800072e:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000730:	3801      	subs	r0, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000732:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000736:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800073a:	6093      	str	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 800073c:	2032      	movs	r0, #50	; 0x32
 800073e:	f7ff be59 	b.w	80003f4 <XMC_SCU_lDelay>
 8000742:	bf00      	nop
 8000744:	50004710 	.word	0x50004710

08000748 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800074c:	460c      	mov	r4, r1
 800074e:	4605      	mov	r5, r0
 8000750:	4690      	mov	r8, r2
 8000752:	461f      	mov	r7, r3
 8000754:	9e06      	ldr	r6, [sp, #24]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000756:	f7ff fea7 	bl	80004a8 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800075a:	2c01      	cmp	r4, #1
 800075c:	4c31      	ldr	r4, [pc, #196]	; (8000824 <XMC_SCU_CLOCK_StartSystemPll+0xdc>)
 800075e:	d152      	bne.n	8000806 <XMC_SCU_CLOCK_StartSystemPll+0xbe>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000760:	b935      	cbnz	r5, 8000770 <XMC_SCU_CLOCK_StartSystemPll+0x28>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000762:	f000 ff3f 	bl	80015e4 <OSCHP_GetFrequency>
 8000766:	4d30      	ldr	r5, [pc, #192]	; (8000828 <XMC_SCU_CLOCK_StartSystemPll+0xe0>)
 8000768:	fbb0 f0f5 	udiv	r0, r0, r5
 800076c:	0580      	lsls	r0, r0, #22
 800076e:	e001      	b.n	8000774 <XMC_SCU_CLOCK_StartSystemPll+0x2c>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000770:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000774:	6863      	ldr	r3, [r4, #4]
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6063      	str	r3, [r4, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 800077c:	6863      	ldr	r3, [r4, #4]
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6063      	str	r3, [r4, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000784:	68a1      	ldr	r1, [r4, #8]
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <XMC_SCU_CLOCK_StartSystemPll+0xe4>)
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000788:	f108 32ff 	add.w	r2, r8, #4294967295

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800078c:	400b      	ands	r3, r1
 800078e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000792:	1e7a      	subs	r2, r7, #1
 8000794:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000798:	4378      	muls	r0, r7
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800079a:	2318      	movs	r3, #24
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800079c:	fbb0 f5f8 	udiv	r5, r0, r8
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80007a0:	fbb5 f3f3 	udiv	r3, r5, r3
 80007a4:	0d9b      	lsrs	r3, r3, #22
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80007a6:	3b01      	subs	r3, #1

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80007a8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80007ac:	60a3      	str	r3, [r4, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80007ae:	6863      	ldr	r3, [r4, #4]
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	6063      	str	r3, [r4, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80007b6:	6863      	ldr	r3, [r4, #4]
 80007b8:	f023 0310 	bic.w	r3, r3, #16
 80007bc:	6063      	str	r3, [r4, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80007be:	6863      	ldr	r3, [r4, #4]
 80007c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c4:	6063      	str	r3, [r4, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <XMC_SCU_CLOCK_StartSystemPll+0xdc>)
 80007ca:	0759      	lsls	r1, r3, #29
 80007cc:	d5fb      	bpl.n	80007c6 <XMC_SCU_CLOCK_StartSystemPll+0x7e>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80007ce:	6853      	ldr	r3, [r2, #4]
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	07da      	lsls	r2, r3, #31
 80007da:	d4fc      	bmi.n	80007d6 <XMC_SCU_CLOCK_StartSystemPll+0x8e>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80007dc:	203c      	movs	r0, #60	; 0x3c
 80007de:	fbb5 f0f0 	udiv	r0, r5, r0
 80007e2:	0d80      	lsrs	r0, r0, #22
    if (kdiv < kdiv_temp)
 80007e4:	4286      	cmp	r6, r0
 80007e6:	d201      	bcs.n	80007ec <XMC_SCU_CLOCK_StartSystemPll+0xa4>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80007e8:	f7ff ffa0 	bl	800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80007ec:	205a      	movs	r0, #90	; 0x5a
 80007ee:	fbb5 f0f0 	udiv	r0, r5, r0
 80007f2:	0d80      	lsrs	r0, r0, #22
    if (kdiv < kdiv_temp)
 80007f4:	4286      	cmp	r6, r0
 80007f6:	d201      	bcs.n	80007fc <XMC_SCU_CLOCK_StartSystemPll+0xb4>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80007f8:	f7ff ff98 	bl	800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80007fc:	4630      	mov	r0, r6
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 80007fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (kdiv < kdiv_temp)
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000802:	f7ff bf93 	b.w	800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000806:	68a3      	ldr	r3, [r4, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000808:	3e01      	subs	r6, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800080a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800080e:	431e      	orrs	r6, r3
 8000810:	60a6      	str	r6, [r4, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000812:	6863      	ldr	r3, [r4, #4]
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6063      	str	r3, [r4, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	07db      	lsls	r3, r3, #31
 800081e:	d5fc      	bpl.n	800081a <XMC_SCU_CLOCK_StartSystemPll+0xd2>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000824:	50004710 	.word	0x50004710
 8000828:	000f4240 	.word	0x000f4240
 800082c:	f08080ff 	.word	0xf08080ff

08000830 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000832:	4604      	mov	r4, r0
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fe19 	bl	800046c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800083a:	f7ff feed 	bl	8000618 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800083e:	79e3      	ldrb	r3, [r4, #7]
 8000840:	b91b      	cbnz	r3, 800084a <XMC_SCU_CLOCK_Init+0x1a>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000842:	7a60      	ldrb	r0, [r4, #9]
 8000844:	f7ff fe50 	bl	80004e8 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000848:	e006      	b.n	8000858 <XMC_SCU_CLOCK_Init+0x28>

  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800084a:	f7ff ff09 	bl	8000660 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800084e:	f7ff fefd 	bl	800064c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000852:	2800      	cmp	r0, #0
 8000854:	d0fb      	beq.n	800084e <XMC_SCU_CLOCK_Init+0x1e>
 8000856:	e7f4      	b.n	8000842 <XMC_SCU_CLOCK_Init+0x12>
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <XMC_SCU_CLOCK_Init+0x98>)
 800085a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
  while (XMC_SCU_GetMirrorStatus() != 0)
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1fa      	bne.n	8000858 <XMC_SCU_CLOCK_Init+0x28>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000862:	7a20      	ldrb	r0, [r4, #8]
 8000864:	f7ff febe 	bl	80005e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000868:	7c20      	ldrb	r0, [r4, #16]
 800086a:	f7ff fe4d 	bl	8000508 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800086e:	7c60      	ldrb	r0, [r4, #17]
 8000870:	f7ff fe5e 	bl	8000530 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000874:	7ca0      	ldrb	r0, [r4, #18]
 8000876:	f7ff fe51 	bl	800051c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800087a:	7ce0      	ldrb	r0, [r4, #19]
 800087c:	f7ff fe62 	bl	8000544 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000880:	79a3      	ldrb	r3, [r4, #6]
 8000882:	b923      	cbnz	r3, 800088e <XMC_SCU_CLOCK_Init+0x5e>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000884:	78e3      	ldrb	r3, [r4, #3]
 8000886:	b94b      	cbnz	r3, 800089c <XMC_SCU_CLOCK_Init+0x6c>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000888:	f7ff ff46 	bl	8000718 <XMC_SCU_CLOCK_DisableSystemPll>
 800088c:	e010      	b.n	80008b0 <XMC_SCU_CLOCK_Init+0x80>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800088e:	f7ff ff0d 	bl	80006ac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000892:	f7ff ff2b 	bl	80006ec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000896:	2800      	cmp	r0, #0
 8000898:	d0fb      	beq.n	8000892 <XMC_SCU_CLOCK_Init+0x62>
 800089a:	e7f3      	b.n	8000884 <XMC_SCU_CLOCK_Init+0x54>
    XMC_SCU_CLOCK_DisableSystemPll();
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800089c:	f7ff ff32 	bl	8000704 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80008a0:	78a5      	ldrb	r5, [r4, #2]
 80008a2:	88a0      	ldrh	r0, [r4, #4]
 80008a4:	78e1      	ldrb	r1, [r4, #3]
 80008a6:	7862      	ldrb	r2, [r4, #1]
 80008a8:	7823      	ldrb	r3, [r4, #0]
 80008aa:	9500      	str	r5, [sp, #0]
 80008ac:	f7ff ff4c 	bl	8000748 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80008b0:	68e0      	ldr	r0, [r4, #12]
 80008b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80008b6:	d101      	bne.n	80008bc <XMC_SCU_CLOCK_Init+0x8c>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80008b8:	f7ff fdd8 	bl	800046c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
}
 80008bc:	b003      	add	sp, #12
 80008be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
 80008c2:	f7ff bcf7 	b.w	80002b4 <SystemCoreClockUpdate>
 80008c6:	bf00      	nop
 80008c8:	50004000 	.word	0x50004000

080008cc <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80008cc:	b510      	push	{r4, lr}
 80008ce:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80008d0:	2010      	movs	r0, #16
 80008d2:	f7ff fe5f 	bl	8000594 <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <XMC_CCU4_EnableModule+0x3c>)
 80008d8:	429c      	cmp	r4, r3
 80008da:	d101      	bne.n	80008e0 <XMC_CCU4_EnableModule+0x14>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80008dc:	2004      	movs	r0, #4
 80008de:	e00d      	b.n	80008fc <XMC_CCU4_EnableModule+0x30>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <XMC_CCU4_EnableModule+0x40>)
 80008e2:	429c      	cmp	r4, r3
 80008e4:	d101      	bne.n	80008ea <XMC_CCU4_EnableModule+0x1e>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80008e6:	2008      	movs	r0, #8
 80008e8:	e008      	b.n	80008fc <XMC_CCU4_EnableModule+0x30>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <XMC_CCU4_EnableModule+0x44>)
 80008ec:	429c      	cmp	r4, r3
 80008ee:	d101      	bne.n	80008f4 <XMC_CCU4_EnableModule+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80008f0:	2010      	movs	r0, #16
 80008f2:	e003      	b.n	80008fc <XMC_CCU4_EnableModule+0x30>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <XMC_CCU4_EnableModule+0x48>)
 80008f6:	429c      	cmp	r4, r3
 80008f8:	d104      	bne.n	8000904 <XMC_CCU4_EnableModule+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80008fa:	4807      	ldr	r0, [pc, #28]	; (8000918 <XMC_CCU4_EnableModule+0x4c>)
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
 80008fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000900:	f7ff bd8e 	b.w	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	4000c000 	.word	0x4000c000
 800090c:	40010000 	.word	0x40010000
 8000910:	40014000 	.word	0x40014000
 8000914:	48004000 	.word	0x48004000
 8000918:	10000001 	.word	0x10000001

0800091c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 800091c:	b538      	push	{r3, r4, r5, lr}
 800091e:	4604      	mov	r4, r0
 8000920:	460d      	mov	r5, r1
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000922:	f7ff ffd3 	bl	80008cc <XMC_CCU4_EnableModule>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092a:	60e3      	str	r3, [r4, #12]
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 800092c:	6823      	ldr	r3, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800092e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000932:	ea43 3185 	orr.w	r1, r3, r5, lsl #14
  
  module->GCTRL = gctrl;
 8000936:	6021      	str	r1, [r4, #0]
 8000938:	bd38      	pop	{r3, r4, r5, pc}

0800093a <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800093a:	680b      	ldr	r3, [r1, #0]
 800093c:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800093e:	794b      	ldrb	r3, [r1, #5]
 8000940:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000944:	051b      	lsls	r3, r3, #20
 8000946:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000948:	790b      	ldrb	r3, [r1, #4]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000950:	794b      	ldrb	r3, [r1, #5]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000958:	794b      	ldrb	r3, [r1, #5]
 800095a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800095e:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000960:	790b      	ldrb	r3, [r1, #4]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000966:	4770      	bx	lr

08000968 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000968:	2909      	cmp	r1, #9
 800096a:	b530      	push	{r4, r5, lr}
 800096c:	bf9c      	itt	ls
 800096e:	4c09      	ldrls	r4, [pc, #36]	; (8000994 <XMC_CCU4_SLICE_SetInterruptNode+0x2c>)
 8000970:	4d09      	ldrls	r5, [pc, #36]	; (8000998 <XMC_CCU4_SLICE_SetInterruptNode+0x30>)

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000972:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 8000976:	bf99      	ittee	ls
 8000978:	5c64      	ldrbls	r4, [r4, r1]
 800097a:	f835 1011 	ldrhls.w	r1, [r5, r1, lsl #1]
 800097e:	f44f 5140 	movhi.w	r1, #12288	; 0x3000
 8000982:	240c      	movhi	r4, #12
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
 8000984:	ea23 0301 	bic.w	r3, r3, r1
  srs |= (uint32_t)sr << pos;
 8000988:	40a2      	lsls	r2, r4
 800098a:	431a      	orrs	r2, r3
  slice->SRS = srs;
 800098c:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 8000990:	bd30      	pop	{r4, r5, pc}
 8000992:	bf00      	nop
 8000994:	08006680 	.word	0x08006680
 8000998:	0800668a 	.word	0x0800668a

0800099c <XMC_GPIO_SetHardwareControl>:
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800099c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800099e:	0049      	lsls	r1, r1, #1
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80009a0:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80009a2:	2403      	movs	r4, #3
 80009a4:	408c      	lsls	r4, r1
 80009a6:	ea23 0304 	bic.w	r3, r3, r4
 80009aa:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80009ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80009ae:	408a      	lsls	r2, r1
 80009b0:	4313      	orrs	r3, r2
 80009b2:	6743      	str	r3, [r0, #116]	; 0x74
 80009b4:	bd10      	pop	{r4, pc}

080009b6 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 80009b6:	b570      	push	{r4, r5, r6, lr}
 80009b8:	460e      	mov	r6, r1
 80009ba:	4604      	mov	r4, r0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 80009bc:	f000 f930 	bl	8000c20 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 80009c0:	7a35      	ldrb	r5, [r6, #8]
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
 80009c2:	7933      	ldrb	r3, [r6, #4]
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80009c4:	6831      	ldr	r1, [r6, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
  
  if(config->oversampling != 0U)
 80009c6:	2d00      	cmp	r5, #0
  {
    oversampling = (uint32_t)config->oversampling;
 80009c8:	bf08      	it	eq
 80009ca:	2510      	moveq	r5, #16
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80009cc:	4620      	mov	r0, r4
 80009ce:	462a      	mov	r2, r5
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
 80009d0:	b113      	cbz	r3, 80009d8 <XMC_UART_CH_Init+0x22>
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80009d2:	f000 f897 	bl	8000b04 <XMC_USIC_CH_SetBaudrateEx>
 80009d6:	e001      	b.n	80009dc <XMC_UART_CH_Init+0x26>
  }
  else
  {
    /* Fractional divider mode */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80009d8:	f000 f856 	bl	8000a88 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80009dc:	79f3      	ldrb	r3, [r6, #7]
 80009de:	3b01      	subs	r3, #1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80009e6:	086d      	lsrs	r5, r5, #1
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	3501      	adds	r5, #1
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80009ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80009f2:	63e3      	str	r3, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80009f4:	7973      	ldrb	r3, [r6, #5]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	061b      	lsls	r3, r3, #24
 80009fa:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80009fe:	6363      	str	r3, [r4, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000a00:	79b3      	ldrb	r3, [r6, #6]
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000a02:	6b62      	ldr	r2, [r4, #52]	; 0x34
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000a04:	b903      	cbnz	r3, 8000a08 <XMC_UART_CH_Init+0x52>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000a06:	7973      	ldrb	r3, [r6, #5]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000a0e:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8000a10:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a14:	63a3      	str	r3, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000a1c:	8973      	ldrh	r3, [r6, #10]
 8000a1e:	6423      	str	r3, [r4, #64]	; 0x40
 8000a20:	bd70      	pop	{r4, r5, r6, pc}

08000a22 <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8000a22:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000a26:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000a2a:	d108      	bne.n	8000a3e <XMC_UART_CH_Transmit+0x1c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000a2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000a2e:	061b      	lsls	r3, r3, #24
 8000a30:	d4fc      	bmi.n	8000a2c <XMC_UART_CH_Transmit+0xa>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8000a38:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000a3c:	4770      	bx	lr
  }
  else
  {
    channel->IN[0U] = data;
 8000a3e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000a42:	4770      	bx	lr

08000a44 <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000a44:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000a48:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint16_t)channel->RBUF;
 8000a4c:	bf0c      	ite	eq
 8000a4e:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000a50:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000a54:	b280      	uxth	r0, r0
  }

  return retval;
}
 8000a56:	4770      	bx	lr

08000a58 <XMC_UART_CH_EnableEvent>:
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= (event&0x1fc00U);
 8000a58:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a5a:	f401 32fe 	and.w	r2, r1, #130048	; 0x1fc00
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_ASCMode |= (event&0xf8U);
 8000a62:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000a64:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8000a68:	4319      	orrs	r1, r3
 8000a6a:	63c1      	str	r1, [r0, #60]	; 0x3c
 8000a6c:	4770      	bx	lr
	...

08000a70 <XMC_USIC_Enable.part.0>:
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
 8000a70:	b508      	push	{r3, lr}
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
#endif 
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <XMC_USIC_Enable.part.0+0x14>)
 8000a74:	f7ff fcd4 	bl	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <XMC_USIC_Enable.part.0+0x14>)
 8000a7a:	f7ff fcdb 	bl	8000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d1fa      	bne.n	8000a78 <XMC_USIC_Enable.part.0+0x8>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8000a82:	bd08      	pop	{r3, pc}
 8000a84:	10000080 	.word	0x10000080

08000a88 <XMC_USIC_CH_SetBaudrate>:
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000a88:	2963      	cmp	r1, #99	; 0x63
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a8e:	4605      	mov	r5, r0
 8000a90:	460c      	mov	r4, r1
 8000a92:	4616      	mov	r6, r2
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000a94:	d930      	bls.n	8000af8 <XMC_USIC_CH_SetBaudrate+0x70>
 8000a96:	b37a      	cbz	r2, 8000af8 <XMC_USIC_CH_SetBaudrate+0x70>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000a98:	f7ff fcdc 	bl	8000454 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8000a9c:	2164      	movs	r1, #100	; 0x64
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
 8000a9e:	f240 3cff 	movw	ip, #1023	; 0x3ff
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000aa2:	fbb0 fef1 	udiv	lr, r0, r1
    rate = rate / 100U;
 8000aa6:	fbb4 f4f1 	udiv	r4, r4, r1

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
 8000aaa:	2101      	movs	r1, #1
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8000aac:	4374      	muls	r4, r6
 8000aae:	ebce 278e 	rsb	r7, lr, lr, lsl #10
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
 8000ab2:	460a      	mov	r2, r1
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000ab4:	4660      	mov	r0, ip
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8000ab6:	fbb7 f3f4 	udiv	r3, r7, r4
      pdiv_int = pdiv >> 10U;
 8000aba:	ea4f 2893 	mov.w	r8, r3, lsr #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000abe:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8000ac2:	d206      	bcs.n	8000ad2 <XMC_USIC_CH_SetBaudrate+0x4a>

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
 8000ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000ac8:	4563      	cmp	r3, ip
 8000aca:	bf3e      	ittt	cc
 8000acc:	469c      	movcc	ip, r3
 8000ace:	4641      	movcc	r1, r8
 8000ad0:	4602      	movcc	r2, r0

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	ebce 0707 	rsb	r7, lr, r7
 8000ad8:	d1ed      	bne.n	8000ab6 <XMC_USIC_CH_SetBaudrate+0x2e>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8000ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ade:	612a      	str	r2, [r5, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000ae0:	696a      	ldr	r2, [r5, #20]
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <XMC_USIC_CH_SetBaudrate+0x78>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000ae4:	3e01      	subs	r6, #1
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000ae6:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8000ae8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8000aec:	3901      	subs	r1, #1

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000af2:	616b      	str	r3, [r5, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8000af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8000af8:	2001      	movs	r0, #1
  }
  
  return status;
}
 8000afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000afe:	bf00      	nop
 8000b00:	fc0080ef 	.word	0xfc0080ef

08000b04 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b08:	460f      	mov	r7, r1
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	4605      	mov	r5, r0
  uint32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8000b0e:	f7ff fca1 	bl	8000454 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
  uint32_t brg_clock = rate * oversampling;
 8000b12:	fb08 f207 	mul.w	r2, r8, r7
  uint32_t actual_rate_upper;
  uint32_t actual_rate_lower;
  XMC_USIC_CH_STATUS_t status;
  uint32_t pdiv = 1;

  if (peripheral_clock > brg_clock)
 8000b16:	4290      	cmp	r0, r2
 8000b18:	d937      	bls.n	8000b8a <XMC_USIC_CH_SetBaudrateEx+0x86>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8000b1a:	fbb0 f3f2 	udiv	r3, r0, r2
 8000b1e:	0051      	lsls	r1, r2, #1
  uint32_t brg_clock = rate * oversampling;
  uint32_t divider_step;
  uint32_t actual_rate_upper;
  uint32_t actual_rate_lower;
  XMC_USIC_CH_STATUS_t status;
  uint32_t pdiv = 1;
 8000b20:	2601      	movs	r6, #1

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8000b22:	f240 34fe 	movw	r4, #1022	; 0x3fe
 8000b26:	42a3      	cmp	r3, r4
 8000b28:	d904      	bls.n	8000b34 <XMC_USIC_CH_SetBaudrateEx+0x30>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8000b2a:	fbb0 f3f1 	udiv	r3, r0, r1
  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
    {
      pdiv++;
 8000b2e:	3601      	adds	r6, #1
 8000b30:	4411      	add	r1, r2
 8000b32:	e7f6      	b.n	8000b22 <XMC_USIC_CH_SetBaudrateEx+0x1e>
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	fb08 f406 	mul.w	r4, r8, r6
 8000b3a:	fb03 f106 	mul.w	r1, r3, r6
 8000b3e:	4354      	muls	r4, r2
 8000b40:	fbb0 f4f4 	udiv	r4, r0, r4

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8000b44:	1b3c      	subs	r4, r7, r4
 8000b46:	2c00      	cmp	r4, #0
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8000b48:	fb08 f101 	mul.w	r1, r8, r1
 8000b4c:	fbb0 f0f1 	udiv	r0, r0, r1
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8000b50:	eba7 0700 	sub.w	r7, r7, r0
 8000b54:	bfb8      	it	lt
 8000b56:	4264      	neglt	r4, r4
 8000b58:	2f00      	cmp	r7, #0
 8000b5a:	bfb8      	it	lt
 8000b5c:	427f      	neglt	r7, r7
    {
      divider_step += 1;
 8000b5e:	42bc      	cmp	r4, r7
 8000b60:	bfb8      	it	lt
 8000b62:	4613      	movlt	r3, r2
    }

    divider_step = 1024 - divider_step;
 8000b64:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	612b      	str	r3, [r5, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b6e:	696a      	ldr	r2, [r5, #20]
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <XMC_USIC_CH_SetBaudrateEx+0x8c>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000b72:	f108 38ff 	add.w	r8, r8, #4294967295


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b76:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8000b78:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
 8000b7c:	3e01      	subs	r6, #1

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000b7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b82:	616b      	str	r3, [r5, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8000b84:	2000      	movs	r0, #0
 8000b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8000b8a:	2001      	movs	r0, #1
  }

  return status;
}
 8000b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b90:	fc0080ef 	.word	0xfc0080ef

08000b94 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8000b94:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000b98:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8000ba0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8000ba4:	0609      	lsls	r1, r1, #24
 8000ba6:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8000baa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8000bb4:	4770      	bx	lr

08000bb6 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8000bb6:	b510      	push	{r4, lr}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000bb8:	2307      	movs	r3, #7
 8000bba:	6984      	ldr	r4, [r0, #24]
 8000bbc:	408b      	lsls	r3, r1
 8000bbe:	ea24 0303 	bic.w	r3, r4, r3
                  (service_request << (uint32_t)interrupt_node));
 8000bc2:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	6182      	str	r2, [r0, #24]
 8000bc8:	bd10      	pop	{r4, pc}
	...

08000bcc <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8000bcc:	b508      	push	{r3, lr}
  if (usic == USIC0)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <XMC_USIC_Enable+0x44>)
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	d10a      	bne.n	8000bea <XMC_USIC_Enable+0x1e>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8000bd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000bd8:	f7ff fc22 	bl	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8000bdc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000be0:	f7ff fc28 	bl	8000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000be4:	2800      	cmp	r0, #0
 8000be6:	d1f9      	bne.n	8000bdc <XMC_USIC_Enable+0x10>
 8000be8:	bd08      	pop	{r3, pc}
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <XMC_USIC_Enable+0x48>)
 8000bec:	4298      	cmp	r0, r3
 8000bee:	d103      	bne.n	8000bf8 <XMC_USIC_Enable+0x2c>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8000bf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000bf4:	f7ff bf3c 	b.w	8000a70 <XMC_USIC_Enable.part.0>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
#endif 
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <XMC_USIC_Enable+0x4c>)
 8000bfa:	4298      	cmp	r0, r3
 8000bfc:	d107      	bne.n	8000c0e <XMC_USIC_Enable+0x42>
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8000bfe:	4807      	ldr	r0, [pc, #28]	; (8000c1c <XMC_USIC_Enable+0x50>)
 8000c00:	f7ff fc0e 	bl	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <XMC_USIC_Enable+0x50>)
 8000c06:	f7ff fc15 	bl	8000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d1fa      	bne.n	8000c04 <XMC_USIC_Enable+0x38>
 8000c0e:	bd08      	pop	{r3, pc}
 8000c10:	40030008 	.word	0x40030008
 8000c14:	48020008 	.word	0x48020008
 8000c18:	48024008 	.word	0x48024008
 8000c1c:	10000100 	.word	0x10000100

08000c20 <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <XMC_USIC_CH_Enable+0x54>)
 8000c22:	4298      	cmp	r0, r3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8000c24:	b510      	push	{r4, lr}
 8000c26:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000c28:	d003      	beq.n	8000c32 <XMC_USIC_CH_Enable+0x12>
 8000c2a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c2e:	4298      	cmp	r0, r3
 8000c30:	d101      	bne.n	8000c36 <XMC_USIC_CH_Enable+0x16>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8000c32:	4811      	ldr	r0, [pc, #68]	; (8000c78 <XMC_USIC_CH_Enable+0x58>)
 8000c34:	e011      	b.n	8000c5a <XMC_USIC_CH_Enable+0x3a>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <XMC_USIC_CH_Enable+0x5c>)
 8000c38:	4298      	cmp	r0, r3
 8000c3a:	d003      	beq.n	8000c44 <XMC_USIC_CH_Enable+0x24>
 8000c3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c40:	4298      	cmp	r0, r3
 8000c42:	d102      	bne.n	8000c4a <XMC_USIC_CH_Enable+0x2a>
 8000c44:	f7ff ff14 	bl	8000a70 <XMC_USIC_Enable.part.0>
 8000c48:	e009      	b.n	8000c5e <XMC_USIC_CH_Enable+0x3e>
  {
    XMC_USIC_Enable(XMC_USIC1);
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <XMC_USIC_CH_Enable+0x60>)
 8000c4c:	4298      	cmp	r0, r3
 8000c4e:	d003      	beq.n	8000c58 <XMC_USIC_CH_Enable+0x38>
 8000c50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c54:	4298      	cmp	r0, r3
 8000c56:	d102      	bne.n	8000c5e <XMC_USIC_CH_Enable+0x3e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <XMC_USIC_CH_Enable+0x64>)
 8000c5a:	f7ff ffb7 	bl	8000bcc <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8000c5e:	2303      	movs	r3, #3
 8000c60:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8000c62:	68e3      	ldr	r3, [r4, #12]
 8000c64:	07db      	lsls	r3, r3, #31
 8000c66:	d5fc      	bpl.n	8000c62 <XMC_USIC_CH_Enable+0x42>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8000c68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c6a:	f023 030f 	bic.w	r3, r3, #15
 8000c6e:	6423      	str	r3, [r4, #64]	; 0x40
 8000c70:	bd10      	pop	{r4, pc}
 8000c72:	bf00      	nop
 8000c74:	40030000 	.word	0x40030000
 8000c78:	40030008 	.word	0x40030008
 8000c7c:	48020000 	.word	0x48020000
 8000c80:	48024000 	.word	0x48024000
 8000c84:	48024008 	.word	0x48024008

08000c88 <XMC_VADC_GLOBAL_EnableModule>:
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f7ff bbc9 	b.w	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>

08000c8e <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8000c8e:	b538      	push	{r3, r4, r5, lr}
 8000c90:	460d      	mov	r5, r1
 8000c92:	4604      	mov	r4, r0
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8000c94:	f7ff fff8 	bl	8000c88 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8000c98:	696b      	ldr	r3, [r5, #20]
 8000c9a:	6023      	str	r3, [r4, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8000c9c:	686b      	ldr	r3, [r5, #4]
 8000c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8000ca6:	68ab      	ldr	r3, [r5, #8]
 8000ca8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8000cac:	68eb      	ldr	r3, [r5, #12]
 8000cae:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8000cb2:	692b      	ldr	r3, [r5, #16]
 8000cb4:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8000cbe:	bd38      	pop	{r3, r4, r5, pc}

08000cc0 <XMC_VADC_GLOBAL_InputClassInit>:
}

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8000cc0:	3328      	adds	r3, #40	; 0x28
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8000cc2:	b912      	cbnz	r2, 8000cca <XMC_VADC_GLOBAL_InputClassInit+0xa>
  {
#endif
	XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8000cc4:	f240 721f 	movw	r2, #1823	; 0x71f
 8000cc8:	e000      	b.n	8000ccc <XMC_VADC_GLOBAL_InputClassInit+0xc>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8000cca:	4a02      	ldr	r2, [pc, #8]	; (8000cd4 <XMC_VADC_GLOBAL_InputClassInit+0x14>)
 8000ccc:	400a      	ands	r2, r1
 8000cce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8000cd2:	4770      	bx	lr
 8000cd4:	071f0000 	.word	0x071f0000

08000cd8 <XMC_VADC_GLOBAL_StartupCalibration>:
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8000cd8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8000cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8000ce4:	2300      	movs	r3, #0

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <XMC_VADC_GLOBAL_StartupCalibration+0x34>)
 8000ce8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8000cec:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 8000cf0:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8000cf4:	d005      	beq.n	8000d02 <XMC_VADC_GLOBAL_StartupCalibration+0x2a>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8000cf6:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 8000cfa:	00c9      	lsls	r1, r1, #3
 8000cfc:	d501      	bpl.n	8000d02 <XMC_VADC_GLOBAL_StartupCalibration+0x2a>
      {
        __NOP();
 8000cfe:	bf00      	nop
 8000d00:	e7f9      	b.n	8000cf6 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
 8000d02:	3301      	adds	r3, #1

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d1ee      	bne.n	8000ce6 <XMC_VADC_GLOBAL_StartupCalibration+0xe>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	080066a0 	.word	0x080066a0

08000d10 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  else
  {
    node = (uint32_t)sr;
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8000d10:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8000d14:	f023 030f 	bic.w	r3, r3, #15
 8000d18:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
{
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8000d1c:	2903      	cmp	r1, #3
  {
    node = (uint32_t)sr;
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8000d1e:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8000d22:	bf88      	it	hi
 8000d24:	3904      	subhi	r1, #4
  {
    node = (uint32_t)sr;
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8000d26:	4319      	orrs	r1, r3
 8000d28:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
 8000d2c:	4770      	bx	lr

08000d2e <XMC_VADC_GROUP_InputClassInit>:
}

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8000d2e:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8000d30:	b942      	cbnz	r2, 8000d44 <XMC_VADC_GROUP_InputClassInit+0x16>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8000d32:	f001 051f 	and.w	r5, r1, #31
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8000d36:	261f      	movs	r6, #31
    sample_time      = (uint32_t) config.sample_time_std_conv;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8000d38:	f3c1 2102 	ubfx	r1, r1, #8, #3
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8000d3c:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8000d40:	2708      	movs	r7, #8
 8000d42:	e009      	b.n	8000d58 <XMC_VADC_GROUP_InputClassInit+0x2a>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8000d44:	f3c1 4504 	ubfx	r5, r1, #16, #5
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8000d48:	f44f 16f8 	mov.w	r6, #2031616	; 0x1f0000
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8000d4c:	f3c1 6102 	ubfx	r1, r1, #24, #3
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8000d50:	f04f 6ee0 	mov.w	lr, #117440512	; 0x7000000
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8000d54:	2210      	movs	r2, #16
    sample_time      = (uint32_t) config.sample_time_std_conv;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8000d56:	2718      	movs	r7, #24
 8000d58:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8000d5c:	40b9      	lsls	r1, r7
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8000d5e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8000d62:	ea24 040e 	bic.w	r4, r4, lr
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8000d66:	4321      	orrs	r1, r4
  conv_class &= ~(sample_time_mask);
 8000d68:	ea21 0106 	bic.w	r1, r1, r6
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8000d6c:	4095      	lsls	r5, r2
 8000d6e:	4329      	orrs	r1, r5
  group_ptr->ICLASS[set_num] = conv_class;
 8000d70:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 8000d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d76 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8000d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8000d78:	2200      	movs	r2, #0
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	4605      	mov	r5, r0
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8000d7e:	4613      	mov	r3, r2
 8000d80:	6849      	ldr	r1, [r1, #4]
 8000d82:	f7ff ffd4 	bl	8000d2e <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8000d86:	4628      	mov	r0, r5
 8000d88:	6861      	ldr	r1, [r4, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f7ff ffce 	bl	8000d2e <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8000d92:	4628      	mov	r0, r5
 8000d94:	68a1      	ldr	r1, [r4, #8]
 8000d96:	2200      	movs	r2, #0
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f7ff ffc8 	bl	8000d2e <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4613      	mov	r3, r2
 8000da2:	4628      	mov	r0, r5
 8000da4:	68a1      	ldr	r1, [r4, #8]
 8000da6:	f7ff ffc2 	bl	8000d2e <XMC_VADC_GROUP_InputClassInit>
 8000daa:	78a0      	ldrb	r0, [r4, #2]

  group_ptr->ARBCFG = config->g_arbcfg;
 8000dac:	6923      	ldr	r3, [r4, #16]
 8000dae:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8000db2:	f000 061f 	and.w	r6, r0, #31
 8000db6:	7820      	ldrb	r0, [r4, #0]

  group_ptr->BOUND = config->g_bound;
 8000db8:	68e3      	ldr	r3, [r4, #12]
 8000dba:	78e1      	ldrb	r1, [r4, #3]
 8000dbc:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8000dc0:	f000 0007 	and.w	r0, r0, #7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8000dc8:	f8c5 01f0 	str.w	r0, [r5, #496]	; 0x1f0
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8000dcc:	f8d5 21f0 	ldr.w	r2, [r5, #496]	; 0x1f0
 8000dd0:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8000dd4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000dd8:	f3c1 0381 	ubfx	r3, r1, #2, #2
 8000ddc:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 8000de0:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8000de4:	ea42 6383 	orr.w	r3, r2, r3, lsl #26
 8000de8:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
 8000dec:	f8c5 31f0 	str.w	r3, [r5, #496]	; 0x1f0
 8000df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000df2 <XMC_VADC_GROUP_SetPowerMode>:
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8000df2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8000df6:	f023 0303 	bic.w	r3, r3, #3
  arbcfg |= (uint32_t)power_mode;
 8000dfa:	4319      	orrs	r1, r3

  group_ptr->ARBCFG = arbcfg;
 8000dfc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000e00:	4770      	bx	lr
	...

08000e04 <XMC_VADC_GLOBAL_BackgroundInit>:
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8000e04:	4a30      	ldr	r2, [pc, #192]	; (8000ec8 <XMC_VADC_GLOBAL_BackgroundInit+0xc4>)
 8000e06:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8000e0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8000e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8000e14:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
 8000e18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e1c:	f8c2 3484 	str.w	r3, [r2, #1156]	; 0x484
 8000e20:	f8d2 3884 	ldr.w	r3, [r2, #2180]	; 0x884
 8000e24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e28:	f8c2 3884 	str.w	r3, [r2, #2180]	; 0x884
 8000e2c:	f8d2 3c84 	ldr.w	r3, [r2, #3204]	; 0xc84
 8000e30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e34:	f8c2 3c84 	str.w	r3, [r2, #3204]	; 0xc84
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8000e38:	780b      	ldrb	r3, [r1, #0]
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8000e3a:	f013 0503 	ands.w	r5, r3, #3
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8000e3e:	f3c3 0381 	ubfx	r3, r3, #2, #2
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8000e42:	bf0c      	ite	eq
 8000e44:	2700      	moveq	r7, #0
 8000e46:	f44f 6700 	movne.w	r7, #2048	; 0x800
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8000e4a:	021a      	lsls	r2, r3, #8
 8000e4c:	2400      	movs	r4, #0
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <XMC_VADC_GLOBAL_BackgroundInit+0xc8>)
 8000e50:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 8000e54:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8000e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	3401      	adds	r4, #1
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8000e60:	433b      	orrs	r3, r7
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000e62:	2c04      	cmp	r4, #4
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
  
    /* Program the start mode */
    reg |= conv_start_mask;

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8000e64:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000e68:	d1f1      	bne.n	8000e4e <XMC_VADC_GLOBAL_BackgroundInit+0x4a>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8000e6a:	684b      	ldr	r3, [r1, #4]
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8000e6c:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <XMC_VADC_GLOBAL_BackgroundInit+0xc4>)
 8000e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e76:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8000e7a:	688b      	ldr	r3, [r1, #8]
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8000e84:	2d02      	cmp	r5, #2
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8000e86:	bf02      	ittt	eq
 8000e88:	f8d0 3204 	ldreq.w	r3, [r0, #516]	; 0x204
 8000e8c:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 8000e90:	f8c0 3204 	streq.w	r3, [r0, #516]	; 0x204
 8000e94:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8000e98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8000ea0:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
 8000ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ea8:	f8c2 3484 	str.w	r3, [r2, #1156]	; 0x484
 8000eac:	f8d2 3884 	ldr.w	r3, [r2, #2180]	; 0x884
 8000eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eb4:	f8c2 3884 	str.w	r3, [r2, #2180]	; 0x884
 8000eb8:	f8d2 3c84 	ldr.w	r3, [r2, #3204]	; 0xc84
 8000ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ec0:	f8c2 3c84 	str.w	r3, [r2, #3204]	; 0xc84
 8000ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	080066a0 	.word	0x080066a0

08000ed0 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8000ed0:	b530      	push	{r4, r5, lr}
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8000ed2:	2301      	movs	r3, #1
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8000ed4:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	ea25 0403 	bic.w	r4, r5, r3


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8000ede:	7a13      	ldrb	r3, [r2, #8]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
  ch_assign |= (uint32_t)(prio << ch_num);
 8000ee0:	408b      	lsls	r3, r1
 8000ee2:	4323      	orrs	r3, r4
  group_ptr->CHASS = ch_assign;
 8000ee4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8000ee8:	f992 3009 	ldrsb.w	r3, [r2, #9]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db19      	blt.n	8000f24 <XMC_VADC_GROUP_ChannelInit+0x54>
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
 8000ef0:	2901      	cmp	r1, #1
 8000ef2:	d107      	bne.n	8000f04 <XMC_VADC_GROUP_ChannelInit+0x34>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8000ef4:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8000ef8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000efc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  if (config->alias_channel >= (int32_t)0)
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8000f00:	2508      	movs	r5, #8
 8000f02:	e007      	b.n	8000f14 <XMC_VADC_GROUP_ChannelInit+0x44>
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
    }
    else if ((uint32_t)0 == ch_num)
 8000f04:	b929      	cbnz	r1, 8000f12 <XMC_VADC_GROUP_ChannelInit+0x42>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8000f06:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8000f0a:	f023 031f 	bic.w	r3, r3, #31
 8000f0e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  group_ptr->CHASS = ch_assign;

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
  {
    mask = (uint32_t)0;
 8000f12:	2500      	movs	r5, #0
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8000f14:	f992 3009 	ldrsb.w	r3, [r2, #9]
 8000f18:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000f1c:	40ab      	lsls	r3, r5
 8000f1e:	4323      	orrs	r3, r4
 8000f20:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8000f24:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8000f28:	6853      	ldr	r3, [r2, #4]
 8000f2a:	4323      	orrs	r3, r4
 8000f2c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8000f30:	3180      	adds	r1, #128	; 0x80
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8000f38:	bd30      	pop	{r4, r5, pc}
	...

08000f3c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000f3c:	b508      	push	{r3, lr}
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <_sbrk+0x34>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	b90a      	cbnz	r2, 8000f48 <_sbrk+0xc>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <_sbrk+0x38>)
 8000f46:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8000f48:	681a      	ldr	r2, [r3, #0]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000f4a:	490b      	ldr	r1, [pc, #44]	; (8000f78 <_sbrk+0x3c>)
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000f4c:	1cc3      	adds	r3, r0, #3
 8000f4e:	f023 0303 	bic.w	r3, r3, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000f52:	4413      	add	r3, r2
 8000f54:	428b      	cmp	r3, r1
 8000f56:	d203      	bcs.n	8000f60 <_sbrk+0x24>
  {
    heap_ptr += nbytes;
 8000f58:	4905      	ldr	r1, [pc, #20]	; (8000f70 <_sbrk+0x34>)
    return (base);
 8000f5a:	4610      	mov	r0, r2

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
  {
    heap_ptr += nbytes;
 8000f5c:	600b      	str	r3, [r1, #0]
    return (base);
 8000f5e:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000f60:	f001 f884 	bl	800206c <__errno>
 8000f64:	230c      	movs	r3, #12
 8000f66:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8000f6c:	bd08      	pop	{r3, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000c28 	.word	0x20000c28
 8000f74:	20000cb8 	.word	0x20000cb8
 8000f78:	2000ffc0 	.word	0x2000ffc0

08000f7c <_init>:

/* Init */
void _init(void)
{}
 8000f7c:	4770      	bx	lr

08000f7e <UART_lReconfigureRxFIFO>:
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8000f7e:	6843      	ldr	r3, [r0, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8000f80:	6800      	ldr	r0, [r0, #0]
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8000f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f86:	2201      	movs	r2, #1
 8000f88:	409a      	lsls	r2, r3
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8000f8a:	4291      	cmp	r1, r2
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8000f8c:	bf34      	ite	cc
 8000f8e:	f101 32ff 	addcc.w	r2, r1, #4294967295
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8000f92:	f102 32ff 	addcs.w	r2, r2, #4294967295
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff bdfc 	b.w	8000b94 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>

08000f9c <UART_Init>:
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8000f9c:	6843      	ldr	r3, [r0, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4718      	bx	r3

08000fa2 <UART_Transmit>:
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 8000fa2:	6843      	ldr	r3, [r0, #4]
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8000fa4:	b570      	push	{r4, r5, r6, lr}
 8000fa6:	4604      	mov	r4, r0
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 8000fa8:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8000fac:	2802      	cmp	r0, #2
 8000fae:	d12b      	bne.n	8001008 <UART_Transmit+0x66>
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)))

  if ((data_ptr != NULL) && (count > 0U))
 8000fb0:	b361      	cbz	r1, 800100c <UART_Transmit+0x6a>
 8000fb2:	b35a      	cbz	r2, 800100c <UART_Transmit+0x6a>
  {
    ret_stat = UART_STATUS_BUSY;
    if (handle->runtime->tx_busy == false)
 8000fb4:	68a5      	ldr	r5, [r4, #8]
 8000fb6:	7e2e      	ldrb	r6, [r5, #24]
 8000fb8:	bb4e      	cbnz	r6, 800100e <UART_Transmit+0x6c>
    {
      handle->runtime->tx_busy = true;
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000fba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
  if ((data_ptr != NULL) && (count > 0U))
  {
    ret_stat = UART_STATUS_BUSY;
    if (handle->runtime->tx_busy == false)
    {
      handle->runtime->tx_busy = true;
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	7628      	strb	r0, [r5, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000fc2:	b123      	cbz	r3, 8000fce <UART_Transmit+0x2c>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8000fc4:	6823      	ldr	r3, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8000fc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fca:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000fce:	460d      	mov	r5, r1
 8000fd0:	188e      	adds	r6, r1, r2
 8000fd2:	6863      	ldr	r3, [r4, #4]
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8000fd4:	42b5      	cmp	r5, r6
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000fd6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8000fda:	d00b      	beq.n	8000ff4 <UART_Transmit+0x52>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000fdc:	b123      	cbz	r3, 8000fe8 <UART_Transmit+0x46>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 8000fde:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8000fe0:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 8000fe4:	04d9      	lsls	r1, r3, #19
 8000fe6:	d4fb      	bmi.n	8000fe0 <UART_Transmit+0x3e>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 8000fe8:	6820      	ldr	r0, [r4, #0]
 8000fea:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000fee:	f7ff fd18 	bl	8000a22 <XMC_UART_CH_Transmit>
 8000ff2:	e7ee      	b.n	8000fd2 <UART_Transmit+0x30>
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000ff4:	b123      	cbz	r3, 8001000 <UART_Transmit+0x5e>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 8000ff6:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8000ff8:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 8000ffc:	051b      	lsls	r3, r3, #20
 8000ffe:	d5fb      	bpl.n	8000ff8 <UART_Transmit+0x56>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
      handle->runtime->tx_busy = false;
 8001000:	68a3      	ldr	r3, [r4, #8]
 8001002:	2000      	movs	r0, #0
 8001004:	7618      	strb	r0, [r3, #24]
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001008:	2004      	movs	r0, #4
 800100a:	bd70      	pop	{r4, r5, r6, pc}
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 800100c:	2003      	movs	r0, #3
#endif
  default:
    break;
  }
  return ret_stat;
}
 800100e:	bd70      	pop	{r4, r5, r6, pc}

08001010 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8001012:	6845      	ldr	r5, [r0, #4]
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001014:	6883      	ldr	r3, [r0, #8]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8001016:	f895 6026 	ldrb.w	r6, [r5, #38]	; 0x26
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 800101a:	4604      	mov	r4, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 800101c:	bb26      	cbnz	r6, 8001068 <UART_StartReceiveIRQ+0x58>
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->rx_busy == false)
 800101e:	7e5f      	ldrb	r7, [r3, #25]
 8001020:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8001024:	bb17      	cbnz	r7, 800106c <UART_StartReceiveIRQ+0x5c>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001026:	b319      	cbz	r1, 8001070 <UART_StartReceiveIRQ+0x60>
 8001028:	b312      	cbz	r2, 8001070 <UART_StartReceiveIRQ+0x60>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 800102a:	6059      	str	r1, [r3, #4]
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
 800102c:	2101      	movs	r1, #1
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
 800102e:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 8001030:	7659      	strb	r1, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 8001032:	615e      	str	r6, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001034:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8001038:	6805      	ldr	r5, [r0, #0]
 800103a:	b17b      	cbz	r3, 800105c <UART_StartReceiveIRQ+0x4c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 800103c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001040:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8001044:	4611      	mov	r1, r2
 8001046:	f7ff ff9a 	bl	8000f7e <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 800104a:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 800104c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8001050:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001054:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8001058:	4630      	mov	r0, r6
 800105a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 800105c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800105e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001062:	642a      	str	r2, [r5, #64]	; 0x40
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8001064:	4618      	mov	r0, r3
 8001066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001068:	2004      	movs	r0, #4
 800106a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
 800106c:	2002      	movs	r0, #2
 800106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
        ret_stat = UART_STATUS_SUCCESS;
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001070:	2003      	movs	r0, #3
      }
    }
  }
  return ret_stat;
}
 8001072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001074 <UART_lReceiveHandler>:
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001074:	6843      	ldr	r3, [r0, #4]
 8001076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 800107a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800107e:	4605      	mov	r5, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001080:	6884      	ldr	r4, [r0, #8]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001082:	b353      	cbz	r3, 80010da <UART_lReceiveHandler+0x66>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001084:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8001086:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800108a:	071b      	lsls	r3, r3, #28
 800108c:	d41b      	bmi.n	80010c6 <UART_lReceiveHandler+0x52>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 800108e:	6966      	ldr	r6, [r4, #20]
 8001090:	6923      	ldr	r3, [r4, #16]
 8001092:	429e      	cmp	r6, r3
 8001094:	d206      	bcs.n	80010a4 <UART_lReceiveHandler+0x30>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001096:	6867      	ldr	r7, [r4, #4]
 8001098:	f7ff fcd4 	bl	8000a44 <XMC_UART_CH_GetReceivedData>
 800109c:	55b8      	strb	r0, [r7, r6]
        (ptr_runtime->rx_data_index)++;
 800109e:	6963      	ldr	r3, [r4, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	6163      	str	r3, [r4, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80010a4:	6962      	ldr	r2, [r4, #20]
 80010a6:	6923      	ldr	r3, [r4, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d1eb      	bne.n	8001084 <UART_lReceiveHandler+0x10>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 80010ac:	2300      	movs	r3, #0
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 80010ae:	682a      	ldr	r2, [r5, #0]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 80010b0:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 80010b2:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 80010b6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80010ba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 80010be:	686b      	ldr	r3, [r5, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	b103      	cbz	r3, 80010c6 <UART_lReceiveHandler+0x52>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 80010c4:	4798      	blx	r3
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80010c6:	6963      	ldr	r3, [r4, #20]
 80010c8:	6921      	ldr	r1, [r4, #16]
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d222      	bcs.n	8001114 <UART_lReceiveHandler+0xa0>
    {
      UART_lReconfigureRxFIFO(handle,
 80010ce:	4628      	mov	r0, r5
 80010d0:	1ac9      	subs	r1, r1, r3
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 80010d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 80010d6:	f7ff bf52 	b.w	8000f7e <UART_lReconfigureRxFIFO>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80010da:	6966      	ldr	r6, [r4, #20]
 80010dc:	6923      	ldr	r3, [r4, #16]
 80010de:	429e      	cmp	r6, r3
 80010e0:	d207      	bcs.n	80010f2 <UART_lReceiveHandler+0x7e>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 80010e2:	6800      	ldr	r0, [r0, #0]
 80010e4:	6867      	ldr	r7, [r4, #4]
 80010e6:	f7ff fcad 	bl	8000a44 <XMC_UART_CH_GetReceivedData>
 80010ea:	55b8      	strb	r0, [r7, r6]
      (ptr_runtime->rx_data_index)++;
 80010ec:	6963      	ldr	r3, [r4, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	6163      	str	r3, [r4, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80010f2:	6962      	ldr	r2, [r4, #20]
 80010f4:	6923      	ldr	r3, [r4, #16]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d10c      	bne.n	8001114 <UART_lReceiveHandler+0xa0>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 80010fa:	2300      	movs	r3, #0
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 80010fc:	682a      	ldr	r2, [r5, #0]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 80010fe:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8001100:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001102:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8001108:	686b      	ldr	r3, [r5, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	b113      	cbz	r3, 8001114 <UART_lReceiveHandler+0xa0>
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 800110e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8001112:	4718      	bx	r3
 8001114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001118 <UART_lProtocolHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lProtocolHandler(const UART_t * const handle)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
  /*Protocol event configuration to check which event is
   * configured for interrupt generation and hence callback*/
  uint32_t pcr_conf = handle->channel->PCR_ASCMode;
  /*Array of callback functions in the order of events*/
  const UART_cbhandler callback_arr[UART_EVENT_MAX] = {
    handle->config->sync_error_cbhandler,
 800111a:	6843      	ldr	r3, [r0, #4]
 * return void
 */
void UART_lProtocolHandler(const UART_t * const handle)
{
  /*Protocol status value to check which event occured*/
  uint32_t psr_status = XMC_UART_CH_GetStatusFlag(handle->channel);
 800111c:	6801      	ldr	r1, [r0, #0]
  /*Protocol event configuration to check which event is
   * configured for interrupt generation and hence callback*/
  uint32_t pcr_conf = handle->channel->PCR_ASCMode;
  /*Array of callback functions in the order of events*/
  const UART_cbhandler callback_arr[UART_EVENT_MAX] = {
 800111e:	68da      	ldr	r2, [r3, #12]
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 */
__STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return channel->PSR_ASCMode;
 8001120:	6c8d      	ldr	r5, [r1, #72]	; 0x48
{
  /*Protocol status value to check which event occured*/
  uint32_t psr_status = XMC_UART_CH_GetStatusFlag(handle->channel);
  /*Protocol event configuration to check which event is
   * configured for interrupt generation and hence callback*/
  uint32_t pcr_conf = handle->channel->PCR_ASCMode;
 8001122:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lProtocolHandler(const UART_t * const handle)
{
 8001124:	b086      	sub	sp, #24
  uint32_t psr_status = XMC_UART_CH_GetStatusFlag(handle->channel);
  /*Protocol event configuration to check which event is
   * configured for interrupt generation and hence callback*/
  uint32_t pcr_conf = handle->channel->PCR_ASCMode;
  /*Array of callback functions in the order of events*/
  const UART_cbhandler callback_arr[UART_EVENT_MAX] = {
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	9202      	str	r2, [sp, #8]
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	9203      	str	r2, [sp, #12]
 8001130:	699a      	ldr	r2, [r3, #24]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	9305      	str	r3, [sp, #20]
 8001136:	9204      	str	r2, [sp, #16]
 8001138:	2300      	movs	r3, #0
  UART_EVENT_t loc_index;

  for (loc_index = UART_EVENT_SYNC_BRK; loc_index < UART_EVENT_MAX; loc_index++)
  {
    /*Check if event is configured for interrupt generation and event has occured*/
    if ((pcr_conf & (uint32_t)uart_event_conf_flags[loc_index]) &&
 800113a:	480e      	ldr	r0, [pc, #56]	; (8001174 <UART_lProtocolHandler+0x5c>)
 800113c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001140:	4204      	tst	r4, r0
 8001142:	b2da      	uxtb	r2, r3
 8001144:	d011      	beq.n	800116a <UART_lProtocolHandler+0x52>
       (psr_status & (uint32_t)uart_event_status_flags[loc_index]))
 8001146:	480c      	ldr	r0, [pc, #48]	; (8001178 <UART_lProtocolHandler+0x60>)
 8001148:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
  UART_EVENT_t loc_index;

  for (loc_index = UART_EVENT_SYNC_BRK; loc_index < UART_EVENT_MAX; loc_index++)
  {
    /*Check if event is configured for interrupt generation and event has occured*/
    if ((pcr_conf & (uint32_t)uart_event_conf_flags[loc_index]) &&
 800114c:	4235      	tst	r5, r6
 800114e:	d00c      	beq.n	800116a <UART_lProtocolHandler+0x52>
       (psr_status & (uint32_t)uart_event_status_flags[loc_index]))
    {
      XMC_UART_CH_ClearStatusFlag(handle->channel, (uint32_t)uart_event_status_flags[(uint32_t)loc_index]);
 8001150:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
 8001154:	64cb      	str	r3, [r1, #76]	; 0x4c
      /*Call the callback function if it is valid*/
      if ((callback_arr[(uint32_t)loc_index] != NULL))
 8001156:	ab06      	add	r3, sp, #24
 8001158:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800115c:	f852 3c14 	ldr.w	r3, [r2, #-20]
 8001160:	b133      	cbz	r3, 8001170 <UART_lProtocolHandler+0x58>
      }
      /*Process only one event*/
      break;
    }
  }
}
 8001162:	b006      	add	sp, #24
 8001164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    {
      XMC_UART_CH_ClearStatusFlag(handle->channel, (uint32_t)uart_event_status_flags[(uint32_t)loc_index]);
      /*Call the callback function if it is valid*/
      if ((callback_arr[(uint32_t)loc_index] != NULL))
      {
        callback_arr[(uint32_t)loc_index]();
 8001168:	4718      	bx	r3
 800116a:	3301      	adds	r3, #1
    handle->config->format_error_bit1_cbhandler,
    handle->config->collision_error_cbhandler
  };
  UART_EVENT_t loc_index;

  for (loc_index = UART_EVENT_SYNC_BRK; loc_index < UART_EVENT_MAX; loc_index++)
 800116c:	2b05      	cmp	r3, #5
 800116e:	d1e4      	bne.n	800113a <UART_lProtocolHandler+0x22>
      }
      /*Process only one event*/
      break;
    }
  }
}
 8001170:	b006      	add	sp, #24
 8001172:	bd70      	pop	{r4, r5, r6, pc}
 8001174:	080066c4 	.word	0x080066c4
 8001178:	080066b0 	.word	0x080066b0

0800117c <NVIC_EncodePriority.constprop.1>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	f1c0 0207 	rsb	r2, r0, #7
 8001184:	2a06      	cmp	r2, #6
 8001186:	bf28      	it	cs
 8001188:	2206      	movcs	r2, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	b100      	cbz	r0, 800118e <NVIC_EncodePriority.constprop.1+0x12>
 800118c:	3801      	subs	r0, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118e:	2301      	movs	r3, #1
 8001190:	4093      	lsls	r3, r2
 8001192:	3b01      	subs	r3, #1
 8001194:	4019      	ands	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001196:	fa01 f000 	lsl.w	r0, r1, r0
 800119a:	4770      	bx	lr

0800119c <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 800119c:	b538      	push	{r3, r4, r5, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 800119e:	4d26      	ldr	r5, [pc, #152]	; (8001238 <UART_0_init+0x9c>)
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 80011a0:	4c26      	ldr	r4, [pc, #152]	; (800123c <UART_0_init+0xa0>)
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 80011a2:	4a27      	ldr	r2, [pc, #156]	; (8001240 <UART_0_init+0xa4>)
 80011a4:	4628      	mov	r0, r5
 80011a6:	2104      	movs	r1, #4
 80011a8:	f7ff f8e0 	bl	800036c <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 80011ac:	4620      	mov	r0, r4
 80011ae:	4925      	ldr	r1, [pc, #148]	; (8001244 <UART_0_init+0xa8>)
 80011b0:	f7ff fc01 	bl	80009b6 <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80011b4:	69e3      	ldr	r3, [r4, #28]
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 1U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 5U, &UART_0_tx_pin_config);
 80011b6:	4a24      	ldr	r2, [pc, #144]	; (8001248 <UART_0_init+0xac>)
 80011b8:	f023 0307 	bic.w	r3, r3, #7
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	61e3      	str	r3, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80011c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011c4:	f023 030f 	bic.w	r3, r3, #15
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6423      	str	r3, [r4, #64]	; 0x40
 80011ce:	4628      	mov	r0, r5
 80011d0:	2105      	movs	r1, #5
 80011d2:	f7ff f8cb 	bl	800036c <XMC_GPIO_Init>

  /*Set service request for receive interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
 80011d6:	4620      	mov	r0, r4
 80011d8:	2108      	movs	r1, #8
 80011da:	2205      	movs	r2, #5
 80011dc:	f7ff fceb 	bl	8000bb6 <XMC_USIC_CH_SetInterruptNodePointer>
     5U);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
 80011e0:	4620      	mov	r0, r4
 80011e2:	210c      	movs	r1, #12
 80011e4:	2205      	movs	r2, #5
 80011e6:	f7ff fce6 	bl	8000bb6 <XMC_USIC_CH_SetInterruptNodePointer>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ea:	4d18      	ldr	r5, [pc, #96]	; (800124c <UART_0_init+0xb0>)
     5U);
  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 80011ec:	2203      	movs	r2, #3
 80011ee:	4620      	mov	r0, r4
 80011f0:	2110      	movs	r1, #16
 80011f2:	f7ff fce0 	bl	8000bb6 <XMC_USIC_CH_SetInterruptNodePointer>
     3U);
  /*Enable UART protocol event detection for selected events*/
  XMC_UART_CH_EnableEvent(XMC_UART0_CH0, UART_0_enabled_protocol_events);
 80011f6:	4620      	mov	r0, r4
 80011f8:	2168      	movs	r1, #104	; 0x68
 80011fa:	f7ff fc2d 	bl	8000a58 <XMC_UART_CH_EnableEvent>
 80011fe:	68e8      	ldr	r0, [r5, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	4c13      	ldr	r4, [pc, #76]	; (8001250 <UART_0_init+0xb4>)
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001202:	211d      	movs	r1, #29
 8001204:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001208:	f7ff ffb8 	bl	800117c <NVIC_EncodePriority.constprop.1>
 800120c:	0080      	lsls	r0, r0, #2
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	b2c0      	uxtb	r0, r0
 8001214:	f884 0359 	strb.w	r0, [r4, #857]	; 0x359
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001218:	60a3      	str	r3, [r4, #8]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121a:	68e8      	ldr	r0, [r5, #12]
                      29U, 0U));
  NVIC_EnableIRQ((IRQn_Type)89);
  /*Set priority and enable NVIC node for UART protocol interrupt*/
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 800121c:	213f      	movs	r1, #63	; 0x3f
 800121e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001222:	f7ff ffab 	bl	800117c <NVIC_EncodePriority.constprop.1>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	0080      	lsls	r0, r0, #2
 8001228:	b2c0      	uxtb	r0, r0
 800122a:	f884 0357 	strb.w	r0, [r4, #855]	; 0x357
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001232:	60a3      	str	r3, [r4, #8]
                      63U,  0U));
  NVIC_EnableIRQ((IRQn_Type)87);

  return status;
}
 8001234:	2000      	movs	r0, #0
 8001236:	bd38      	pop	{r3, r4, r5, pc}
 8001238:	48028100 	.word	0x48028100
 800123c:	40030000 	.word	0x40030000
 8001240:	08006704 	.word	0x08006704
 8001244:	08006728 	.word	0x08006728
 8001248:	0800671c 	.word	0x0800671c
 800124c:	e000ed00 	.word	0xe000ed00
 8001250:	e000e100 	.word	0xe000e100

08001254 <USIC0_5_IRQHandler>:
/*Receive ISR*/
void UART_0_RX_HANDLER()
{
  UART_lReceiveHandler(&UART_0);
 8001254:	4801      	ldr	r0, [pc, #4]	; (800125c <USIC0_5_IRQHandler+0x8>)
 8001256:	f7ff bf0d 	b.w	8001074 <UART_lReceiveHandler>
 800125a:	bf00      	nop
 800125c:	20000000 	.word	0x20000000

08001260 <USIC0_3_IRQHandler>:
}

/*Error ISR*/
void UART_0_ERR_HANDLER()
{
  UART_lProtocolHandler(&UART_0);
 8001260:	4801      	ldr	r0, [pc, #4]	; (8001268 <USIC0_3_IRQHandler+0x8>)
 8001262:	f7ff bf59 	b.w	8001118 <UART_lProtocolHandler>
 8001266:	bf00      	nop
 8001268:	20000000 	.word	0x20000000

0800126c <TIMER_ClearEvent>:
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800126c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001270:	b91b      	cbnz	r3, 800127a <TIMER_ClearEvent+0xe>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001272:	6943      	ldr	r3, [r0, #20]
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 8001274:	2201      	movs	r2, #1
 8001276:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800127a:	4770      	bx	lr

0800127c <TIMER_CCU4_lShadowTransfer>:
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 800127c:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800127e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001282:	2200      	movs	r2, #0
 8001284:	63da      	str	r2, [r3, #60]	; 0x3c
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8001286:	6903      	ldr	r3, [r0, #16]
 8001288:	68c2      	ldr	r2, [r0, #12]
 800128a:	689b      	ldr	r3, [r3, #8]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	4770      	bx	lr

08001290 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4604      	mov	r4, r0
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8001294:	6900      	ldr	r0, [r0, #16]
 8001296:	f000 f915 	bl	80014c4 <GLOBAL_CCU4_Init>

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 800129a:	6923      	ldr	r3, [r4, #16]
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 800129c:	7e21      	ldrb	r1, [r4, #24]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	408b      	lsls	r3, r1
 80012a4:	60d3      	str	r3, [r2, #12]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80012a6:	69e1      	ldr	r1, [r4, #28]
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80012a8:	4605      	mov	r5, r0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80012aa:	6960      	ldr	r0, [r4, #20]
 80012ac:	f7ff fb45 	bl	800093a <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff ffe3 	bl	800127c <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80012b6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80012ba:	b163      	cbz	r3, 80012d6 <TIMER_CCU4_lInit+0x46>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80012bc:	f894 2020 	ldrb.w	r2, [r4, #32]
 80012c0:	6960      	ldr	r0, [r4, #20]
 80012c2:	2100      	movs	r1, #0
 80012c4:	f7ff fb50 	bl	8000968 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80012c8:	6962      	ldr	r2, [r4, #20]
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80012ca:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80012d6:	6963      	ldr	r3, [r4, #20]

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80012d8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80012dc:	2202      	movs	r2, #2
 80012de:	611a      	str	r2, [r3, #16]
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80012e0:	2201      	movs	r2, #1
 80012e2:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80012e6:	b101      	cbz	r1, 80012ea <TIMER_CCU4_lInit+0x5a>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80012e8:	60da      	str	r2, [r3, #12]
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
  }

  return (status);
}
 80012ea:	4628      	mov	r0, r5
 80012ec:	bd38      	pop	{r3, r4, r5, pc}

080012ee <TIMER_Init>:

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80012ee:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80012f2:	b922      	cbnz	r2, 80012fe <TIMER_Init+0x10>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80012f4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80012f8:	b90b      	cbnz	r3, 80012fe <TIMER_Init+0x10>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80012fa:	f7ff bfc9 	b.w	8001290 <TIMER_CCU4_lInit>
    }
#endif
  }

  return (status);
}
 80012fe:	2000      	movs	r0, #0
 8001300:	4770      	bx	lr

08001302 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
  if ((bool) true == handle_ptr->period_match_enable)
 8001302:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
} /* end of PWM_lCCU4_Init() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8001306:	b510      	push	{r4, lr}
 8001308:	4604      	mov	r4, r0
  if ((bool) true == handle_ptr->period_match_enable)
 800130a:	b163      	cbz	r3, 8001326 <PWM_lCCU4_ConfigInterrupts+0x24>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800130c:	6882      	ldr	r2, [r0, #8]
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 800130e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800131a:	6880      	ldr	r0, [r0, #8]
 800131c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8001320:	2100      	movs	r1, #0
 8001322:	f7ff fb21 	bl	8000968 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 8001326:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800132a:	b173      	cbz	r3, 800134a <PWM_lCCU4_ConfigInterrupts+0x48>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 800132c:	68a2      	ldr	r2, [r4, #8]
 800132e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 800133a:	68a0      	ldr	r0, [r4, #8]
 800133c:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8001340:	2102      	movs	r1, #2
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8001342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8001346:	f7ff bb0f 	b.w	8000968 <XMC_CCU4_SLICE_SetInterruptNode>
 800134a:	bd10      	pop	{r4, pc}

0800134c <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 800134c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001350:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 8001354:	d10b      	bne.n	800136e <PWM_lCCU4_Start+0x22>
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8001356:	f890 102e 	ldrb.w	r1, [r0, #46]	; 0x2e
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 800135a:	6842      	ldr	r2, [r0, #4]
 800135c:	2301      	movs	r3, #1
 800135e:	fa03 f101 	lsl.w	r1, r3, r1
 8001362:	60d1      	str	r1, [r2, #12]
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001364:	6882      	ldr	r2, [r0, #8]
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8001366:	60d3      	str	r3, [r2, #12]

    handle_ptr->state = PWM_STATUS_RUNNING;
 8001368:	2303      	movs	r3, #3
 800136a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 800136e:	4770      	bx	lr

08001370 <PWM_lCCU4_SetDutyCycle>:
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 8001370:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001374:	2b02      	cmp	r3, #2
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8001376:	b510      	push	{r4, lr}
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 8001378:	d015      	beq.n	80013a6 <PWM_lCCU4_SetDutyCycle+0x36>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 800137a:	f242 7210 	movw	r2, #10000	; 0x2710
 800137e:	4291      	cmp	r1, r2
 8001380:	d811      	bhi.n	80013a6 <PWM_lCCU4_SetDutyCycle+0x36>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 8001382:	69c4      	ldr	r4, [r0, #28]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));

      handle_ptr->compare_value = compare;
      handle_ptr->duty_cycle = duty_cycle;
 8001384:	6201      	str	r1, [r0, #32]
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8001386:	f5c1 531c 	rsb	r3, r1, #9984	; 0x2700
 800138a:	3310      	adds	r3, #16
 800138c:	fb04 3303 	mla	r3, r4, r3, r3
 8001390:	fbb3 f3f2 	udiv	r3, r3, r2

      handle_ptr->compare_value = compare;
      handle_ptr->duty_cycle = duty_cycle;

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 8001394:	6882      	ldr	r2, [r0, #8]
      period = (uint32_t)handle_ptr->period_value + 1U;

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));

      handle_ptr->compare_value = compare;
 8001396:	6183      	str	r3, [r0, #24]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001398:	b29b      	uxth	r3, r3
 800139a:	63d3      	str	r3, [r2, #60]	; 0x3c
      handle_ptr->duty_cycle = duty_cycle;

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 800139c:	6843      	ldr	r3, [r0, #4]
 800139e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	2000      	movs	r0, #0
 80013a4:	bd10      	pop	{r4, pc}
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 80013a6:	2001      	movs	r0, #1
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
} /* end of PWM_lCCU4_SetDutyCycle() api */
 80013a8:	bd10      	pop	{r4, pc}

080013aa <PWM_Start>:
void PWM_Start(PWM_t *const handle_ptr)
{
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80013aa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80013ae:	b90b      	cbnz	r3, 80013b4 <PWM_Start+0xa>
  {
    PWM_lCCU4_Start(handle_ptr);
 80013b0:	f7ff bfcc 	b.w	800134c <PWM_lCCU4_Start>
 80013b4:	4770      	bx	lr

080013b6 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 80013b6:	b570      	push	{r4, r5, r6, lr}
  PWM_STATUS_t status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 80013b8:	f890 6029 	ldrb.w	r6, [r0, #41]	; 0x29
 80013bc:	2e02      	cmp	r6, #2

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 80013be:	4604      	mov	r4, r0
  PWM_STATUS_t status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 80013c0:	d126      	bne.n	8001410 <PWM_lCCU4_Init+0x5a>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 80013c2:	6800      	ldr	r0, [r0, #0]
 80013c4:	f000 f87e 	bl	80014c4 <GLOBAL_CCU4_Init>

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 80013c8:	4605      	mov	r5, r0
 80013ca:	b9f0      	cbnz	r0, 800140a <PWM_lCCU4_Init+0x54>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80013cc:	68e1      	ldr	r1, [r4, #12]
 80013ce:	68a0      	ldr	r0, [r4, #8]
 80013d0:	f7ff fab3 	bl	800093a <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80013d4:	68a3      	ldr	r3, [r4, #8]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80013d6:	8ba2      	ldrh	r2, [r4, #28]
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80013da:	68a3      	ldr	r3, [r4, #8]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80013dc:	8b22      	ldrh	r2, [r4, #24]
 80013de:	63da      	str	r2, [r3, #60]	; 0x3c
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 80013e0:	6863      	ldr	r3, [r4, #4]
 80013e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80013e4:	611a      	str	r2, [r3, #16]

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff ff8b 	bl	8001302 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 80013ec:	6920      	ldr	r0, [r4, #16]
 80013ee:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80013f2:	6962      	ldr	r2, [r4, #20]
 80013f4:	f7fe ffba 	bl	800036c <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 80013f8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
      PWM_lCCU4_ConfigInterrupts(handle_ptr);

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 80013fc:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8001400:	b13b      	cbz	r3, 8001412 <PWM_lCCU4_Init+0x5c>
      {
        PWM_Start(handle_ptr);
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff ffd1 	bl	80013aa <PWM_Start>
 8001408:	e003      	b.n	8001412 <PWM_lCCU4_Init+0x5c>
      }
      status = PWM_STATUS_SUCCESS;
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 800140a:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
 800140e:	e000      	b.n	8001412 <PWM_lCCU4_Init+0x5c>
#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8001410:	2501      	movs	r5, #1
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
    }

  }
  return (status);
} /* end of PWM_lCCU4_Init() api */
 8001412:	4628      	mov	r0, r5
 8001414:	bd70      	pop	{r4, r5, r6, pc}

08001416 <PWM_Init>:
  status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001416:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800141a:	b90b      	cbnz	r3, 8001420 <PWM_Init+0xa>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 800141c:	f7ff bfcb 	b.w	80013b6 <PWM_lCCU4_Init>
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
}
 8001420:	2001      	movs	r0, #1
 8001422:	4770      	bx	lr

08001424 <PWM_SetDutyCycle>:
  status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001424:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001428:	b90b      	cbnz	r3, 800142e <PWM_SetDutyCycle+0xa>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 800142a:	f7ff bfa1 	b.w	8001370 <PWM_lCCU4_SetDutyCycle>
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
}
 800142e:	2001      	movs	r0, #1
 8001430:	4770      	bx	lr
	...

08001434 <INTERRUPT_Init>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <INTERRUPT_Init+0x84>)

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8001436:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001438:	68d9      	ldr	r1, [r3, #12]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800143a:	7805      	ldrb	r5, [r0, #0]
 800143c:	7842      	ldrb	r2, [r0, #1]
 800143e:	7887      	ldrb	r7, [r0, #2]
 8001440:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	f1c1 0e07 	rsb	lr, r1, #7
 8001448:	f1be 0f06 	cmp.w	lr, #6
 800144c:	bf28      	it	cs
 800144e:	f04f 0e06 	movcs.w	lr, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	b101      	cbz	r1, 8001456 <INTERRUPT_Init+0x22>
 8001454:	3901      	subs	r1, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001456:	2401      	movs	r4, #1
 8001458:	fa04 f301 	lsl.w	r3, r4, r1
 800145c:	3b01      	subs	r3, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145e:	fa04 f40e 	lsl.w	r4, r4, lr
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001462:	ea03 0607 	and.w	r6, r3, r7

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001466:	1e63      	subs	r3, r4, #1
 8001468:	4013      	ands	r3, r2
 800146a:	408b      	lsls	r3, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800146c:	b26a      	sxtb	r2, r5
 800146e:	2a00      	cmp	r2, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001470:	ea43 0306 	orr.w	r3, r3, r6
 8001474:	ea4f 0383 	mov.w	r3, r3, lsl #2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	bfaf      	iteee	ge
 800147a:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	f005 050f 	andlt.w	r5, r5, #15
 8001482:	4a0e      	ldrlt	r2, [pc, #56]	; (80014bc <INTERRUPT_Init+0x88>)
 8001484:	b2db      	uxtblt	r3, r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	bfa5      	ittet	ge
 8001488:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
 800148c:	b2db      	uxtbge	r3, r3
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	5553      	strblt	r3, [r2, r5]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8001494:	78c3      	ldrb	r3, [r0, #3]
 8001496:	b16b      	cbz	r3, 80014b4 <INTERRUPT_Init+0x80>
 8001498:	7802      	ldrb	r2, [r0, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800149a:	b253      	sxtb	r3, r2
 800149c:	2b00      	cmp	r3, #0
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	bfa1      	itttt	ge
 80014a0:	2101      	movge	r1, #1
 80014a2:	f002 021f 	andge.w	r2, r2, #31
 80014a6:	fa01 f202 	lslge.w	r2, r1, r2
 80014aa:	095b      	lsrge	r3, r3, #5
 80014ac:	bfa4      	itt	ge
 80014ae:	4904      	ldrge	r1, [pc, #16]	; (80014c0 <INTERRUPT_Init+0x8c>)
 80014b0:	f841 2023 	strge.w	r2, [r1, r3, lsl #2]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
 80014b4:	2000      	movs	r0, #0
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	e000ed14 	.word	0xe000ed14
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <GLOBAL_CCU4_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80014c4:	7b43      	ldrb	r3, [r0, #13]
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80014c6:	b510      	push	{r4, lr}
 80014c8:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80014ca:	b94b      	cbnz	r3, 80014e0 <GLOBAL_CCU4_Init+0x1c>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80014cc:	6880      	ldr	r0, [r0, #8]
 80014ce:	7b21      	ldrb	r1, [r4, #12]
 80014d0:	f7ff fa24 	bl	800091c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80014d4:	68a3      	ldr	r3, [r4, #8]
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80014d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014da:	60da      	str	r2, [r3, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80014dc:	2301      	movs	r3, #1
 80014de:	7363      	strb	r3, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 80014e0:	2000      	movs	r0, #0
 80014e2:	bd10      	pop	{r4, pc}

080014e4 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 80014e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 80014e6:	7e03      	ldrb	r3, [r0, #24]
 80014e8:	2b02      	cmp	r3, #2
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 80014ea:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 80014ec:	d129      	bne.n	8001542 <GLOBAL_ADC_Init+0x5e>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 80014ee:	6940      	ldr	r0, [r0, #20]
 80014f0:	6921      	ldr	r1, [r4, #16]
 80014f2:	f7ff fbcc 	bl	8000c8e <XMC_VADC_GLOBAL_Init>
 80014f6:	1f27      	subs	r7, r4, #4

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80014f8:	2600      	movs	r6, #0
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80014fa:	f857 3f04 	ldr.w	r3, [r7, #4]!
 80014fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001502:	f7ff fc38 	bl	8000d76 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2103      	movs	r1, #3
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	f7ff fc71 	bl	8000df2 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	7a0b      	ldrb	r3, [r1, #8]
 8001514:	b94b      	cbnz	r3, 800152a <GLOBAL_ADC_Init+0x46>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8001516:	6960      	ldr	r0, [r4, #20]
 8001518:	f106 0510 	add.w	r5, r6, #16

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 800151c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8001520:	2301      	movs	r3, #1
 8001522:	40ab      	lsls	r3, r5
 8001524:	4313      	orrs	r3, r2
 8001526:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800152a:	3601      	adds	r6, #1

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 800152c:	2300      	movs	r3, #0
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800152e:	2e04      	cmp	r6, #4

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8001530:	724b      	strb	r3, [r1, #9]
 8001532:	461d      	mov	r5, r3
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001534:	d1e1      	bne.n	80014fa <GLOBAL_ADC_Init+0x16>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8001536:	7e63      	ldrb	r3, [r4, #25]
 8001538:	b113      	cbz	r3, 8001540 <GLOBAL_ADC_Init+0x5c>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 800153a:	6960      	ldr	r0, [r4, #20]
 800153c:	f7ff fbcc 	bl	8000cd8 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8001540:	7625      	strb	r5, [r4, #24]
  }
  return (handle_ptr->init_state);
}
 8001542:	7e20      	ldrb	r0, [r4, #24]
 8001544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001546 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8001546:	b510      	push	{r4, lr}
 8001548:	4604      	mov	r4, r0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 800154a:	1d22      	adds	r2, r4, #4
 800154c:	7c21      	ldrb	r1, [r4, #16]
 800154e:	6800      	ldr	r0, [r0, #0]
 8001550:	f7fe ff0c 	bl	800036c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8001554:	6820      	ldr	r0, [r4, #0]
 8001556:	7c21      	ldrb	r1, [r4, #16]
 8001558:	7c62      	ldrb	r2, [r4, #17]
 800155a:	f7ff fa1f 	bl	800099c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
 800155e:	2000      	movs	r0, #0
 8001560:	bd10      	pop	{r4, pc}
	...

08001564 <SystemCoreSetup>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <SystemCoreSetup+0x68>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001566:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <SystemCoreSetup+0x6c>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800156e:	0409      	lsls	r1, r1, #16
 8001570:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 8001572:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001574:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001576:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001578:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <SystemCoreSetup+0x70>)
 800157a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001580:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001582:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001586:	4814      	ldr	r0, [pc, #80]	; (80015d8 <SystemCoreSetup+0x74>)

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001588:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800158c:	f241 0114 	movw	r1, #4116	; 0x1014

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001594:	5842      	ldr	r2, [r0, r1]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001596:	f022 020f 	bic.w	r2, r2, #15
  temp |= PMU_FLASH_WS;
 800159a:	f042 0203 	orr.w	r2, r2, #3
  FLASH0->FCON = temp;
 800159e:	5042      	str	r2, [r0, r1]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	f022 0210 	bic.w	r2, r2, #16
 80015a6:	615a      	str	r2, [r3, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	f022 0208 	bic.w	r2, r2, #8
 80015ae:	615a      	str	r2, [r3, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80015b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80015c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00
 80015d0:	05fa0100 	.word	0x05fa0100
 80015d4:	08000000 	.word	0x08000000
 80015d8:	58001000 	.word	0x58001000

080015dc <CLOCK_XMC4_Init>:
{
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80015dc:	2301      	movs	r3, #1
 80015de:	7003      	strb	r3, [r0, #0]

  return (status);
}
 80015e0:	2000      	movs	r0, #0
 80015e2:	4770      	bx	lr

080015e4 <OSCHP_GetFrequency>:
#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
}
 80015e4:	4800      	ldr	r0, [pc, #0]	; (80015e8 <OSCHP_GetFrequency+0x4>)
 80015e6:	4770      	bx	lr
 80015e8:	00b71b00 	.word	0x00b71b00

080015ec <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80015ec:	b530      	push	{r4, r5, lr}
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80015ee:	4d11      	ldr	r5, [pc, #68]	; (8001634 <SystemCoreClockSetup+0x48>)
 80015f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80015f2:	b087      	sub	sp, #28
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80015f4:	ac01      	add	r4, sp, #4
 80015f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80015fc:	a801      	add	r0, sp, #4
 80015fe:	f7ff f917 	bl	8000830 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001602:	2000      	movs	r0, #0
 8001604:	f7fe ff60 	bl	80004c8 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8001608:	2000      	movs	r0, #0
 800160a:	f7fe ff39 	bl	8000480 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800160e:	2004      	movs	r0, #4
 8001610:	f7fe ffa2 	bl	8000558 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8001614:	2120      	movs	r1, #32
 8001616:	2001      	movs	r0, #1
 8001618:	f7fe ffc2 	bl	80005a0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800161c:	2000      	movs	r0, #0
 800161e:	f7fe ff39 	bl	8000494 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001622:	2001      	movs	r0, #1
 8001624:	f7fe ffac 	bl	8000580 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8001628:	2001      	movs	r0, #1
 800162a:	f7fe ff9f 	bl	800056c <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800162e:	b007      	add	sp, #28
 8001630:	bd30      	pop	{r4, r5, pc}
 8001632:	bf00      	nop
 8001634:	08006830 	.word	0x08006830

08001638 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 8001638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 800163a:	7e03      	ldrb	r3, [r0, #24]
 800163c:	2b02      	cmp	r3, #2
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800163e:	4604      	mov	r4, r0
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8001640:	f040 808b 	bne.w	800175a <ADC_MEASUREMENT_Init+0x122>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8001644:	68c0      	ldr	r0, [r0, #12]
 8001646:	f7ff ff4d 	bl	80014e4 <GLOBAL_ADC_Init>
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800164a:	68e2      	ldr	r2, [r4, #12]
 800164c:	68a3      	ldr	r3, [r4, #8]
  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800164e:	4605      	mov	r5, r0
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8001650:	6950      	ldr	r0, [r2, #20]
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	2200      	movs	r2, #0
 8001656:	4613      	mov	r3, r2
 8001658:	f7ff fb32 	bl	8000cc0 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800165c:	68e3      	ldr	r3, [r4, #12]
 800165e:	6861      	ldr	r1, [r4, #4]
 8001660:	6958      	ldr	r0, [r3, #20]
 8001662:	f7ff fbcf 	bl	8000e04 <XMC_VADC_GLOBAL_BackgroundInit>
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
    {
      indexed = handle_ptr->array->channel_array[j];
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	681e      	ldr	r6, [r3, #0]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800166a:	68b0      	ldr	r0, [r6, #8]
 800166c:	7b71      	ldrb	r1, [r6, #13]
 800166e:	6832      	ldr	r2, [r6, #0]
 8001670:	f7ff fc2e 	bl	8000ed0 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8001674:	6833      	ldr	r3, [r6, #0]
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8001676:	6871      	ldr	r1, [r6, #4]
 8001678:	789b      	ldrb	r3, [r3, #2]
 800167a:	68b2      	ldr	r2, [r6, #8]
 800167c:	6809      	ldr	r1, [r1, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	33a0      	adds	r3, #160	; 0xa0
 8001684:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001688:	68e3      	ldr	r3, [r4, #12]
 800168a:	7b32      	ldrb	r2, [r6, #12]
 800168c:	695b      	ldr	r3, [r3, #20]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800168e:	7b70      	ldrb	r0, [r6, #13]
 8001690:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001694:	2201      	movs	r2, #1
 8001696:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 800169a:	4082      	lsls	r2, r0
 800169c:	430a      	orrs	r2, r1
 800169e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	7a1b      	ldrb	r3, [r3, #8]
 80016a6:	071b      	lsls	r3, r3, #28
 80016a8:	d549      	bpl.n	800173e <ADC_MEASUREMENT_Init+0x106>
 80016aa:	6923      	ldr	r3, [r4, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d046      	beq.n	800173e <ADC_MEASUREMENT_Init+0x106>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <ADC_MEASUREMENT_Init+0x128>)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80016b2:	681e      	ldr	r6, [r3, #0]
 80016b4:	68d1      	ldr	r1, [r2, #12]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016be:	f1c1 0c07 	rsb	ip, r1, #7
 80016c2:	f1bc 0f06 	cmp.w	ip, #6
 80016c6:	b2f7      	uxtb	r7, r6
 80016c8:	bf28      	it	cs
 80016ca:	f04f 0c06 	movcs.w	ip, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	b109      	cbz	r1, 80016d4 <ADC_MEASUREMENT_Init+0x9c>
 80016d0:	1e48      	subs	r0, r1, #1
 80016d2:	e000      	b.n	80016d6 <ADC_MEASUREMENT_Init+0x9e>
 80016d4:	4608      	mov	r0, r1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 fe00 	lsl.w	lr, r1, r0
 80016dc:	f10e 3eff 	add.w	lr, lr, #4294967295

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	fa01 f10c 	lsl.w	r1, r1, ip
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	ea0e 0e03 	and.w	lr, lr, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	1e4b      	subs	r3, r1, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	4083      	lsls	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80016ee:	b27a      	sxtb	r2, r7
 80016f0:	2a00      	cmp	r2, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80016f2:	ea4e 0303 	orr.w	r3, lr, r3
 80016f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	bfad      	iteet	ge
 80016fc:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	4a18      	ldrlt	r2, [pc, #96]	; (8001764 <ADC_MEASUREMENT_Init+0x12c>)
 8001702:	f006 060f 	andlt.w	r6, r6, #15
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	bfb9      	ittee	lt
 800170c:	b2db      	uxtblt	r3, r3
 800170e:	5593      	strblt	r3, [r2, r6]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	b2db      	uxtbge	r3, r3
 8001712:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8001716:	68e3      	ldr	r3, [r4, #12]
 8001718:	7e61      	ldrb	r1, [r4, #25]
 800171a:	6958      	ldr	r0, [r3, #20]
 800171c:	f7ff faf8 	bl	8000d10 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8001720:	6923      	ldr	r3, [r4, #16]
 8001722:	681a      	ldr	r2, [r3, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001724:	b253      	sxtb	r3, r2
 8001726:	2b00      	cmp	r3, #0
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001728:	bfa1      	itttt	ge
 800172a:	2101      	movge	r1, #1
 800172c:	f002 021f 	andge.w	r2, r2, #31
 8001730:	fa01 f202 	lslge.w	r2, r1, r2
 8001734:	095b      	lsrge	r3, r3, #5
 8001736:	bfa4      	itt	ge
 8001738:	490b      	ldrge	r1, [pc, #44]	; (8001768 <ADC_MEASUREMENT_Init+0x130>)
 800173a:	f841 2023 	strge.w	r2, [r1, r3, lsl #2]
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 800173e:	6963      	ldr	r3, [r4, #20]
 8001740:	b103      	cbz	r3, 8001744 <ADC_MEASUREMENT_Init+0x10c>
    {
    	(handle_ptr->mux_config)();
 8001742:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 8001744:	7ea3      	ldrb	r3, [r4, #26]
 8001746:	b13b      	cbz	r3, 8001758 <ADC_MEASUREMENT_Init+0x120>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8001748:	68e3      	ldr	r3, [r4, #12]
 800174a:	695a      	ldr	r2, [r3, #20]
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 800174c:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001754:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    }
    handle_ptr->init_state = status;
 8001758:	7625      	strb	r5, [r4, #24]
  }
  return (handle_ptr->init_state);
}
 800175a:	7e20      	ldrb	r0, [r4, #24]
 800175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00
 8001764:	e000ed14 	.word	0xe000ed14
 8001768:	e000e100 	.word	0xe000e100

0800176c <ADC_MEASUREMENT_StartConversion>:
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL))

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800176c:	68c3      	ldr	r3, [r0, #12]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001778:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 800177c:	4770      	bx	lr

0800177e <ADC_MEASUREMENT_GetResult>:
{
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 800177e:	6803      	ldr	r3, [r0, #0]
 8001780:	6882      	ldr	r2, [r0, #8]
 8001782:	789b      	ldrb	r3, [r3, #2]
 8001784:	f003 030f 	and.w	r3, r3, #15
                                                                const uint32_t res_reg)
{
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8001788:	33c0      	adds	r3, #192	; 0xc0
 800178a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]

  return (result);
}
 800178e:	b280      	uxth	r0, r0
 8001790:	4770      	bx	lr
	...

08001794 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8001794:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001796:	481d      	ldr	r0, [pc, #116]	; (800180c <DAVE_Init+0x78>)
 8001798:	f7ff ff20 	bl	80015dc <CLOCK_XMC4_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
 800179c:	2800      	cmp	r0, #0
 800179e:	d134      	bne.n	800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_0 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_0); 
 80017a0:	481b      	ldr	r0, [pc, #108]	; (8001810 <DAVE_Init+0x7c>)
 80017a2:	f7ff fe38 	bl	8001416 <PWM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017a6:	bb80      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 80017a8:	481a      	ldr	r0, [pc, #104]	; (8001814 <DAVE_Init+0x80>)
 80017aa:	f7ff fbf7 	bl	8000f9c <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017ae:	bb60      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_1 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_1); 
 80017b0:	4819      	ldr	r0, [pc, #100]	; (8001818 <DAVE_Init+0x84>)
 80017b2:	f7ff fe30 	bl	8001416 <PWM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017b6:	bb40      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_2 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_2); 
 80017b8:	4818      	ldr	r0, [pc, #96]	; (800181c <DAVE_Init+0x88>)
 80017ba:	f7ff fe2c 	bl	8001416 <PWM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017be:	bb20      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 80017c0:	4817      	ldr	r0, [pc, #92]	; (8001820 <DAVE_Init+0x8c>)
 80017c2:	f7ff ff39 	bl	8001638 <ADC_MEASUREMENT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017c6:	bb00      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_PLATE_LL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_PLATE_LL); 
 80017c8:	4816      	ldr	r0, [pc, #88]	; (8001824 <DAVE_Init+0x90>)
 80017ca:	f7ff febc 	bl	8001546 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017ce:	b9e0      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_PLATE_UR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_PLATE_UR); 
 80017d0:	4815      	ldr	r0, [pc, #84]	; (8001828 <DAVE_Init+0x94>)
 80017d2:	f7ff feb8 	bl	8001546 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017d6:	b9c0      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of TIMER APP instance TIMER_PLATE_SCAN */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_PLATE_SCAN); 
 80017d8:	4814      	ldr	r0, [pc, #80]	; (800182c <DAVE_Init+0x98>)
 80017da:	f7ff fd88 	bl	80012ee <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017de:	b9a0      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TIMER_PLATE_SCAN */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TIMER_PLATE_SCAN); 
 80017e0:	4813      	ldr	r0, [pc, #76]	; (8001830 <DAVE_Init+0x9c>)
 80017e2:	f7ff fe27 	bl	8001434 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017e6:	b980      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_PLATE_LR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_PLATE_LR); 
 80017e8:	4812      	ldr	r0, [pc, #72]	; (8001834 <DAVE_Init+0xa0>)
 80017ea:	f7ff feac 	bl	8001546 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017ee:	b960      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_PLATE_UL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_PLATE_UL); 
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <DAVE_Init+0xa4>)
 80017f2:	f7ff fea8 	bl	8001546 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017f6:	b940      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of TIMER APP instance TIMER_SET_PWM_VALUES */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_SET_PWM_VALUES); 
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <DAVE_Init+0xa8>)
 80017fa:	f7ff fd78 	bl	80012ee <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80017fe:	b920      	cbnz	r0, 800180a <DAVE_Init+0x76>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_SET_PWM_VALUES */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_SET_PWM_VALUES); 
 8001800:	480f      	ldr	r0, [pc, #60]	; (8001840 <DAVE_Init+0xac>)
   }  
  return init_status;
} /**  End of function DAVE_Init */
 8001802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_SET_PWM_VALUES); 
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_SET_PWM_VALUES */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_SET_PWM_VALUES); 
 8001806:	f7ff be15 	b.w	8001434 <INTERRUPT_Init>
   }  
  return init_status;
} /**  End of function DAVE_Init */
 800180a:	bd08      	pop	{r3, pc}
 800180c:	20000c48 	.word	0x20000c48
 8001810:	200000d4 	.word	0x200000d4
 8001814:	20000000 	.word	0x20000000
 8001818:	2000006c 	.word	0x2000006c
 800181c:	200000a0 	.word	0x200000a0
 8001820:	20000174 	.word	0x20000174
 8001824:	080067e0 	.word	0x080067e0
 8001828:	0800681c 	.word	0x0800681c
 800182c:	20000014 	.word	0x20000014
 8001830:	08006770 	.word	0x08006770
 8001834:	080067f4 	.word	0x080067f4
 8001838:	08006808 	.word	0x08006808
 800183c:	2000003c 	.word	0x2000003c
 8001840:	08006774 	.word	0x08006774

08001844 <VADC0_C0_2_IRQHandler>:
 * VDD 3.3V => PIN 2 (LR)
 * GND => PIN 4 (UL)
 * 2.14 => PIN 5 (LL)
 */
void irAdcMeasurementPlate()
{
 8001844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	static uint16_t x = 0, y = 0;

	/* Read out conversion results */
    uint16_t result_Channel_A = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A_handle);
 8001846:	481b      	ldr	r0, [pc, #108]	; (80018b4 <VADC0_C0_2_IRQHandler+0x70>)
 8001848:	f7ff ff99 	bl	800177e <ADC_MEASUREMENT_GetResult>
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800184c:	491a      	ldr	r1, [pc, #104]	; (80018b8 <VADC0_C0_2_IRQHandler+0x74>)
 800184e:	680a      	ldr	r2, [r1, #0]

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001850:	7c0c      	ldrb	r4, [r1, #16]
 8001852:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001854:	4919      	ldr	r1, [pc, #100]	; (80018bc <VADC0_C0_2_IRQHandler+0x78>)
 8001856:	40e3      	lsrs	r3, r4

    if (DIGITAL_IO_GetInput(&DIGITAL_IO_PLATE_UR) == 1) {
 8001858:	f013 0f01 	tst.w	r3, #1
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <VADC0_C0_2_IRQHandler+0x7c>)
 800185e:	d00a      	beq.n	8001876 <VADC0_C0_2_IRQHandler+0x32>
    	x = result_Channel_A;
 8001860:	8008      	strh	r0, [r1, #0]

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8001862:	7c18      	ldrb	r0, [r3, #16]
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800186a:	fa03 f000 	lsl.w	r0, r3, r0
 800186e:	40a3      	lsls	r3, r4
 8001870:	6048      	str	r0, [r1, #4]
 8001872:	6053      	str	r3, [r2, #4]
 8001874:	e01b      	b.n	80018ae <VADC0_C0_2_IRQHandler+0x6a>
 8001876:	7c1e      	ldrb	r6, [r3, #16]
 8001878:	681d      	ldr	r5, [r3, #0]
 800187a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800187e:	fa03 f606 	lsl.w	r6, r3, r6
 8001882:	40a3      	lsls	r3, r4
 8001884:	606e      	str	r6, [r5, #4]
 8001886:	6053      	str	r3, [r2, #4]
    	/* Swap x and y axis on the panel */
        DIGITAL_IO_ToggleOutput(&DIGITAL_IO_PLATE_LL);
        DIGITAL_IO_ToggleOutput(&DIGITAL_IO_PLATE_UR);
        
        /* minimal value is checked*/
        x -= 1500;
 8001888:	880a      	ldrh	r2, [r1, #0]
 800188a:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800188e:	b292      	uxth	r2, r2
 8001890:	800a      	strh	r2, [r1, #0]
        y -= 1500;
 8001892:	f2a0 53dc 	subw	r3, r0, #1500	; 0x5dc
 8001896:	490b      	ldr	r1, [pc, #44]	; (80018c4 <VADC0_C0_2_IRQHandler+0x80>)
 8001898:	b29b      	uxth	r3, r3
 800189a:	800b      	strh	r3, [r1, #0]
        /* Transmit the x and y position via UART */
        const int BUFFSZ = 12;
        uint8_t buff[BUFFSZ];

        /* Message data format */
        sprintf((char*)buff, "$%04d %04d!", x, y);
 800189c:	a801      	add	r0, sp, #4
 800189e:	490a      	ldr	r1, [pc, #40]	; (80018c8 <VADC0_C0_2_IRQHandler+0x84>)
 80018a0:	f000 fcfa 	bl	8002298 <sprintf>

        UART_Transmit(&UART_0, buff, BUFFSZ);
 80018a4:	4809      	ldr	r0, [pc, #36]	; (80018cc <VADC0_C0_2_IRQHandler+0x88>)
 80018a6:	a901      	add	r1, sp, #4
 80018a8:	220c      	movs	r2, #12
 80018aa:	f7ff fb7a 	bl	8000fa2 <UART_Transmit>
    }
}
 80018ae:	b004      	add	sp, #16
 80018b0:	bd70      	pop	{r4, r5, r6, pc}
 80018b2:	bf00      	nop
 80018b4:	20000190 	.word	0x20000190
 80018b8:	0800681c 	.word	0x0800681c
 80018bc:	20000c50 	.word	0x20000c50
 80018c0:	080067e0 	.word	0x080067e0
 80018c4:	20000c52 	.word	0x20000c52
 80018c8:	08006860 	.word	0x08006860
 80018cc:	20000000 	.word	0x20000000

080018d0 <CCU42_1_IRQHandler>:

/**
 * Interrupt routine for Timer_Plate_Scan.
 * This handler starts the measurement of the plate.
 */
void irTimerPlateScan() {
 80018d0:	b508      	push	{r3, lr}
	ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 80018d2:	4804      	ldr	r0, [pc, #16]	; (80018e4 <CCU42_1_IRQHandler+0x14>)
 80018d4:	f7ff ff4a 	bl	800176c <ADC_MEASUREMENT_StartConversion>
	TIMER_ClearEvent(&TIMER_PLATE_SCAN);
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <CCU42_1_IRQHandler+0x18>)
}
 80018da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * Interrupt routine for Timer_Plate_Scan.
 * This handler starts the measurement of the plate.
 */
void irTimerPlateScan() {
	ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
	TIMER_ClearEvent(&TIMER_PLATE_SCAN);
 80018de:	f7ff bcc5 	b.w	800126c <TIMER_ClearEvent>
 80018e2:	bf00      	nop
 80018e4:	20000174 	.word	0x20000174
 80018e8:	20000014 	.word	0x20000014

080018ec <main>:
#include "globals.h"
#include "uartCom.h"

int main(void)
{
 80018ec:	b508      	push	{r3, lr}
  DAVE_STATUS_t status;

  status = DAVE_Init();
 80018ee:	f7ff ff51 	bl	8001794 <DAVE_Init>
  servos.servo0 = MOTOR_0_NEUTRAL;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <main+0x24>)
 80018f4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80018f8:	601a      	str	r2, [r3, #0]
  servos.servo1 = MOTOR_1_NEUTRAL;
 80018fa:	605a      	str	r2, [r3, #4]
  servos.servo2 = MOTOR_2_NEUTRAL;
 80018fc:	609a      	str	r2, [r3, #8]

  if(status != DAVE_STATUS_SUCCESS)
 80018fe:	b100      	cbz	r0, 8001902 <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8001900:	e7fe      	b.n	8001900 <main+0x14>
  }

  /* Start listening for UART */
  UART_StartReceiveIRQ(&UART_0, read_data, BUFFERSIZE);
 8001902:	4804      	ldr	r0, [pc, #16]	; (8001914 <main+0x28>)
 8001904:	4904      	ldr	r1, [pc, #16]	; (8001918 <main+0x2c>)
 8001906:	220d      	movs	r2, #13
 8001908:	f7ff fb82 	bl	8001010 <UART_StartReceiveIRQ>

  while(1U)
  {
  }
 800190c:	e7fe      	b.n	800190c <main+0x20>
 800190e:	bf00      	nop
 8001910:	20000ca8 	.word	0x20000ca8
 8001914:	20000000 	.word	0x20000000
 8001918:	20000c98 	.word	0x20000c98

0800191c <CCU43_1_IRQHandler>:
}

void irTimerSetPwmValues() {
 800191c:	b510      	push	{r4, lr}
	 PWM_SetDutyCycle(&PWM_MOTOR_0, MOTOR_0_NEUTRAL);
	 PWM_SetDutyCycle(&PWM_MOTOR_1, MOTOR_1_NEUTRAL);
	 PWM_SetDutyCycle(&PWM_MOTOR_2, MOTOR_2_NEUTRAL);
*/

	 PWM_SetDutyCycle(&PWM_MOTOR_0, servos.servo0);
 800191e:	4c09      	ldr	r4, [pc, #36]	; (8001944 <CCU43_1_IRQHandler+0x28>)
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <CCU43_1_IRQHandler+0x2c>)
 8001922:	6821      	ldr	r1, [r4, #0]
 8001924:	f7ff fd7e 	bl	8001424 <PWM_SetDutyCycle>
	 PWM_SetDutyCycle(&PWM_MOTOR_1, servos.servo1);
 8001928:	6861      	ldr	r1, [r4, #4]
 800192a:	4808      	ldr	r0, [pc, #32]	; (800194c <CCU43_1_IRQHandler+0x30>)
 800192c:	f7ff fd7a 	bl	8001424 <PWM_SetDutyCycle>
	 PWM_SetDutyCycle(&PWM_MOTOR_2, servos.servo2);
 8001930:	68a1      	ldr	r1, [r4, #8]
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <CCU43_1_IRQHandler+0x34>)
 8001934:	f7ff fd76 	bl	8001424 <PWM_SetDutyCycle>

	 TIMER_ClearEvent(&TIMER_SET_PWM_VALUES);
 8001938:	4806      	ldr	r0, [pc, #24]	; (8001954 <CCU43_1_IRQHandler+0x38>)
}
 800193a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	 PWM_SetDutyCycle(&PWM_MOTOR_0, servos.servo0);
	 PWM_SetDutyCycle(&PWM_MOTOR_1, servos.servo1);
	 PWM_SetDutyCycle(&PWM_MOTOR_2, servos.servo2);

	 TIMER_ClearEvent(&TIMER_SET_PWM_VALUES);
 800193e:	f7ff bc95 	b.w	800126c <TIMER_ClearEvent>
 8001942:	bf00      	nop
 8001944:	20000ca8 	.word	0x20000ca8
 8001948:	200000d4 	.word	0x200000d4
 800194c:	2000006c 	.word	0x2000006c
 8001950:	200000a0 	.word	0x200000a0
 8001954:	2000003c 	.word	0x2000003c

08001958 <crc_ccitt>:
/**
 * This function calculates the crc check. It uses a CRC-Table for faster lookups.
 *
 * @param data the input data bytes from which a crc has to be calculated.
 */
uint16_t crc_ccitt(uint8_t *data, size_t dataSize) {
 8001958:	b510      	push	{r4, lr}
 800195a:	4401      	add	r1, r0
	size_t count;
	unsigned int temp, crc = 0xffff;;
 800195c:	f64f 72ff 	movw	r2, #65535	; 0xffff

	for (count = 0; count < dataSize; ++count)
 8001960:	4288      	cmp	r0, r1
 8001962:	d00a      	beq.n	800197a <crc_ccitt+0x22>
	{
		temp = (data[count] ^ (crc >> 8)) & 0xff;
 8001964:	f810 3b01 	ldrb.w	r3, [r0], #1
		crc = crc_table[temp] ^ (crc << 8);
 8001968:	4c05      	ldr	r4, [pc, #20]	; (8001980 <crc_ccitt+0x28>)
	size_t count;
	unsigned int temp, crc = 0xffff;;

	for (count = 0; count < dataSize; ++count)
	{
		temp = (data[count] ^ (crc >> 8)) & 0xff;
 800196a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 800196e:	b2db      	uxtb	r3, r3
		crc = crc_table[temp] ^ (crc << 8);
 8001970:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001974:	ea83 2202 	eor.w	r2, r3, r2, lsl #8
 8001978:	e7f2      	b.n	8001960 <crc_ccitt+0x8>
	}
	return (unsigned short)(crc ^ 0);
}
 800197a:	b290      	uxth	r0, r2
 800197c:	bd10      	pop	{r4, pc}
 800197e:	bf00      	nop
 8001980:	200001b0 	.word	0x200001b0

08001984 <decodeData>:

/**
 * Function that decodes the received data, and stores it in the global servo struct.
 */
void decodeData()
{
 8001984:	b530      	push	{r4, r5, lr}
 8001986:	4c44      	ldr	r4, [pc, #272]	; (8001a98 <decodeData+0x114>)
 8001988:	b085      	sub	sp, #20
	int asfd = 0;
	uint8_t servo0[SERVO_DATA_LENGTH+1];
	uint8_t servo1[SERVO_DATA_LENGTH+1];
	uint8_t servo2[SERVO_DATA_LENGTH+1];

	memset(servo0, 0, SERVO_DATA_LENGTH + 1);
 800198a:	2200      	movs	r2, #0
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	9201      	str	r2, [sp, #4]
	memset(servo1, 0, SERVO_DATA_LENGTH + 1);
 8001990:	9202      	str	r2, [sp, #8]
	memset(servo2, 0, SERVO_DATA_LENGTH + 1);
 8001992:	9203      	str	r2, [sp, #12]
	static uint8_t data[BUFFERSIZE-2];
	uint8_t isFinished = 0;

	for (int j = 0; j < BUFFERSIZE; j++)
	{
		if(read_data[j] == '\0') {
 8001994:	4941      	ldr	r1, [pc, #260]	; (8001a9c <decodeData+0x118>)
 8001996:	5c51      	ldrb	r1, [r2, r1]
 8001998:	2900      	cmp	r1, #0
 800199a:	d07a      	beq.n	8001a92 <decodeData+0x10e>
			break;
		}
		if(i > BUFFERSIZE) {
			i = 0;
 800199c:	2b0e      	cmp	r3, #14
 800199e:	bfa8      	it	ge
 80019a0:	2300      	movge	r3, #0
		}
		if (read_data[j]== '$')
 80019a2:	2924      	cmp	r1, #36	; 0x24
 80019a4:	d008      	beq.n	80019b8 <decodeData+0x34>
		{
			i = 0;
		}
		else if (read_data[j]=='!')
 80019a6:	2921      	cmp	r1, #33	; 0x21
 80019a8:	d102      	bne.n	80019b0 <decodeData+0x2c>
		{
			if(i == BUFFERSIZE - 2) {
 80019aa:	2b0b      	cmp	r3, #11
 80019ac:	d105      	bne.n	80019ba <decodeData+0x36>
 80019ae:	e008      	b.n	80019c2 <decodeData+0x3e>
				break;
			}
		}
		else
		{
			data[i] = read_data[j];
 80019b0:	483b      	ldr	r0, [pc, #236]	; (8001aa0 <decodeData+0x11c>)
 80019b2:	54c1      	strb	r1, [r0, r3]
			i++;
 80019b4:	3301      	adds	r3, #1
 80019b6:	e000      	b.n	80019ba <decodeData+0x36>
		if(i > BUFFERSIZE) {
			i = 0;
		}
		if (read_data[j]== '$')
		{
			i = 0;
 80019b8:	2300      	movs	r3, #0

	static int i = 0;
	static uint8_t data[BUFFERSIZE-2];
	uint8_t isFinished = 0;

	for (int j = 0; j < BUFFERSIZE; j++)
 80019ba:	3201      	adds	r2, #1
 80019bc:	2a0d      	cmp	r2, #13
 80019be:	d1e9      	bne.n	8001994 <decodeData+0x10>
 80019c0:	e067      	b.n	8001a92 <decodeData+0x10e>
	}


	if (isFinished == 1)
	{
		unsigned short crc16 = crc_ccitt(data, BUFFERSIZE - 4);
 80019c2:	4837      	ldr	r0, [pc, #220]	; (8001aa0 <decodeData+0x11c>)
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	2109      	movs	r1, #9
 80019c8:	f7ff ffc6 	bl	8001958 <crc_ccitt>
		if((crc16 >> 8) == '!' || (crc16 >> 8) == '$' || (crc16) == '!' || (crc16) == '$'){
 80019cc:	f3c0 230f 	ubfx	r3, r0, #8, #16
 80019d0:	2b21      	cmp	r3, #33	; 0x21
 80019d2:	d007      	beq.n	80019e4 <decodeData+0x60>
 80019d4:	2b24      	cmp	r3, #36	; 0x24
 80019d6:	d005      	beq.n	80019e4 <decodeData+0x60>
 80019d8:	2821      	cmp	r0, #33	; 0x21
 80019da:	d003      	beq.n	80019e4 <decodeData+0x60>
			crc16 = 0;
 80019dc:	2824      	cmp	r0, #36	; 0x24
 80019de:	bf08      	it	eq
 80019e0:	2000      	moveq	r0, #0
 80019e2:	e000      	b.n	80019e6 <decodeData+0x62>
 80019e4:	2000      	movs	r0, #0
		}
		if(data[BUFFERSIZE-3] == (uint8_t)(crc16 >> 8) && data[BUFFERSIZE - 4] == (uint8_t)(crc16)){
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <decodeData+0x11c>)
 80019e8:	7a99      	ldrb	r1, [r3, #10]
 80019ea:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80019ee:	4291      	cmp	r1, r2
 80019f0:	d147      	bne.n	8001a82 <decodeData+0xfe>
 80019f2:	7a5a      	ldrb	r2, [r3, #9]
 80019f4:	b2c0      	uxtb	r0, r0
 80019f6:	4282      	cmp	r2, r0
 80019f8:	d143      	bne.n	8001a82 <decodeData+0xfe>
 80019fa:	2200      	movs	r2, #0
			for(int k = 0; k < BUFFERSIZE - 2; k++)
			{
				if(k < SERVO_DATA_LENGTH)
 80019fc:	2a02      	cmp	r2, #2
 80019fe:	dc03      	bgt.n	8001a08 <decodeData+0x84>
				{
					servo0[k] = data[k];
 8001a00:	a901      	add	r1, sp, #4
 8001a02:	7818      	ldrb	r0, [r3, #0]
 8001a04:	5450      	strb	r0, [r2, r1]
 8001a06:	e009      	b.n	8001a1c <decodeData+0x98>
 8001a08:	1ed1      	subs	r1, r2, #3
				} else if((k < (2 * SERVO_DATA_LENGTH))  && k >=SERVO_DATA_LENGTH)
 8001a0a:	2902      	cmp	r1, #2
				{
					servo1[k - SERVO_DATA_LENGTH] = data[k];
 8001a0c:	a904      	add	r1, sp, #16
 8001a0e:	4411      	add	r1, r2
 8001a10:	7818      	ldrb	r0, [r3, #0]
 8001a12:	bf94      	ite	ls
 8001a14:	f801 0c0b 	strbls.w	r0, [r1, #-11]
				} else {
					servo2[k - 2 * SERVO_DATA_LENGTH] = data[k];
 8001a18:	f801 0c0a 	strbhi.w	r0, [r1, #-10]
		unsigned short crc16 = crc_ccitt(data, BUFFERSIZE - 4);
		if((crc16 >> 8) == '!' || (crc16 >> 8) == '$' || (crc16) == '!' || (crc16) == '$'){
			crc16 = 0;
		}
		if(data[BUFFERSIZE-3] == (uint8_t)(crc16 >> 8) && data[BUFFERSIZE - 4] == (uint8_t)(crc16)){
			for(int k = 0; k < BUFFERSIZE - 2; k++)
 8001a1c:	3201      	adds	r2, #1
 8001a1e:	2a0b      	cmp	r2, #11
 8001a20:	f103 0301 	add.w	r3, r3, #1
 8001a24:	d1ea      	bne.n	80019fc <decodeData+0x78>
					servo1[k - SERVO_DATA_LENGTH] = data[k];
				} else {
					servo2[k - 2 * SERVO_DATA_LENGTH] = data[k];
				}
			}
			if (atoi((char*)servo0) != 399) {
 8001a26:	a801      	add	r0, sp, #4
 8001a28:	f000 fb1c 	bl	8002064 <atoi>
 8001a2c:	f240 138f 	movw	r3, #399	; 0x18f
 8001a30:	4298      	cmp	r0, r3
 8001a32:	4d1c      	ldr	r5, [pc, #112]	; (8001aa4 <decodeData+0x120>)
 8001a34:	d011      	beq.n	8001a5a <decodeData+0xd6>
				servos.servo0 = atoi((char*)servo0)+SERVO_OFFSET+MOTOR_0_OFFSET -1;
 8001a36:	a801      	add	r0, sp, #4
 8001a38:	f000 fb14 	bl	8002064 <atoi>
 8001a3c:	f500 70f2 	add.w	r0, r0, #484	; 0x1e4
 8001a40:	6028      	str	r0, [r5, #0]
				servos.servo1 = atoi((char*)servo1)+SERVO_OFFSET+MOTOR_1_OFFSET + 2;
 8001a42:	a802      	add	r0, sp, #8
 8001a44:	f000 fb0e 	bl	8002064 <atoi>
 8001a48:	f500 70e7 	add.w	r0, r0, #462	; 0x1ce
 8001a4c:	6068      	str	r0, [r5, #4]
				servos.servo2 = atoi((char*)servo2)+SERVO_OFFSET+MOTOR_2_OFFSET + 22;
 8001a4e:	a803      	add	r0, sp, #12
 8001a50:	f000 fb08 	bl	8002064 <atoi>
 8001a54:	f200 10dd 	addw	r0, r0, #477	; 0x1dd
 8001a58:	60a8      	str	r0, [r5, #8]
			}

			servos.servo0 = atoi((char*)servo0)+SERVO_OFFSET+MOTOR_0_OFFSET;
 8001a5a:	a801      	add	r0, sp, #4
 8001a5c:	f000 fb02 	bl	8002064 <atoi>
 8001a60:	f200 10e5 	addw	r0, r0, #485	; 0x1e5
 8001a64:	6028      	str	r0, [r5, #0]
			servos.servo1 = atoi((char*)servo1)+SERVO_OFFSET+MOTOR_1_OFFSET;
 8001a66:	a802      	add	r0, sp, #8
 8001a68:	f000 fafc 	bl	8002064 <atoi>
 8001a6c:	f500 70e6 	add.w	r0, r0, #460	; 0x1cc
 8001a70:	6068      	str	r0, [r5, #4]
			servos.servo2 = atoi((char*)servo2)+SERVO_OFFSET+MOTOR_2_OFFSET;
 8001a72:	a803      	add	r0, sp, #12
 8001a74:	f000 faf6 	bl	8002064 <atoi>
 8001a78:	f200 10c7 	addw	r0, r0, #455	; 0x1c7
 8001a7c:	60a8      	str	r0, [r5, #8]
			isFinished = 0;
			i=0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e007      	b.n	8001a92 <decodeData+0x10e>
		} else {
			servos.servo0 = atoi((char*)servo0)+SERVO_OFFSET+MOTOR_0_OFFSET + asfd;
 8001a82:	a801      	add	r0, sp, #4
 8001a84:	f000 faee 	bl	8002064 <atoi>
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <decodeData+0x120>)
 8001a8a:	f200 10e5 	addw	r0, r0, #485	; 0x1e5
 8001a8e:	6018      	str	r0, [r3, #0]
 8001a90:	e000      	b.n	8001a94 <decodeData+0x110>
 8001a92:	6023      	str	r3, [r4, #0]
			asfd++;
		}
	}
}
 8001a94:	b005      	add	sp, #20
 8001a96:	bd30      	pop	{r4, r5, pc}
 8001a98:	20000c54 	.word	0x20000c54
 8001a9c:	20000c98 	.word	0x20000c98
 8001aa0:	20000c58 	.word	0x20000c58
 8001aa4:	20000ca8 	.word	0x20000ca8

08001aa8 <irUartDataReceived>:
/**
 * Interrupt routine for UART receive.
 * This handler decodes the received message and than starts to listen for new messages again.
 */
void irUartDataReceived()
{
 8001aa8:	b508      	push	{r3, lr}
	decodeData();
 8001aaa:	f7ff ff6b 	bl	8001984 <decodeData>
	UART_StartReceiveIRQ(&UART_0, read_data, BUFFERSIZE);
 8001aae:	4803      	ldr	r0, [pc, #12]	; (8001abc <irUartDataReceived+0x14>)
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <irUartDataReceived+0x18>)
 8001ab2:	220d      	movs	r2, #13
}
 8001ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * This handler decodes the received message and than starts to listen for new messages again.
 */
void irUartDataReceived()
{
	decodeData();
	UART_StartReceiveIRQ(&UART_0, read_data, BUFFERSIZE);
 8001ab8:	f7ff baaa 	b.w	8001010 <UART_StartReceiveIRQ>
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000c98 	.word	0x20000c98

08001ac4 <uart_noise>:
}


/* Error handling callback functions */
void uart_noise() {
 8001ac4:	4770      	bx	lr

08001ac6 <uart_stop0>:
	XMC_DEBUG("DAVE APPs initialization failed\n");
}
void uart_stop0() {
 8001ac6:	4770      	bx	lr

08001ac8 <uart_stop1>:
	XMC_DEBUG("DAVE APPs initialization failed\n");
}
void uart_stop1() {
 8001ac8:	4770      	bx	lr

08001aca <uart_sync>:
	XMC_DEBUG("DAVE APPs initialization failed\n");
}
void uart_sync() {
 8001aca:	4770      	bx	lr

08001acc <__aeabi_uldivmod>:
 8001acc:	b94b      	cbnz	r3, 8001ae2 <__aeabi_uldivmod+0x16>
 8001ace:	b942      	cbnz	r2, 8001ae2 <__aeabi_uldivmod+0x16>
 8001ad0:	2900      	cmp	r1, #0
 8001ad2:	bf08      	it	eq
 8001ad4:	2800      	cmpeq	r0, #0
 8001ad6:	d002      	beq.n	8001ade <__aeabi_uldivmod+0x12>
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	4608      	mov	r0, r1
 8001ade:	f000 b83b 	b.w	8001b58 <__aeabi_idiv0>
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	46ec      	mov	ip, sp
 8001ae6:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aea:	f000 f81d 	bl	8001b28 <__gnu_uldivmod_helper>
 8001aee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001af2:	b002      	add	sp, #8
 8001af4:	bc0c      	pop	{r2, r3}
 8001af6:	4770      	bx	lr

08001af8 <__gnu_ldivmod_helper>:
 8001af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001afc:	9c06      	ldr	r4, [sp, #24]
 8001afe:	4615      	mov	r5, r2
 8001b00:	4606      	mov	r6, r0
 8001b02:	460f      	mov	r7, r1
 8001b04:	4698      	mov	r8, r3
 8001b06:	f000 f829 	bl	8001b5c <__divdi3>
 8001b0a:	fb05 f301 	mul.w	r3, r5, r1
 8001b0e:	fb00 3808 	mla	r8, r0, r8, r3
 8001b12:	fba5 2300 	umull	r2, r3, r5, r0
 8001b16:	1ab2      	subs	r2, r6, r2
 8001b18:	4443      	add	r3, r8
 8001b1a:	eb67 0303 	sbc.w	r3, r7, r3
 8001b1e:	e9c4 2300 	strd	r2, r3, [r4]
 8001b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b26:	bf00      	nop

08001b28 <__gnu_uldivmod_helper>:
 8001b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b2c:	9c06      	ldr	r4, [sp, #24]
 8001b2e:	4690      	mov	r8, r2
 8001b30:	4606      	mov	r6, r0
 8001b32:	460f      	mov	r7, r1
 8001b34:	461d      	mov	r5, r3
 8001b36:	f000 f95f 	bl	8001df8 <__udivdi3>
 8001b3a:	fb00 f505 	mul.w	r5, r0, r5
 8001b3e:	fba0 2308 	umull	r2, r3, r0, r8
 8001b42:	fb08 5501 	mla	r5, r8, r1, r5
 8001b46:	1ab2      	subs	r2, r6, r2
 8001b48:	442b      	add	r3, r5
 8001b4a:	eb67 0303 	sbc.w	r3, r7, r3
 8001b4e:	e9c4 2300 	strd	r2, r3, [r4]
 8001b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b56:	bf00      	nop

08001b58 <__aeabi_idiv0>:
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <__divdi3>:
 8001b5c:	2900      	cmp	r1, #0
 8001b5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b62:	f2c0 80a6 	blt.w	8001cb2 <__divdi3+0x156>
 8001b66:	2600      	movs	r6, #0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f2c0 809c 	blt.w	8001ca6 <__divdi3+0x14a>
 8001b6e:	4688      	mov	r8, r1
 8001b70:	4694      	mov	ip, r2
 8001b72:	469e      	mov	lr, r3
 8001b74:	4615      	mov	r5, r2
 8001b76:	4604      	mov	r4, r0
 8001b78:	460f      	mov	r7, r1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d13d      	bne.n	8001bfa <__divdi3+0x9e>
 8001b7e:	428a      	cmp	r2, r1
 8001b80:	d959      	bls.n	8001c36 <__divdi3+0xda>
 8001b82:	fab2 f382 	clz	r3, r2
 8001b86:	b13b      	cbz	r3, 8001b98 <__divdi3+0x3c>
 8001b88:	f1c3 0220 	rsb	r2, r3, #32
 8001b8c:	409f      	lsls	r7, r3
 8001b8e:	fa20 f202 	lsr.w	r2, r0, r2
 8001b92:	409d      	lsls	r5, r3
 8001b94:	4317      	orrs	r7, r2
 8001b96:	409c      	lsls	r4, r3
 8001b98:	0c29      	lsrs	r1, r5, #16
 8001b9a:	0c22      	lsrs	r2, r4, #16
 8001b9c:	fbb7 fef1 	udiv	lr, r7, r1
 8001ba0:	b2a8      	uxth	r0, r5
 8001ba2:	fb01 771e 	mls	r7, r1, lr, r7
 8001ba6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8001baa:	fb00 f30e 	mul.w	r3, r0, lr
 8001bae:	42bb      	cmp	r3, r7
 8001bb0:	d90a      	bls.n	8001bc8 <__divdi3+0x6c>
 8001bb2:	197f      	adds	r7, r7, r5
 8001bb4:	f10e 32ff 	add.w	r2, lr, #4294967295
 8001bb8:	f080 8105 	bcs.w	8001dc6 <__divdi3+0x26a>
 8001bbc:	42bb      	cmp	r3, r7
 8001bbe:	f240 8102 	bls.w	8001dc6 <__divdi3+0x26a>
 8001bc2:	f1ae 0e02 	sub.w	lr, lr, #2
 8001bc6:	442f      	add	r7, r5
 8001bc8:	1aff      	subs	r7, r7, r3
 8001bca:	b2a4      	uxth	r4, r4
 8001bcc:	fbb7 f3f1 	udiv	r3, r7, r1
 8001bd0:	fb01 7713 	mls	r7, r1, r3, r7
 8001bd4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8001bd8:	fb00 f003 	mul.w	r0, r0, r3
 8001bdc:	42b8      	cmp	r0, r7
 8001bde:	d908      	bls.n	8001bf2 <__divdi3+0x96>
 8001be0:	197f      	adds	r7, r7, r5
 8001be2:	f103 32ff 	add.w	r2, r3, #4294967295
 8001be6:	f080 80f0 	bcs.w	8001dca <__divdi3+0x26e>
 8001bea:	42b8      	cmp	r0, r7
 8001bec:	f240 80ed 	bls.w	8001dca <__divdi3+0x26e>
 8001bf0:	3b02      	subs	r3, #2
 8001bf2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	e003      	b.n	8001c02 <__divdi3+0xa6>
 8001bfa:	428b      	cmp	r3, r1
 8001bfc:	d90f      	bls.n	8001c1e <__divdi3+0xc2>
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4613      	mov	r3, r2
 8001c02:	1c34      	adds	r4, r6, #0
 8001c04:	bf18      	it	ne
 8001c06:	2401      	movne	r4, #1
 8001c08:	4260      	negs	r0, r4
 8001c0a:	f04f 0500 	mov.w	r5, #0
 8001c0e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8001c12:	4058      	eors	r0, r3
 8001c14:	4051      	eors	r1, r2
 8001c16:	1900      	adds	r0, r0, r4
 8001c18:	4169      	adcs	r1, r5
 8001c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c1e:	fab3 f283 	clz	r2, r3
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	f040 8086 	bne.w	8001d34 <__divdi3+0x1d8>
 8001c28:	428b      	cmp	r3, r1
 8001c2a:	d302      	bcc.n	8001c32 <__divdi3+0xd6>
 8001c2c:	4584      	cmp	ip, r0
 8001c2e:	f200 80db 	bhi.w	8001de8 <__divdi3+0x28c>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e7e5      	b.n	8001c02 <__divdi3+0xa6>
 8001c36:	b912      	cbnz	r2, 8001c3e <__divdi3+0xe2>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	fbb3 f5f2 	udiv	r5, r3, r2
 8001c3e:	fab5 f085 	clz	r0, r5
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d13b      	bne.n	8001cbe <__divdi3+0x162>
 8001c46:	1b78      	subs	r0, r7, r5
 8001c48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001c4c:	fa1f fc85 	uxth.w	ip, r5
 8001c50:	2201      	movs	r2, #1
 8001c52:	fbb0 f8fe 	udiv	r8, r0, lr
 8001c56:	0c21      	lsrs	r1, r4, #16
 8001c58:	fb0e 0718 	mls	r7, lr, r8, r0
 8001c5c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8001c60:	fb0c f308 	mul.w	r3, ip, r8
 8001c64:	42bb      	cmp	r3, r7
 8001c66:	d907      	bls.n	8001c78 <__divdi3+0x11c>
 8001c68:	197f      	adds	r7, r7, r5
 8001c6a:	f108 31ff 	add.w	r1, r8, #4294967295
 8001c6e:	d202      	bcs.n	8001c76 <__divdi3+0x11a>
 8001c70:	42bb      	cmp	r3, r7
 8001c72:	f200 80bd 	bhi.w	8001df0 <__divdi3+0x294>
 8001c76:	4688      	mov	r8, r1
 8001c78:	1aff      	subs	r7, r7, r3
 8001c7a:	b2a4      	uxth	r4, r4
 8001c7c:	fbb7 f3fe 	udiv	r3, r7, lr
 8001c80:	fb0e 7713 	mls	r7, lr, r3, r7
 8001c84:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8001c88:	fb0c fc03 	mul.w	ip, ip, r3
 8001c8c:	45bc      	cmp	ip, r7
 8001c8e:	d907      	bls.n	8001ca0 <__divdi3+0x144>
 8001c90:	197f      	adds	r7, r7, r5
 8001c92:	f103 31ff 	add.w	r1, r3, #4294967295
 8001c96:	d202      	bcs.n	8001c9e <__divdi3+0x142>
 8001c98:	45bc      	cmp	ip, r7
 8001c9a:	f200 80a7 	bhi.w	8001dec <__divdi3+0x290>
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001ca4:	e7ad      	b.n	8001c02 <__divdi3+0xa6>
 8001ca6:	4252      	negs	r2, r2
 8001ca8:	ea6f 0606 	mvn.w	r6, r6
 8001cac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001cb0:	e75d      	b.n	8001b6e <__divdi3+0x12>
 8001cb2:	4240      	negs	r0, r0
 8001cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001cb8:	f04f 36ff 	mov.w	r6, #4294967295
 8001cbc:	e754      	b.n	8001b68 <__divdi3+0xc>
 8001cbe:	f1c0 0220 	rsb	r2, r0, #32
 8001cc2:	fa24 f102 	lsr.w	r1, r4, r2
 8001cc6:	fa07 f300 	lsl.w	r3, r7, r0
 8001cca:	4085      	lsls	r5, r0
 8001ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001cd0:	40d7      	lsrs	r7, r2
 8001cd2:	4319      	orrs	r1, r3
 8001cd4:	fbb7 f2fe 	udiv	r2, r7, lr
 8001cd8:	0c0b      	lsrs	r3, r1, #16
 8001cda:	fb0e 7712 	mls	r7, lr, r2, r7
 8001cde:	fa1f fc85 	uxth.w	ip, r5
 8001ce2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8001ce6:	fb0c f702 	mul.w	r7, ip, r2
 8001cea:	429f      	cmp	r7, r3
 8001cec:	fa04 f400 	lsl.w	r4, r4, r0
 8001cf0:	d907      	bls.n	8001d02 <__divdi3+0x1a6>
 8001cf2:	195b      	adds	r3, r3, r5
 8001cf4:	f102 30ff 	add.w	r0, r2, #4294967295
 8001cf8:	d274      	bcs.n	8001de4 <__divdi3+0x288>
 8001cfa:	429f      	cmp	r7, r3
 8001cfc:	d972      	bls.n	8001de4 <__divdi3+0x288>
 8001cfe:	3a02      	subs	r2, #2
 8001d00:	442b      	add	r3, r5
 8001d02:	1bdf      	subs	r7, r3, r7
 8001d04:	b289      	uxth	r1, r1
 8001d06:	fbb7 f8fe 	udiv	r8, r7, lr
 8001d0a:	fb0e 7318 	mls	r3, lr, r8, r7
 8001d0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001d12:	fb0c f708 	mul.w	r7, ip, r8
 8001d16:	429f      	cmp	r7, r3
 8001d18:	d908      	bls.n	8001d2c <__divdi3+0x1d0>
 8001d1a:	195b      	adds	r3, r3, r5
 8001d1c:	f108 31ff 	add.w	r1, r8, #4294967295
 8001d20:	d25c      	bcs.n	8001ddc <__divdi3+0x280>
 8001d22:	429f      	cmp	r7, r3
 8001d24:	d95a      	bls.n	8001ddc <__divdi3+0x280>
 8001d26:	f1a8 0802 	sub.w	r8, r8, #2
 8001d2a:	442b      	add	r3, r5
 8001d2c:	1bd8      	subs	r0, r3, r7
 8001d2e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8001d32:	e78e      	b.n	8001c52 <__divdi3+0xf6>
 8001d34:	f1c2 0320 	rsb	r3, r2, #32
 8001d38:	fa2c f103 	lsr.w	r1, ip, r3
 8001d3c:	fa0e fe02 	lsl.w	lr, lr, r2
 8001d40:	fa20 f703 	lsr.w	r7, r0, r3
 8001d44:	ea41 0e0e 	orr.w	lr, r1, lr
 8001d48:	fa08 f002 	lsl.w	r0, r8, r2
 8001d4c:	fa28 f103 	lsr.w	r1, r8, r3
 8001d50:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8001d54:	4338      	orrs	r0, r7
 8001d56:	fbb1 f8f5 	udiv	r8, r1, r5
 8001d5a:	0c03      	lsrs	r3, r0, #16
 8001d5c:	fb05 1118 	mls	r1, r5, r8, r1
 8001d60:	fa1f f78e 	uxth.w	r7, lr
 8001d64:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001d68:	fb07 f308 	mul.w	r3, r7, r8
 8001d6c:	428b      	cmp	r3, r1
 8001d6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001d72:	d909      	bls.n	8001d88 <__divdi3+0x22c>
 8001d74:	eb11 010e 	adds.w	r1, r1, lr
 8001d78:	f108 39ff 	add.w	r9, r8, #4294967295
 8001d7c:	d230      	bcs.n	8001de0 <__divdi3+0x284>
 8001d7e:	428b      	cmp	r3, r1
 8001d80:	d92e      	bls.n	8001de0 <__divdi3+0x284>
 8001d82:	f1a8 0802 	sub.w	r8, r8, #2
 8001d86:	4471      	add	r1, lr
 8001d88:	1ac9      	subs	r1, r1, r3
 8001d8a:	b280      	uxth	r0, r0
 8001d8c:	fbb1 f3f5 	udiv	r3, r1, r5
 8001d90:	fb05 1113 	mls	r1, r5, r3, r1
 8001d94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001d98:	fb07 f703 	mul.w	r7, r7, r3
 8001d9c:	428f      	cmp	r7, r1
 8001d9e:	d908      	bls.n	8001db2 <__divdi3+0x256>
 8001da0:	eb11 010e 	adds.w	r1, r1, lr
 8001da4:	f103 30ff 	add.w	r0, r3, #4294967295
 8001da8:	d216      	bcs.n	8001dd8 <__divdi3+0x27c>
 8001daa:	428f      	cmp	r7, r1
 8001dac:	d914      	bls.n	8001dd8 <__divdi3+0x27c>
 8001dae:	3b02      	subs	r3, #2
 8001db0:	4471      	add	r1, lr
 8001db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001db6:	1bc9      	subs	r1, r1, r7
 8001db8:	fba3 890c 	umull	r8, r9, r3, ip
 8001dbc:	4549      	cmp	r1, r9
 8001dbe:	d309      	bcc.n	8001dd4 <__divdi3+0x278>
 8001dc0:	d005      	beq.n	8001dce <__divdi3+0x272>
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	e71d      	b.n	8001c02 <__divdi3+0xa6>
 8001dc6:	4696      	mov	lr, r2
 8001dc8:	e6fe      	b.n	8001bc8 <__divdi3+0x6c>
 8001dca:	4613      	mov	r3, r2
 8001dcc:	e711      	b.n	8001bf2 <__divdi3+0x96>
 8001dce:	4094      	lsls	r4, r2
 8001dd0:	4544      	cmp	r4, r8
 8001dd2:	d2f6      	bcs.n	8001dc2 <__divdi3+0x266>
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	e7f4      	b.n	8001dc2 <__divdi3+0x266>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	e7ea      	b.n	8001db2 <__divdi3+0x256>
 8001ddc:	4688      	mov	r8, r1
 8001dde:	e7a5      	b.n	8001d2c <__divdi3+0x1d0>
 8001de0:	46c8      	mov	r8, r9
 8001de2:	e7d1      	b.n	8001d88 <__divdi3+0x22c>
 8001de4:	4602      	mov	r2, r0
 8001de6:	e78c      	b.n	8001d02 <__divdi3+0x1a6>
 8001de8:	4613      	mov	r3, r2
 8001dea:	e70a      	b.n	8001c02 <__divdi3+0xa6>
 8001dec:	3b02      	subs	r3, #2
 8001dee:	e757      	b.n	8001ca0 <__divdi3+0x144>
 8001df0:	f1a8 0802 	sub.w	r8, r8, #2
 8001df4:	442f      	add	r7, r5
 8001df6:	e73f      	b.n	8001c78 <__divdi3+0x11c>

08001df8 <__udivdi3>:
 8001df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d144      	bne.n	8001e8a <__udivdi3+0x92>
 8001e00:	428a      	cmp	r2, r1
 8001e02:	4615      	mov	r5, r2
 8001e04:	4604      	mov	r4, r0
 8001e06:	d94f      	bls.n	8001ea8 <__udivdi3+0xb0>
 8001e08:	fab2 f782 	clz	r7, r2
 8001e0c:	460e      	mov	r6, r1
 8001e0e:	b14f      	cbz	r7, 8001e24 <__udivdi3+0x2c>
 8001e10:	f1c7 0320 	rsb	r3, r7, #32
 8001e14:	40b9      	lsls	r1, r7
 8001e16:	fa20 f603 	lsr.w	r6, r0, r3
 8001e1a:	fa02 f507 	lsl.w	r5, r2, r7
 8001e1e:	430e      	orrs	r6, r1
 8001e20:	fa00 f407 	lsl.w	r4, r0, r7
 8001e24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001e28:	0c23      	lsrs	r3, r4, #16
 8001e2a:	fbb6 f0fe 	udiv	r0, r6, lr
 8001e2e:	b2af      	uxth	r7, r5
 8001e30:	fb0e 6110 	mls	r1, lr, r0, r6
 8001e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001e38:	fb07 f100 	mul.w	r1, r7, r0
 8001e3c:	4299      	cmp	r1, r3
 8001e3e:	d909      	bls.n	8001e54 <__udivdi3+0x5c>
 8001e40:	195b      	adds	r3, r3, r5
 8001e42:	f100 32ff 	add.w	r2, r0, #4294967295
 8001e46:	f080 80ec 	bcs.w	8002022 <__udivdi3+0x22a>
 8001e4a:	4299      	cmp	r1, r3
 8001e4c:	f240 80e9 	bls.w	8002022 <__udivdi3+0x22a>
 8001e50:	3802      	subs	r0, #2
 8001e52:	442b      	add	r3, r5
 8001e54:	1a5a      	subs	r2, r3, r1
 8001e56:	b2a4      	uxth	r4, r4
 8001e58:	fbb2 f3fe 	udiv	r3, r2, lr
 8001e5c:	fb0e 2213 	mls	r2, lr, r3, r2
 8001e60:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8001e64:	fb07 f703 	mul.w	r7, r7, r3
 8001e68:	4297      	cmp	r7, r2
 8001e6a:	d908      	bls.n	8001e7e <__udivdi3+0x86>
 8001e6c:	1952      	adds	r2, r2, r5
 8001e6e:	f103 31ff 	add.w	r1, r3, #4294967295
 8001e72:	f080 80d8 	bcs.w	8002026 <__udivdi3+0x22e>
 8001e76:	4297      	cmp	r7, r2
 8001e78:	f240 80d5 	bls.w	8002026 <__udivdi3+0x22e>
 8001e7c:	3b02      	subs	r3, #2
 8001e7e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001e82:	2600      	movs	r6, #0
 8001e84:	4631      	mov	r1, r6
 8001e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e8a:	428b      	cmp	r3, r1
 8001e8c:	d847      	bhi.n	8001f1e <__udivdi3+0x126>
 8001e8e:	fab3 f683 	clz	r6, r3
 8001e92:	2e00      	cmp	r6, #0
 8001e94:	d148      	bne.n	8001f28 <__udivdi3+0x130>
 8001e96:	428b      	cmp	r3, r1
 8001e98:	d302      	bcc.n	8001ea0 <__udivdi3+0xa8>
 8001e9a:	4282      	cmp	r2, r0
 8001e9c:	f200 80cd 	bhi.w	800203a <__udivdi3+0x242>
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	4631      	mov	r1, r6
 8001ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ea8:	b912      	cbnz	r2, 8001eb0 <__udivdi3+0xb8>
 8001eaa:	2501      	movs	r5, #1
 8001eac:	fbb5 f5f2 	udiv	r5, r5, r2
 8001eb0:	fab5 f885 	clz	r8, r5
 8001eb4:	f1b8 0f00 	cmp.w	r8, #0
 8001eb8:	d177      	bne.n	8001faa <__udivdi3+0x1b2>
 8001eba:	1b4a      	subs	r2, r1, r5
 8001ebc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001ec0:	b2af      	uxth	r7, r5
 8001ec2:	2601      	movs	r6, #1
 8001ec4:	fbb2 f0fe 	udiv	r0, r2, lr
 8001ec8:	0c23      	lsrs	r3, r4, #16
 8001eca:	fb0e 2110 	mls	r1, lr, r0, r2
 8001ece:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001ed2:	fb07 f300 	mul.w	r3, r7, r0
 8001ed6:	428b      	cmp	r3, r1
 8001ed8:	d907      	bls.n	8001eea <__udivdi3+0xf2>
 8001eda:	1949      	adds	r1, r1, r5
 8001edc:	f100 32ff 	add.w	r2, r0, #4294967295
 8001ee0:	d202      	bcs.n	8001ee8 <__udivdi3+0xf0>
 8001ee2:	428b      	cmp	r3, r1
 8001ee4:	f200 80ba 	bhi.w	800205c <__udivdi3+0x264>
 8001ee8:	4610      	mov	r0, r2
 8001eea:	1ac9      	subs	r1, r1, r3
 8001eec:	b2a4      	uxth	r4, r4
 8001eee:	fbb1 f3fe 	udiv	r3, r1, lr
 8001ef2:	fb0e 1113 	mls	r1, lr, r3, r1
 8001ef6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001efa:	fb07 f703 	mul.w	r7, r7, r3
 8001efe:	42a7      	cmp	r7, r4
 8001f00:	d908      	bls.n	8001f14 <__udivdi3+0x11c>
 8001f02:	1964      	adds	r4, r4, r5
 8001f04:	f103 32ff 	add.w	r2, r3, #4294967295
 8001f08:	f080 808f 	bcs.w	800202a <__udivdi3+0x232>
 8001f0c:	42a7      	cmp	r7, r4
 8001f0e:	f240 808c 	bls.w	800202a <__udivdi3+0x232>
 8001f12:	3b02      	subs	r3, #2
 8001f14:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001f18:	4631      	mov	r1, r6
 8001f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f1e:	2600      	movs	r6, #0
 8001f20:	4630      	mov	r0, r6
 8001f22:	4631      	mov	r1, r6
 8001f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f28:	f1c6 0420 	rsb	r4, r6, #32
 8001f2c:	fa22 f504 	lsr.w	r5, r2, r4
 8001f30:	40b3      	lsls	r3, r6
 8001f32:	432b      	orrs	r3, r5
 8001f34:	fa20 fc04 	lsr.w	ip, r0, r4
 8001f38:	fa01 f706 	lsl.w	r7, r1, r6
 8001f3c:	fa21 f504 	lsr.w	r5, r1, r4
 8001f40:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001f44:	ea4c 0707 	orr.w	r7, ip, r7
 8001f48:	fbb5 f8fe 	udiv	r8, r5, lr
 8001f4c:	0c39      	lsrs	r1, r7, #16
 8001f4e:	fb0e 5518 	mls	r5, lr, r8, r5
 8001f52:	fa1f fc83 	uxth.w	ip, r3
 8001f56:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8001f5a:	fb0c f108 	mul.w	r1, ip, r8
 8001f5e:	42a9      	cmp	r1, r5
 8001f60:	fa02 f206 	lsl.w	r2, r2, r6
 8001f64:	d904      	bls.n	8001f70 <__udivdi3+0x178>
 8001f66:	18ed      	adds	r5, r5, r3
 8001f68:	f108 34ff 	add.w	r4, r8, #4294967295
 8001f6c:	d367      	bcc.n	800203e <__udivdi3+0x246>
 8001f6e:	46a0      	mov	r8, r4
 8001f70:	1a6d      	subs	r5, r5, r1
 8001f72:	b2bf      	uxth	r7, r7
 8001f74:	fbb5 f4fe 	udiv	r4, r5, lr
 8001f78:	fb0e 5514 	mls	r5, lr, r4, r5
 8001f7c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001f80:	fb0c fc04 	mul.w	ip, ip, r4
 8001f84:	458c      	cmp	ip, r1
 8001f86:	d904      	bls.n	8001f92 <__udivdi3+0x19a>
 8001f88:	18c9      	adds	r1, r1, r3
 8001f8a:	f104 35ff 	add.w	r5, r4, #4294967295
 8001f8e:	d35c      	bcc.n	800204a <__udivdi3+0x252>
 8001f90:	462c      	mov	r4, r5
 8001f92:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8001f96:	ebcc 0101 	rsb	r1, ip, r1
 8001f9a:	fba4 2302 	umull	r2, r3, r4, r2
 8001f9e:	4299      	cmp	r1, r3
 8001fa0:	d348      	bcc.n	8002034 <__udivdi3+0x23c>
 8001fa2:	d044      	beq.n	800202e <__udivdi3+0x236>
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	2600      	movs	r6, #0
 8001fa8:	e76c      	b.n	8001e84 <__udivdi3+0x8c>
 8001faa:	f1c8 0420 	rsb	r4, r8, #32
 8001fae:	fa01 f308 	lsl.w	r3, r1, r8
 8001fb2:	fa05 f508 	lsl.w	r5, r5, r8
 8001fb6:	fa20 f704 	lsr.w	r7, r0, r4
 8001fba:	40e1      	lsrs	r1, r4
 8001fbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001fc0:	431f      	orrs	r7, r3
 8001fc2:	fbb1 f6fe 	udiv	r6, r1, lr
 8001fc6:	0c3a      	lsrs	r2, r7, #16
 8001fc8:	fb0e 1116 	mls	r1, lr, r6, r1
 8001fcc:	fa1f fc85 	uxth.w	ip, r5
 8001fd0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8001fd4:	fb0c f206 	mul.w	r2, ip, r6
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	fa00 f408 	lsl.w	r4, r0, r8
 8001fde:	d907      	bls.n	8001ff0 <__udivdi3+0x1f8>
 8001fe0:	195b      	adds	r3, r3, r5
 8001fe2:	f106 31ff 	add.w	r1, r6, #4294967295
 8001fe6:	d237      	bcs.n	8002058 <__udivdi3+0x260>
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d935      	bls.n	8002058 <__udivdi3+0x260>
 8001fec:	3e02      	subs	r6, #2
 8001fee:	442b      	add	r3, r5
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	b2bf      	uxth	r7, r7
 8001ff4:	fbb3 f0fe 	udiv	r0, r3, lr
 8001ff8:	fb0e 3310 	mls	r3, lr, r0, r3
 8001ffc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8002000:	fb0c f100 	mul.w	r1, ip, r0
 8002004:	4299      	cmp	r1, r3
 8002006:	d907      	bls.n	8002018 <__udivdi3+0x220>
 8002008:	195b      	adds	r3, r3, r5
 800200a:	f100 32ff 	add.w	r2, r0, #4294967295
 800200e:	d221      	bcs.n	8002054 <__udivdi3+0x25c>
 8002010:	4299      	cmp	r1, r3
 8002012:	d91f      	bls.n	8002054 <__udivdi3+0x25c>
 8002014:	3802      	subs	r0, #2
 8002016:	442b      	add	r3, r5
 8002018:	1a5a      	subs	r2, r3, r1
 800201a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800201e:	4667      	mov	r7, ip
 8002020:	e750      	b.n	8001ec4 <__udivdi3+0xcc>
 8002022:	4610      	mov	r0, r2
 8002024:	e716      	b.n	8001e54 <__udivdi3+0x5c>
 8002026:	460b      	mov	r3, r1
 8002028:	e729      	b.n	8001e7e <__udivdi3+0x86>
 800202a:	4613      	mov	r3, r2
 800202c:	e772      	b.n	8001f14 <__udivdi3+0x11c>
 800202e:	40b0      	lsls	r0, r6
 8002030:	4290      	cmp	r0, r2
 8002032:	d2b7      	bcs.n	8001fa4 <__udivdi3+0x1ac>
 8002034:	1e60      	subs	r0, r4, #1
 8002036:	2600      	movs	r6, #0
 8002038:	e724      	b.n	8001e84 <__udivdi3+0x8c>
 800203a:	4630      	mov	r0, r6
 800203c:	e722      	b.n	8001e84 <__udivdi3+0x8c>
 800203e:	42a9      	cmp	r1, r5
 8002040:	d995      	bls.n	8001f6e <__udivdi3+0x176>
 8002042:	f1a8 0802 	sub.w	r8, r8, #2
 8002046:	441d      	add	r5, r3
 8002048:	e792      	b.n	8001f70 <__udivdi3+0x178>
 800204a:	458c      	cmp	ip, r1
 800204c:	d9a0      	bls.n	8001f90 <__udivdi3+0x198>
 800204e:	3c02      	subs	r4, #2
 8002050:	4419      	add	r1, r3
 8002052:	e79e      	b.n	8001f92 <__udivdi3+0x19a>
 8002054:	4610      	mov	r0, r2
 8002056:	e7df      	b.n	8002018 <__udivdi3+0x220>
 8002058:	460e      	mov	r6, r1
 800205a:	e7c9      	b.n	8001ff0 <__udivdi3+0x1f8>
 800205c:	3802      	subs	r0, #2
 800205e:	4429      	add	r1, r5
 8002060:	e743      	b.n	8001eea <__udivdi3+0xf2>
 8002062:	bf00      	nop

08002064 <atoi>:
 8002064:	2100      	movs	r1, #0
 8002066:	220a      	movs	r2, #10
 8002068:	f000 b9ca 	b.w	8002400 <strtol>

0800206c <__errno>:
 800206c:	4b01      	ldr	r3, [pc, #4]	; (8002074 <__errno+0x8>)
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	200007d8 	.word	0x200007d8

08002078 <__libc_init_array>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	4e0f      	ldr	r6, [pc, #60]	; (80020b8 <__libc_init_array+0x40>)
 800207c:	4d0f      	ldr	r5, [pc, #60]	; (80020bc <__libc_init_array+0x44>)
 800207e:	1b76      	subs	r6, r6, r5
 8002080:	10b6      	asrs	r6, r6, #2
 8002082:	bf18      	it	ne
 8002084:	2400      	movne	r4, #0
 8002086:	d005      	beq.n	8002094 <__libc_init_array+0x1c>
 8002088:	3401      	adds	r4, #1
 800208a:	f855 3b04 	ldr.w	r3, [r5], #4
 800208e:	4798      	blx	r3
 8002090:	42a6      	cmp	r6, r4
 8002092:	d1f9      	bne.n	8002088 <__libc_init_array+0x10>
 8002094:	4e0a      	ldr	r6, [pc, #40]	; (80020c0 <__libc_init_array+0x48>)
 8002096:	4d0b      	ldr	r5, [pc, #44]	; (80020c4 <__libc_init_array+0x4c>)
 8002098:	1b76      	subs	r6, r6, r5
 800209a:	f7fe ff6f 	bl	8000f7c <_init>
 800209e:	10b6      	asrs	r6, r6, #2
 80020a0:	bf18      	it	ne
 80020a2:	2400      	movne	r4, #0
 80020a4:	d006      	beq.n	80020b4 <__libc_init_array+0x3c>
 80020a6:	3401      	adds	r4, #1
 80020a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ac:	4798      	blx	r3
 80020ae:	42a6      	cmp	r6, r4
 80020b0:	d1f9      	bne.n	80020a6 <__libc_init_array+0x2e>
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	bd70      	pop	{r4, r5, r6, pc}
 80020b6:	bf00      	nop
 80020b8:	20000c28 	.word	0x20000c28
 80020bc:	20000c28 	.word	0x20000c28
 80020c0:	20000c28 	.word	0x20000c28
 80020c4:	20000c28 	.word	0x20000c28

080020c8 <memcpy>:
 80020c8:	4684      	mov	ip, r0
 80020ca:	ea41 0300 	orr.w	r3, r1, r0
 80020ce:	f013 0303 	ands.w	r3, r3, #3
 80020d2:	d16d      	bne.n	80021b0 <memcpy+0xe8>
 80020d4:	3a40      	subs	r2, #64	; 0x40
 80020d6:	d341      	bcc.n	800215c <memcpy+0x94>
 80020d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80020dc:	f840 3b04 	str.w	r3, [r0], #4
 80020e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80020e4:	f840 3b04 	str.w	r3, [r0], #4
 80020e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80020ec:	f840 3b04 	str.w	r3, [r0], #4
 80020f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80020f4:	f840 3b04 	str.w	r3, [r0], #4
 80020f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80020fc:	f840 3b04 	str.w	r3, [r0], #4
 8002100:	f851 3b04 	ldr.w	r3, [r1], #4
 8002104:	f840 3b04 	str.w	r3, [r0], #4
 8002108:	f851 3b04 	ldr.w	r3, [r1], #4
 800210c:	f840 3b04 	str.w	r3, [r0], #4
 8002110:	f851 3b04 	ldr.w	r3, [r1], #4
 8002114:	f840 3b04 	str.w	r3, [r0], #4
 8002118:	f851 3b04 	ldr.w	r3, [r1], #4
 800211c:	f840 3b04 	str.w	r3, [r0], #4
 8002120:	f851 3b04 	ldr.w	r3, [r1], #4
 8002124:	f840 3b04 	str.w	r3, [r0], #4
 8002128:	f851 3b04 	ldr.w	r3, [r1], #4
 800212c:	f840 3b04 	str.w	r3, [r0], #4
 8002130:	f851 3b04 	ldr.w	r3, [r1], #4
 8002134:	f840 3b04 	str.w	r3, [r0], #4
 8002138:	f851 3b04 	ldr.w	r3, [r1], #4
 800213c:	f840 3b04 	str.w	r3, [r0], #4
 8002140:	f851 3b04 	ldr.w	r3, [r1], #4
 8002144:	f840 3b04 	str.w	r3, [r0], #4
 8002148:	f851 3b04 	ldr.w	r3, [r1], #4
 800214c:	f840 3b04 	str.w	r3, [r0], #4
 8002150:	f851 3b04 	ldr.w	r3, [r1], #4
 8002154:	f840 3b04 	str.w	r3, [r0], #4
 8002158:	3a40      	subs	r2, #64	; 0x40
 800215a:	d2bd      	bcs.n	80020d8 <memcpy+0x10>
 800215c:	3230      	adds	r2, #48	; 0x30
 800215e:	d311      	bcc.n	8002184 <memcpy+0xbc>
 8002160:	f851 3b04 	ldr.w	r3, [r1], #4
 8002164:	f840 3b04 	str.w	r3, [r0], #4
 8002168:	f851 3b04 	ldr.w	r3, [r1], #4
 800216c:	f840 3b04 	str.w	r3, [r0], #4
 8002170:	f851 3b04 	ldr.w	r3, [r1], #4
 8002174:	f840 3b04 	str.w	r3, [r0], #4
 8002178:	f851 3b04 	ldr.w	r3, [r1], #4
 800217c:	f840 3b04 	str.w	r3, [r0], #4
 8002180:	3a10      	subs	r2, #16
 8002182:	d2ed      	bcs.n	8002160 <memcpy+0x98>
 8002184:	320c      	adds	r2, #12
 8002186:	d305      	bcc.n	8002194 <memcpy+0xcc>
 8002188:	f851 3b04 	ldr.w	r3, [r1], #4
 800218c:	f840 3b04 	str.w	r3, [r0], #4
 8002190:	3a04      	subs	r2, #4
 8002192:	d2f9      	bcs.n	8002188 <memcpy+0xc0>
 8002194:	3204      	adds	r2, #4
 8002196:	d008      	beq.n	80021aa <memcpy+0xe2>
 8002198:	07d2      	lsls	r2, r2, #31
 800219a:	bf1c      	itt	ne
 800219c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80021a0:	f800 3b01 	strbne.w	r3, [r0], #1
 80021a4:	d301      	bcc.n	80021aa <memcpy+0xe2>
 80021a6:	880b      	ldrh	r3, [r1, #0]
 80021a8:	8003      	strh	r3, [r0, #0]
 80021aa:	4660      	mov	r0, ip
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	2a08      	cmp	r2, #8
 80021b2:	d313      	bcc.n	80021dc <memcpy+0x114>
 80021b4:	078b      	lsls	r3, r1, #30
 80021b6:	d08d      	beq.n	80020d4 <memcpy+0xc>
 80021b8:	f010 0303 	ands.w	r3, r0, #3
 80021bc:	d08a      	beq.n	80020d4 <memcpy+0xc>
 80021be:	f1c3 0304 	rsb	r3, r3, #4
 80021c2:	1ad2      	subs	r2, r2, r3
 80021c4:	07db      	lsls	r3, r3, #31
 80021c6:	bf1c      	itt	ne
 80021c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80021cc:	f800 3b01 	strbne.w	r3, [r0], #1
 80021d0:	d380      	bcc.n	80020d4 <memcpy+0xc>
 80021d2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80021d6:	f820 3b02 	strh.w	r3, [r0], #2
 80021da:	e77b      	b.n	80020d4 <memcpy+0xc>
 80021dc:	3a04      	subs	r2, #4
 80021de:	d3d9      	bcc.n	8002194 <memcpy+0xcc>
 80021e0:	3a01      	subs	r2, #1
 80021e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021e6:	f800 3b01 	strb.w	r3, [r0], #1
 80021ea:	d2f9      	bcs.n	80021e0 <memcpy+0x118>
 80021ec:	780b      	ldrb	r3, [r1, #0]
 80021ee:	7003      	strb	r3, [r0, #0]
 80021f0:	784b      	ldrb	r3, [r1, #1]
 80021f2:	7043      	strb	r3, [r0, #1]
 80021f4:	788b      	ldrb	r3, [r1, #2]
 80021f6:	7083      	strb	r3, [r0, #2]
 80021f8:	4660      	mov	r0, ip
 80021fa:	4770      	bx	lr

080021fc <memset>:
 80021fc:	b470      	push	{r4, r5, r6}
 80021fe:	0784      	lsls	r4, r0, #30
 8002200:	d046      	beq.n	8002290 <memset+0x94>
 8002202:	1e54      	subs	r4, r2, #1
 8002204:	2a00      	cmp	r2, #0
 8002206:	d041      	beq.n	800228c <memset+0x90>
 8002208:	b2cd      	uxtb	r5, r1
 800220a:	4603      	mov	r3, r0
 800220c:	e002      	b.n	8002214 <memset+0x18>
 800220e:	1e62      	subs	r2, r4, #1
 8002210:	b3e4      	cbz	r4, 800228c <memset+0x90>
 8002212:	4614      	mov	r4, r2
 8002214:	f803 5b01 	strb.w	r5, [r3], #1
 8002218:	079a      	lsls	r2, r3, #30
 800221a:	d1f8      	bne.n	800220e <memset+0x12>
 800221c:	2c03      	cmp	r4, #3
 800221e:	d92e      	bls.n	800227e <memset+0x82>
 8002220:	b2cd      	uxtb	r5, r1
 8002222:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002226:	2c0f      	cmp	r4, #15
 8002228:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800222c:	d919      	bls.n	8002262 <memset+0x66>
 800222e:	f103 0210 	add.w	r2, r3, #16
 8002232:	4626      	mov	r6, r4
 8002234:	3e10      	subs	r6, #16
 8002236:	2e0f      	cmp	r6, #15
 8002238:	f842 5c10 	str.w	r5, [r2, #-16]
 800223c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8002240:	f842 5c08 	str.w	r5, [r2, #-8]
 8002244:	f842 5c04 	str.w	r5, [r2, #-4]
 8002248:	f102 0210 	add.w	r2, r2, #16
 800224c:	d8f2      	bhi.n	8002234 <memset+0x38>
 800224e:	f1a4 0210 	sub.w	r2, r4, #16
 8002252:	f022 020f 	bic.w	r2, r2, #15
 8002256:	f004 040f 	and.w	r4, r4, #15
 800225a:	3210      	adds	r2, #16
 800225c:	2c03      	cmp	r4, #3
 800225e:	4413      	add	r3, r2
 8002260:	d90d      	bls.n	800227e <memset+0x82>
 8002262:	461e      	mov	r6, r3
 8002264:	4622      	mov	r2, r4
 8002266:	3a04      	subs	r2, #4
 8002268:	2a03      	cmp	r2, #3
 800226a:	f846 5b04 	str.w	r5, [r6], #4
 800226e:	d8fa      	bhi.n	8002266 <memset+0x6a>
 8002270:	1f22      	subs	r2, r4, #4
 8002272:	f022 0203 	bic.w	r2, r2, #3
 8002276:	3204      	adds	r2, #4
 8002278:	4413      	add	r3, r2
 800227a:	f004 0403 	and.w	r4, r4, #3
 800227e:	b12c      	cbz	r4, 800228c <memset+0x90>
 8002280:	b2c9      	uxtb	r1, r1
 8002282:	441c      	add	r4, r3
 8002284:	f803 1b01 	strb.w	r1, [r3], #1
 8002288:	42a3      	cmp	r3, r4
 800228a:	d1fb      	bne.n	8002284 <memset+0x88>
 800228c:	bc70      	pop	{r4, r5, r6}
 800228e:	4770      	bx	lr
 8002290:	4614      	mov	r4, r2
 8002292:	4603      	mov	r3, r0
 8002294:	e7c2      	b.n	800221c <memset+0x20>
 8002296:	bf00      	nop

08002298 <sprintf>:
 8002298:	b40e      	push	{r1, r2, r3}
 800229a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229c:	b09c      	sub	sp, #112	; 0x70
 800229e:	ab21      	add	r3, sp, #132	; 0x84
 80022a0:	490f      	ldr	r1, [pc, #60]	; (80022e0 <sprintf+0x48>)
 80022a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	4605      	mov	r5, r0
 80022aa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80022ae:	6808      	ldr	r0, [r1, #0]
 80022b0:	9502      	str	r5, [sp, #8]
 80022b2:	f44f 7702 	mov.w	r7, #520	; 0x208
 80022b6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80022ba:	a902      	add	r1, sp, #8
 80022bc:	9506      	str	r5, [sp, #24]
 80022be:	f8ad 7014 	strh.w	r7, [sp, #20]
 80022c2:	9404      	str	r4, [sp, #16]
 80022c4:	9407      	str	r4, [sp, #28]
 80022c6:	f8ad 6016 	strh.w	r6, [sp, #22]
 80022ca:	f000 f8a5 	bl	8002418 <_svfprintf_r>
 80022ce:	9b02      	ldr	r3, [sp, #8]
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	b01c      	add	sp, #112	; 0x70
 80022d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80022da:	b003      	add	sp, #12
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200007d8 	.word	0x200007d8

080022e4 <_strtol_r>:
 80022e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e8:	4c44      	ldr	r4, [pc, #272]	; (80023fc <_strtol_r+0x118>)
 80022ea:	4683      	mov	fp, r0
 80022ec:	460e      	mov	r6, r1
 80022ee:	f8d4 e000 	ldr.w	lr, [r4]
 80022f2:	e000      	b.n	80022f6 <_strtol_r+0x12>
 80022f4:	4626      	mov	r6, r4
 80022f6:	4634      	mov	r4, r6
 80022f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80022fc:	eb0e 0005 	add.w	r0, lr, r5
 8002300:	7840      	ldrb	r0, [r0, #1]
 8002302:	f000 0008 	and.w	r0, r0, #8
 8002306:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 800230a:	2800      	cmp	r0, #0
 800230c:	d1f2      	bne.n	80022f4 <_strtol_r+0x10>
 800230e:	2d2d      	cmp	r5, #45	; 0x2d
 8002310:	d04b      	beq.n	80023aa <_strtol_r+0xc6>
 8002312:	2d2b      	cmp	r5, #43	; 0x2b
 8002314:	bf04      	itt	eq
 8002316:	7875      	ldrbeq	r5, [r6, #1]
 8002318:	1cb4      	addeq	r4, r6, #2
 800231a:	b11b      	cbz	r3, 8002324 <_strtol_r+0x40>
 800231c:	2b10      	cmp	r3, #16
 800231e:	d060      	beq.n	80023e2 <_strtol_r+0xfe>
 8002320:	469a      	mov	sl, r3
 8002322:	e003      	b.n	800232c <_strtol_r+0x48>
 8002324:	2d30      	cmp	r5, #48	; 0x30
 8002326:	d054      	beq.n	80023d2 <_strtol_r+0xee>
 8002328:	230a      	movs	r3, #10
 800232a:	469a      	mov	sl, r3
 800232c:	f1b8 0f00 	cmp.w	r8, #0
 8002330:	bf14      	ite	ne
 8002332:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8002336:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800233a:	2700      	movs	r7, #0
 800233c:	fbb0 f9fa 	udiv	r9, r0, sl
 8002340:	46bc      	mov	ip, r7
 8002342:	fb0a 0019 	mls	r0, sl, r9, r0
 8002346:	e00c      	b.n	8002362 <_strtol_r+0x7e>
 8002348:	3d30      	subs	r5, #48	; 0x30
 800234a:	42ab      	cmp	r3, r5
 800234c:	dd19      	ble.n	8002382 <_strtol_r+0x9e>
 800234e:	1c7e      	adds	r6, r7, #1
 8002350:	d005      	beq.n	800235e <_strtol_r+0x7a>
 8002352:	45cc      	cmp	ip, r9
 8002354:	d824      	bhi.n	80023a0 <_strtol_r+0xbc>
 8002356:	d021      	beq.n	800239c <_strtol_r+0xb8>
 8002358:	fb0a 5c0c 	mla	ip, sl, ip, r5
 800235c:	2701      	movs	r7, #1
 800235e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002362:	eb0e 0605 	add.w	r6, lr, r5
 8002366:	7876      	ldrb	r6, [r6, #1]
 8002368:	f016 0f04 	tst.w	r6, #4
 800236c:	d1ec      	bne.n	8002348 <_strtol_r+0x64>
 800236e:	f016 0603 	ands.w	r6, r6, #3
 8002372:	d006      	beq.n	8002382 <_strtol_r+0x9e>
 8002374:	2e01      	cmp	r6, #1
 8002376:	bf0c      	ite	eq
 8002378:	2637      	moveq	r6, #55	; 0x37
 800237a:	2657      	movne	r6, #87	; 0x57
 800237c:	1bad      	subs	r5, r5, r6
 800237e:	42ab      	cmp	r3, r5
 8002380:	dce5      	bgt.n	800234e <_strtol_r+0x6a>
 8002382:	1c7b      	adds	r3, r7, #1
 8002384:	d016      	beq.n	80023b4 <_strtol_r+0xd0>
 8002386:	f1c8 0000 	rsb	r0, r8, #0
 800238a:	ea8c 0000 	eor.w	r0, ip, r0
 800238e:	4440      	add	r0, r8
 8002390:	b14a      	cbz	r2, 80023a6 <_strtol_r+0xc2>
 8002392:	b107      	cbz	r7, 8002396 <_strtol_r+0xb2>
 8002394:	1e61      	subs	r1, r4, #1
 8002396:	6011      	str	r1, [r2, #0]
 8002398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800239c:	4285      	cmp	r5, r0
 800239e:	dddb      	ble.n	8002358 <_strtol_r+0x74>
 80023a0:	f04f 37ff 	mov.w	r7, #4294967295
 80023a4:	e7db      	b.n	800235e <_strtol_r+0x7a>
 80023a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023aa:	1cb4      	adds	r4, r6, #2
 80023ac:	7875      	ldrb	r5, [r6, #1]
 80023ae:	f04f 0801 	mov.w	r8, #1
 80023b2:	e7b2      	b.n	800231a <_strtol_r+0x36>
 80023b4:	f1b8 0f00 	cmp.w	r8, #0
 80023b8:	f04f 0322 	mov.w	r3, #34	; 0x22
 80023bc:	bf14      	ite	ne
 80023be:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80023c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80023c6:	f8cb 3000 	str.w	r3, [fp]
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	d1e2      	bne.n	8002394 <_strtol_r+0xb0>
 80023ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d2:	7823      	ldrb	r3, [r4, #0]
 80023d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80023d8:	2b58      	cmp	r3, #88	; 0x58
 80023da:	d009      	beq.n	80023f0 <_strtol_r+0x10c>
 80023dc:	2308      	movs	r3, #8
 80023de:	469a      	mov	sl, r3
 80023e0:	e7a4      	b.n	800232c <_strtol_r+0x48>
 80023e2:	2d30      	cmp	r5, #48	; 0x30
 80023e4:	d19c      	bne.n	8002320 <_strtol_r+0x3c>
 80023e6:	7820      	ldrb	r0, [r4, #0]
 80023e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80023ec:	2858      	cmp	r0, #88	; 0x58
 80023ee:	d197      	bne.n	8002320 <_strtol_r+0x3c>
 80023f0:	f04f 0a10 	mov.w	sl, #16
 80023f4:	7865      	ldrb	r5, [r4, #1]
 80023f6:	4653      	mov	r3, sl
 80023f8:	3402      	adds	r4, #2
 80023fa:	e797      	b.n	800232c <_strtol_r+0x48>
 80023fc:	200007dc 	.word	0x200007dc

08002400 <strtol>:
 8002400:	b430      	push	{r4, r5}
 8002402:	4c04      	ldr	r4, [pc, #16]	; (8002414 <strtol+0x14>)
 8002404:	460d      	mov	r5, r1
 8002406:	4613      	mov	r3, r2
 8002408:	4601      	mov	r1, r0
 800240a:	462a      	mov	r2, r5
 800240c:	6820      	ldr	r0, [r4, #0]
 800240e:	bc30      	pop	{r4, r5}
 8002410:	f7ff bf68 	b.w	80022e4 <_strtol_r>
 8002414:	200007d8 	.word	0x200007d8

08002418 <_svfprintf_r>:
 8002418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241c:	b0c3      	sub	sp, #268	; 0x10c
 800241e:	4689      	mov	r9, r1
 8002420:	920a      	str	r2, [sp, #40]	; 0x28
 8002422:	930e      	str	r3, [sp, #56]	; 0x38
 8002424:	9008      	str	r0, [sp, #32]
 8002426:	f002 fa3f 	bl	80048a8 <_localeconv_r>
 800242a:	6803      	ldr	r3, [r0, #0]
 800242c:	9317      	str	r3, [sp, #92]	; 0x5c
 800242e:	4618      	mov	r0, r3
 8002430:	f003 f84c 	bl	80054cc <strlen>
 8002434:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002438:	9018      	str	r0, [sp, #96]	; 0x60
 800243a:	061a      	lsls	r2, r3, #24
 800243c:	d504      	bpl.n	8002448 <_svfprintf_r+0x30>
 800243e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f001 80a1 	beq.w	800358a <_svfprintf_r+0x1172>
 8002448:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80026b0 <_svfprintf_r+0x298>
 800244c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002450:	2300      	movs	r3, #0
 8002452:	af32      	add	r7, sp, #200	; 0xc8
 8002454:	9313      	str	r3, [sp, #76]	; 0x4c
 8002456:	9327      	str	r3, [sp, #156]	; 0x9c
 8002458:	9326      	str	r3, [sp, #152]	; 0x98
 800245a:	9316      	str	r3, [sp, #88]	; 0x58
 800245c:	9319      	str	r3, [sp, #100]	; 0x64
 800245e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002460:	9725      	str	r7, [sp, #148]	; 0x94
 8002462:	463c      	mov	r4, r7
 8002464:	464e      	mov	r6, r9
 8002466:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002468:	782b      	ldrb	r3, [r5, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80a9 	beq.w	80025c2 <_svfprintf_r+0x1aa>
 8002470:	2b25      	cmp	r3, #37	; 0x25
 8002472:	d102      	bne.n	800247a <_svfprintf_r+0x62>
 8002474:	e0a5      	b.n	80025c2 <_svfprintf_r+0x1aa>
 8002476:	2b25      	cmp	r3, #37	; 0x25
 8002478:	d003      	beq.n	8002482 <_svfprintf_r+0x6a>
 800247a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <_svfprintf_r+0x5e>
 8002482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002484:	1aeb      	subs	r3, r5, r3
 8002486:	b173      	cbz	r3, 80024a6 <_svfprintf_r+0x8e>
 8002488:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800248a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800248c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800248e:	6020      	str	r0, [r4, #0]
 8002490:	3201      	adds	r2, #1
 8002492:	4419      	add	r1, r3
 8002494:	2a07      	cmp	r2, #7
 8002496:	6063      	str	r3, [r4, #4]
 8002498:	9127      	str	r1, [sp, #156]	; 0x9c
 800249a:	9226      	str	r2, [sp, #152]	; 0x98
 800249c:	dc72      	bgt.n	8002584 <_svfprintf_r+0x16c>
 800249e:	3408      	adds	r4, #8
 80024a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80024a2:	441a      	add	r2, r3
 80024a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80024a6:	782b      	ldrb	r3, [r5, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 87c9 	beq.w	8003440 <_svfprintf_r+0x1028>
 80024ae:	2300      	movs	r3, #0
 80024b0:	1c69      	adds	r1, r5, #1
 80024b2:	786d      	ldrb	r5, [r5, #1]
 80024b4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80024b8:	461a      	mov	r2, r3
 80024ba:	930c      	str	r3, [sp, #48]	; 0x30
 80024bc:	9307      	str	r3, [sp, #28]
 80024be:	f04f 3aff 	mov.w	sl, #4294967295
 80024c2:	1c4b      	adds	r3, r1, #1
 80024c4:	f1a5 0120 	sub.w	r1, r5, #32
 80024c8:	2958      	cmp	r1, #88	; 0x58
 80024ca:	f200 83e4 	bhi.w	8002c96 <_svfprintf_r+0x87e>
 80024ce:	e8df f011 	tbh	[pc, r1, lsl #1]
 80024d2:	0277      	.short	0x0277
 80024d4:	03e203e2 	.word	0x03e203e2
 80024d8:	03e2037b 	.word	0x03e2037b
 80024dc:	03e203e2 	.word	0x03e203e2
 80024e0:	03e203e2 	.word	0x03e203e2
 80024e4:	02f703e2 	.word	0x02f703e2
 80024e8:	03e20214 	.word	0x03e20214
 80024ec:	021801fb 	.word	0x021801fb
 80024f0:	038203e2 	.word	0x038203e2
 80024f4:	02c102c1 	.word	0x02c102c1
 80024f8:	02c102c1 	.word	0x02c102c1
 80024fc:	02c102c1 	.word	0x02c102c1
 8002500:	02c102c1 	.word	0x02c102c1
 8002504:	03e202c1 	.word	0x03e202c1
 8002508:	03e203e2 	.word	0x03e203e2
 800250c:	03e203e2 	.word	0x03e203e2
 8002510:	03e203e2 	.word	0x03e203e2
 8002514:	03e203e2 	.word	0x03e203e2
 8002518:	02d003e2 	.word	0x02d003e2
 800251c:	03e20391 	.word	0x03e20391
 8002520:	03e20391 	.word	0x03e20391
 8002524:	03e203e2 	.word	0x03e203e2
 8002528:	037403e2 	.word	0x037403e2
 800252c:	03e203e2 	.word	0x03e203e2
 8002530:	03e2030c 	.word	0x03e2030c
 8002534:	03e203e2 	.word	0x03e203e2
 8002538:	03e203e2 	.word	0x03e203e2
 800253c:	03e2032a 	.word	0x03e2032a
 8002540:	034403e2 	.word	0x034403e2
 8002544:	03e203e2 	.word	0x03e203e2
 8002548:	03e203e2 	.word	0x03e203e2
 800254c:	03e203e2 	.word	0x03e203e2
 8002550:	03e203e2 	.word	0x03e203e2
 8002554:	03e203e2 	.word	0x03e203e2
 8002558:	0233035f 	.word	0x0233035f
 800255c:	03910391 	.word	0x03910391
 8002560:	03050391 	.word	0x03050391
 8002564:	03e20233 	.word	0x03e20233
 8002568:	02ed03e2 	.word	0x02ed03e2
 800256c:	028503e2 	.word	0x028503e2
 8002570:	03cb0202 	.word	0x03cb0202
 8002574:	03e2027e 	.word	0x03e2027e
 8002578:	03e20299 	.word	0x03e20299
 800257c:	03e2007a 	.word	0x03e2007a
 8002580:	025103e2 	.word	0x025103e2
 8002584:	9808      	ldr	r0, [sp, #32]
 8002586:	9307      	str	r3, [sp, #28]
 8002588:	4631      	mov	r1, r6
 800258a:	aa25      	add	r2, sp, #148	; 0x94
 800258c:	f002 ffcc 	bl	8005528 <__ssprint_r>
 8002590:	b950      	cbnz	r0, 80025a8 <_svfprintf_r+0x190>
 8002592:	463c      	mov	r4, r7
 8002594:	9b07      	ldr	r3, [sp, #28]
 8002596:	e783      	b.n	80024a0 <_svfprintf_r+0x88>
 8002598:	9808      	ldr	r0, [sp, #32]
 800259a:	4631      	mov	r1, r6
 800259c:	aa25      	add	r2, sp, #148	; 0x94
 800259e:	f002 ffc3 	bl	8005528 <__ssprint_r>
 80025a2:	2800      	cmp	r0, #0
 80025a4:	f000 818c 	beq.w	80028c0 <_svfprintf_r+0x4a8>
 80025a8:	46b1      	mov	r9, r6
 80025aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80025ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025b4:	bf18      	it	ne
 80025b6:	f04f 33ff 	movne.w	r3, #4294967295
 80025ba:	4618      	mov	r0, r3
 80025bc:	b043      	add	sp, #268	; 0x10c
 80025be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80025c4:	e76f      	b.n	80024a6 <_svfprintf_r+0x8e>
 80025c6:	930a      	str	r3, [sp, #40]	; 0x28
 80025c8:	9b07      	ldr	r3, [sp, #28]
 80025ca:	0698      	lsls	r0, r3, #26
 80025cc:	f140 82b4 	bpl.w	8002b38 <_svfprintf_r+0x720>
 80025d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025d2:	f103 0907 	add.w	r9, r3, #7
 80025d6:	f029 0307 	bic.w	r3, r9, #7
 80025da:	f103 0208 	add.w	r2, r3, #8
 80025de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80025e2:	920e      	str	r2, [sp, #56]	; 0x38
 80025e4:	2301      	movs	r3, #1
 80025e6:	f04f 0c00 	mov.w	ip, #0
 80025ea:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 80025ee:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80025f2:	f1ba 0f00 	cmp.w	sl, #0
 80025f6:	db03      	blt.n	8002600 <_svfprintf_r+0x1e8>
 80025f8:	9a07      	ldr	r2, [sp, #28]
 80025fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025fe:	9207      	str	r2, [sp, #28]
 8002600:	ea58 0209 	orrs.w	r2, r8, r9
 8002604:	f040 8357 	bne.w	8002cb6 <_svfprintf_r+0x89e>
 8002608:	f1ba 0f00 	cmp.w	sl, #0
 800260c:	f000 845c 	beq.w	8002ec8 <_svfprintf_r+0xab0>
 8002610:	2b01      	cmp	r3, #1
 8002612:	f000 835a 	beq.w	8002cca <_svfprintf_r+0x8b2>
 8002616:	2b02      	cmp	r3, #2
 8002618:	f000 849a 	beq.w	8002f50 <_svfprintf_r+0xb38>
 800261c:	4639      	mov	r1, r7
 800261e:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8002622:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 8002626:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 800262a:	f008 0307 	and.w	r3, r8, #7
 800262e:	4681      	mov	r9, r0
 8002630:	4690      	mov	r8, r2
 8002632:	3330      	adds	r3, #48	; 0x30
 8002634:	ea58 0209 	orrs.w	r2, r8, r9
 8002638:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800263c:	d1ef      	bne.n	800261e <_svfprintf_r+0x206>
 800263e:	9a07      	ldr	r2, [sp, #28]
 8002640:	9110      	str	r1, [sp, #64]	; 0x40
 8002642:	07d2      	lsls	r2, r2, #31
 8002644:	f100 856e 	bmi.w	8003124 <_svfprintf_r+0xd0c>
 8002648:	1a7b      	subs	r3, r7, r1
 800264a:	930d      	str	r3, [sp, #52]	; 0x34
 800264c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800264e:	4592      	cmp	sl, r2
 8002650:	4653      	mov	r3, sl
 8002652:	bfb8      	it	lt
 8002654:	4613      	movlt	r3, r2
 8002656:	9309      	str	r3, [sp, #36]	; 0x24
 8002658:	2300      	movs	r3, #0
 800265a:	9312      	str	r3, [sp, #72]	; 0x48
 800265c:	f1bc 0f00 	cmp.w	ip, #0
 8002660:	d002      	beq.n	8002668 <_svfprintf_r+0x250>
 8002662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002664:	3301      	adds	r3, #1
 8002666:	9309      	str	r3, [sp, #36]	; 0x24
 8002668:	9b07      	ldr	r3, [sp, #28]
 800266a:	f013 0302 	ands.w	r3, r3, #2
 800266e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002670:	d002      	beq.n	8002678 <_svfprintf_r+0x260>
 8002672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002674:	3302      	adds	r3, #2
 8002676:	9309      	str	r3, [sp, #36]	; 0x24
 8002678:	9b07      	ldr	r3, [sp, #28]
 800267a:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 800267e:	f040 8317 	bne.w	8002cb0 <_svfprintf_r+0x898>
 8002682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002686:	ebc2 0803 	rsb	r8, r2, r3
 800268a:	f1b8 0f00 	cmp.w	r8, #0
 800268e:	f340 830f 	ble.w	8002cb0 <_svfprintf_r+0x898>
 8002692:	f1b8 0f10 	cmp.w	r8, #16
 8002696:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8002698:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800269a:	f8df a01c 	ldr.w	sl, [pc, #28]	; 80026b8 <_svfprintf_r+0x2a0>
 800269e:	dd30      	ble.n	8002702 <_svfprintf_r+0x2ea>
 80026a0:	4653      	mov	r3, sl
 80026a2:	f04f 0b10 	mov.w	fp, #16
 80026a6:	46c2      	mov	sl, r8
 80026a8:	46a8      	mov	r8, r5
 80026aa:	461d      	mov	r5, r3
 80026ac:	e00d      	b.n	80026ca <_svfprintf_r+0x2b2>
 80026ae:	bf00      	nop
	...
 80026b8:	08006870 	.word	0x08006870
 80026bc:	f1aa 0a10 	sub.w	sl, sl, #16
 80026c0:	f1ba 0f10 	cmp.w	sl, #16
 80026c4:	f104 0408 	add.w	r4, r4, #8
 80026c8:	dd17      	ble.n	80026fa <_svfprintf_r+0x2e2>
 80026ca:	3201      	adds	r2, #1
 80026cc:	3110      	adds	r1, #16
 80026ce:	2a07      	cmp	r2, #7
 80026d0:	9127      	str	r1, [sp, #156]	; 0x9c
 80026d2:	9226      	str	r2, [sp, #152]	; 0x98
 80026d4:	e884 0820 	stmia.w	r4, {r5, fp}
 80026d8:	ddf0      	ble.n	80026bc <_svfprintf_r+0x2a4>
 80026da:	9808      	ldr	r0, [sp, #32]
 80026dc:	4631      	mov	r1, r6
 80026de:	aa25      	add	r2, sp, #148	; 0x94
 80026e0:	f002 ff22 	bl	8005528 <__ssprint_r>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	f47f af5f 	bne.w	80025a8 <_svfprintf_r+0x190>
 80026ea:	f1aa 0a10 	sub.w	sl, sl, #16
 80026ee:	f1ba 0f10 	cmp.w	sl, #16
 80026f2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80026f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80026f6:	463c      	mov	r4, r7
 80026f8:	dce7      	bgt.n	80026ca <_svfprintf_r+0x2b2>
 80026fa:	462b      	mov	r3, r5
 80026fc:	4645      	mov	r5, r8
 80026fe:	46d0      	mov	r8, sl
 8002700:	469a      	mov	sl, r3
 8002702:	3201      	adds	r2, #1
 8002704:	eb08 0b01 	add.w	fp, r8, r1
 8002708:	2a07      	cmp	r2, #7
 800270a:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 800270e:	9226      	str	r2, [sp, #152]	; 0x98
 8002710:	f8c4 a000 	str.w	sl, [r4]
 8002714:	f8c4 8004 	str.w	r8, [r4, #4]
 8002718:	f300 847e 	bgt.w	8003018 <_svfprintf_r+0xc00>
 800271c:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8002720:	3408      	adds	r4, #8
 8002722:	f1bc 0f00 	cmp.w	ip, #0
 8002726:	d00f      	beq.n	8002748 <_svfprintf_r+0x330>
 8002728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800272a:	3301      	adds	r3, #1
 800272c:	f10b 0b01 	add.w	fp, fp, #1
 8002730:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 8002734:	2201      	movs	r2, #1
 8002736:	2b07      	cmp	r3, #7
 8002738:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 800273c:	9326      	str	r3, [sp, #152]	; 0x98
 800273e:	e884 0006 	stmia.w	r4, {r1, r2}
 8002742:	f300 83ea 	bgt.w	8002f1a <_svfprintf_r+0xb02>
 8002746:	3408      	adds	r4, #8
 8002748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800274a:	b173      	cbz	r3, 800276a <_svfprintf_r+0x352>
 800274c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800274e:	3301      	adds	r3, #1
 8002750:	f10b 0b02 	add.w	fp, fp, #2
 8002754:	a91e      	add	r1, sp, #120	; 0x78
 8002756:	2202      	movs	r2, #2
 8002758:	2b07      	cmp	r3, #7
 800275a:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 800275e:	9326      	str	r3, [sp, #152]	; 0x98
 8002760:	e884 0006 	stmia.w	r4, {r1, r2}
 8002764:	f300 83cd 	bgt.w	8002f02 <_svfprintf_r+0xaea>
 8002768:	3408      	adds	r4, #8
 800276a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800276e:	f000 8315 	beq.w	8002d9c <_svfprintf_r+0x984>
 8002772:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002774:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002776:	ebc2 0a03 	rsb	sl, r2, r3
 800277a:	f1ba 0f00 	cmp.w	sl, #0
 800277e:	dd3c      	ble.n	80027fa <_svfprintf_r+0x3e2>
 8002780:	f1ba 0f10 	cmp.w	sl, #16
 8002784:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002786:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 8002bec <_svfprintf_r+0x7d4>
 800278a:	dd2b      	ble.n	80027e4 <_svfprintf_r+0x3cc>
 800278c:	4649      	mov	r1, r9
 800278e:	465b      	mov	r3, fp
 8002790:	46a9      	mov	r9, r5
 8002792:	f04f 0810 	mov.w	r8, #16
 8002796:	f8dd b020 	ldr.w	fp, [sp, #32]
 800279a:	460d      	mov	r5, r1
 800279c:	e006      	b.n	80027ac <_svfprintf_r+0x394>
 800279e:	f1aa 0a10 	sub.w	sl, sl, #16
 80027a2:	f1ba 0f10 	cmp.w	sl, #16
 80027a6:	f104 0408 	add.w	r4, r4, #8
 80027aa:	dd17      	ble.n	80027dc <_svfprintf_r+0x3c4>
 80027ac:	3201      	adds	r2, #1
 80027ae:	3310      	adds	r3, #16
 80027b0:	2a07      	cmp	r2, #7
 80027b2:	9327      	str	r3, [sp, #156]	; 0x9c
 80027b4:	9226      	str	r2, [sp, #152]	; 0x98
 80027b6:	e884 0120 	stmia.w	r4, {r5, r8}
 80027ba:	ddf0      	ble.n	800279e <_svfprintf_r+0x386>
 80027bc:	4658      	mov	r0, fp
 80027be:	4631      	mov	r1, r6
 80027c0:	aa25      	add	r2, sp, #148	; 0x94
 80027c2:	f002 feb1 	bl	8005528 <__ssprint_r>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	f47f aeee 	bne.w	80025a8 <_svfprintf_r+0x190>
 80027cc:	f1aa 0a10 	sub.w	sl, sl, #16
 80027d0:	f1ba 0f10 	cmp.w	sl, #16
 80027d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80027d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80027d8:	463c      	mov	r4, r7
 80027da:	dce7      	bgt.n	80027ac <_svfprintf_r+0x394>
 80027dc:	469b      	mov	fp, r3
 80027de:	462b      	mov	r3, r5
 80027e0:	464d      	mov	r5, r9
 80027e2:	4699      	mov	r9, r3
 80027e4:	3201      	adds	r2, #1
 80027e6:	44d3      	add	fp, sl
 80027e8:	2a07      	cmp	r2, #7
 80027ea:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80027ee:	9226      	str	r2, [sp, #152]	; 0x98
 80027f0:	e884 0600 	stmia.w	r4, {r9, sl}
 80027f4:	f300 8379 	bgt.w	8002eea <_svfprintf_r+0xad2>
 80027f8:	3408      	adds	r4, #8
 80027fa:	9b07      	ldr	r3, [sp, #28]
 80027fc:	05d9      	lsls	r1, r3, #23
 80027fe:	f100 8270 	bmi.w	8002ce2 <_svfprintf_r+0x8ca>
 8002802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002804:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002806:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002808:	6022      	str	r2, [r4, #0]
 800280a:	3301      	adds	r3, #1
 800280c:	448b      	add	fp, r1
 800280e:	2b07      	cmp	r3, #7
 8002810:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8002814:	6061      	str	r1, [r4, #4]
 8002816:	9326      	str	r3, [sp, #152]	; 0x98
 8002818:	f300 834a 	bgt.w	8002eb0 <_svfprintf_r+0xa98>
 800281c:	3408      	adds	r4, #8
 800281e:	9b07      	ldr	r3, [sp, #28]
 8002820:	075a      	lsls	r2, r3, #29
 8002822:	d541      	bpl.n	80028a8 <_svfprintf_r+0x490>
 8002824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002828:	1a9d      	subs	r5, r3, r2
 800282a:	2d00      	cmp	r5, #0
 800282c:	dd3c      	ble.n	80028a8 <_svfprintf_r+0x490>
 800282e:	2d10      	cmp	r5, #16
 8002830:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002832:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 8002bf0 <_svfprintf_r+0x7d8>
 8002836:	dd23      	ble.n	8002880 <_svfprintf_r+0x468>
 8002838:	f04f 0810 	mov.w	r8, #16
 800283c:	465a      	mov	r2, fp
 800283e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002842:	e004      	b.n	800284e <_svfprintf_r+0x436>
 8002844:	3d10      	subs	r5, #16
 8002846:	2d10      	cmp	r5, #16
 8002848:	f104 0408 	add.w	r4, r4, #8
 800284c:	dd17      	ble.n	800287e <_svfprintf_r+0x466>
 800284e:	3301      	adds	r3, #1
 8002850:	3210      	adds	r2, #16
 8002852:	2b07      	cmp	r3, #7
 8002854:	9227      	str	r2, [sp, #156]	; 0x9c
 8002856:	9326      	str	r3, [sp, #152]	; 0x98
 8002858:	f8c4 a000 	str.w	sl, [r4]
 800285c:	f8c4 8004 	str.w	r8, [r4, #4]
 8002860:	ddf0      	ble.n	8002844 <_svfprintf_r+0x42c>
 8002862:	4648      	mov	r0, r9
 8002864:	4631      	mov	r1, r6
 8002866:	aa25      	add	r2, sp, #148	; 0x94
 8002868:	f002 fe5e 	bl	8005528 <__ssprint_r>
 800286c:	2800      	cmp	r0, #0
 800286e:	f47f ae9b 	bne.w	80025a8 <_svfprintf_r+0x190>
 8002872:	3d10      	subs	r5, #16
 8002874:	2d10      	cmp	r5, #16
 8002876:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8002878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800287a:	463c      	mov	r4, r7
 800287c:	dce7      	bgt.n	800284e <_svfprintf_r+0x436>
 800287e:	4693      	mov	fp, r2
 8002880:	3301      	adds	r3, #1
 8002882:	44ab      	add	fp, r5
 8002884:	2b07      	cmp	r3, #7
 8002886:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 800288a:	9326      	str	r3, [sp, #152]	; 0x98
 800288c:	f8c4 a000 	str.w	sl, [r4]
 8002890:	6065      	str	r5, [r4, #4]
 8002892:	dd09      	ble.n	80028a8 <_svfprintf_r+0x490>
 8002894:	9808      	ldr	r0, [sp, #32]
 8002896:	4631      	mov	r1, r6
 8002898:	aa25      	add	r2, sp, #148	; 0x94
 800289a:	f002 fe45 	bl	8005528 <__ssprint_r>
 800289e:	2800      	cmp	r0, #0
 80028a0:	f47f ae82 	bne.w	80025a8 <_svfprintf_r+0x190>
 80028a4:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80028a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80028ae:	428a      	cmp	r2, r1
 80028b0:	bfac      	ite	ge
 80028b2:	189b      	addge	r3, r3, r2
 80028b4:	185b      	addlt	r3, r3, r1
 80028b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80028b8:	f1bb 0f00 	cmp.w	fp, #0
 80028bc:	f47f ae6c 	bne.w	8002598 <_svfprintf_r+0x180>
 80028c0:	2300      	movs	r3, #0
 80028c2:	9326      	str	r3, [sp, #152]	; 0x98
 80028c4:	463c      	mov	r4, r7
 80028c6:	e5ce      	b.n	8002466 <_svfprintf_r+0x4e>
 80028c8:	4619      	mov	r1, r3
 80028ca:	9807      	ldr	r0, [sp, #28]
 80028cc:	781d      	ldrb	r5, [r3, #0]
 80028ce:	f040 0004 	orr.w	r0, r0, #4
 80028d2:	9007      	str	r0, [sp, #28]
 80028d4:	e5f5      	b.n	80024c2 <_svfprintf_r+0xaa>
 80028d6:	930a      	str	r3, [sp, #40]	; 0x28
 80028d8:	9b07      	ldr	r3, [sp, #28]
 80028da:	f013 0320 	ands.w	r3, r3, #32
 80028de:	f000 810e 	beq.w	8002afe <_svfprintf_r+0x6e6>
 80028e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028e4:	f103 0907 	add.w	r9, r3, #7
 80028e8:	f029 0307 	bic.w	r3, r9, #7
 80028ec:	f103 0208 	add.w	r2, r3, #8
 80028f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80028f4:	920e      	str	r2, [sp, #56]	; 0x38
 80028f6:	2300      	movs	r3, #0
 80028f8:	e675      	b.n	80025e6 <_svfprintf_r+0x1ce>
 80028fa:	781d      	ldrb	r5, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	222b      	movs	r2, #43	; 0x2b
 8002900:	e5df      	b.n	80024c2 <_svfprintf_r+0xaa>
 8002902:	781d      	ldrb	r5, [r3, #0]
 8002904:	2d2a      	cmp	r5, #42	; 0x2a
 8002906:	f103 0101 	add.w	r1, r3, #1
 800290a:	f000 87ba 	beq.w	8003882 <_svfprintf_r+0x146a>
 800290e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8002912:	2809      	cmp	r0, #9
 8002914:	460b      	mov	r3, r1
 8002916:	f04f 0a00 	mov.w	sl, #0
 800291a:	f63f add3 	bhi.w	80024c4 <_svfprintf_r+0xac>
 800291e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8002922:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8002926:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 800292a:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800292e:	2809      	cmp	r0, #9
 8002930:	d9f5      	bls.n	800291e <_svfprintf_r+0x506>
 8002932:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 8002936:	e5c5      	b.n	80024c4 <_svfprintf_r+0xac>
 8002938:	930a      	str	r3, [sp, #40]	; 0x28
 800293a:	9b07      	ldr	r3, [sp, #28]
 800293c:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8002940:	069b      	lsls	r3, r3, #26
 8002942:	f140 80a1 	bpl.w	8002a88 <_svfprintf_r+0x670>
 8002946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002948:	f103 0907 	add.w	r9, r3, #7
 800294c:	f029 0907 	bic.w	r9, r9, #7
 8002950:	e9d9 2300 	ldrd	r2, r3, [r9]
 8002954:	f109 0108 	add.w	r1, r9, #8
 8002958:	910e      	str	r1, [sp, #56]	; 0x38
 800295a:	4690      	mov	r8, r2
 800295c:	4699      	mov	r9, r3
 800295e:	2a00      	cmp	r2, #0
 8002960:	f173 0300 	sbcs.w	r3, r3, #0
 8002964:	f2c0 840e 	blt.w	8003184 <_svfprintf_r+0xd6c>
 8002968:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 800296c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8002970:	2301      	movs	r3, #1
 8002972:	e63e      	b.n	80025f2 <_svfprintf_r+0x1da>
 8002974:	930a      	str	r3, [sp, #40]	; 0x28
 8002976:	4b9b      	ldr	r3, [pc, #620]	; (8002be4 <_svfprintf_r+0x7cc>)
 8002978:	9316      	str	r3, [sp, #88]	; 0x58
 800297a:	9b07      	ldr	r3, [sp, #28]
 800297c:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8002980:	069b      	lsls	r3, r3, #26
 8002982:	f140 80f3 	bpl.w	8002b6c <_svfprintf_r+0x754>
 8002986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002988:	f103 0907 	add.w	r9, r3, #7
 800298c:	f029 0307 	bic.w	r3, r9, #7
 8002990:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002994:	f103 0208 	add.w	r2, r3, #8
 8002998:	920e      	str	r2, [sp, #56]	; 0x38
 800299a:	9b07      	ldr	r3, [sp, #28]
 800299c:	07d9      	lsls	r1, r3, #31
 800299e:	f140 80f5 	bpl.w	8002b8c <_svfprintf_r+0x774>
 80029a2:	ea58 0309 	orrs.w	r3, r8, r9
 80029a6:	f000 80f1 	beq.w	8002b8c <_svfprintf_r+0x774>
 80029aa:	9a07      	ldr	r2, [sp, #28]
 80029ac:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
 80029b0:	2330      	movs	r3, #48	; 0x30
 80029b2:	f042 0202 	orr.w	r2, r2, #2
 80029b6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80029ba:	9207      	str	r2, [sp, #28]
 80029bc:	2302      	movs	r3, #2
 80029be:	e612      	b.n	80025e6 <_svfprintf_r+0x1ce>
 80029c0:	781d      	ldrb	r5, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	2a00      	cmp	r2, #0
 80029c6:	f47f ad7c 	bne.w	80024c2 <_svfprintf_r+0xaa>
 80029ca:	2220      	movs	r2, #32
 80029cc:	e579      	b.n	80024c2 <_svfprintf_r+0xaa>
 80029ce:	9907      	ldr	r1, [sp, #28]
 80029d0:	f041 0120 	orr.w	r1, r1, #32
 80029d4:	9107      	str	r1, [sp, #28]
 80029d6:	781d      	ldrb	r5, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	e572      	b.n	80024c2 <_svfprintf_r+0xaa>
 80029dc:	930a      	str	r3, [sp, #40]	; 0x28
 80029de:	9b07      	ldr	r3, [sp, #28]
 80029e0:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80029e4:	069a      	lsls	r2, r3, #26
 80029e6:	f140 84ae 	bpl.w	8003346 <_svfprintf_r+0xf2e>
 80029ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029ee:	ea4f 79e1 	mov.w	r9, r1, asr #31
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4688      	mov	r8, r1
 80029f8:	3204      	adds	r2, #4
 80029fa:	4649      	mov	r1, r9
 80029fc:	920e      	str	r2, [sp, #56]	; 0x38
 80029fe:	e9c3 0100 	strd	r0, r1, [r3]
 8002a02:	e530      	b.n	8002466 <_svfprintf_r+0x4e>
 8002a04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a06:	930a      	str	r3, [sp, #40]	; 0x28
 8002a08:	6813      	ldr	r3, [r2, #0]
 8002a0a:	9310      	str	r3, [sp, #64]	; 0x40
 8002a0c:	f04f 0b00 	mov.w	fp, #0
 8002a10:	f88d b077 	strb.w	fp, [sp, #119]	; 0x77
 8002a14:	f102 0904 	add.w	r9, r2, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8648 	beq.w	80036ae <_svfprintf_r+0x1296>
 8002a1e:	f1ba 0f00 	cmp.w	sl, #0
 8002a22:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002a24:	f2c0 85f6 	blt.w	8003614 <_svfprintf_r+0x11fc>
 8002a28:	4659      	mov	r1, fp
 8002a2a:	4652      	mov	r2, sl
 8002a2c:	f002 f9ce 	bl	8004dcc <memchr>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	f000 8679 	beq.w	8003728 <_svfprintf_r+0x1310>
 8002a36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a38:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8002a3c:	1ac3      	subs	r3, r0, r3
 8002a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8002a40:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8002a44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a48:	9309      	str	r3, [sp, #36]	; 0x24
 8002a4a:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8002a4e:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8002a52:	e603      	b.n	800265c <_svfprintf_r+0x244>
 8002a54:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8002a58:	2100      	movs	r1, #0
 8002a5a:	f813 5b01 	ldrb.w	r5, [r3], #1
 8002a5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002a62:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8002a66:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8002a6a:	2809      	cmp	r0, #9
 8002a6c:	d9f5      	bls.n	8002a5a <_svfprintf_r+0x642>
 8002a6e:	910c      	str	r1, [sp, #48]	; 0x30
 8002a70:	e528      	b.n	80024c4 <_svfprintf_r+0xac>
 8002a72:	930a      	str	r3, [sp, #40]	; 0x28
 8002a74:	9b07      	ldr	r3, [sp, #28]
 8002a76:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8002a7a:	f043 0310 	orr.w	r3, r3, #16
 8002a7e:	9307      	str	r3, [sp, #28]
 8002a80:	9b07      	ldr	r3, [sp, #28]
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	f53f af5f 	bmi.w	8002946 <_svfprintf_r+0x52e>
 8002a88:	9b07      	ldr	r3, [sp, #28]
 8002a8a:	06d8      	lsls	r0, r3, #27
 8002a8c:	f100 836b 	bmi.w	8003166 <_svfprintf_r+0xd4e>
 8002a90:	9b07      	ldr	r3, [sp, #28]
 8002a92:	0659      	lsls	r1, r3, #25
 8002a94:	f140 8367 	bpl.w	8003166 <_svfprintf_r+0xd4e>
 8002a98:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002a9a:	f9b1 8000 	ldrsh.w	r8, [r1]
 8002a9e:	3104      	adds	r1, #4
 8002aa0:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	910e      	str	r1, [sp, #56]	; 0x38
 8002aaa:	e758      	b.n	800295e <_svfprintf_r+0x546>
 8002aac:	781d      	ldrb	r5, [r3, #0]
 8002aae:	9907      	ldr	r1, [sp, #28]
 8002ab0:	2d6c      	cmp	r5, #108	; 0x6c
 8002ab2:	f000 84d1 	beq.w	8003458 <_svfprintf_r+0x1040>
 8002ab6:	f041 0110 	orr.w	r1, r1, #16
 8002aba:	9107      	str	r1, [sp, #28]
 8002abc:	4619      	mov	r1, r3
 8002abe:	e500      	b.n	80024c2 <_svfprintf_r+0xaa>
 8002ac0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002ac2:	6829      	ldr	r1, [r5, #0]
 8002ac4:	910c      	str	r1, [sp, #48]	; 0x30
 8002ac6:	4608      	mov	r0, r1
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	4629      	mov	r1, r5
 8002acc:	f101 0104 	add.w	r1, r1, #4
 8002ad0:	f2c0 84c9 	blt.w	8003466 <_svfprintf_r+0x104e>
 8002ad4:	910e      	str	r1, [sp, #56]	; 0x38
 8002ad6:	781d      	ldrb	r5, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	e4f2      	b.n	80024c2 <_svfprintf_r+0xaa>
 8002adc:	9907      	ldr	r1, [sp, #28]
 8002ade:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002ae2:	9107      	str	r1, [sp, #28]
 8002ae4:	781d      	ldrb	r5, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	e4eb      	b.n	80024c2 <_svfprintf_r+0xaa>
 8002aea:	930a      	str	r3, [sp, #40]	; 0x28
 8002aec:	9b07      	ldr	r3, [sp, #28]
 8002aee:	f043 0310 	orr.w	r3, r3, #16
 8002af2:	9307      	str	r3, [sp, #28]
 8002af4:	9b07      	ldr	r3, [sp, #28]
 8002af6:	f013 0320 	ands.w	r3, r3, #32
 8002afa:	f47f aef2 	bne.w	80028e2 <_svfprintf_r+0x4ca>
 8002afe:	9a07      	ldr	r2, [sp, #28]
 8002b00:	f012 0210 	ands.w	r2, r2, #16
 8002b04:	f040 831c 	bne.w	8003140 <_svfprintf_r+0xd28>
 8002b08:	9b07      	ldr	r3, [sp, #28]
 8002b0a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002b0e:	f000 8317 	beq.w	8003140 <_svfprintf_r+0xd28>
 8002b12:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002b14:	4613      	mov	r3, r2
 8002b16:	460a      	mov	r2, r1
 8002b18:	3204      	adds	r2, #4
 8002b1a:	f8b1 8000 	ldrh.w	r8, [r1]
 8002b1e:	920e      	str	r2, [sp, #56]	; 0x38
 8002b20:	f04f 0900 	mov.w	r9, #0
 8002b24:	e55f      	b.n	80025e6 <_svfprintf_r+0x1ce>
 8002b26:	930a      	str	r3, [sp, #40]	; 0x28
 8002b28:	9b07      	ldr	r3, [sp, #28]
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	9307      	str	r3, [sp, #28]
 8002b30:	9b07      	ldr	r3, [sp, #28]
 8002b32:	0698      	lsls	r0, r3, #26
 8002b34:	f53f ad4c 	bmi.w	80025d0 <_svfprintf_r+0x1b8>
 8002b38:	9b07      	ldr	r3, [sp, #28]
 8002b3a:	06d9      	lsls	r1, r3, #27
 8002b3c:	f100 8309 	bmi.w	8003152 <_svfprintf_r+0xd3a>
 8002b40:	9b07      	ldr	r3, [sp, #28]
 8002b42:	065a      	lsls	r2, r3, #25
 8002b44:	f140 8305 	bpl.w	8003152 <_svfprintf_r+0xd3a>
 8002b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b4a:	f8b2 8000 	ldrh.w	r8, [r2]
 8002b4e:	3204      	adds	r2, #4
 8002b50:	f04f 0900 	mov.w	r9, #0
 8002b54:	2301      	movs	r3, #1
 8002b56:	920e      	str	r2, [sp, #56]	; 0x38
 8002b58:	e545      	b.n	80025e6 <_svfprintf_r+0x1ce>
 8002b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8002b5c:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <_svfprintf_r+0x7d0>)
 8002b5e:	9316      	str	r3, [sp, #88]	; 0x58
 8002b60:	9b07      	ldr	r3, [sp, #28]
 8002b62:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	f53f af0d 	bmi.w	8002986 <_svfprintf_r+0x56e>
 8002b6c:	9b07      	ldr	r3, [sp, #28]
 8002b6e:	06d8      	lsls	r0, r3, #27
 8002b70:	f140 83da 	bpl.w	8003328 <_svfprintf_r+0xf10>
 8002b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b76:	4613      	mov	r3, r2
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4698      	mov	r8, r3
 8002b7c:	9b07      	ldr	r3, [sp, #28]
 8002b7e:	3204      	adds	r2, #4
 8002b80:	07d9      	lsls	r1, r3, #31
 8002b82:	920e      	str	r2, [sp, #56]	; 0x38
 8002b84:	f04f 0900 	mov.w	r9, #0
 8002b88:	f53f af0b 	bmi.w	80029a2 <_svfprintf_r+0x58a>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e52a      	b.n	80025e6 <_svfprintf_r+0x1ce>
 8002b90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002b92:	930a      	str	r3, [sp, #40]	; 0x28
 8002b94:	680a      	ldr	r2, [r1, #0]
 8002b96:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	3104      	adds	r1, #4
 8002ba0:	469c      	mov	ip, r3
 8002ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ba4:	910e      	str	r1, [sp, #56]	; 0x38
 8002ba6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8002baa:	ab28      	add	r3, sp, #160	; 0xa0
 8002bac:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8002bb0:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8002bb4:	920d      	str	r2, [sp, #52]	; 0x34
 8002bb6:	9310      	str	r3, [sp, #64]	; 0x40
 8002bb8:	e556      	b.n	8002668 <_svfprintf_r+0x250>
 8002bba:	9907      	ldr	r1, [sp, #28]
 8002bbc:	f041 0108 	orr.w	r1, r1, #8
 8002bc0:	9107      	str	r1, [sp, #28]
 8002bc2:	781d      	ldrb	r5, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	e47c      	b.n	80024c2 <_svfprintf_r+0xaa>
 8002bc8:	9907      	ldr	r1, [sp, #28]
 8002bca:	f041 0101 	orr.w	r1, r1, #1
 8002bce:	9107      	str	r1, [sp, #28]
 8002bd0:	781d      	ldrb	r5, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	e475      	b.n	80024c2 <_svfprintf_r+0xaa>
 8002bd6:	9907      	ldr	r1, [sp, #28]
 8002bd8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002bdc:	9107      	str	r1, [sp, #28]
 8002bde:	781d      	ldrb	r5, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	e46e      	b.n	80024c2 <_svfprintf_r+0xaa>
 8002be4:	080068a4 	.word	0x080068a4
 8002be8:	08006890 	.word	0x08006890
 8002bec:	080068c4 	.word	0x080068c4
 8002bf0:	08006870 	.word	0x08006870
 8002bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8002bf6:	9b07      	ldr	r3, [sp, #28]
 8002bf8:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8002bfc:	f013 0f08 	tst.w	r3, #8
 8002c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c02:	46d3      	mov	fp, sl
 8002c04:	f103 0907 	add.w	r9, r3, #7
 8002c08:	f000 8384 	beq.w	8003314 <_svfprintf_r+0xefc>
 8002c0c:	f029 0307 	bic.w	r3, r9, #7
 8002c10:	ed93 7b00 	vldr	d7, [r3]
 8002c14:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002c18:	f103 0208 	add.w	r2, r3, #8
 8002c1c:	920e      	str	r2, [sp, #56]	; 0x38
 8002c1e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002c22:	f002 fc15 	bl	8005450 <__fpclassifyd>
 8002c26:	2801      	cmp	r0, #1
 8002c28:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002c2c:	f040 8358 	bne.w	80032e0 <_svfprintf_r+0xec8>
 8002c30:	2200      	movs	r2, #0
 8002c32:	2300      	movs	r3, #0
 8002c34:	f003 fcd4 	bl	80065e0 <__aeabi_dcmplt>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	f040 856d 	bne.w	8003718 <_svfprintf_r+0x1300>
 8002c3e:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8002c42:	9b07      	ldr	r3, [sp, #28]
 8002c44:	4abd      	ldr	r2, [pc, #756]	; (8002f3c <_svfprintf_r+0xb24>)
 8002c46:	f8df e300 	ldr.w	lr, [pc, #768]	; 8002f48 <_svfprintf_r+0xb30>
 8002c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c4e:	9307      	str	r3, [sp, #28]
 8002c50:	4613      	mov	r3, r2
 8002c52:	2103      	movs	r1, #3
 8002c54:	2000      	movs	r0, #0
 8002c56:	2d47      	cmp	r5, #71	; 0x47
 8002c58:	bfd8      	it	le
 8002c5a:	4673      	movle	r3, lr
 8002c5c:	9109      	str	r1, [sp, #36]	; 0x24
 8002c5e:	9011      	str	r0, [sp, #68]	; 0x44
 8002c60:	9310      	str	r3, [sp, #64]	; 0x40
 8002c62:	910d      	str	r1, [sp, #52]	; 0x34
 8002c64:	9012      	str	r0, [sp, #72]	; 0x48
 8002c66:	e4f9      	b.n	800265c <_svfprintf_r+0x244>
 8002c68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002c6a:	9907      	ldr	r1, [sp, #28]
 8002c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8002c6e:	2230      	movs	r2, #48	; 0x30
 8002c70:	6803      	ldr	r3, [r0, #0]
 8002c72:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8002c76:	4602      	mov	r2, r0
 8002c78:	2578      	movs	r5, #120	; 0x78
 8002c7a:	f041 0102 	orr.w	r1, r1, #2
 8002c7e:	3204      	adds	r2, #4
 8002c80:	4698      	mov	r8, r3
 8002c82:	4baf      	ldr	r3, [pc, #700]	; (8002f40 <_svfprintf_r+0xb28>)
 8002c84:	9316      	str	r3, [sp, #88]	; 0x58
 8002c86:	9107      	str	r1, [sp, #28]
 8002c88:	920e      	str	r2, [sp, #56]	; 0x38
 8002c8a:	f04f 0900 	mov.w	r9, #0
 8002c8e:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
 8002c92:	2302      	movs	r3, #2
 8002c94:	e4a7      	b.n	80025e6 <_svfprintf_r+0x1ce>
 8002c96:	930a      	str	r3, [sp, #40]	; 0x28
 8002c98:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8002c9c:	2d00      	cmp	r5, #0
 8002c9e:	f000 83cf 	beq.w	8003440 <_svfprintf_r+0x1028>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	469c      	mov	ip, r3
 8002ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8002caa:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
 8002cae:	e77a      	b.n	8002ba6 <_svfprintf_r+0x78e>
 8002cb0:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8002cb4:	e535      	b.n	8002722 <_svfprintf_r+0x30a>
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	f47f acad 	bne.w	8002616 <_svfprintf_r+0x1fe>
 8002cbc:	f1b9 0f00 	cmp.w	r9, #0
 8002cc0:	bf08      	it	eq
 8002cc2:	f1b8 0f0a 	cmpeq.w	r8, #10
 8002cc6:	f080 820d 	bcs.w	80030e4 <_svfprintf_r+0xccc>
 8002cca:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
 8002cce:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8002cd2:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 8002cd6:	ebcb 0307 	rsb	r3, fp, r7
 8002cda:	930d      	str	r3, [sp, #52]	; 0x34
 8002cdc:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8002ce0:	e4b4      	b.n	800264c <_svfprintf_r+0x234>
 8002ce2:	2d65      	cmp	r5, #101	; 0x65
 8002ce4:	f340 80a0 	ble.w	8002e28 <_svfprintf_r+0xa10>
 8002ce8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002cec:	2200      	movs	r2, #0
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f003 fc6c 	bl	80065cc <__aeabi_dcmpeq>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	f000 8144 	beq.w	8002f82 <_svfprintf_r+0xb6a>
 8002cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002cfc:	4a91      	ldr	r2, [pc, #580]	; (8002f44 <_svfprintf_r+0xb2c>)
 8002cfe:	6022      	str	r2, [r4, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	f10b 0b01 	add.w	fp, fp, #1
 8002d06:	2201      	movs	r2, #1
 8002d08:	2b07      	cmp	r3, #7
 8002d0a:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8002d0e:	9326      	str	r3, [sp, #152]	; 0x98
 8002d10:	6062      	str	r2, [r4, #4]
 8002d12:	f300 833d 	bgt.w	8003390 <_svfprintf_r+0xf78>
 8002d16:	3408      	adds	r4, #8
 8002d18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002d1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	db03      	blt.n	8002d28 <_svfprintf_r+0x910>
 8002d20:	9b07      	ldr	r3, [sp, #28]
 8002d22:	07da      	lsls	r2, r3, #31
 8002d24:	f57f ad7b 	bpl.w	800281e <_svfprintf_r+0x406>
 8002d28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002d2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8002d2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002d2e:	6022      	str	r2, [r4, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	448b      	add	fp, r1
 8002d34:	2b07      	cmp	r3, #7
 8002d36:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8002d3a:	6061      	str	r1, [r4, #4]
 8002d3c:	9326      	str	r3, [sp, #152]	; 0x98
 8002d3e:	f300 8399 	bgt.w	8003474 <_svfprintf_r+0x105c>
 8002d42:	3408      	adds	r4, #8
 8002d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002d46:	1e5d      	subs	r5, r3, #1
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	f77f ad68 	ble.w	800281e <_svfprintf_r+0x406>
 8002d4e:	2d10      	cmp	r5, #16
 8002d50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002d52:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8002f4c <_svfprintf_r+0xb34>
 8002d56:	f340 81b9 	ble.w	80030cc <_svfprintf_r+0xcb4>
 8002d5a:	f04f 0810 	mov.w	r8, #16
 8002d5e:	465a      	mov	r2, fp
 8002d60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002d64:	e004      	b.n	8002d70 <_svfprintf_r+0x958>
 8002d66:	3408      	adds	r4, #8
 8002d68:	3d10      	subs	r5, #16
 8002d6a:	2d10      	cmp	r5, #16
 8002d6c:	f340 81ad 	ble.w	80030ca <_svfprintf_r+0xcb2>
 8002d70:	3301      	adds	r3, #1
 8002d72:	3210      	adds	r2, #16
 8002d74:	2b07      	cmp	r3, #7
 8002d76:	9227      	str	r2, [sp, #156]	; 0x9c
 8002d78:	9326      	str	r3, [sp, #152]	; 0x98
 8002d7a:	f8c4 9000 	str.w	r9, [r4]
 8002d7e:	f8c4 8004 	str.w	r8, [r4, #4]
 8002d82:	ddf0      	ble.n	8002d66 <_svfprintf_r+0x94e>
 8002d84:	4650      	mov	r0, sl
 8002d86:	4631      	mov	r1, r6
 8002d88:	aa25      	add	r2, sp, #148	; 0x94
 8002d8a:	f002 fbcd 	bl	8005528 <__ssprint_r>
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	f47f ac0a 	bne.w	80025a8 <_svfprintf_r+0x190>
 8002d94:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8002d96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002d98:	463c      	mov	r4, r7
 8002d9a:	e7e5      	b.n	8002d68 <_svfprintf_r+0x950>
 8002d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002da0:	ebc2 0a03 	rsb	sl, r2, r3
 8002da4:	f1ba 0f00 	cmp.w	sl, #0
 8002da8:	f77f ace3 	ble.w	8002772 <_svfprintf_r+0x35a>
 8002dac:	f1ba 0f10 	cmp.w	sl, #16
 8002db0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002db2:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8002f4c <_svfprintf_r+0xb34>
 8002db6:	dd2b      	ble.n	8002e10 <_svfprintf_r+0x9f8>
 8002db8:	4649      	mov	r1, r9
 8002dba:	465b      	mov	r3, fp
 8002dbc:	46a9      	mov	r9, r5
 8002dbe:	f04f 0810 	mov.w	r8, #16
 8002dc2:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002dc6:	460d      	mov	r5, r1
 8002dc8:	e006      	b.n	8002dd8 <_svfprintf_r+0x9c0>
 8002dca:	f1aa 0a10 	sub.w	sl, sl, #16
 8002dce:	f1ba 0f10 	cmp.w	sl, #16
 8002dd2:	f104 0408 	add.w	r4, r4, #8
 8002dd6:	dd17      	ble.n	8002e08 <_svfprintf_r+0x9f0>
 8002dd8:	3201      	adds	r2, #1
 8002dda:	3310      	adds	r3, #16
 8002ddc:	2a07      	cmp	r2, #7
 8002dde:	9327      	str	r3, [sp, #156]	; 0x9c
 8002de0:	9226      	str	r2, [sp, #152]	; 0x98
 8002de2:	e884 0120 	stmia.w	r4, {r5, r8}
 8002de6:	ddf0      	ble.n	8002dca <_svfprintf_r+0x9b2>
 8002de8:	4658      	mov	r0, fp
 8002dea:	4631      	mov	r1, r6
 8002dec:	aa25      	add	r2, sp, #148	; 0x94
 8002dee:	f002 fb9b 	bl	8005528 <__ssprint_r>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	f47f abd8 	bne.w	80025a8 <_svfprintf_r+0x190>
 8002df8:	f1aa 0a10 	sub.w	sl, sl, #16
 8002dfc:	f1ba 0f10 	cmp.w	sl, #16
 8002e00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002e02:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002e04:	463c      	mov	r4, r7
 8002e06:	dce7      	bgt.n	8002dd8 <_svfprintf_r+0x9c0>
 8002e08:	469b      	mov	fp, r3
 8002e0a:	462b      	mov	r3, r5
 8002e0c:	464d      	mov	r5, r9
 8002e0e:	4699      	mov	r9, r3
 8002e10:	3201      	adds	r2, #1
 8002e12:	44d3      	add	fp, sl
 8002e14:	2a07      	cmp	r2, #7
 8002e16:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8002e1a:	9226      	str	r2, [sp, #152]	; 0x98
 8002e1c:	e884 0600 	stmia.w	r4, {r9, sl}
 8002e20:	f300 8251 	bgt.w	80032c6 <_svfprintf_r+0xeae>
 8002e24:	3408      	adds	r4, #8
 8002e26:	e4a4      	b.n	8002772 <_svfprintf_r+0x35a>
 8002e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e2a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	f340 821f 	ble.w	8003270 <_svfprintf_r+0xe58>
 8002e32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	3501      	adds	r5, #1
 8002e38:	f10b 0301 	add.w	r3, fp, #1
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	2d07      	cmp	r5, #7
 8002e40:	9327      	str	r3, [sp, #156]	; 0x9c
 8002e42:	9526      	str	r5, [sp, #152]	; 0x98
 8002e44:	6062      	str	r2, [r4, #4]
 8002e46:	f300 8225 	bgt.w	8003294 <_svfprintf_r+0xe7c>
 8002e4a:	3408      	adds	r4, #8
 8002e4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8002e4e:	6061      	str	r1, [r4, #4]
 8002e50:	3501      	adds	r5, #1
 8002e52:	eb03 0b01 	add.w	fp, r3, r1
 8002e56:	2d07      	cmp	r5, #7
 8002e58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002e5a:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8002e5e:	9526      	str	r5, [sp, #152]	; 0x98
 8002e60:	6023      	str	r3, [r4, #0]
 8002e62:	f300 8223 	bgt.w	80032ac <_svfprintf_r+0xe94>
 8002e66:	3408      	adds	r4, #8
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f003 fbac 	bl	80065cc <__aeabi_dcmpeq>
 8002e74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e76:	2800      	cmp	r0, #0
 8002e78:	f040 80dd 	bne.w	8003036 <_svfprintf_r+0xc1e>
 8002e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	3501      	adds	r5, #1
 8002e82:	3201      	adds	r2, #1
 8002e84:	449b      	add	fp, r3
 8002e86:	2d07      	cmp	r5, #7
 8002e88:	9526      	str	r5, [sp, #152]	; 0x98
 8002e8a:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8002e8e:	6022      	str	r2, [r4, #0]
 8002e90:	6063      	str	r3, [r4, #4]
 8002e92:	f300 810d 	bgt.w	80030b0 <_svfprintf_r+0xc98>
 8002e96:	3408      	adds	r4, #8
 8002e98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002e9a:	6062      	str	r2, [r4, #4]
 8002e9c:	3501      	adds	r5, #1
 8002e9e:	4493      	add	fp, r2
 8002ea0:	ab21      	add	r3, sp, #132	; 0x84
 8002ea2:	2d07      	cmp	r5, #7
 8002ea4:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8002ea8:	9526      	str	r5, [sp, #152]	; 0x98
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	f77f acb6 	ble.w	800281c <_svfprintf_r+0x404>
 8002eb0:	9808      	ldr	r0, [sp, #32]
 8002eb2:	4631      	mov	r1, r6
 8002eb4:	aa25      	add	r2, sp, #148	; 0x94
 8002eb6:	f002 fb37 	bl	8005528 <__ssprint_r>
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	f47f ab74 	bne.w	80025a8 <_svfprintf_r+0x190>
 8002ec0:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8002ec4:	463c      	mov	r4, r7
 8002ec6:	e4aa      	b.n	800281e <_svfprintf_r+0x406>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d132      	bne.n	8002f32 <_svfprintf_r+0xb1a>
 8002ecc:	9b07      	ldr	r3, [sp, #28]
 8002ece:	07d8      	lsls	r0, r3, #31
 8002ed0:	d52f      	bpl.n	8002f32 <_svfprintf_r+0xb1a>
 8002ed2:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
 8002ed6:	2330      	movs	r3, #48	; 0x30
 8002ed8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 8002edc:	ebcb 0307 	rsb	r3, fp, r7
 8002ee0:	930d      	str	r3, [sp, #52]	; 0x34
 8002ee2:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8002ee6:	f7ff bbb1 	b.w	800264c <_svfprintf_r+0x234>
 8002eea:	9808      	ldr	r0, [sp, #32]
 8002eec:	4631      	mov	r1, r6
 8002eee:	aa25      	add	r2, sp, #148	; 0x94
 8002ef0:	f002 fb1a 	bl	8005528 <__ssprint_r>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	f47f ab57 	bne.w	80025a8 <_svfprintf_r+0x190>
 8002efa:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8002efe:	463c      	mov	r4, r7
 8002f00:	e47b      	b.n	80027fa <_svfprintf_r+0x3e2>
 8002f02:	9808      	ldr	r0, [sp, #32]
 8002f04:	4631      	mov	r1, r6
 8002f06:	aa25      	add	r2, sp, #148	; 0x94
 8002f08:	f002 fb0e 	bl	8005528 <__ssprint_r>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	f47f ab4b 	bne.w	80025a8 <_svfprintf_r+0x190>
 8002f12:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8002f16:	463c      	mov	r4, r7
 8002f18:	e427      	b.n	800276a <_svfprintf_r+0x352>
 8002f1a:	9808      	ldr	r0, [sp, #32]
 8002f1c:	4631      	mov	r1, r6
 8002f1e:	aa25      	add	r2, sp, #148	; 0x94
 8002f20:	f002 fb02 	bl	8005528 <__ssprint_r>
 8002f24:	2800      	cmp	r0, #0
 8002f26:	f47f ab3f 	bne.w	80025a8 <_svfprintf_r+0x190>
 8002f2a:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8002f2e:	463c      	mov	r4, r7
 8002f30:	e40a      	b.n	8002748 <_svfprintf_r+0x330>
 8002f32:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8002f36:	9710      	str	r7, [sp, #64]	; 0x40
 8002f38:	f7ff bb88 	b.w	800264c <_svfprintf_r+0x234>
 8002f3c:	08006884 	.word	0x08006884
 8002f40:	080068a4 	.word	0x080068a4
 8002f44:	080068c0 	.word	0x080068c0
 8002f48:	08006880 	.word	0x08006880
 8002f4c:	080068c4 	.word	0x080068c4
 8002f50:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002f52:	46bb      	mov	fp, r7
 8002f54:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8002f58:	f008 010f 	and.w	r1, r8, #15
 8002f5c:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 8002f60:	ea4f 1219 	mov.w	r2, r9, lsr #4
 8002f64:	4698      	mov	r8, r3
 8002f66:	4691      	mov	r9, r2
 8002f68:	5c43      	ldrb	r3, [r0, r1]
 8002f6a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8002f6e:	ea58 0309 	orrs.w	r3, r8, r9
 8002f72:	d1ef      	bne.n	8002f54 <_svfprintf_r+0xb3c>
 8002f74:	465b      	mov	r3, fp
 8002f76:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8002f7a:	1afb      	subs	r3, r7, r3
 8002f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8002f7e:	f7ff bb65 	b.w	800264c <_svfprintf_r+0x234>
 8002f82:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8002f84:	2d00      	cmp	r5, #0
 8002f86:	f340 820f 	ble.w	80033a8 <_svfprintf_r+0xf90>
 8002f8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002f8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002f8e:	428a      	cmp	r2, r1
 8002f90:	4613      	mov	r3, r2
 8002f92:	bfa8      	it	ge
 8002f94:	460b      	movge	r3, r1
 8002f96:	461d      	mov	r5, r3
 8002f98:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002f9a:	2d00      	cmp	r5, #0
 8002f9c:	eb01 0a02 	add.w	sl, r1, r2
 8002fa0:	dd0b      	ble.n	8002fba <_svfprintf_r+0xba2>
 8002fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002fa4:	6021      	str	r1, [r4, #0]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	44ab      	add	fp, r5
 8002faa:	2b07      	cmp	r3, #7
 8002fac:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8002fb0:	6065      	str	r5, [r4, #4]
 8002fb2:	9326      	str	r3, [sp, #152]	; 0x98
 8002fb4:	f300 8357 	bgt.w	8003666 <_svfprintf_r+0x124e>
 8002fb8:	3408      	adds	r4, #8
 8002fba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	bfa8      	it	ge
 8002fc0:	1b5b      	subge	r3, r3, r5
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	461d      	mov	r5, r3
 8002fc6:	f340 80f5 	ble.w	80031b4 <_svfprintf_r+0xd9c>
 8002fca:	2d10      	cmp	r5, #16
 8002fcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002fce:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 80035d8 <_svfprintf_r+0x11c0>
 8002fd2:	f340 81d0 	ble.w	8003376 <_svfprintf_r+0xf5e>
 8002fd6:	465a      	mov	r2, fp
 8002fd8:	f04f 0810 	mov.w	r8, #16
 8002fdc:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002fe0:	e004      	b.n	8002fec <_svfprintf_r+0xbd4>
 8002fe2:	3408      	adds	r4, #8
 8002fe4:	3d10      	subs	r5, #16
 8002fe6:	2d10      	cmp	r5, #16
 8002fe8:	f340 81c4 	ble.w	8003374 <_svfprintf_r+0xf5c>
 8002fec:	3301      	adds	r3, #1
 8002fee:	3210      	adds	r2, #16
 8002ff0:	2b07      	cmp	r3, #7
 8002ff2:	9227      	str	r2, [sp, #156]	; 0x9c
 8002ff4:	9326      	str	r3, [sp, #152]	; 0x98
 8002ff6:	f8c4 9000 	str.w	r9, [r4]
 8002ffa:	f8c4 8004 	str.w	r8, [r4, #4]
 8002ffe:	ddf0      	ble.n	8002fe2 <_svfprintf_r+0xbca>
 8003000:	4658      	mov	r0, fp
 8003002:	4631      	mov	r1, r6
 8003004:	aa25      	add	r2, sp, #148	; 0x94
 8003006:	f002 fa8f 	bl	8005528 <__ssprint_r>
 800300a:	2800      	cmp	r0, #0
 800300c:	f47f aacc 	bne.w	80025a8 <_svfprintf_r+0x190>
 8003010:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8003012:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003014:	463c      	mov	r4, r7
 8003016:	e7e5      	b.n	8002fe4 <_svfprintf_r+0xbcc>
 8003018:	9808      	ldr	r0, [sp, #32]
 800301a:	4631      	mov	r1, r6
 800301c:	aa25      	add	r2, sp, #148	; 0x94
 800301e:	f002 fa83 	bl	8005528 <__ssprint_r>
 8003022:	2800      	cmp	r0, #0
 8003024:	f47f aac0 	bne.w	80025a8 <_svfprintf_r+0x190>
 8003028:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 800302c:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8003030:	463c      	mov	r4, r7
 8003032:	f7ff bb76 	b.w	8002722 <_svfprintf_r+0x30a>
 8003036:	f103 38ff 	add.w	r8, r3, #4294967295
 800303a:	f1b8 0f00 	cmp.w	r8, #0
 800303e:	f77f af2b 	ble.w	8002e98 <_svfprintf_r+0xa80>
 8003042:	f1b8 0f10 	cmp.w	r8, #16
 8003046:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 80035d8 <_svfprintf_r+0x11c0>
 800304a:	dd25      	ble.n	8003098 <_svfprintf_r+0xc80>
 800304c:	465b      	mov	r3, fp
 800304e:	f04f 0a10 	mov.w	sl, #16
 8003052:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003056:	e006      	b.n	8003066 <_svfprintf_r+0xc4e>
 8003058:	f1a8 0810 	sub.w	r8, r8, #16
 800305c:	f1b8 0f10 	cmp.w	r8, #16
 8003060:	f104 0408 	add.w	r4, r4, #8
 8003064:	dd17      	ble.n	8003096 <_svfprintf_r+0xc7e>
 8003066:	3501      	adds	r5, #1
 8003068:	3310      	adds	r3, #16
 800306a:	2d07      	cmp	r5, #7
 800306c:	9327      	str	r3, [sp, #156]	; 0x9c
 800306e:	9526      	str	r5, [sp, #152]	; 0x98
 8003070:	e884 0600 	stmia.w	r4, {r9, sl}
 8003074:	ddf0      	ble.n	8003058 <_svfprintf_r+0xc40>
 8003076:	4658      	mov	r0, fp
 8003078:	4631      	mov	r1, r6
 800307a:	aa25      	add	r2, sp, #148	; 0x94
 800307c:	f002 fa54 	bl	8005528 <__ssprint_r>
 8003080:	2800      	cmp	r0, #0
 8003082:	f47f aa91 	bne.w	80025a8 <_svfprintf_r+0x190>
 8003086:	f1a8 0810 	sub.w	r8, r8, #16
 800308a:	f1b8 0f10 	cmp.w	r8, #16
 800308e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003090:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8003092:	463c      	mov	r4, r7
 8003094:	dce7      	bgt.n	8003066 <_svfprintf_r+0xc4e>
 8003096:	469b      	mov	fp, r3
 8003098:	3501      	adds	r5, #1
 800309a:	44c3      	add	fp, r8
 800309c:	2d07      	cmp	r5, #7
 800309e:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80030a2:	9526      	str	r5, [sp, #152]	; 0x98
 80030a4:	f8c4 9000 	str.w	r9, [r4]
 80030a8:	f8c4 8004 	str.w	r8, [r4, #4]
 80030ac:	f77f aef3 	ble.w	8002e96 <_svfprintf_r+0xa7e>
 80030b0:	9808      	ldr	r0, [sp, #32]
 80030b2:	4631      	mov	r1, r6
 80030b4:	aa25      	add	r2, sp, #148	; 0x94
 80030b6:	f002 fa37 	bl	8005528 <__ssprint_r>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	f47f aa74 	bne.w	80025a8 <_svfprintf_r+0x190>
 80030c0:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80030c4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80030c6:	463c      	mov	r4, r7
 80030c8:	e6e6      	b.n	8002e98 <_svfprintf_r+0xa80>
 80030ca:	4693      	mov	fp, r2
 80030cc:	3301      	adds	r3, #1
 80030ce:	44ab      	add	fp, r5
 80030d0:	2b07      	cmp	r3, #7
 80030d2:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80030d6:	9326      	str	r3, [sp, #152]	; 0x98
 80030d8:	f8c4 9000 	str.w	r9, [r4]
 80030dc:	6065      	str	r5, [r4, #4]
 80030de:	f77f ab9d 	ble.w	800281c <_svfprintf_r+0x404>
 80030e2:	e6e5      	b.n	8002eb0 <_svfprintf_r+0xa98>
 80030e4:	46bb      	mov	fp, r7
 80030e6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80030ea:	4640      	mov	r0, r8
 80030ec:	4649      	mov	r1, r9
 80030ee:	220a      	movs	r2, #10
 80030f0:	2300      	movs	r3, #0
 80030f2:	f7fe fceb 	bl	8001acc <__aeabi_uldivmod>
 80030f6:	3230      	adds	r2, #48	; 0x30
 80030f8:	4640      	mov	r0, r8
 80030fa:	4649      	mov	r1, r9
 80030fc:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8003100:	2300      	movs	r3, #0
 8003102:	220a      	movs	r2, #10
 8003104:	f7fe fce2 	bl	8001acc <__aeabi_uldivmod>
 8003108:	4680      	mov	r8, r0
 800310a:	4689      	mov	r9, r1
 800310c:	ea58 0309 	orrs.w	r3, r8, r9
 8003110:	d1eb      	bne.n	80030ea <_svfprintf_r+0xcd2>
 8003112:	465b      	mov	r3, fp
 8003114:	1afb      	subs	r3, r7, r3
 8003116:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800311a:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800311e:	930d      	str	r3, [sp, #52]	; 0x34
 8003120:	f7ff ba94 	b.w	800264c <_svfprintf_r+0x234>
 8003124:	2b30      	cmp	r3, #48	; 0x30
 8003126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003128:	f43f af27 	beq.w	8002f7a <_svfprintf_r+0xb62>
 800312c:	3b01      	subs	r3, #1
 800312e:	461a      	mov	r2, r3
 8003130:	9310      	str	r3, [sp, #64]	; 0x40
 8003132:	1aba      	subs	r2, r7, r2
 8003134:	2330      	movs	r3, #48	; 0x30
 8003136:	920d      	str	r2, [sp, #52]	; 0x34
 8003138:	f801 3c01 	strb.w	r3, [r1, #-1]
 800313c:	f7ff ba86 	b.w	800264c <_svfprintf_r+0x234>
 8003140:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003142:	680a      	ldr	r2, [r1, #0]
 8003144:	3104      	adds	r1, #4
 8003146:	910e      	str	r1, [sp, #56]	; 0x38
 8003148:	4690      	mov	r8, r2
 800314a:	f04f 0900 	mov.w	r9, #0
 800314e:	f7ff ba4a 	b.w	80025e6 <_svfprintf_r+0x1ce>
 8003152:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003154:	680a      	ldr	r2, [r1, #0]
 8003156:	3104      	adds	r1, #4
 8003158:	2301      	movs	r3, #1
 800315a:	910e      	str	r1, [sp, #56]	; 0x38
 800315c:	4690      	mov	r8, r2
 800315e:	f04f 0900 	mov.w	r9, #0
 8003162:	f7ff ba40 	b.w	80025e6 <_svfprintf_r+0x1ce>
 8003166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003168:	6813      	ldr	r3, [r2, #0]
 800316a:	4698      	mov	r8, r3
 800316c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8003170:	4613      	mov	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	4642      	mov	r2, r8
 8003176:	930e      	str	r3, [sp, #56]	; 0x38
 8003178:	2a00      	cmp	r2, #0
 800317a:	464b      	mov	r3, r9
 800317c:	f173 0300 	sbcs.w	r3, r3, #0
 8003180:	f6bf abf2 	bge.w	8002968 <_svfprintf_r+0x550>
 8003184:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8003188:	f1d8 0800 	rsbs	r8, r8, #0
 800318c:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8003190:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 8003194:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8003198:	2301      	movs	r3, #1
 800319a:	f7ff ba2a 	b.w	80025f2 <_svfprintf_r+0x1da>
 800319e:	9808      	ldr	r0, [sp, #32]
 80031a0:	4631      	mov	r1, r6
 80031a2:	aa25      	add	r2, sp, #148	; 0x94
 80031a4:	f002 f9c0 	bl	8005528 <__ssprint_r>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	f47f a9fd 	bne.w	80025a8 <_svfprintf_r+0x190>
 80031ae:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80031b2:	463c      	mov	r4, r7
 80031b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80031b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80031b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80031ba:	440a      	add	r2, r1
 80031bc:	4690      	mov	r8, r2
 80031be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80031c0:	4293      	cmp	r3, r2
 80031c2:	db46      	blt.n	8003252 <_svfprintf_r+0xe3a>
 80031c4:	9a07      	ldr	r2, [sp, #28]
 80031c6:	07d0      	lsls	r0, r2, #31
 80031c8:	d443      	bmi.n	8003252 <_svfprintf_r+0xe3a>
 80031ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80031cc:	ebc8 050a 	rsb	r5, r8, sl
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	429d      	cmp	r5, r3
 80031d4:	bfa8      	it	ge
 80031d6:	461d      	movge	r5, r3
 80031d8:	2d00      	cmp	r5, #0
 80031da:	dd0c      	ble.n	80031f6 <_svfprintf_r+0xdde>
 80031dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80031de:	f8c4 8000 	str.w	r8, [r4]
 80031e2:	3201      	adds	r2, #1
 80031e4:	44ab      	add	fp, r5
 80031e6:	2a07      	cmp	r2, #7
 80031e8:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80031ec:	6065      	str	r5, [r4, #4]
 80031ee:	9226      	str	r2, [sp, #152]	; 0x98
 80031f0:	f300 8271 	bgt.w	80036d6 <_svfprintf_r+0x12be>
 80031f4:	3408      	adds	r4, #8
 80031f6:	2d00      	cmp	r5, #0
 80031f8:	bfac      	ite	ge
 80031fa:	1b5d      	subge	r5, r3, r5
 80031fc:	461d      	movlt	r5, r3
 80031fe:	2d00      	cmp	r5, #0
 8003200:	f77f ab0d 	ble.w	800281e <_svfprintf_r+0x406>
 8003204:	2d10      	cmp	r5, #16
 8003206:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003208:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 80035d8 <_svfprintf_r+0x11c0>
 800320c:	f77f af5e 	ble.w	80030cc <_svfprintf_r+0xcb4>
 8003210:	f04f 0810 	mov.w	r8, #16
 8003214:	465a      	mov	r2, fp
 8003216:	f8dd a020 	ldr.w	sl, [sp, #32]
 800321a:	e004      	b.n	8003226 <_svfprintf_r+0xe0e>
 800321c:	3408      	adds	r4, #8
 800321e:	3d10      	subs	r5, #16
 8003220:	2d10      	cmp	r5, #16
 8003222:	f77f af52 	ble.w	80030ca <_svfprintf_r+0xcb2>
 8003226:	3301      	adds	r3, #1
 8003228:	3210      	adds	r2, #16
 800322a:	2b07      	cmp	r3, #7
 800322c:	9227      	str	r2, [sp, #156]	; 0x9c
 800322e:	9326      	str	r3, [sp, #152]	; 0x98
 8003230:	f8c4 9000 	str.w	r9, [r4]
 8003234:	f8c4 8004 	str.w	r8, [r4, #4]
 8003238:	ddf0      	ble.n	800321c <_svfprintf_r+0xe04>
 800323a:	4650      	mov	r0, sl
 800323c:	4631      	mov	r1, r6
 800323e:	aa25      	add	r2, sp, #148	; 0x94
 8003240:	f002 f972 	bl	8005528 <__ssprint_r>
 8003244:	2800      	cmp	r0, #0
 8003246:	f47f a9af 	bne.w	80025a8 <_svfprintf_r+0x190>
 800324a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800324c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800324e:	463c      	mov	r4, r7
 8003250:	e7e5      	b.n	800321e <_svfprintf_r+0xe06>
 8003252:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003254:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003256:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003258:	6021      	str	r1, [r4, #0]
 800325a:	3201      	adds	r2, #1
 800325c:	4483      	add	fp, r0
 800325e:	2a07      	cmp	r2, #7
 8003260:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8003264:	6060      	str	r0, [r4, #4]
 8003266:	9226      	str	r2, [sp, #152]	; 0x98
 8003268:	f300 8209 	bgt.w	800367e <_svfprintf_r+0x1266>
 800326c:	3408      	adds	r4, #8
 800326e:	e7ac      	b.n	80031ca <_svfprintf_r+0xdb2>
 8003270:	9b07      	ldr	r3, [sp, #28]
 8003272:	07d9      	lsls	r1, r3, #31
 8003274:	f53f addd 	bmi.w	8002e32 <_svfprintf_r+0xa1a>
 8003278:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800327a:	6023      	str	r3, [r4, #0]
 800327c:	3501      	adds	r5, #1
 800327e:	f10b 0b01 	add.w	fp, fp, #1
 8003282:	2301      	movs	r3, #1
 8003284:	2d07      	cmp	r5, #7
 8003286:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 800328a:	9526      	str	r5, [sp, #152]	; 0x98
 800328c:	6063      	str	r3, [r4, #4]
 800328e:	f77f ae02 	ble.w	8002e96 <_svfprintf_r+0xa7e>
 8003292:	e70d      	b.n	80030b0 <_svfprintf_r+0xc98>
 8003294:	9808      	ldr	r0, [sp, #32]
 8003296:	4631      	mov	r1, r6
 8003298:	aa25      	add	r2, sp, #148	; 0x94
 800329a:	f002 f945 	bl	8005528 <__ssprint_r>
 800329e:	2800      	cmp	r0, #0
 80032a0:	f47f a982 	bne.w	80025a8 <_svfprintf_r+0x190>
 80032a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80032a6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80032a8:	463c      	mov	r4, r7
 80032aa:	e5cf      	b.n	8002e4c <_svfprintf_r+0xa34>
 80032ac:	9808      	ldr	r0, [sp, #32]
 80032ae:	4631      	mov	r1, r6
 80032b0:	aa25      	add	r2, sp, #148	; 0x94
 80032b2:	f002 f939 	bl	8005528 <__ssprint_r>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	f47f a976 	bne.w	80025a8 <_svfprintf_r+0x190>
 80032bc:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80032c0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80032c2:	463c      	mov	r4, r7
 80032c4:	e5d0      	b.n	8002e68 <_svfprintf_r+0xa50>
 80032c6:	9808      	ldr	r0, [sp, #32]
 80032c8:	4631      	mov	r1, r6
 80032ca:	aa25      	add	r2, sp, #148	; 0x94
 80032cc:	f002 f92c 	bl	8005528 <__ssprint_r>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	f47f a969 	bne.w	80025a8 <_svfprintf_r+0x190>
 80032d6:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80032da:	463c      	mov	r4, r7
 80032dc:	f7ff ba49 	b.w	8002772 <_svfprintf_r+0x35a>
 80032e0:	f002 f8b6 	bl	8005450 <__fpclassifyd>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	f040 80d1 	bne.w	800348c <_svfprintf_r+0x1074>
 80032ea:	4686      	mov	lr, r0
 80032ec:	4ab7      	ldr	r2, [pc, #732]	; (80035cc <_svfprintf_r+0x11b4>)
 80032ee:	4bb8      	ldr	r3, [pc, #736]	; (80035d0 <_svfprintf_r+0x11b8>)
 80032f0:	9011      	str	r0, [sp, #68]	; 0x44
 80032f2:	9807      	ldr	r0, [sp, #28]
 80032f4:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 80032f8:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80032fc:	2103      	movs	r1, #3
 80032fe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003302:	2d47      	cmp	r5, #71	; 0x47
 8003304:	bfd8      	it	le
 8003306:	461a      	movle	r2, r3
 8003308:	9109      	str	r1, [sp, #36]	; 0x24
 800330a:	9007      	str	r0, [sp, #28]
 800330c:	9210      	str	r2, [sp, #64]	; 0x40
 800330e:	910d      	str	r1, [sp, #52]	; 0x34
 8003310:	f7ff b9a4 	b.w	800265c <_svfprintf_r+0x244>
 8003314:	f029 0907 	bic.w	r9, r9, #7
 8003318:	ed99 7b00 	vldr	d7, [r9]
 800331c:	f109 0308 	add.w	r3, r9, #8
 8003320:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003324:	930e      	str	r3, [sp, #56]	; 0x38
 8003326:	e47a      	b.n	8002c1e <_svfprintf_r+0x806>
 8003328:	9b07      	ldr	r3, [sp, #28]
 800332a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800332c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003330:	4613      	mov	r3, r2
 8003332:	f43f ac21 	beq.w	8002b78 <_svfprintf_r+0x760>
 8003336:	3304      	adds	r3, #4
 8003338:	f8b2 8000 	ldrh.w	r8, [r2]
 800333c:	930e      	str	r3, [sp, #56]	; 0x38
 800333e:	f04f 0900 	mov.w	r9, #0
 8003342:	f7ff bb2a 	b.w	800299a <_svfprintf_r+0x582>
 8003346:	9b07      	ldr	r3, [sp, #28]
 8003348:	06db      	lsls	r3, r3, #27
 800334a:	d40b      	bmi.n	8003364 <_svfprintf_r+0xf4c>
 800334c:	9b07      	ldr	r3, [sp, #28]
 800334e:	065d      	lsls	r5, r3, #25
 8003350:	d508      	bpl.n	8003364 <_svfprintf_r+0xf4c>
 8003352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	3204      	adds	r2, #4
 8003358:	920e      	str	r2, [sp, #56]	; 0x38
 800335a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800335e:	801a      	strh	r2, [r3, #0]
 8003360:	f7ff b881 	b.w	8002466 <_svfprintf_r+0x4e>
 8003364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	3204      	adds	r2, #4
 800336a:	920e      	str	r2, [sp, #56]	; 0x38
 800336c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f7ff b879 	b.w	8002466 <_svfprintf_r+0x4e>
 8003374:	4693      	mov	fp, r2
 8003376:	3301      	adds	r3, #1
 8003378:	44ab      	add	fp, r5
 800337a:	2b07      	cmp	r3, #7
 800337c:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8003380:	9326      	str	r3, [sp, #152]	; 0x98
 8003382:	f8c4 9000 	str.w	r9, [r4]
 8003386:	6065      	str	r5, [r4, #4]
 8003388:	f73f af09 	bgt.w	800319e <_svfprintf_r+0xd86>
 800338c:	3408      	adds	r4, #8
 800338e:	e711      	b.n	80031b4 <_svfprintf_r+0xd9c>
 8003390:	9808      	ldr	r0, [sp, #32]
 8003392:	4631      	mov	r1, r6
 8003394:	aa25      	add	r2, sp, #148	; 0x94
 8003396:	f002 f8c7 	bl	8005528 <__ssprint_r>
 800339a:	2800      	cmp	r0, #0
 800339c:	f47f a904 	bne.w	80025a8 <_svfprintf_r+0x190>
 80033a0:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80033a4:	463c      	mov	r4, r7
 80033a6:	e4b7      	b.n	8002d18 <_svfprintf_r+0x900>
 80033a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80033aa:	4a8a      	ldr	r2, [pc, #552]	; (80035d4 <_svfprintf_r+0x11bc>)
 80033ac:	6022      	str	r2, [r4, #0]
 80033ae:	3301      	adds	r3, #1
 80033b0:	f10b 0b01 	add.w	fp, fp, #1
 80033b4:	2201      	movs	r2, #1
 80033b6:	2b07      	cmp	r3, #7
 80033b8:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80033bc:	9326      	str	r3, [sp, #152]	; 0x98
 80033be:	6062      	str	r2, [r4, #4]
 80033c0:	f300 80f3 	bgt.w	80035aa <_svfprintf_r+0x1192>
 80033c4:	3408      	adds	r4, #8
 80033c6:	b92d      	cbnz	r5, 80033d4 <_svfprintf_r+0xfbc>
 80033c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80033ca:	b91b      	cbnz	r3, 80033d4 <_svfprintf_r+0xfbc>
 80033cc:	9b07      	ldr	r3, [sp, #28]
 80033ce:	07db      	lsls	r3, r3, #31
 80033d0:	f57f aa25 	bpl.w	800281e <_svfprintf_r+0x406>
 80033d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80033d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80033d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80033da:	6022      	str	r2, [r4, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	eb0b 0100 	add.w	r1, fp, r0
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	9127      	str	r1, [sp, #156]	; 0x9c
 80033e6:	6060      	str	r0, [r4, #4]
 80033e8:	9326      	str	r3, [sp, #152]	; 0x98
 80033ea:	f300 81f3 	bgt.w	80037d4 <_svfprintf_r+0x13bc>
 80033ee:	f104 0208 	add.w	r2, r4, #8
 80033f2:	426d      	negs	r5, r5
 80033f4:	2d00      	cmp	r5, #0
 80033f6:	f340 80fc 	ble.w	80035f2 <_svfprintf_r+0x11da>
 80033fa:	2d10      	cmp	r5, #16
 80033fc:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80035d8 <_svfprintf_r+0x11c0>
 8003400:	f340 814a 	ble.w	8003698 <_svfprintf_r+0x1280>
 8003404:	2410      	movs	r4, #16
 8003406:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800340a:	e004      	b.n	8003416 <_svfprintf_r+0xffe>
 800340c:	3208      	adds	r2, #8
 800340e:	3d10      	subs	r5, #16
 8003410:	2d10      	cmp	r5, #16
 8003412:	f340 8141 	ble.w	8003698 <_svfprintf_r+0x1280>
 8003416:	3301      	adds	r3, #1
 8003418:	3110      	adds	r1, #16
 800341a:	2b07      	cmp	r3, #7
 800341c:	9127      	str	r1, [sp, #156]	; 0x9c
 800341e:	9326      	str	r3, [sp, #152]	; 0x98
 8003420:	f8c2 9000 	str.w	r9, [r2]
 8003424:	6054      	str	r4, [r2, #4]
 8003426:	ddf1      	ble.n	800340c <_svfprintf_r+0xff4>
 8003428:	4640      	mov	r0, r8
 800342a:	4631      	mov	r1, r6
 800342c:	aa25      	add	r2, sp, #148	; 0x94
 800342e:	f002 f87b 	bl	8005528 <__ssprint_r>
 8003432:	2800      	cmp	r0, #0
 8003434:	f47f a8b8 	bne.w	80025a8 <_svfprintf_r+0x190>
 8003438:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800343a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800343c:	463a      	mov	r2, r7
 800343e:	e7e6      	b.n	800340e <_svfprintf_r+0xff6>
 8003440:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003442:	46b1      	mov	r9, r6
 8003444:	2b00      	cmp	r3, #0
 8003446:	f43f a8b0 	beq.w	80025aa <_svfprintf_r+0x192>
 800344a:	9808      	ldr	r0, [sp, #32]
 800344c:	4631      	mov	r1, r6
 800344e:	aa25      	add	r2, sp, #148	; 0x94
 8003450:	f002 f86a 	bl	8005528 <__ssprint_r>
 8003454:	f7ff b8a9 	b.w	80025aa <_svfprintf_r+0x192>
 8003458:	f041 0120 	orr.w	r1, r1, #32
 800345c:	9107      	str	r1, [sp, #28]
 800345e:	785d      	ldrb	r5, [r3, #1]
 8003460:	1c59      	adds	r1, r3, #1
 8003462:	f7ff b82e 	b.w	80024c2 <_svfprintf_r+0xaa>
 8003466:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003468:	910e      	str	r1, [sp, #56]	; 0x38
 800346a:	4240      	negs	r0, r0
 800346c:	900c      	str	r0, [sp, #48]	; 0x30
 800346e:	4619      	mov	r1, r3
 8003470:	f7ff ba2b 	b.w	80028ca <_svfprintf_r+0x4b2>
 8003474:	9808      	ldr	r0, [sp, #32]
 8003476:	4631      	mov	r1, r6
 8003478:	aa25      	add	r2, sp, #148	; 0x94
 800347a:	f002 f855 	bl	8005528 <__ssprint_r>
 800347e:	2800      	cmp	r0, #0
 8003480:	f47f a892 	bne.w	80025a8 <_svfprintf_r+0x190>
 8003484:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8003488:	463c      	mov	r4, r7
 800348a:	e45b      	b.n	8002d44 <_svfprintf_r+0x92c>
 800348c:	f025 0320 	bic.w	r3, r5, #32
 8003490:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003494:	9309      	str	r3, [sp, #36]	; 0x24
 8003496:	f000 8095 	beq.w	80035c4 <_svfprintf_r+0x11ac>
 800349a:	2b47      	cmp	r3, #71	; 0x47
 800349c:	d105      	bne.n	80034aa <_svfprintf_r+0x1092>
 800349e:	f1ba 0f00 	cmp.w	sl, #0
 80034a2:	bf14      	ite	ne
 80034a4:	46d3      	movne	fp, sl
 80034a6:	f04f 0b01 	moveq.w	fp, #1
 80034aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80034ac:	9a07      	ldr	r2, [sp, #28]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b4:	920f      	str	r2, [sp, #60]	; 0x3c
 80034b6:	f2c0 81a8 	blt.w	800380a <_svfprintf_r+0x13f2>
 80034ba:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 80034be:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 80034c2:	f04f 0a00 	mov.w	sl, #0
 80034c6:	2d66      	cmp	r5, #102	; 0x66
 80034c8:	f000 80ae 	beq.w	8003628 <_svfprintf_r+0x1210>
 80034cc:	2d46      	cmp	r5, #70	; 0x46
 80034ce:	f000 80ab 	beq.w	8003628 <_svfprintf_r+0x1210>
 80034d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d4:	2b45      	cmp	r3, #69	; 0x45
 80034d6:	bf0c      	ite	eq
 80034d8:	f10b 0901 	addeq.w	r9, fp, #1
 80034dc:	46d9      	movne	r9, fp
 80034de:	2002      	movs	r0, #2
 80034e0:	a91f      	add	r1, sp, #124	; 0x7c
 80034e2:	aa20      	add	r2, sp, #128	; 0x80
 80034e4:	ab23      	add	r3, sp, #140	; 0x8c
 80034e6:	e88d 0201 	stmia.w	sp, {r0, r9}
 80034ea:	9203      	str	r2, [sp, #12]
 80034ec:	9304      	str	r3, [sp, #16]
 80034ee:	9102      	str	r1, [sp, #8]
 80034f0:	9808      	ldr	r0, [sp, #32]
 80034f2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80034f6:	f000 fa8f 	bl	8003a18 <_dtoa_r>
 80034fa:	2d67      	cmp	r5, #103	; 0x67
 80034fc:	9010      	str	r0, [sp, #64]	; 0x40
 80034fe:	d002      	beq.n	8003506 <_svfprintf_r+0x10ee>
 8003500:	2d47      	cmp	r5, #71	; 0x47
 8003502:	f040 80a1 	bne.w	8003648 <_svfprintf_r+0x1230>
 8003506:	9b07      	ldr	r3, [sp, #28]
 8003508:	07db      	lsls	r3, r3, #31
 800350a:	f140 8194 	bpl.w	8003836 <_svfprintf_r+0x141e>
 800350e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003510:	eb03 0809 	add.w	r8, r3, r9
 8003514:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8003518:	2200      	movs	r2, #0
 800351a:	2300      	movs	r3, #0
 800351c:	f003 f856 	bl	80065cc <__aeabi_dcmpeq>
 8003520:	2800      	cmp	r0, #0
 8003522:	f040 80ff 	bne.w	8003724 <_svfprintf_r+0x130c>
 8003526:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003528:	4598      	cmp	r8, r3
 800352a:	d906      	bls.n	800353a <_svfprintf_r+0x1122>
 800352c:	2130      	movs	r1, #48	; 0x30
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	9223      	str	r2, [sp, #140]	; 0x8c
 8003532:	7019      	strb	r1, [r3, #0]
 8003534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003536:	4598      	cmp	r8, r3
 8003538:	d8f9      	bhi.n	800352e <_svfprintf_r+0x1116>
 800353a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003542:	2b47      	cmp	r3, #71	; 0x47
 8003544:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003546:	f000 80e0 	beq.w	800370a <_svfprintf_r+0x12f2>
 800354a:	2d65      	cmp	r5, #101	; 0x65
 800354c:	f340 80fa 	ble.w	8003744 <_svfprintf_r+0x132c>
 8003550:	2d66      	cmp	r5, #102	; 0x66
 8003552:	9312      	str	r3, [sp, #72]	; 0x48
 8003554:	f000 8162 	beq.w	800381c <_svfprintf_r+0x1404>
 8003558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800355a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800355c:	4293      	cmp	r3, r2
 800355e:	f300 8146 	bgt.w	80037ee <_svfprintf_r+0x13d6>
 8003562:	9b07      	ldr	r3, [sp, #28]
 8003564:	07d9      	lsls	r1, r3, #31
 8003566:	f100 8168 	bmi.w	800383a <_svfprintf_r+0x1422>
 800356a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800356e:	920d      	str	r2, [sp, #52]	; 0x34
 8003570:	f1ba 0f00 	cmp.w	sl, #0
 8003574:	f040 80be 	bne.w	80036f4 <_svfprintf_r+0x12dc>
 8003578:	9309      	str	r3, [sp, #36]	; 0x24
 800357a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800357c:	9307      	str	r3, [sp, #28]
 800357e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8003582:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8003586:	f7ff b869 	b.w	800265c <_svfprintf_r+0x244>
 800358a:	9808      	ldr	r0, [sp, #32]
 800358c:	2140      	movs	r1, #64	; 0x40
 800358e:	f001 f98f 	bl	80048b0 <_malloc_r>
 8003592:	f8c9 0000 	str.w	r0, [r9]
 8003596:	f8c9 0010 	str.w	r0, [r9, #16]
 800359a:	2800      	cmp	r0, #0
 800359c:	f000 8199 	beq.w	80038d2 <_svfprintf_r+0x14ba>
 80035a0:	2340      	movs	r3, #64	; 0x40
 80035a2:	f8c9 3014 	str.w	r3, [r9, #20]
 80035a6:	f7fe bf4f 	b.w	8002448 <_svfprintf_r+0x30>
 80035aa:	9808      	ldr	r0, [sp, #32]
 80035ac:	4631      	mov	r1, r6
 80035ae:	aa25      	add	r2, sp, #148	; 0x94
 80035b0:	f001 ffba 	bl	8005528 <__ssprint_r>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	f47e aff7 	bne.w	80025a8 <_svfprintf_r+0x190>
 80035ba:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80035bc:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80035c0:	463c      	mov	r4, r7
 80035c2:	e700      	b.n	80033c6 <_svfprintf_r+0xfae>
 80035c4:	f04f 0b06 	mov.w	fp, #6
 80035c8:	e76f      	b.n	80034aa <_svfprintf_r+0x1092>
 80035ca:	bf00      	nop
 80035cc:	0800688c 	.word	0x0800688c
 80035d0:	08006888 	.word	0x08006888
 80035d4:	080068c0 	.word	0x080068c0
 80035d8:	080068c4 	.word	0x080068c4
 80035dc:	9808      	ldr	r0, [sp, #32]
 80035de:	4631      	mov	r1, r6
 80035e0:	aa25      	add	r2, sp, #148	; 0x94
 80035e2:	f001 ffa1 	bl	8005528 <__ssprint_r>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	f47e afde 	bne.w	80025a8 <_svfprintf_r+0x190>
 80035ec:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80035ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035f0:	463a      	mov	r2, r7
 80035f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80035f4:	6054      	str	r4, [r2, #4]
 80035f6:	3301      	adds	r3, #1
 80035f8:	eb01 0b04 	add.w	fp, r1, r4
 80035fc:	2b07      	cmp	r3, #7
 80035fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003600:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8003604:	9326      	str	r3, [sp, #152]	; 0x98
 8003606:	6011      	str	r1, [r2, #0]
 8003608:	f73f ac52 	bgt.w	8002eb0 <_svfprintf_r+0xa98>
 800360c:	f102 0408 	add.w	r4, r2, #8
 8003610:	f7ff b905 	b.w	800281e <_svfprintf_r+0x406>
 8003614:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8003618:	f001 ff58 	bl	80054cc <strlen>
 800361c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003620:	900d      	str	r0, [sp, #52]	; 0x34
 8003622:	4603      	mov	r3, r0
 8003624:	f7ff ba0e 	b.w	8002a44 <_svfprintf_r+0x62c>
 8003628:	2003      	movs	r0, #3
 800362a:	a91f      	add	r1, sp, #124	; 0x7c
 800362c:	aa20      	add	r2, sp, #128	; 0x80
 800362e:	ab23      	add	r3, sp, #140	; 0x8c
 8003630:	e88d 0801 	stmia.w	sp, {r0, fp}
 8003634:	9203      	str	r2, [sp, #12]
 8003636:	9304      	str	r3, [sp, #16]
 8003638:	9102      	str	r1, [sp, #8]
 800363a:	9808      	ldr	r0, [sp, #32]
 800363c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8003640:	f000 f9ea 	bl	8003a18 <_dtoa_r>
 8003644:	46d9      	mov	r9, fp
 8003646:	9010      	str	r0, [sp, #64]	; 0x40
 8003648:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800364a:	eb03 0809 	add.w	r8, r3, r9
 800364e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003650:	2b46      	cmp	r3, #70	; 0x46
 8003652:	f47f af5f 	bne.w	8003514 <_svfprintf_r+0x10fc>
 8003656:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b30      	cmp	r3, #48	; 0x30
 800365c:	f000 8103 	beq.w	8003866 <_svfprintf_r+0x144e>
 8003660:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003662:	4498      	add	r8, r3
 8003664:	e756      	b.n	8003514 <_svfprintf_r+0x10fc>
 8003666:	9808      	ldr	r0, [sp, #32]
 8003668:	4631      	mov	r1, r6
 800366a:	aa25      	add	r2, sp, #148	; 0x94
 800366c:	f001 ff5c 	bl	8005528 <__ssprint_r>
 8003670:	2800      	cmp	r0, #0
 8003672:	f47e af99 	bne.w	80025a8 <_svfprintf_r+0x190>
 8003676:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800367a:	463c      	mov	r4, r7
 800367c:	e49d      	b.n	8002fba <_svfprintf_r+0xba2>
 800367e:	9808      	ldr	r0, [sp, #32]
 8003680:	4631      	mov	r1, r6
 8003682:	aa25      	add	r2, sp, #148	; 0x94
 8003684:	f001 ff50 	bl	8005528 <__ssprint_r>
 8003688:	2800      	cmp	r0, #0
 800368a:	f47e af8d 	bne.w	80025a8 <_svfprintf_r+0x190>
 800368e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003690:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8003694:	463c      	mov	r4, r7
 8003696:	e598      	b.n	80031ca <_svfprintf_r+0xdb2>
 8003698:	3301      	adds	r3, #1
 800369a:	4429      	add	r1, r5
 800369c:	2b07      	cmp	r3, #7
 800369e:	9127      	str	r1, [sp, #156]	; 0x9c
 80036a0:	9326      	str	r3, [sp, #152]	; 0x98
 80036a2:	f8c2 9000 	str.w	r9, [r2]
 80036a6:	6055      	str	r5, [r2, #4]
 80036a8:	dc98      	bgt.n	80035dc <_svfprintf_r+0x11c4>
 80036aa:	3208      	adds	r2, #8
 80036ac:	e7a1      	b.n	80035f2 <_svfprintf_r+0x11da>
 80036ae:	4653      	mov	r3, sl
 80036b0:	2b06      	cmp	r3, #6
 80036b2:	bf28      	it	cs
 80036b4:	2306      	movcs	r3, #6
 80036b6:	930d      	str	r3, [sp, #52]	; 0x34
 80036b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80036bc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80036c0:	9309      	str	r3, [sp, #36]	; 0x24
 80036c2:	4b87      	ldr	r3, [pc, #540]	; (80038e0 <_svfprintf_r+0x14c8>)
 80036c4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80036c8:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80036cc:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80036d0:	9310      	str	r3, [sp, #64]	; 0x40
 80036d2:	f7fe bfc3 	b.w	800265c <_svfprintf_r+0x244>
 80036d6:	9808      	ldr	r0, [sp, #32]
 80036d8:	4631      	mov	r1, r6
 80036da:	aa25      	add	r2, sp, #148	; 0x94
 80036dc:	f001 ff24 	bl	8005528 <__ssprint_r>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	f47e af61 	bne.w	80025a8 <_svfprintf_r+0x190>
 80036e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80036e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80036ea:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	463c      	mov	r4, r7
 80036f2:	e580      	b.n	80031f6 <_svfprintf_r+0xdde>
 80036f4:	9309      	str	r3, [sp, #36]	; 0x24
 80036f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036f8:	9307      	str	r3, [sp, #28]
 80036fa:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80036fe:	2300      	movs	r3, #0
 8003700:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 8003704:	9311      	str	r3, [sp, #68]	; 0x44
 8003706:	f7fe bfac 	b.w	8002662 <_svfprintf_r+0x24a>
 800370a:	1cda      	adds	r2, r3, #3
 800370c:	db19      	blt.n	8003742 <_svfprintf_r+0x132a>
 800370e:	459b      	cmp	fp, r3
 8003710:	db17      	blt.n	8003742 <_svfprintf_r+0x132a>
 8003712:	9312      	str	r3, [sp, #72]	; 0x48
 8003714:	2567      	movs	r5, #103	; 0x67
 8003716:	e71f      	b.n	8003558 <_svfprintf_r+0x1140>
 8003718:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800371c:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 8003720:	f7ff ba8f 	b.w	8002c42 <_svfprintf_r+0x82a>
 8003724:	4643      	mov	r3, r8
 8003726:	e708      	b.n	800353a <_svfprintf_r+0x1122>
 8003728:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800372c:	9011      	str	r0, [sp, #68]	; 0x44
 800372e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003732:	9012      	str	r0, [sp, #72]	; 0x48
 8003734:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8003738:	9309      	str	r3, [sp, #36]	; 0x24
 800373a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800373e:	f7fe bf8d 	b.w	800265c <_svfprintf_r+0x244>
 8003742:	3d02      	subs	r5, #2
 8003744:	3b01      	subs	r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	931f      	str	r3, [sp, #124]	; 0x7c
 800374a:	bfba      	itte	lt
 800374c:	425b      	neglt	r3, r3
 800374e:	222d      	movlt	r2, #45	; 0x2d
 8003750:	222b      	movge	r2, #43	; 0x2b
 8003752:	2b09      	cmp	r3, #9
 8003754:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
 8003758:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 800375c:	dd7b      	ble.n	8003856 <_svfprintf_r+0x143e>
 800375e:	f10d 0e93 	add.w	lr, sp, #147	; 0x93
 8003762:	4670      	mov	r0, lr
 8003764:	4a5f      	ldr	r2, [pc, #380]	; (80038e4 <_svfprintf_r+0x14cc>)
 8003766:	fb82 2103 	smull	r2, r1, r2, r3
 800376a:	17da      	asrs	r2, r3, #31
 800376c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003770:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003774:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003778:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800377c:	2a09      	cmp	r2, #9
 800377e:	4613      	mov	r3, r2
 8003780:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8003784:	dcee      	bgt.n	8003764 <_svfprintf_r+0x134c>
 8003786:	4602      	mov	r2, r0
 8003788:	3330      	adds	r3, #48	; 0x30
 800378a:	b2d9      	uxtb	r1, r3
 800378c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8003790:	4596      	cmp	lr, r2
 8003792:	f240 809b 	bls.w	80038cc <_svfprintf_r+0x14b4>
 8003796:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 800379a:	4603      	mov	r3, r0
 800379c:	e001      	b.n	80037a2 <_svfprintf_r+0x138a>
 800379e:	f813 1b01 	ldrb.w	r1, [r3], #1
 80037a2:	f802 1b01 	strb.w	r1, [r2], #1
 80037a6:	4573      	cmp	r3, lr
 80037a8:	d1f9      	bne.n	800379e <_svfprintf_r+0x1386>
 80037aa:	ab25      	add	r3, sp, #148	; 0x94
 80037ac:	1a1b      	subs	r3, r3, r0
 80037ae:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 80037b2:	4413      	add	r3, r2
 80037b4:	aa21      	add	r2, sp, #132	; 0x84
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80037ba:	9319      	str	r3, [sp, #100]	; 0x64
 80037bc:	2a01      	cmp	r2, #1
 80037be:	4413      	add	r3, r2
 80037c0:	930d      	str	r3, [sp, #52]	; 0x34
 80037c2:	dd74      	ble.n	80038ae <_svfprintf_r+0x1496>
 80037c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037c6:	2200      	movs	r2, #0
 80037c8:	3301      	adds	r3, #1
 80037ca:	930d      	str	r3, [sp, #52]	; 0x34
 80037cc:	9212      	str	r2, [sp, #72]	; 0x48
 80037ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80037d2:	e6cd      	b.n	8003570 <_svfprintf_r+0x1158>
 80037d4:	9808      	ldr	r0, [sp, #32]
 80037d6:	4631      	mov	r1, r6
 80037d8:	aa25      	add	r2, sp, #148	; 0x94
 80037da:	f001 fea5 	bl	8005528 <__ssprint_r>
 80037de:	2800      	cmp	r0, #0
 80037e0:	f47e aee2 	bne.w	80025a8 <_svfprintf_r+0x190>
 80037e4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80037e6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80037e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80037ea:	463a      	mov	r2, r7
 80037ec:	e601      	b.n	80033f2 <_svfprintf_r+0xfda>
 80037ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bfd8      	it	le
 80037f4:	f1c3 0802 	rsble	r8, r3, #2
 80037f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80037fa:	bfc8      	it	gt
 80037fc:	f04f 0801 	movgt.w	r8, #1
 8003800:	4443      	add	r3, r8
 8003802:	930d      	str	r3, [sp, #52]	; 0x34
 8003804:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003808:	e6b2      	b.n	8003570 <_svfprintf_r+0x1158>
 800380a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800380e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003812:	901a      	str	r0, [sp, #104]	; 0x68
 8003814:	931b      	str	r3, [sp, #108]	; 0x6c
 8003816:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 800381a:	e654      	b.n	80034c6 <_svfprintf_r+0x10ae>
 800381c:	2b00      	cmp	r3, #0
 800381e:	dd3d      	ble.n	800389c <_svfprintf_r+0x1484>
 8003820:	f1bb 0f00 	cmp.w	fp, #0
 8003824:	d10f      	bne.n	8003846 <_svfprintf_r+0x142e>
 8003826:	9b07      	ldr	r3, [sp, #28]
 8003828:	07db      	lsls	r3, r3, #31
 800382a:	d40c      	bmi.n	8003846 <_svfprintf_r+0x142e>
 800382c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800382e:	920d      	str	r2, [sp, #52]	; 0x34
 8003830:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003834:	e69c      	b.n	8003570 <_svfprintf_r+0x1158>
 8003836:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003838:	e67f      	b.n	800353a <_svfprintf_r+0x1122>
 800383a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800383c:	3301      	adds	r3, #1
 800383e:	930d      	str	r3, [sp, #52]	; 0x34
 8003840:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003844:	e694      	b.n	8003570 <_svfprintf_r+0x1158>
 8003846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003848:	f10b 0801 	add.w	r8, fp, #1
 800384c:	4443      	add	r3, r8
 800384e:	930d      	str	r3, [sp, #52]	; 0x34
 8003850:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003854:	e68c      	b.n	8003570 <_svfprintf_r+0x1158>
 8003856:	3330      	adds	r3, #48	; 0x30
 8003858:	2230      	movs	r2, #48	; 0x30
 800385a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 800385e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 8003862:	ab22      	add	r3, sp, #136	; 0x88
 8003864:	e7a6      	b.n	80037b4 <_svfprintf_r+0x139c>
 8003866:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800386a:	2200      	movs	r2, #0
 800386c:	2300      	movs	r3, #0
 800386e:	f002 fead 	bl	80065cc <__aeabi_dcmpeq>
 8003872:	2800      	cmp	r0, #0
 8003874:	f47f aef4 	bne.w	8003660 <_svfprintf_r+0x1248>
 8003878:	f1c9 0301 	rsb	r3, r9, #1
 800387c:	931f      	str	r3, [sp, #124]	; 0x7c
 800387e:	4498      	add	r8, r3
 8003880:	e648      	b.n	8003514 <_svfprintf_r+0x10fc>
 8003882:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003884:	f8d5 a000 	ldr.w	sl, [r5]
 8003888:	4628      	mov	r0, r5
 800388a:	3004      	adds	r0, #4
 800388c:	f1ba 0f00 	cmp.w	sl, #0
 8003890:	785d      	ldrb	r5, [r3, #1]
 8003892:	900e      	str	r0, [sp, #56]	; 0x38
 8003894:	f6be ae15 	bge.w	80024c2 <_svfprintf_r+0xaa>
 8003898:	f7fe be11 	b.w	80024be <_svfprintf_r+0xa6>
 800389c:	f1bb 0f00 	cmp.w	fp, #0
 80038a0:	d10e      	bne.n	80038c0 <_svfprintf_r+0x14a8>
 80038a2:	9b07      	ldr	r3, [sp, #28]
 80038a4:	07d8      	lsls	r0, r3, #31
 80038a6:	d40b      	bmi.n	80038c0 <_svfprintf_r+0x14a8>
 80038a8:	2301      	movs	r3, #1
 80038aa:	930d      	str	r3, [sp, #52]	; 0x34
 80038ac:	e660      	b.n	8003570 <_svfprintf_r+0x1158>
 80038ae:	9b07      	ldr	r3, [sp, #28]
 80038b0:	f013 0301 	ands.w	r3, r3, #1
 80038b4:	d186      	bne.n	80037c4 <_svfprintf_r+0x13ac>
 80038b6:	9312      	str	r3, [sp, #72]	; 0x48
 80038b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80038be:	e657      	b.n	8003570 <_svfprintf_r+0x1158>
 80038c0:	f10b 0302 	add.w	r3, fp, #2
 80038c4:	930d      	str	r3, [sp, #52]	; 0x34
 80038c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80038ca:	e651      	b.n	8003570 <_svfprintf_r+0x1158>
 80038cc:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 80038d0:	e770      	b.n	80037b4 <_svfprintf_r+0x139c>
 80038d2:	9a08      	ldr	r2, [sp, #32]
 80038d4:	230c      	movs	r3, #12
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7fe be6e 	b.w	80025bc <_svfprintf_r+0x1a4>
 80038e0:	080068b8 	.word	0x080068b8
 80038e4:	66666667 	.word	0x66666667

080038e8 <quorem>:
 80038e8:	6902      	ldr	r2, [r0, #16]
 80038ea:	690b      	ldr	r3, [r1, #16]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f300 808f 	bgt.w	8003a10 <quorem+0x128>
 80038f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80038fa:	f101 0714 	add.w	r7, r1, #20
 80038fe:	f100 0b14 	add.w	fp, r0, #20
 8003902:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8003906:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800390a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800390e:	b083      	sub	sp, #12
 8003910:	3201      	adds	r2, #1
 8003912:	fbb3 f9f2 	udiv	r9, r3, r2
 8003916:	eb0b 0304 	add.w	r3, fp, r4
 800391a:	9400      	str	r4, [sp, #0]
 800391c:	eb07 0a04 	add.w	sl, r7, r4
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	f1b9 0f00 	cmp.w	r9, #0
 8003926:	d03b      	beq.n	80039a0 <quorem+0xb8>
 8003928:	2600      	movs	r6, #0
 800392a:	4632      	mov	r2, r6
 800392c:	46bc      	mov	ip, r7
 800392e:	46de      	mov	lr, fp
 8003930:	4634      	mov	r4, r6
 8003932:	f85c 6b04 	ldr.w	r6, [ip], #4
 8003936:	f8de 5000 	ldr.w	r5, [lr]
 800393a:	b2b3      	uxth	r3, r6
 800393c:	0c36      	lsrs	r6, r6, #16
 800393e:	fb03 4409 	mla	r4, r3, r9, r4
 8003942:	fb06 f609 	mul.w	r6, r6, r9
 8003946:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800394a:	b2a3      	uxth	r3, r4
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	b2b4      	uxth	r4, r6
 8003950:	fa13 f385 	uxtah	r3, r3, r5
 8003954:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8003958:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800395c:	b29b      	uxth	r3, r3
 800395e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003962:	45e2      	cmp	sl, ip
 8003964:	ea4f 4224 	mov.w	r2, r4, asr #16
 8003968:	f84e 3b04 	str.w	r3, [lr], #4
 800396c:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8003970:	d2df      	bcs.n	8003932 <quorem+0x4a>
 8003972:	9b00      	ldr	r3, [sp, #0]
 8003974:	f85b 3003 	ldr.w	r3, [fp, r3]
 8003978:	b993      	cbnz	r3, 80039a0 <quorem+0xb8>
 800397a:	9c01      	ldr	r4, [sp, #4]
 800397c:	1f23      	subs	r3, r4, #4
 800397e:	459b      	cmp	fp, r3
 8003980:	d20c      	bcs.n	800399c <quorem+0xb4>
 8003982:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003986:	b94b      	cbnz	r3, 800399c <quorem+0xb4>
 8003988:	f1a4 0308 	sub.w	r3, r4, #8
 800398c:	e002      	b.n	8003994 <quorem+0xac>
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	3b04      	subs	r3, #4
 8003992:	b91a      	cbnz	r2, 800399c <quorem+0xb4>
 8003994:	459b      	cmp	fp, r3
 8003996:	f108 38ff 	add.w	r8, r8, #4294967295
 800399a:	d3f8      	bcc.n	800398e <quorem+0xa6>
 800399c:	f8c0 8010 	str.w	r8, [r0, #16]
 80039a0:	4604      	mov	r4, r0
 80039a2:	f001 fc6b 	bl	800527c <__mcmp>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	db2e      	blt.n	8003a08 <quorem+0x120>
 80039aa:	f109 0901 	add.w	r9, r9, #1
 80039ae:	465d      	mov	r5, fp
 80039b0:	2300      	movs	r3, #0
 80039b2:	f857 1b04 	ldr.w	r1, [r7], #4
 80039b6:	6828      	ldr	r0, [r5, #0]
 80039b8:	b28a      	uxth	r2, r1
 80039ba:	1a9a      	subs	r2, r3, r2
 80039bc:	0c09      	lsrs	r1, r1, #16
 80039be:	fa12 f280 	uxtah	r2, r2, r0
 80039c2:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80039c6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80039ca:	b291      	uxth	r1, r2
 80039cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80039d0:	45ba      	cmp	sl, r7
 80039d2:	f845 1b04 	str.w	r1, [r5], #4
 80039d6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80039da:	d2ea      	bcs.n	80039b2 <quorem+0xca>
 80039dc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80039e0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80039e4:	b982      	cbnz	r2, 8003a08 <quorem+0x120>
 80039e6:	1f1a      	subs	r2, r3, #4
 80039e8:	4593      	cmp	fp, r2
 80039ea:	d20b      	bcs.n	8003a04 <quorem+0x11c>
 80039ec:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80039f0:	b942      	cbnz	r2, 8003a04 <quorem+0x11c>
 80039f2:	3b08      	subs	r3, #8
 80039f4:	e002      	b.n	80039fc <quorem+0x114>
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	3b04      	subs	r3, #4
 80039fa:	b91a      	cbnz	r2, 8003a04 <quorem+0x11c>
 80039fc:	459b      	cmp	fp, r3
 80039fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8003a02:	d3f8      	bcc.n	80039f6 <quorem+0x10e>
 8003a04:	f8c4 8010 	str.w	r8, [r4, #16]
 8003a08:	4648      	mov	r0, r9
 8003a0a:	b003      	add	sp, #12
 8003a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a10:	2000      	movs	r0, #0
 8003a12:	4770      	bx	lr
 8003a14:	0000      	movs	r0, r0
	...

08003a18 <_dtoa_r>:
 8003a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a1e:	b097      	sub	sp, #92	; 0x5c
 8003a20:	4604      	mov	r4, r0
 8003a22:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8003a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a28:	b141      	cbz	r1, 8003a3c <_dtoa_r+0x24>
 8003a2a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003a2c:	604a      	str	r2, [r1, #4]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4093      	lsls	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]
 8003a34:	f001 fa3e 	bl	8004eb4 <_Bfree>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6423      	str	r3, [r4, #64]	; 0x40
 8003a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	4699      	mov	r9, r3
 8003a44:	db36      	blt.n	8003ab4 <_dtoa_r+0x9c>
 8003a46:	2300      	movs	r3, #0
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	4ba5      	ldr	r3, [pc, #660]	; (8003ce0 <_dtoa_r+0x2c8>)
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	ea09 0303 	and.w	r3, r9, r3
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d017      	beq.n	8003a86 <_dtoa_r+0x6e>
 8003a56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	4639      	mov	r1, r7
 8003a62:	f002 fdb3 	bl	80065cc <__aeabi_dcmpeq>
 8003a66:	4680      	mov	r8, r0
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d02b      	beq.n	8003ac4 <_dtoa_r+0xac>
 8003a6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a6e:	2301      	movs	r3, #1
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80cb 	beq.w	8003c10 <_dtoa_r+0x1f8>
 8003a7a:	489a      	ldr	r0, [pc, #616]	; (8003ce4 <_dtoa_r+0x2cc>)
 8003a7c:	6018      	str	r0, [r3, #0]
 8003a7e:	3801      	subs	r0, #1
 8003a80:	b017      	add	sp, #92	; 0x5c
 8003a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a86:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a88:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	9b02      	ldr	r3, [sp, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80a6 	beq.w	8003be2 <_dtoa_r+0x1ca>
 8003a96:	4894      	ldr	r0, [pc, #592]	; (8003ce8 <_dtoa_r+0x2d0>)
 8003a98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <_dtoa_r+0x68>
 8003a9e:	78c3      	ldrb	r3, [r0, #3]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80b7 	beq.w	8003c14 <_dtoa_r+0x1fc>
 8003aa6:	f100 0308 	add.w	r3, r0, #8
 8003aaa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	b017      	add	sp, #92	; 0x5c
 8003ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab4:	9a03      	ldr	r2, [sp, #12]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8003abc:	602b      	str	r3, [r5, #0]
 8003abe:	f8cd 900c 	str.w	r9, [sp, #12]
 8003ac2:	e7c2      	b.n	8003a4a <_dtoa_r+0x32>
 8003ac4:	aa15      	add	r2, sp, #84	; 0x54
 8003ac6:	ab14      	add	r3, sp, #80	; 0x50
 8003ac8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003acc:	4620      	mov	r0, r4
 8003ace:	4632      	mov	r2, r6
 8003ad0:	463b      	mov	r3, r7
 8003ad2:	f001 fc61 	bl	8005398 <__d2b>
 8003ad6:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8003ada:	4683      	mov	fp, r0
 8003adc:	f040 808a 	bne.w	8003bf4 <_dtoa_r+0x1dc>
 8003ae0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003ae4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003ae6:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8003aea:	4445      	add	r5, r8
 8003aec:	429d      	cmp	r5, r3
 8003aee:	f2c0 8297 	blt.w	8004020 <_dtoa_r+0x608>
 8003af2:	4a7e      	ldr	r2, [pc, #504]	; (8003cec <_dtoa_r+0x2d4>)
 8003af4:	1b52      	subs	r2, r2, r5
 8003af6:	fa09 f902 	lsl.w	r9, r9, r2
 8003afa:	9a02      	ldr	r2, [sp, #8]
 8003afc:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8003b00:	fa22 f003 	lsr.w	r0, r2, r3
 8003b04:	ea49 0000 	orr.w	r0, r9, r0
 8003b08:	f002 fa82 	bl	8006010 <__aeabi_ui2d>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	3d01      	subs	r5, #1
 8003b10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003b14:	930d      	str	r3, [sp, #52]	; 0x34
 8003b16:	2200      	movs	r2, #0
 8003b18:	4b75      	ldr	r3, [pc, #468]	; (8003cf0 <_dtoa_r+0x2d8>)
 8003b1a:	f002 f93b 	bl	8005d94 <__aeabi_dsub>
 8003b1e:	a36a      	add	r3, pc, #424	; (adr r3, 8003cc8 <_dtoa_r+0x2b0>)
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f002 faea 	bl	80060fc <__aeabi_dmul>
 8003b28:	a369      	add	r3, pc, #420	; (adr r3, 8003cd0 <_dtoa_r+0x2b8>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f002 f933 	bl	8005d98 <__adddf3>
 8003b32:	4606      	mov	r6, r0
 8003b34:	4628      	mov	r0, r5
 8003b36:	460f      	mov	r7, r1
 8003b38:	f002 fa7a 	bl	8006030 <__aeabi_i2d>
 8003b3c:	a366      	add	r3, pc, #408	; (adr r3, 8003cd8 <_dtoa_r+0x2c0>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f002 fadb 	bl	80060fc <__aeabi_dmul>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	4639      	mov	r1, r7
 8003b4e:	f002 f923 	bl	8005d98 <__adddf3>
 8003b52:	4606      	mov	r6, r0
 8003b54:	460f      	mov	r7, r1
 8003b56:	f002 fd6b 	bl	8006630 <__aeabi_d2iz>
 8003b5a:	4639      	mov	r1, r7
 8003b5c:	9004      	str	r0, [sp, #16]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4630      	mov	r0, r6
 8003b62:	2300      	movs	r3, #0
 8003b64:	f002 fd3c 	bl	80065e0 <__aeabi_dcmplt>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	f040 81a6 	bne.w	8003eba <_dtoa_r+0x4a2>
 8003b6e:	9b04      	ldr	r3, [sp, #16]
 8003b70:	2b16      	cmp	r3, #22
 8003b72:	f200 819f 	bhi.w	8003eb4 <_dtoa_r+0x49c>
 8003b76:	9a04      	ldr	r2, [sp, #16]
 8003b78:	4b5e      	ldr	r3, [pc, #376]	; (8003cf4 <_dtoa_r+0x2dc>)
 8003b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b86:	f002 fd49 	bl	800661c <__aeabi_dcmpgt>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	f000 824e 	beq.w	800402c <_dtoa_r+0x614>
 8003b90:	9b04      	ldr	r3, [sp, #16]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	9304      	str	r3, [sp, #16]
 8003b96:	2300      	movs	r3, #0
 8003b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b9a:	ebc5 0508 	rsb	r5, r5, r8
 8003b9e:	f1b5 0a01 	subs.w	sl, r5, #1
 8003ba2:	f100 81a1 	bmi.w	8003ee8 <_dtoa_r+0x4d0>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9305      	str	r3, [sp, #20]
 8003baa:	9b04      	ldr	r3, [sp, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f2c0 8192 	blt.w	8003ed6 <_dtoa_r+0x4be>
 8003bb2:	449a      	add	sl, r3
 8003bb4:	930a      	str	r3, [sp, #40]	; 0x28
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9308      	str	r3, [sp, #32]
 8003bba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d82b      	bhi.n	8003c18 <_dtoa_r+0x200>
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	f340 866d 	ble.w	80048a0 <_dtoa_r+0xe88>
 8003bc6:	3b04      	subs	r3, #4
 8003bc8:	9320      	str	r3, [sp, #128]	; 0x80
 8003bca:	2500      	movs	r5, #0
 8003bcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003bce:	3b02      	subs	r3, #2
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	f200 864b 	bhi.w	800486c <_dtoa_r+0xe54>
 8003bd6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003bda:	03cc      	.short	0x03cc
 8003bdc:	02b203be 	.word	0x02b203be
 8003be0:	0660      	.short	0x0660
 8003be2:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <_dtoa_r+0x2d0>)
 8003be4:	4a44      	ldr	r2, [pc, #272]	; (8003cf8 <_dtoa_r+0x2e0>)
 8003be6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8003bea:	2800      	cmp	r0, #0
 8003bec:	bf14      	ite	ne
 8003bee:	4618      	movne	r0, r3
 8003bf0:	4610      	moveq	r0, r2
 8003bf2:	e751      	b.n	8003a98 <_dtoa_r+0x80>
 8003bf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003bf8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003bfc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8003c00:	4630      	mov	r0, r6
 8003c02:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003c06:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003c0a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003c0e:	e782      	b.n	8003b16 <_dtoa_r+0xfe>
 8003c10:	483a      	ldr	r0, [pc, #232]	; (8003cfc <_dtoa_r+0x2e4>)
 8003c12:	e735      	b.n	8003a80 <_dtoa_r+0x68>
 8003c14:	1cc3      	adds	r3, r0, #3
 8003c16:	e748      	b.n	8003aaa <_dtoa_r+0x92>
 8003c18:	2100      	movs	r1, #0
 8003c1a:	6461      	str	r1, [r4, #68]	; 0x44
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	9120      	str	r1, [sp, #128]	; 0x80
 8003c20:	f001 f922 	bl	8004e68 <_Balloc>
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	9306      	str	r3, [sp, #24]
 8003c2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c2c:	930c      	str	r3, [sp, #48]	; 0x30
 8003c2e:	2301      	movs	r3, #1
 8003c30:	9007      	str	r0, [sp, #28]
 8003c32:	9221      	str	r2, [sp, #132]	; 0x84
 8003c34:	6420      	str	r0, [r4, #64]	; 0x40
 8003c36:	9309      	str	r3, [sp, #36]	; 0x24
 8003c38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f2c0 80d2 	blt.w	8003de4 <_dtoa_r+0x3cc>
 8003c40:	9a04      	ldr	r2, [sp, #16]
 8003c42:	2a0e      	cmp	r2, #14
 8003c44:	f300 80ce 	bgt.w	8003de4 <_dtoa_r+0x3cc>
 8003c48:	4b2a      	ldr	r3, [pc, #168]	; (8003cf4 <_dtoa_r+0x2dc>)
 8003c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f2c0 838f 	blt.w	8004378 <_dtoa_r+0x960>
 8003c5a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c5e:	4642      	mov	r2, r8
 8003c60:	464b      	mov	r3, r9
 8003c62:	4630      	mov	r0, r6
 8003c64:	4639      	mov	r1, r7
 8003c66:	f002 fb73 	bl	8006350 <__aeabi_ddiv>
 8003c6a:	f002 fce1 	bl	8006630 <__aeabi_d2iz>
 8003c6e:	4682      	mov	sl, r0
 8003c70:	f002 f9de 	bl	8006030 <__aeabi_i2d>
 8003c74:	4642      	mov	r2, r8
 8003c76:	464b      	mov	r3, r9
 8003c78:	f002 fa40 	bl	80060fc <__aeabi_dmul>
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4639      	mov	r1, r7
 8003c82:	4630      	mov	r0, r6
 8003c84:	f002 f886 	bl	8005d94 <__aeabi_dsub>
 8003c88:	9d07      	ldr	r5, [sp, #28]
 8003c8a:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8003c8e:	702b      	strb	r3, [r5, #0]
 8003c90:	9b06      	ldr	r3, [sp, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	4606      	mov	r6, r0
 8003c96:	460f      	mov	r7, r1
 8003c98:	f105 0501 	add.w	r5, r5, #1
 8003c9c:	d062      	beq.n	8003d64 <_dtoa_r+0x34c>
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <_dtoa_r+0x2e8>)
 8003ca2:	f002 fa2b 	bl	80060fc <__aeabi_dmul>
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4606      	mov	r6, r0
 8003cac:	460f      	mov	r7, r1
 8003cae:	f002 fc8d 	bl	80065cc <__aeabi_dcmpeq>
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	f040 8083 	bne.w	8003dbe <_dtoa_r+0x3a6>
 8003cb8:	f8cd b008 	str.w	fp, [sp, #8]
 8003cbc:	9405      	str	r4, [sp, #20]
 8003cbe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003cc2:	9c06      	ldr	r4, [sp, #24]
 8003cc4:	e029      	b.n	8003d1a <_dtoa_r+0x302>
 8003cc6:	bf00      	nop
 8003cc8:	636f4361 	.word	0x636f4361
 8003ccc:	3fd287a7 	.word	0x3fd287a7
 8003cd0:	8b60c8b3 	.word	0x8b60c8b3
 8003cd4:	3fc68a28 	.word	0x3fc68a28
 8003cd8:	509f79fb 	.word	0x509f79fb
 8003cdc:	3fd34413 	.word	0x3fd34413
 8003ce0:	7ff00000 	.word	0x7ff00000
 8003ce4:	080068c1 	.word	0x080068c1
 8003ce8:	080069e4 	.word	0x080069e4
 8003cec:	fffffc0e 	.word	0xfffffc0e
 8003cf0:	3ff80000 	.word	0x3ff80000
 8003cf4:	080069f8 	.word	0x080069f8
 8003cf8:	080069d8 	.word	0x080069d8
 8003cfc:	080068c0 	.word	0x080068c0
 8003d00:	40240000 	.word	0x40240000
 8003d04:	f002 f9fa 	bl	80060fc <__aeabi_dmul>
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	460f      	mov	r7, r1
 8003d10:	f002 fc5c 	bl	80065cc <__aeabi_dcmpeq>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f040 83de 	bne.w	80044d6 <_dtoa_r+0xabe>
 8003d1a:	4642      	mov	r2, r8
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	4630      	mov	r0, r6
 8003d20:	4639      	mov	r1, r7
 8003d22:	f002 fb15 	bl	8006350 <__aeabi_ddiv>
 8003d26:	f002 fc83 	bl	8006630 <__aeabi_d2iz>
 8003d2a:	4682      	mov	sl, r0
 8003d2c:	f002 f980 	bl	8006030 <__aeabi_i2d>
 8003d30:	4642      	mov	r2, r8
 8003d32:	464b      	mov	r3, r9
 8003d34:	f002 f9e2 	bl	80060fc <__aeabi_dmul>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	4639      	mov	r1, r7
 8003d40:	f002 f828 	bl	8005d94 <__aeabi_dsub>
 8003d44:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8003d48:	f805 eb01 	strb.w	lr, [r5], #1
 8003d4c:	ebcb 0e05 	rsb	lr, fp, r5
 8003d50:	4574      	cmp	r4, lr
 8003d52:	4606      	mov	r6, r0
 8003d54:	460f      	mov	r7, r1
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	4bb5      	ldr	r3, [pc, #724]	; (8004030 <_dtoa_r+0x618>)
 8003d5c:	d1d2      	bne.n	8003d04 <_dtoa_r+0x2ec>
 8003d5e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003d62:	9c05      	ldr	r4, [sp, #20]
 8003d64:	4632      	mov	r2, r6
 8003d66:	463b      	mov	r3, r7
 8003d68:	4630      	mov	r0, r6
 8003d6a:	4639      	mov	r1, r7
 8003d6c:	f002 f814 	bl	8005d98 <__adddf3>
 8003d70:	4606      	mov	r6, r0
 8003d72:	460f      	mov	r7, r1
 8003d74:	4640      	mov	r0, r8
 8003d76:	4649      	mov	r1, r9
 8003d78:	4632      	mov	r2, r6
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	f002 fc30 	bl	80065e0 <__aeabi_dcmplt>
 8003d80:	b948      	cbnz	r0, 8003d96 <_dtoa_r+0x37e>
 8003d82:	4640      	mov	r0, r8
 8003d84:	4649      	mov	r1, r9
 8003d86:	4632      	mov	r2, r6
 8003d88:	463b      	mov	r3, r7
 8003d8a:	f002 fc1f 	bl	80065cc <__aeabi_dcmpeq>
 8003d8e:	b1b0      	cbz	r0, 8003dbe <_dtoa_r+0x3a6>
 8003d90:	f01a 0f01 	tst.w	sl, #1
 8003d94:	d013      	beq.n	8003dbe <_dtoa_r+0x3a6>
 8003d96:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8003d9a:	9907      	ldr	r1, [sp, #28]
 8003d9c:	1e6b      	subs	r3, r5, #1
 8003d9e:	e004      	b.n	8003daa <_dtoa_r+0x392>
 8003da0:	428b      	cmp	r3, r1
 8003da2:	f000 8442 	beq.w	800462a <_dtoa_r+0xc12>
 8003da6:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 8003daa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003dae:	f103 0501 	add.w	r5, r3, #1
 8003db2:	461a      	mov	r2, r3
 8003db4:	d0f4      	beq.n	8003da0 <_dtoa_r+0x388>
 8003db6:	f108 0301 	add.w	r3, r8, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	7013      	strb	r3, [r2, #0]
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	4659      	mov	r1, fp
 8003dc2:	f001 f877 	bl	8004eb4 <_Bfree>
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	9b04      	ldr	r3, [sp, #16]
 8003dca:	702a      	strb	r2, [r5, #0]
 8003dcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8345 	beq.w	8004464 <_dtoa_r+0xa4c>
 8003dda:	9807      	ldr	r0, [sp, #28]
 8003ddc:	601d      	str	r5, [r3, #0]
 8003dde:	b017      	add	sp, #92	; 0x5c
 8003de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003de6:	2a00      	cmp	r2, #0
 8003de8:	f000 8084 	beq.w	8003ef4 <_dtoa_r+0x4dc>
 8003dec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003dee:	2a01      	cmp	r2, #1
 8003df0:	f340 8304 	ble.w	80043fc <_dtoa_r+0x9e4>
 8003df4:	9b06      	ldr	r3, [sp, #24]
 8003df6:	1e5f      	subs	r7, r3, #1
 8003df8:	9b08      	ldr	r3, [sp, #32]
 8003dfa:	42bb      	cmp	r3, r7
 8003dfc:	f2c0 83a0 	blt.w	8004540 <_dtoa_r+0xb28>
 8003e00:	1bdf      	subs	r7, r3, r7
 8003e02:	9b06      	ldr	r3, [sp, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f2c0 849e 	blt.w	8004746 <_dtoa_r+0xd2e>
 8003e0a:	9d05      	ldr	r5, [sp, #20]
 8003e0c:	9b06      	ldr	r3, [sp, #24]
 8003e0e:	9a05      	ldr	r2, [sp, #20]
 8003e10:	4620      	mov	r0, r4
 8003e12:	441a      	add	r2, r3
 8003e14:	2101      	movs	r1, #1
 8003e16:	9205      	str	r2, [sp, #20]
 8003e18:	449a      	add	sl, r3
 8003e1a:	f001 f8e5 	bl	8004fe8 <__i2b>
 8003e1e:	4606      	mov	r6, r0
 8003e20:	b165      	cbz	r5, 8003e3c <_dtoa_r+0x424>
 8003e22:	f1ba 0f00 	cmp.w	sl, #0
 8003e26:	dd09      	ble.n	8003e3c <_dtoa_r+0x424>
 8003e28:	45aa      	cmp	sl, r5
 8003e2a:	9a05      	ldr	r2, [sp, #20]
 8003e2c:	4653      	mov	r3, sl
 8003e2e:	bfa8      	it	ge
 8003e30:	462b      	movge	r3, r5
 8003e32:	1ad2      	subs	r2, r2, r3
 8003e34:	9205      	str	r2, [sp, #20]
 8003e36:	1aed      	subs	r5, r5, r3
 8003e38:	ebc3 0a0a 	rsb	sl, r3, sl
 8003e3c:	9b08      	ldr	r3, [sp, #32]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	dd1a      	ble.n	8003e78 <_dtoa_r+0x460>
 8003e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8374 	beq.w	8004532 <_dtoa_r+0xb1a>
 8003e4a:	2f00      	cmp	r7, #0
 8003e4c:	dd10      	ble.n	8003e70 <_dtoa_r+0x458>
 8003e4e:	4631      	mov	r1, r6
 8003e50:	463a      	mov	r2, r7
 8003e52:	4620      	mov	r0, r4
 8003e54:	f001 f96c 	bl	8005130 <__pow5mult>
 8003e58:	4606      	mov	r6, r0
 8003e5a:	465a      	mov	r2, fp
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f001 f8cc 	bl	8004ffc <__multiply>
 8003e64:	4659      	mov	r1, fp
 8003e66:	4680      	mov	r8, r0
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f001 f823 	bl	8004eb4 <_Bfree>
 8003e6e:	46c3      	mov	fp, r8
 8003e70:	9b08      	ldr	r3, [sp, #32]
 8003e72:	1bda      	subs	r2, r3, r7
 8003e74:	f040 82a2 	bne.w	80043bc <_dtoa_r+0x9a4>
 8003e78:	4620      	mov	r0, r4
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	f001 f8b4 	bl	8004fe8 <__i2b>
 8003e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	4680      	mov	r8, r0
 8003e86:	dd39      	ble.n	8003efc <_dtoa_r+0x4e4>
 8003e88:	4601      	mov	r1, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f001 f94f 	bl	8005130 <__pow5mult>
 8003e92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	4680      	mov	r8, r0
 8003e98:	f340 8296 	ble.w	80043c8 <_dtoa_r+0x9b0>
 8003e9c:	f04f 0900 	mov.w	r9, #0
 8003ea0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003ea4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8003ea8:	6918      	ldr	r0, [r3, #16]
 8003eaa:	f001 f84f 	bl	8004f4c <__hi0bits>
 8003eae:	f1c0 0020 	rsb	r0, r0, #32
 8003eb2:	e02d      	b.n	8003f10 <_dtoa_r+0x4f8>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003eb8:	e66f      	b.n	8003b9a <_dtoa_r+0x182>
 8003eba:	9804      	ldr	r0, [sp, #16]
 8003ebc:	f002 f8b8 	bl	8006030 <__aeabi_i2d>
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	f002 fb82 	bl	80065cc <__aeabi_dcmpeq>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	f47f ae50 	bne.w	8003b6e <_dtoa_r+0x156>
 8003ece:	9b04      	ldr	r3, [sp, #16]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	9304      	str	r3, [sp, #16]
 8003ed4:	e64b      	b.n	8003b6e <_dtoa_r+0x156>
 8003ed6:	9a05      	ldr	r2, [sp, #20]
 8003ed8:	9b04      	ldr	r3, [sp, #16]
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	425b      	negs	r3, r3
 8003ede:	9308      	str	r3, [sp, #32]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	9205      	str	r2, [sp, #20]
 8003ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8003ee6:	e668      	b.n	8003bba <_dtoa_r+0x1a2>
 8003ee8:	f1ca 0300 	rsb	r3, sl, #0
 8003eec:	9305      	str	r3, [sp, #20]
 8003eee:	f04f 0a00 	mov.w	sl, #0
 8003ef2:	e65a      	b.n	8003baa <_dtoa_r+0x192>
 8003ef4:	9f08      	ldr	r7, [sp, #32]
 8003ef6:	9d05      	ldr	r5, [sp, #20]
 8003ef8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003efa:	e791      	b.n	8003e20 <_dtoa_r+0x408>
 8003efc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	f340 82b3 	ble.w	800446a <_dtoa_r+0xa52>
 8003f04:	f04f 0900 	mov.w	r9, #0
 8003f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1c8      	bne.n	8003ea0 <_dtoa_r+0x488>
 8003f0e:	2001      	movs	r0, #1
 8003f10:	4450      	add	r0, sl
 8003f12:	f010 001f 	ands.w	r0, r0, #31
 8003f16:	f000 8081 	beq.w	800401c <_dtoa_r+0x604>
 8003f1a:	f1c0 0320 	rsb	r3, r0, #32
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	f340 84b5 	ble.w	800488e <_dtoa_r+0xe76>
 8003f24:	f1c0 001c 	rsb	r0, r0, #28
 8003f28:	9b05      	ldr	r3, [sp, #20]
 8003f2a:	4403      	add	r3, r0
 8003f2c:	9305      	str	r3, [sp, #20]
 8003f2e:	4405      	add	r5, r0
 8003f30:	4482      	add	sl, r0
 8003f32:	9b05      	ldr	r3, [sp, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	dd05      	ble.n	8003f44 <_dtoa_r+0x52c>
 8003f38:	4659      	mov	r1, fp
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f001 f947 	bl	80051d0 <__lshift>
 8003f42:	4683      	mov	fp, r0
 8003f44:	f1ba 0f00 	cmp.w	sl, #0
 8003f48:	dd05      	ble.n	8003f56 <_dtoa_r+0x53e>
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	4652      	mov	r2, sl
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f001 f93e 	bl	80051d0 <__lshift>
 8003f54:	4680      	mov	r8, r0
 8003f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 8268 	bne.w	800442e <_dtoa_r+0xa16>
 8003f5e:	9b06      	ldr	r3, [sp, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f340 8295 	ble.w	8004490 <_dtoa_r+0xa78>
 8003f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d171      	bne.n	8004050 <_dtoa_r+0x638>
 8003f6c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8003f70:	9f06      	ldr	r7, [sp, #24]
 8003f72:	464d      	mov	r5, r9
 8003f74:	e002      	b.n	8003f7c <_dtoa_r+0x564>
 8003f76:	f000 ffa7 	bl	8004ec8 <__multadd>
 8003f7a:	4683      	mov	fp, r0
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	4658      	mov	r0, fp
 8003f80:	f7ff fcb2 	bl	80038e8 <quorem>
 8003f84:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8003f88:	f805 cb01 	strb.w	ip, [r5], #1
 8003f8c:	ebc9 0305 	rsb	r3, r9, r5
 8003f90:	42bb      	cmp	r3, r7
 8003f92:	4620      	mov	r0, r4
 8003f94:	4659      	mov	r1, fp
 8003f96:	f04f 020a 	mov.w	r2, #10
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	dbea      	blt.n	8003f76 <_dtoa_r+0x55e>
 8003fa0:	9b07      	ldr	r3, [sp, #28]
 8003fa2:	9a06      	ldr	r2, [sp, #24]
 8003fa4:	2a01      	cmp	r2, #1
 8003fa6:	bfac      	ite	ge
 8003fa8:	189b      	addge	r3, r3, r2
 8003faa:	3301      	addlt	r3, #1
 8003fac:	461d      	mov	r5, r3
 8003fae:	f04f 0a00 	mov.w	sl, #0
 8003fb2:	4659      	mov	r1, fp
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f8cd c008 	str.w	ip, [sp, #8]
 8003fbc:	f001 f908 	bl	80051d0 <__lshift>
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	4683      	mov	fp, r0
 8003fc4:	f001 f95a 	bl	800527c <__mcmp>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003fce:	f340 82ed 	ble.w	80045ac <_dtoa_r+0xb94>
 8003fd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003fd6:	9907      	ldr	r1, [sp, #28]
 8003fd8:	1e6b      	subs	r3, r5, #1
 8003fda:	e004      	b.n	8003fe6 <_dtoa_r+0x5ce>
 8003fdc:	428b      	cmp	r3, r1
 8003fde:	f000 8273 	beq.w	80044c8 <_dtoa_r+0xab0>
 8003fe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fe6:	2a39      	cmp	r2, #57	; 0x39
 8003fe8:	f103 0501 	add.w	r5, r3, #1
 8003fec:	d0f6      	beq.n	8003fdc <_dtoa_r+0x5c4>
 8003fee:	3201      	adds	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 ff5d 	bl	8004eb4 <_Bfree>
 8003ffa:	2e00      	cmp	r6, #0
 8003ffc:	f43f aedf 	beq.w	8003dbe <_dtoa_r+0x3a6>
 8004000:	f1ba 0f00 	cmp.w	sl, #0
 8004004:	d005      	beq.n	8004012 <_dtoa_r+0x5fa>
 8004006:	45b2      	cmp	sl, r6
 8004008:	d003      	beq.n	8004012 <_dtoa_r+0x5fa>
 800400a:	4651      	mov	r1, sl
 800400c:	4620      	mov	r0, r4
 800400e:	f000 ff51 	bl	8004eb4 <_Bfree>
 8004012:	4631      	mov	r1, r6
 8004014:	4620      	mov	r0, r4
 8004016:	f000 ff4d 	bl	8004eb4 <_Bfree>
 800401a:	e6d0      	b.n	8003dbe <_dtoa_r+0x3a6>
 800401c:	201c      	movs	r0, #28
 800401e:	e783      	b.n	8003f28 <_dtoa_r+0x510>
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <_dtoa_r+0x61c>)
 8004022:	9a02      	ldr	r2, [sp, #8]
 8004024:	1b5b      	subs	r3, r3, r5
 8004026:	fa02 f003 	lsl.w	r0, r2, r3
 800402a:	e56d      	b.n	8003b08 <_dtoa_r+0xf0>
 800402c:	900b      	str	r0, [sp, #44]	; 0x2c
 800402e:	e5b4      	b.n	8003b9a <_dtoa_r+0x182>
 8004030:	40240000 	.word	0x40240000
 8004034:	fffffbee 	.word	0xfffffbee
 8004038:	4631      	mov	r1, r6
 800403a:	2300      	movs	r3, #0
 800403c:	4620      	mov	r0, r4
 800403e:	220a      	movs	r2, #10
 8004040:	f000 ff42 	bl	8004ec8 <__multadd>
 8004044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004046:	2b00      	cmp	r3, #0
 8004048:	4606      	mov	r6, r0
 800404a:	f340 8409 	ble.w	8004860 <_dtoa_r+0xe48>
 800404e:	9306      	str	r3, [sp, #24]
 8004050:	2d00      	cmp	r5, #0
 8004052:	dd05      	ble.n	8004060 <_dtoa_r+0x648>
 8004054:	4631      	mov	r1, r6
 8004056:	462a      	mov	r2, r5
 8004058:	4620      	mov	r0, r4
 800405a:	f001 f8b9 	bl	80051d0 <__lshift>
 800405e:	4606      	mov	r6, r0
 8004060:	f1b9 0f00 	cmp.w	r9, #0
 8004064:	f040 82eb 	bne.w	800463e <_dtoa_r+0xc26>
 8004068:	46b1      	mov	r9, r6
 800406a:	9b06      	ldr	r3, [sp, #24]
 800406c:	9a07      	ldr	r2, [sp, #28]
 800406e:	3b01      	subs	r3, #1
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	9308      	str	r3, [sp, #32]
 8004074:	9b02      	ldr	r3, [sp, #8]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	9309      	str	r3, [sp, #36]	; 0x24
 800407c:	4617      	mov	r7, r2
 800407e:	4641      	mov	r1, r8
 8004080:	4658      	mov	r0, fp
 8004082:	f7ff fc31 	bl	80038e8 <quorem>
 8004086:	4631      	mov	r1, r6
 8004088:	4605      	mov	r5, r0
 800408a:	4658      	mov	r0, fp
 800408c:	f001 f8f6 	bl	800527c <__mcmp>
 8004090:	464a      	mov	r2, r9
 8004092:	4682      	mov	sl, r0
 8004094:	4641      	mov	r1, r8
 8004096:	4620      	mov	r0, r4
 8004098:	f001 f914 	bl	80052c4 <__mdiff>
 800409c:	68c2      	ldr	r2, [r0, #12]
 800409e:	4603      	mov	r3, r0
 80040a0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80040a4:	2a00      	cmp	r2, #0
 80040a6:	f040 81b8 	bne.w	800441a <_dtoa_r+0xa02>
 80040aa:	4619      	mov	r1, r3
 80040ac:	4658      	mov	r0, fp
 80040ae:	f8cd c018 	str.w	ip, [sp, #24]
 80040b2:	9305      	str	r3, [sp, #20]
 80040b4:	f001 f8e2 	bl	800527c <__mcmp>
 80040b8:	9b05      	ldr	r3, [sp, #20]
 80040ba:	9002      	str	r0, [sp, #8]
 80040bc:	4619      	mov	r1, r3
 80040be:	4620      	mov	r0, r4
 80040c0:	f000 fef8 	bl	8004eb4 <_Bfree>
 80040c4:	9a02      	ldr	r2, [sp, #8]
 80040c6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80040ca:	b92a      	cbnz	r2, 80040d8 <_dtoa_r+0x6c0>
 80040cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040ce:	b91b      	cbnz	r3, 80040d8 <_dtoa_r+0x6c0>
 80040d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 83a8 	beq.w	8004828 <_dtoa_r+0xe10>
 80040d8:	f1ba 0f00 	cmp.w	sl, #0
 80040dc:	f2c0 8248 	blt.w	8004570 <_dtoa_r+0xb58>
 80040e0:	d105      	bne.n	80040ee <_dtoa_r+0x6d6>
 80040e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040e4:	b91b      	cbnz	r3, 80040ee <_dtoa_r+0x6d6>
 80040e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8241 	beq.w	8004570 <_dtoa_r+0xb58>
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	f300 82b9 	bgt.w	8004666 <_dtoa_r+0xc4e>
 80040f4:	9b08      	ldr	r3, [sp, #32]
 80040f6:	f887 c000 	strb.w	ip, [r7]
 80040fa:	f107 0a01 	add.w	sl, r7, #1
 80040fe:	429f      	cmp	r7, r3
 8004100:	4655      	mov	r5, sl
 8004102:	f000 82bc 	beq.w	800467e <_dtoa_r+0xc66>
 8004106:	4659      	mov	r1, fp
 8004108:	220a      	movs	r2, #10
 800410a:	2300      	movs	r3, #0
 800410c:	4620      	mov	r0, r4
 800410e:	f000 fedb 	bl	8004ec8 <__multadd>
 8004112:	454e      	cmp	r6, r9
 8004114:	4683      	mov	fp, r0
 8004116:	4631      	mov	r1, r6
 8004118:	4620      	mov	r0, r4
 800411a:	f04f 020a 	mov.w	r2, #10
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	f000 8174 	beq.w	800440e <_dtoa_r+0x9f6>
 8004126:	f000 fecf 	bl	8004ec8 <__multadd>
 800412a:	4649      	mov	r1, r9
 800412c:	4606      	mov	r6, r0
 800412e:	220a      	movs	r2, #10
 8004130:	4620      	mov	r0, r4
 8004132:	2300      	movs	r3, #0
 8004134:	f000 fec8 	bl	8004ec8 <__multadd>
 8004138:	4657      	mov	r7, sl
 800413a:	4681      	mov	r9, r0
 800413c:	e79f      	b.n	800407e <_dtoa_r+0x666>
 800413e:	2301      	movs	r3, #1
 8004140:	9309      	str	r3, [sp, #36]	; 0x24
 8004142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004144:	2b00      	cmp	r3, #0
 8004146:	f340 820a 	ble.w	800455e <_dtoa_r+0xb46>
 800414a:	461f      	mov	r7, r3
 800414c:	461e      	mov	r6, r3
 800414e:	930c      	str	r3, [sp, #48]	; 0x30
 8004150:	9306      	str	r3, [sp, #24]
 8004152:	2100      	movs	r1, #0
 8004154:	2f17      	cmp	r7, #23
 8004156:	6461      	str	r1, [r4, #68]	; 0x44
 8004158:	d90a      	bls.n	8004170 <_dtoa_r+0x758>
 800415a:	2201      	movs	r2, #1
 800415c:	2304      	movs	r3, #4
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	f103 0014 	add.w	r0, r3, #20
 8004164:	4287      	cmp	r7, r0
 8004166:	4611      	mov	r1, r2
 8004168:	f102 0201 	add.w	r2, r2, #1
 800416c:	d2f7      	bcs.n	800415e <_dtoa_r+0x746>
 800416e:	6461      	str	r1, [r4, #68]	; 0x44
 8004170:	4620      	mov	r0, r4
 8004172:	f000 fe79 	bl	8004e68 <_Balloc>
 8004176:	2e0e      	cmp	r6, #14
 8004178:	9007      	str	r0, [sp, #28]
 800417a:	6420      	str	r0, [r4, #64]	; 0x40
 800417c:	f63f ad5c 	bhi.w	8003c38 <_dtoa_r+0x220>
 8004180:	2d00      	cmp	r5, #0
 8004182:	f43f ad59 	beq.w	8003c38 <_dtoa_r+0x220>
 8004186:	ed9d 7b02 	vldr	d7, [sp, #8]
 800418a:	9904      	ldr	r1, [sp, #16]
 800418c:	2900      	cmp	r1, #0
 800418e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004192:	f340 8223 	ble.w	80045dc <_dtoa_r+0xbc4>
 8004196:	4bb7      	ldr	r3, [pc, #732]	; (8004474 <_dtoa_r+0xa5c>)
 8004198:	f001 020f 	and.w	r2, r1, #15
 800419c:	110d      	asrs	r5, r1, #4
 800419e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041a2:	06e9      	lsls	r1, r5, #27
 80041a4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80041a8:	f140 81d2 	bpl.w	8004550 <_dtoa_r+0xb38>
 80041ac:	4bb2      	ldr	r3, [pc, #712]	; (8004478 <_dtoa_r+0xa60>)
 80041ae:	ec51 0b17 	vmov	r0, r1, d7
 80041b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041b6:	f002 f8cb 	bl	8006350 <__aeabi_ddiv>
 80041ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041be:	f005 050f 	and.w	r5, r5, #15
 80041c2:	f04f 0803 	mov.w	r8, #3
 80041c6:	b18d      	cbz	r5, 80041ec <_dtoa_r+0x7d4>
 80041c8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8004478 <_dtoa_r+0xa60>
 80041cc:	4630      	mov	r0, r6
 80041ce:	4639      	mov	r1, r7
 80041d0:	07ea      	lsls	r2, r5, #31
 80041d2:	d505      	bpl.n	80041e0 <_dtoa_r+0x7c8>
 80041d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80041d8:	f001 ff90 	bl	80060fc <__aeabi_dmul>
 80041dc:	f108 0801 	add.w	r8, r8, #1
 80041e0:	106d      	asrs	r5, r5, #1
 80041e2:	f109 0908 	add.w	r9, r9, #8
 80041e6:	d1f3      	bne.n	80041d0 <_dtoa_r+0x7b8>
 80041e8:	4606      	mov	r6, r0
 80041ea:	460f      	mov	r7, r1
 80041ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041f0:	4632      	mov	r2, r6
 80041f2:	463b      	mov	r3, r7
 80041f4:	f002 f8ac 	bl	8006350 <__aeabi_ddiv>
 80041f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041fe:	b143      	cbz	r3, 8004212 <_dtoa_r+0x7fa>
 8004200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004204:	2200      	movs	r2, #0
 8004206:	4b9d      	ldr	r3, [pc, #628]	; (800447c <_dtoa_r+0xa64>)
 8004208:	f002 f9ea 	bl	80065e0 <__aeabi_dcmplt>
 800420c:	2800      	cmp	r0, #0
 800420e:	f040 82ae 	bne.w	800476e <_dtoa_r+0xd56>
 8004212:	4640      	mov	r0, r8
 8004214:	f001 ff0c 	bl	8006030 <__aeabi_i2d>
 8004218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800421c:	f001 ff6e 	bl	80060fc <__aeabi_dmul>
 8004220:	4b97      	ldr	r3, [pc, #604]	; (8004480 <_dtoa_r+0xa68>)
 8004222:	2200      	movs	r2, #0
 8004224:	f001 fdb8 	bl	8005d98 <__adddf3>
 8004228:	9b06      	ldr	r3, [sp, #24]
 800422a:	4606      	mov	r6, r0
 800422c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8162 	beq.w	80044fa <_dtoa_r+0xae2>
 8004236:	9b04      	ldr	r3, [sp, #16]
 8004238:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800423c:	9312      	str	r3, [sp, #72]	; 0x48
 800423e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8223 	beq.w	800468c <_dtoa_r+0xc74>
 8004246:	4b8b      	ldr	r3, [pc, #556]	; (8004474 <_dtoa_r+0xa5c>)
 8004248:	498e      	ldr	r1, [pc, #568]	; (8004484 <_dtoa_r+0xa6c>)
 800424a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800424e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004252:	2000      	movs	r0, #0
 8004254:	f002 f87c 	bl	8006350 <__aeabi_ddiv>
 8004258:	4632      	mov	r2, r6
 800425a:	463b      	mov	r3, r7
 800425c:	f001 fd9a 	bl	8005d94 <__aeabi_dsub>
 8004260:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004264:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004268:	4639      	mov	r1, r7
 800426a:	4630      	mov	r0, r6
 800426c:	f002 f9e0 	bl	8006630 <__aeabi_d2iz>
 8004270:	4605      	mov	r5, r0
 8004272:	f001 fedd 	bl	8006030 <__aeabi_i2d>
 8004276:	3530      	adds	r5, #48	; 0x30
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4630      	mov	r0, r6
 800427e:	4639      	mov	r1, r7
 8004280:	f001 fd88 	bl	8005d94 <__aeabi_dsub>
 8004284:	fa5f f885 	uxtb.w	r8, r5
 8004288:	9d07      	ldr	r5, [sp, #28]
 800428a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800428e:	f885 8000 	strb.w	r8, [r5]
 8004292:	4606      	mov	r6, r0
 8004294:	460f      	mov	r7, r1
 8004296:	3501      	adds	r5, #1
 8004298:	f002 f9a2 	bl	80065e0 <__aeabi_dcmplt>
 800429c:	2800      	cmp	r0, #0
 800429e:	f040 82a7 	bne.w	80047f0 <_dtoa_r+0xdd8>
 80042a2:	4632      	mov	r2, r6
 80042a4:	463b      	mov	r3, r7
 80042a6:	2000      	movs	r0, #0
 80042a8:	4974      	ldr	r1, [pc, #464]	; (800447c <_dtoa_r+0xa64>)
 80042aa:	f001 fd73 	bl	8005d94 <__aeabi_dsub>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042b6:	f002 f9b1 	bl	800661c <__aeabi_dcmpgt>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	f040 82ad 	bne.w	800481a <_dtoa_r+0xe02>
 80042c0:	f1b9 0f01 	cmp.w	r9, #1
 80042c4:	f340 8184 	ble.w	80045d0 <_dtoa_r+0xbb8>
 80042c8:	9b07      	ldr	r3, [sp, #28]
 80042ca:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 80042ce:	f8cd b008 	str.w	fp, [sp, #8]
 80042d2:	4499      	add	r9, r3
 80042d4:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 80042d8:	46a0      	mov	r8, r4
 80042da:	e00d      	b.n	80042f8 <_dtoa_r+0x8e0>
 80042dc:	2000      	movs	r0, #0
 80042de:	4967      	ldr	r1, [pc, #412]	; (800447c <_dtoa_r+0xa64>)
 80042e0:	f001 fd58 	bl	8005d94 <__aeabi_dsub>
 80042e4:	4652      	mov	r2, sl
 80042e6:	465b      	mov	r3, fp
 80042e8:	f002 f97a 	bl	80065e0 <__aeabi_dcmplt>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	f040 828f 	bne.w	8004810 <_dtoa_r+0xdf8>
 80042f2:	454d      	cmp	r5, r9
 80042f4:	f000 8167 	beq.w	80045c6 <_dtoa_r+0xbae>
 80042f8:	4650      	mov	r0, sl
 80042fa:	4659      	mov	r1, fp
 80042fc:	2200      	movs	r2, #0
 80042fe:	4b62      	ldr	r3, [pc, #392]	; (8004488 <_dtoa_r+0xa70>)
 8004300:	f001 fefc 	bl	80060fc <__aeabi_dmul>
 8004304:	2200      	movs	r2, #0
 8004306:	4b60      	ldr	r3, [pc, #384]	; (8004488 <_dtoa_r+0xa70>)
 8004308:	4682      	mov	sl, r0
 800430a:	468b      	mov	fp, r1
 800430c:	4630      	mov	r0, r6
 800430e:	4639      	mov	r1, r7
 8004310:	f001 fef4 	bl	80060fc <__aeabi_dmul>
 8004314:	460f      	mov	r7, r1
 8004316:	4606      	mov	r6, r0
 8004318:	f002 f98a 	bl	8006630 <__aeabi_d2iz>
 800431c:	4604      	mov	r4, r0
 800431e:	f001 fe87 	bl	8006030 <__aeabi_i2d>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4630      	mov	r0, r6
 8004328:	4639      	mov	r1, r7
 800432a:	f001 fd33 	bl	8005d94 <__aeabi_dsub>
 800432e:	3430      	adds	r4, #48	; 0x30
 8004330:	b2e4      	uxtb	r4, r4
 8004332:	4652      	mov	r2, sl
 8004334:	465b      	mov	r3, fp
 8004336:	f805 4b01 	strb.w	r4, [r5], #1
 800433a:	4606      	mov	r6, r0
 800433c:	460f      	mov	r7, r1
 800433e:	f002 f94f 	bl	80065e0 <__aeabi_dcmplt>
 8004342:	4632      	mov	r2, r6
 8004344:	463b      	mov	r3, r7
 8004346:	2800      	cmp	r0, #0
 8004348:	d0c8      	beq.n	80042dc <_dtoa_r+0x8c4>
 800434a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800434c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004350:	9304      	str	r3, [sp, #16]
 8004352:	4644      	mov	r4, r8
 8004354:	e533      	b.n	8003dbe <_dtoa_r+0x3a6>
 8004356:	2300      	movs	r3, #0
 8004358:	9309      	str	r3, [sp, #36]	; 0x24
 800435a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800435c:	9a04      	ldr	r2, [sp, #16]
 800435e:	4413      	add	r3, r2
 8004360:	930c      	str	r3, [sp, #48]	; 0x30
 8004362:	3301      	adds	r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	9306      	str	r3, [sp, #24]
 8004368:	f340 8100 	ble.w	800456c <_dtoa_r+0xb54>
 800436c:	9e06      	ldr	r6, [sp, #24]
 800436e:	4637      	mov	r7, r6
 8004370:	e6ef      	b.n	8004152 <_dtoa_r+0x73a>
 8004372:	2300      	movs	r3, #0
 8004374:	9309      	str	r3, [sp, #36]	; 0x24
 8004376:	e6e4      	b.n	8004142 <_dtoa_r+0x72a>
 8004378:	9b06      	ldr	r3, [sp, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	f73f ac6d 	bgt.w	8003c5a <_dtoa_r+0x242>
 8004380:	f040 80d3 	bne.w	800452a <_dtoa_r+0xb12>
 8004384:	4640      	mov	r0, r8
 8004386:	2200      	movs	r2, #0
 8004388:	4b40      	ldr	r3, [pc, #256]	; (800448c <_dtoa_r+0xa74>)
 800438a:	4649      	mov	r1, r9
 800438c:	f001 feb6 	bl	80060fc <__aeabi_dmul>
 8004390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004394:	f002 f938 	bl	8006608 <__aeabi_dcmpge>
 8004398:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800439c:	4646      	mov	r6, r8
 800439e:	2800      	cmp	r0, #0
 80043a0:	f000 808a 	beq.w	80044b8 <_dtoa_r+0xaa0>
 80043a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043a6:	9d07      	ldr	r5, [sp, #28]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	9304      	str	r3, [sp, #16]
 80043ac:	4641      	mov	r1, r8
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 fd80 	bl	8004eb4 <_Bfree>
 80043b4:	2e00      	cmp	r6, #0
 80043b6:	f47f ae2c 	bne.w	8004012 <_dtoa_r+0x5fa>
 80043ba:	e500      	b.n	8003dbe <_dtoa_r+0x3a6>
 80043bc:	4659      	mov	r1, fp
 80043be:	4620      	mov	r0, r4
 80043c0:	f000 feb6 	bl	8005130 <__pow5mult>
 80043c4:	4683      	mov	fp, r0
 80043c6:	e557      	b.n	8003e78 <_dtoa_r+0x460>
 80043c8:	9b02      	ldr	r3, [sp, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f47f ad66 	bne.w	8003e9c <_dtoa_r+0x484>
 80043d0:	9b03      	ldr	r3, [sp, #12]
 80043d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f47f ad94 	bne.w	8003f04 <_dtoa_r+0x4ec>
 80043dc:	9b03      	ldr	r3, [sp, #12]
 80043de:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80043e2:	0d3f      	lsrs	r7, r7, #20
 80043e4:	053f      	lsls	r7, r7, #20
 80043e6:	2f00      	cmp	r7, #0
 80043e8:	f000 821b 	beq.w	8004822 <_dtoa_r+0xe0a>
 80043ec:	9b05      	ldr	r3, [sp, #20]
 80043ee:	3301      	adds	r3, #1
 80043f0:	9305      	str	r3, [sp, #20]
 80043f2:	f10a 0a01 	add.w	sl, sl, #1
 80043f6:	f04f 0901 	mov.w	r9, #1
 80043fa:	e585      	b.n	8003f08 <_dtoa_r+0x4f0>
 80043fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043fe:	2a00      	cmp	r2, #0
 8004400:	f000 81a7 	beq.w	8004752 <_dtoa_r+0xd3a>
 8004404:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004408:	9f08      	ldr	r7, [sp, #32]
 800440a:	9d05      	ldr	r5, [sp, #20]
 800440c:	e4ff      	b.n	8003e0e <_dtoa_r+0x3f6>
 800440e:	f000 fd5b 	bl	8004ec8 <__multadd>
 8004412:	4657      	mov	r7, sl
 8004414:	4606      	mov	r6, r0
 8004416:	4681      	mov	r9, r0
 8004418:	e631      	b.n	800407e <_dtoa_r+0x666>
 800441a:	4601      	mov	r1, r0
 800441c:	4620      	mov	r0, r4
 800441e:	f8cd c008 	str.w	ip, [sp, #8]
 8004422:	f000 fd47 	bl	8004eb4 <_Bfree>
 8004426:	2201      	movs	r2, #1
 8004428:	f8dd c008 	ldr.w	ip, [sp, #8]
 800442c:	e654      	b.n	80040d8 <_dtoa_r+0x6c0>
 800442e:	4658      	mov	r0, fp
 8004430:	4641      	mov	r1, r8
 8004432:	f000 ff23 	bl	800527c <__mcmp>
 8004436:	2800      	cmp	r0, #0
 8004438:	f6bf ad91 	bge.w	8003f5e <_dtoa_r+0x546>
 800443c:	9f04      	ldr	r7, [sp, #16]
 800443e:	4659      	mov	r1, fp
 8004440:	2300      	movs	r3, #0
 8004442:	4620      	mov	r0, r4
 8004444:	220a      	movs	r2, #10
 8004446:	3f01      	subs	r7, #1
 8004448:	9704      	str	r7, [sp, #16]
 800444a:	f000 fd3d 	bl	8004ec8 <__multadd>
 800444e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004450:	4683      	mov	fp, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	f47f adf0 	bne.w	8004038 <_dtoa_r+0x620>
 8004458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800445a:	2b00      	cmp	r3, #0
 800445c:	f340 81f5 	ble.w	800484a <_dtoa_r+0xe32>
 8004460:	9306      	str	r3, [sp, #24]
 8004462:	e583      	b.n	8003f6c <_dtoa_r+0x554>
 8004464:	9807      	ldr	r0, [sp, #28]
 8004466:	f7ff bb0b 	b.w	8003a80 <_dtoa_r+0x68>
 800446a:	9b02      	ldr	r3, [sp, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f47f ad49 	bne.w	8003f04 <_dtoa_r+0x4ec>
 8004472:	e7ad      	b.n	80043d0 <_dtoa_r+0x9b8>
 8004474:	080069f8 	.word	0x080069f8
 8004478:	08006ac0 	.word	0x08006ac0
 800447c:	3ff00000 	.word	0x3ff00000
 8004480:	401c0000 	.word	0x401c0000
 8004484:	3fe00000 	.word	0x3fe00000
 8004488:	40240000 	.word	0x40240000
 800448c:	40140000 	.word	0x40140000
 8004490:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004492:	2b02      	cmp	r3, #2
 8004494:	f77f ad67 	ble.w	8003f66 <_dtoa_r+0x54e>
 8004498:	9b06      	ldr	r3, [sp, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d182      	bne.n	80043a4 <_dtoa_r+0x98c>
 800449e:	4641      	mov	r1, r8
 80044a0:	2205      	movs	r2, #5
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 fd10 	bl	8004ec8 <__multadd>
 80044a8:	4680      	mov	r8, r0
 80044aa:	4641      	mov	r1, r8
 80044ac:	4658      	mov	r0, fp
 80044ae:	f000 fee5 	bl	800527c <__mcmp>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	f77f af76 	ble.w	80043a4 <_dtoa_r+0x98c>
 80044b8:	9a04      	ldr	r2, [sp, #16]
 80044ba:	9907      	ldr	r1, [sp, #28]
 80044bc:	2331      	movs	r3, #49	; 0x31
 80044be:	3201      	adds	r2, #1
 80044c0:	9204      	str	r2, [sp, #16]
 80044c2:	700b      	strb	r3, [r1, #0]
 80044c4:	1c4d      	adds	r5, r1, #1
 80044c6:	e771      	b.n	80043ac <_dtoa_r+0x994>
 80044c8:	9a04      	ldr	r2, [sp, #16]
 80044ca:	3201      	adds	r2, #1
 80044cc:	9204      	str	r2, [sp, #16]
 80044ce:	9a07      	ldr	r2, [sp, #28]
 80044d0:	2331      	movs	r3, #49	; 0x31
 80044d2:	7013      	strb	r3, [r2, #0]
 80044d4:	e58d      	b.n	8003ff2 <_dtoa_r+0x5da>
 80044d6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80044da:	9c05      	ldr	r4, [sp, #20]
 80044dc:	e46f      	b.n	8003dbe <_dtoa_r+0x3a6>
 80044de:	4640      	mov	r0, r8
 80044e0:	f001 fda6 	bl	8006030 <__aeabi_i2d>
 80044e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044e8:	f001 fe08 	bl	80060fc <__aeabi_dmul>
 80044ec:	2200      	movs	r2, #0
 80044ee:	4bc2      	ldr	r3, [pc, #776]	; (80047f8 <_dtoa_r+0xde0>)
 80044f0:	f001 fc52 	bl	8005d98 <__adddf3>
 80044f4:	4606      	mov	r6, r0
 80044f6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80044fa:	2200      	movs	r2, #0
 80044fc:	4bbf      	ldr	r3, [pc, #764]	; (80047fc <_dtoa_r+0xde4>)
 80044fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004502:	f001 fc47 	bl	8005d94 <__aeabi_dsub>
 8004506:	4632      	mov	r2, r6
 8004508:	463b      	mov	r3, r7
 800450a:	4680      	mov	r8, r0
 800450c:	4689      	mov	r9, r1
 800450e:	f002 f885 	bl	800661c <__aeabi_dcmpgt>
 8004512:	2800      	cmp	r0, #0
 8004514:	f040 80b6 	bne.w	8004684 <_dtoa_r+0xc6c>
 8004518:	4632      	mov	r2, r6
 800451a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800451e:	4640      	mov	r0, r8
 8004520:	4649      	mov	r1, r9
 8004522:	f002 f85d 	bl	80065e0 <__aeabi_dcmplt>
 8004526:	2800      	cmp	r0, #0
 8004528:	d052      	beq.n	80045d0 <_dtoa_r+0xbb8>
 800452a:	f04f 0800 	mov.w	r8, #0
 800452e:	4646      	mov	r6, r8
 8004530:	e738      	b.n	80043a4 <_dtoa_r+0x98c>
 8004532:	4659      	mov	r1, fp
 8004534:	9a08      	ldr	r2, [sp, #32]
 8004536:	4620      	mov	r0, r4
 8004538:	f000 fdfa 	bl	8005130 <__pow5mult>
 800453c:	4683      	mov	fp, r0
 800453e:	e49b      	b.n	8003e78 <_dtoa_r+0x460>
 8004540:	9b08      	ldr	r3, [sp, #32]
 8004542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004544:	9708      	str	r7, [sp, #32]
 8004546:	1afb      	subs	r3, r7, r3
 8004548:	441a      	add	r2, r3
 800454a:	920a      	str	r2, [sp, #40]	; 0x28
 800454c:	2700      	movs	r7, #0
 800454e:	e458      	b.n	8003e02 <_dtoa_r+0x3ea>
 8004550:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8004554:	f04f 0802 	mov.w	r8, #2
 8004558:	ed8d 7b02 	vstr	d7, [sp, #8]
 800455c:	e633      	b.n	80041c6 <_dtoa_r+0x7ae>
 800455e:	2601      	movs	r6, #1
 8004560:	9621      	str	r6, [sp, #132]	; 0x84
 8004562:	960c      	str	r6, [sp, #48]	; 0x30
 8004564:	9606      	str	r6, [sp, #24]
 8004566:	2100      	movs	r1, #0
 8004568:	6461      	str	r1, [r4, #68]	; 0x44
 800456a:	e601      	b.n	8004170 <_dtoa_r+0x758>
 800456c:	461e      	mov	r6, r3
 800456e:	e7fa      	b.n	8004566 <_dtoa_r+0xb4e>
 8004570:	2a00      	cmp	r2, #0
 8004572:	dd15      	ble.n	80045a0 <_dtoa_r+0xb88>
 8004574:	4659      	mov	r1, fp
 8004576:	2201      	movs	r2, #1
 8004578:	4620      	mov	r0, r4
 800457a:	f8cd c008 	str.w	ip, [sp, #8]
 800457e:	f000 fe27 	bl	80051d0 <__lshift>
 8004582:	4641      	mov	r1, r8
 8004584:	4683      	mov	fp, r0
 8004586:	f000 fe79 	bl	800527c <__mcmp>
 800458a:	2800      	cmp	r0, #0
 800458c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004590:	f340 8154 	ble.w	800483c <_dtoa_r+0xe24>
 8004594:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8004598:	f000 8111 	beq.w	80047be <_dtoa_r+0xda6>
 800459c:	f10c 0c01 	add.w	ip, ip, #1
 80045a0:	46b2      	mov	sl, r6
 80045a2:	f887 c000 	strb.w	ip, [r7]
 80045a6:	1c7d      	adds	r5, r7, #1
 80045a8:	464e      	mov	r6, r9
 80045aa:	e522      	b.n	8003ff2 <_dtoa_r+0x5da>
 80045ac:	d104      	bne.n	80045b8 <_dtoa_r+0xba0>
 80045ae:	f01c 0f01 	tst.w	ip, #1
 80045b2:	d001      	beq.n	80045b8 <_dtoa_r+0xba0>
 80045b4:	e50d      	b.n	8003fd2 <_dtoa_r+0x5ba>
 80045b6:	4615      	mov	r5, r2
 80045b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045bc:	2b30      	cmp	r3, #48	; 0x30
 80045be:	f105 32ff 	add.w	r2, r5, #4294967295
 80045c2:	d0f8      	beq.n	80045b6 <_dtoa_r+0xb9e>
 80045c4:	e515      	b.n	8003ff2 <_dtoa_r+0x5da>
 80045c6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80045ca:	f8dd b008 	ldr.w	fp, [sp, #8]
 80045ce:	4644      	mov	r4, r8
 80045d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80045d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045d8:	f7ff bb2e 	b.w	8003c38 <_dtoa_r+0x220>
 80045dc:	9b04      	ldr	r3, [sp, #16]
 80045de:	425d      	negs	r5, r3
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	f000 80bd 	beq.w	8004760 <_dtoa_r+0xd48>
 80045e6:	4b86      	ldr	r3, [pc, #536]	; (8004800 <_dtoa_r+0xde8>)
 80045e8:	f005 020f 	and.w	r2, r5, #15
 80045ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80045f8:	f001 fd80 	bl	80060fc <__aeabi_dmul>
 80045fc:	112d      	asrs	r5, r5, #4
 80045fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004602:	f000 8127 	beq.w	8004854 <_dtoa_r+0xe3c>
 8004606:	4e7f      	ldr	r6, [pc, #508]	; (8004804 <_dtoa_r+0xdec>)
 8004608:	f04f 0802 	mov.w	r8, #2
 800460c:	07eb      	lsls	r3, r5, #31
 800460e:	d505      	bpl.n	800461c <_dtoa_r+0xc04>
 8004610:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004614:	f001 fd72 	bl	80060fc <__aeabi_dmul>
 8004618:	f108 0801 	add.w	r8, r8, #1
 800461c:	106d      	asrs	r5, r5, #1
 800461e:	f106 0608 	add.w	r6, r6, #8
 8004622:	d1f3      	bne.n	800460c <_dtoa_r+0xbf4>
 8004624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004628:	e5e8      	b.n	80041fc <_dtoa_r+0x7e4>
 800462a:	9a04      	ldr	r2, [sp, #16]
 800462c:	3201      	adds	r2, #1
 800462e:	9204      	str	r2, [sp, #16]
 8004630:	9a07      	ldr	r2, [sp, #28]
 8004632:	2330      	movs	r3, #48	; 0x30
 8004634:	7013      	strb	r3, [r2, #0]
 8004636:	2331      	movs	r3, #49	; 0x31
 8004638:	7013      	strb	r3, [r2, #0]
 800463a:	f7ff bbc0 	b.w	8003dbe <_dtoa_r+0x3a6>
 800463e:	6871      	ldr	r1, [r6, #4]
 8004640:	4620      	mov	r0, r4
 8004642:	f000 fc11 	bl	8004e68 <_Balloc>
 8004646:	6933      	ldr	r3, [r6, #16]
 8004648:	1c9a      	adds	r2, r3, #2
 800464a:	4605      	mov	r5, r0
 800464c:	0092      	lsls	r2, r2, #2
 800464e:	f106 010c 	add.w	r1, r6, #12
 8004652:	300c      	adds	r0, #12
 8004654:	f7fd fd38 	bl	80020c8 <memcpy>
 8004658:	4620      	mov	r0, r4
 800465a:	4629      	mov	r1, r5
 800465c:	2201      	movs	r2, #1
 800465e:	f000 fdb7 	bl	80051d0 <__lshift>
 8004662:	4681      	mov	r9, r0
 8004664:	e501      	b.n	800406a <_dtoa_r+0x652>
 8004666:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800466a:	f000 80a8 	beq.w	80047be <_dtoa_r+0xda6>
 800466e:	f10c 0c01 	add.w	ip, ip, #1
 8004672:	46b2      	mov	sl, r6
 8004674:	f887 c000 	strb.w	ip, [r7]
 8004678:	1c7d      	adds	r5, r7, #1
 800467a:	464e      	mov	r6, r9
 800467c:	e4b9      	b.n	8003ff2 <_dtoa_r+0x5da>
 800467e:	46b2      	mov	sl, r6
 8004680:	464e      	mov	r6, r9
 8004682:	e496      	b.n	8003fb2 <_dtoa_r+0x59a>
 8004684:	f04f 0800 	mov.w	r8, #0
 8004688:	4646      	mov	r6, r8
 800468a:	e715      	b.n	80044b8 <_dtoa_r+0xaa0>
 800468c:	495c      	ldr	r1, [pc, #368]	; (8004800 <_dtoa_r+0xde8>)
 800468e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004692:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004696:	4632      	mov	r2, r6
 8004698:	9313      	str	r3, [sp, #76]	; 0x4c
 800469a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800469e:	463b      	mov	r3, r7
 80046a0:	f001 fd2c 	bl	80060fc <__aeabi_dmul>
 80046a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80046a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046ac:	4639      	mov	r1, r7
 80046ae:	4630      	mov	r0, r6
 80046b0:	f001 ffbe 	bl	8006630 <__aeabi_d2iz>
 80046b4:	4605      	mov	r5, r0
 80046b6:	f001 fcbb 	bl	8006030 <__aeabi_i2d>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4630      	mov	r0, r6
 80046c0:	4639      	mov	r1, r7
 80046c2:	f001 fb67 	bl	8005d94 <__aeabi_dsub>
 80046c6:	9a07      	ldr	r2, [sp, #28]
 80046c8:	3530      	adds	r5, #48	; 0x30
 80046ca:	f1b9 0f01 	cmp.w	r9, #1
 80046ce:	7015      	strb	r5, [r2, #0]
 80046d0:	4606      	mov	r6, r0
 80046d2:	460f      	mov	r7, r1
 80046d4:	f102 0501 	add.w	r5, r2, #1
 80046d8:	d023      	beq.n	8004722 <_dtoa_r+0xd0a>
 80046da:	9b07      	ldr	r3, [sp, #28]
 80046dc:	f8cd a008 	str.w	sl, [sp, #8]
 80046e0:	444b      	add	r3, r9
 80046e2:	465e      	mov	r6, fp
 80046e4:	469a      	mov	sl, r3
 80046e6:	46ab      	mov	fp, r5
 80046e8:	2200      	movs	r2, #0
 80046ea:	4b47      	ldr	r3, [pc, #284]	; (8004808 <_dtoa_r+0xdf0>)
 80046ec:	f001 fd06 	bl	80060fc <__aeabi_dmul>
 80046f0:	4689      	mov	r9, r1
 80046f2:	4680      	mov	r8, r0
 80046f4:	f001 ff9c 	bl	8006630 <__aeabi_d2iz>
 80046f8:	4607      	mov	r7, r0
 80046fa:	f001 fc99 	bl	8006030 <__aeabi_i2d>
 80046fe:	3730      	adds	r7, #48	; 0x30
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4640      	mov	r0, r8
 8004706:	4649      	mov	r1, r9
 8004708:	f001 fb44 	bl	8005d94 <__aeabi_dsub>
 800470c:	f80b 7b01 	strb.w	r7, [fp], #1
 8004710:	45d3      	cmp	fp, sl
 8004712:	d1e9      	bne.n	80046e8 <_dtoa_r+0xcd0>
 8004714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004716:	f8dd a008 	ldr.w	sl, [sp, #8]
 800471a:	46b3      	mov	fp, r6
 800471c:	460f      	mov	r7, r1
 800471e:	4606      	mov	r6, r0
 8004720:	441d      	add	r5, r3
 8004722:	2200      	movs	r2, #0
 8004724:	4b39      	ldr	r3, [pc, #228]	; (800480c <_dtoa_r+0xdf4>)
 8004726:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800472a:	f001 fb35 	bl	8005d98 <__adddf3>
 800472e:	4632      	mov	r2, r6
 8004730:	463b      	mov	r3, r7
 8004732:	f001 ff55 	bl	80065e0 <__aeabi_dcmplt>
 8004736:	2800      	cmp	r0, #0
 8004738:	d047      	beq.n	80047ca <_dtoa_r+0xdb2>
 800473a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8004742:	f7ff bb2a 	b.w	8003d9a <_dtoa_r+0x382>
 8004746:	9b05      	ldr	r3, [sp, #20]
 8004748:	9a06      	ldr	r2, [sp, #24]
 800474a:	1a9d      	subs	r5, r3, r2
 800474c:	2300      	movs	r3, #0
 800474e:	f7ff bb5e 	b.w	8003e0e <_dtoa_r+0x3f6>
 8004752:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004754:	9f08      	ldr	r7, [sp, #32]
 8004756:	9d05      	ldr	r5, [sp, #20]
 8004758:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800475c:	f7ff bb57 	b.w	8003e0e <_dtoa_r+0x3f6>
 8004760:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8004764:	f04f 0802 	mov.w	r8, #2
 8004768:	ed8d 7b02 	vstr	d7, [sp, #8]
 800476c:	e546      	b.n	80041fc <_dtoa_r+0x7e4>
 800476e:	9b06      	ldr	r3, [sp, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f43f aeb4 	beq.w	80044de <_dtoa_r+0xac6>
 8004776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004778:	2d00      	cmp	r5, #0
 800477a:	f77f af29 	ble.w	80045d0 <_dtoa_r+0xbb8>
 800477e:	2200      	movs	r2, #0
 8004780:	4b21      	ldr	r3, [pc, #132]	; (8004808 <_dtoa_r+0xdf0>)
 8004782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004786:	f001 fcb9 	bl	80060fc <__aeabi_dmul>
 800478a:	4606      	mov	r6, r0
 800478c:	460f      	mov	r7, r1
 800478e:	f108 0001 	add.w	r0, r8, #1
 8004792:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004796:	f001 fc4b 	bl	8006030 <__aeabi_i2d>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4630      	mov	r0, r6
 80047a0:	4639      	mov	r1, r7
 80047a2:	f001 fcab 	bl	80060fc <__aeabi_dmul>
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <_dtoa_r+0xde0>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	f001 faf5 	bl	8005d98 <__adddf3>
 80047ae:	9b04      	ldr	r3, [sp, #16]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	4606      	mov	r6, r0
 80047b4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80047b8:	9312      	str	r3, [sp, #72]	; 0x48
 80047ba:	46a9      	mov	r9, r5
 80047bc:	e53f      	b.n	800423e <_dtoa_r+0x826>
 80047be:	2239      	movs	r2, #57	; 0x39
 80047c0:	46b2      	mov	sl, r6
 80047c2:	703a      	strb	r2, [r7, #0]
 80047c4:	464e      	mov	r6, r9
 80047c6:	1c7d      	adds	r5, r7, #1
 80047c8:	e405      	b.n	8003fd6 <_dtoa_r+0x5be>
 80047ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047ce:	2000      	movs	r0, #0
 80047d0:	490e      	ldr	r1, [pc, #56]	; (800480c <_dtoa_r+0xdf4>)
 80047d2:	f001 fadf 	bl	8005d94 <__aeabi_dsub>
 80047d6:	4632      	mov	r2, r6
 80047d8:	463b      	mov	r3, r7
 80047da:	f001 ff1f 	bl	800661c <__aeabi_dcmpgt>
 80047de:	b908      	cbnz	r0, 80047e4 <_dtoa_r+0xdcc>
 80047e0:	e6f6      	b.n	80045d0 <_dtoa_r+0xbb8>
 80047e2:	4615      	mov	r5, r2
 80047e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047e8:	2b30      	cmp	r3, #48	; 0x30
 80047ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80047ee:	d0f8      	beq.n	80047e2 <_dtoa_r+0xdca>
 80047f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047f2:	9304      	str	r3, [sp, #16]
 80047f4:	f7ff bae3 	b.w	8003dbe <_dtoa_r+0x3a6>
 80047f8:	401c0000 	.word	0x401c0000
 80047fc:	40140000 	.word	0x40140000
 8004800:	080069f8 	.word	0x080069f8
 8004804:	08006ac0 	.word	0x08006ac0
 8004808:	40240000 	.word	0x40240000
 800480c:	3fe00000 	.word	0x3fe00000
 8004810:	4643      	mov	r3, r8
 8004812:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004816:	46a0      	mov	r8, r4
 8004818:	461c      	mov	r4, r3
 800481a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	f7ff babc 	b.w	8003d9a <_dtoa_r+0x382>
 8004822:	46b9      	mov	r9, r7
 8004824:	f7ff bb70 	b.w	8003f08 <_dtoa_r+0x4f0>
 8004828:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800482c:	d0c7      	beq.n	80047be <_dtoa_r+0xda6>
 800482e:	f1ba 0f00 	cmp.w	sl, #0
 8004832:	f77f aeb5 	ble.w	80045a0 <_dtoa_r+0xb88>
 8004836:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 800483a:	e6b1      	b.n	80045a0 <_dtoa_r+0xb88>
 800483c:	f47f aeb0 	bne.w	80045a0 <_dtoa_r+0xb88>
 8004840:	f01c 0f01 	tst.w	ip, #1
 8004844:	f43f aeac 	beq.w	80045a0 <_dtoa_r+0xb88>
 8004848:	e6a4      	b.n	8004594 <_dtoa_r+0xb7c>
 800484a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800484c:	2b02      	cmp	r3, #2
 800484e:	dc04      	bgt.n	800485a <_dtoa_r+0xe42>
 8004850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004852:	e605      	b.n	8004460 <_dtoa_r+0xa48>
 8004854:	f04f 0802 	mov.w	r8, #2
 8004858:	e4d0      	b.n	80041fc <_dtoa_r+0x7e4>
 800485a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800485c:	9306      	str	r3, [sp, #24]
 800485e:	e61b      	b.n	8004498 <_dtoa_r+0xa80>
 8004860:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004862:	2b02      	cmp	r3, #2
 8004864:	dcf9      	bgt.n	800485a <_dtoa_r+0xe42>
 8004866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004868:	f7ff bbf1 	b.w	800404e <_dtoa_r+0x636>
 800486c:	2500      	movs	r5, #0
 800486e:	6465      	str	r5, [r4, #68]	; 0x44
 8004870:	4629      	mov	r1, r5
 8004872:	4620      	mov	r0, r4
 8004874:	f000 faf8 	bl	8004e68 <_Balloc>
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	9306      	str	r3, [sp, #24]
 800487e:	930c      	str	r3, [sp, #48]	; 0x30
 8004880:	2301      	movs	r3, #1
 8004882:	9007      	str	r0, [sp, #28]
 8004884:	9521      	str	r5, [sp, #132]	; 0x84
 8004886:	6420      	str	r0, [r4, #64]	; 0x40
 8004888:	9309      	str	r3, [sp, #36]	; 0x24
 800488a:	f7ff b9d5 	b.w	8003c38 <_dtoa_r+0x220>
 800488e:	f43f ab50 	beq.w	8003f32 <_dtoa_r+0x51a>
 8004892:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8004896:	f7ff bb47 	b.w	8003f28 <_dtoa_r+0x510>
 800489a:	2301      	movs	r3, #1
 800489c:	9309      	str	r3, [sp, #36]	; 0x24
 800489e:	e55c      	b.n	800435a <_dtoa_r+0x942>
 80048a0:	2501      	movs	r5, #1
 80048a2:	f7ff b993 	b.w	8003bcc <_dtoa_r+0x1b4>
 80048a6:	bf00      	nop

080048a8 <_localeconv_r>:
 80048a8:	4800      	ldr	r0, [pc, #0]	; (80048ac <_localeconv_r+0x4>)
 80048aa:	4770      	bx	lr
 80048ac:	200007e0 	.word	0x200007e0

080048b0 <_malloc_r>:
 80048b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b4:	f101 050b 	add.w	r5, r1, #11
 80048b8:	2d16      	cmp	r5, #22
 80048ba:	b083      	sub	sp, #12
 80048bc:	4606      	mov	r6, r0
 80048be:	d927      	bls.n	8004910 <_malloc_r+0x60>
 80048c0:	f035 0507 	bics.w	r5, r5, #7
 80048c4:	f100 80b6 	bmi.w	8004a34 <_malloc_r+0x184>
 80048c8:	42a9      	cmp	r1, r5
 80048ca:	f200 80b3 	bhi.w	8004a34 <_malloc_r+0x184>
 80048ce:	f000 fac7 	bl	8004e60 <__malloc_lock>
 80048d2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80048d6:	d222      	bcs.n	800491e <_malloc_r+0x6e>
 80048d8:	4fc2      	ldr	r7, [pc, #776]	; (8004be4 <_malloc_r+0x334>)
 80048da:	08e8      	lsrs	r0, r5, #3
 80048dc:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 80048e0:	68dc      	ldr	r4, [r3, #12]
 80048e2:	429c      	cmp	r4, r3
 80048e4:	f000 81c9 	beq.w	8004c7a <_malloc_r+0x3ca>
 80048e8:	6863      	ldr	r3, [r4, #4]
 80048ea:	68e1      	ldr	r1, [r4, #12]
 80048ec:	68a5      	ldr	r5, [r4, #8]
 80048ee:	f023 0303 	bic.w	r3, r3, #3
 80048f2:	4423      	add	r3, r4
 80048f4:	4630      	mov	r0, r6
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	60e9      	str	r1, [r5, #12]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	608d      	str	r5, [r1, #8]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	f000 faaf 	bl	8004e64 <__malloc_unlock>
 8004906:	3408      	adds	r4, #8
 8004908:	4620      	mov	r0, r4
 800490a:	b003      	add	sp, #12
 800490c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004910:	2910      	cmp	r1, #16
 8004912:	f200 808f 	bhi.w	8004a34 <_malloc_r+0x184>
 8004916:	f000 faa3 	bl	8004e60 <__malloc_lock>
 800491a:	2510      	movs	r5, #16
 800491c:	e7dc      	b.n	80048d8 <_malloc_r+0x28>
 800491e:	0a68      	lsrs	r0, r5, #9
 8004920:	f000 808f 	beq.w	8004a42 <_malloc_r+0x192>
 8004924:	2804      	cmp	r0, #4
 8004926:	f200 8154 	bhi.w	8004bd2 <_malloc_r+0x322>
 800492a:	09a8      	lsrs	r0, r5, #6
 800492c:	3038      	adds	r0, #56	; 0x38
 800492e:	0041      	lsls	r1, r0, #1
 8004930:	4fac      	ldr	r7, [pc, #688]	; (8004be4 <_malloc_r+0x334>)
 8004932:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8004936:	68cc      	ldr	r4, [r1, #12]
 8004938:	42a1      	cmp	r1, r4
 800493a:	d106      	bne.n	800494a <_malloc_r+0x9a>
 800493c:	e00c      	b.n	8004958 <_malloc_r+0xa8>
 800493e:	2a00      	cmp	r2, #0
 8004940:	f280 8082 	bge.w	8004a48 <_malloc_r+0x198>
 8004944:	68e4      	ldr	r4, [r4, #12]
 8004946:	42a1      	cmp	r1, r4
 8004948:	d006      	beq.n	8004958 <_malloc_r+0xa8>
 800494a:	6863      	ldr	r3, [r4, #4]
 800494c:	f023 0303 	bic.w	r3, r3, #3
 8004950:	1b5a      	subs	r2, r3, r5
 8004952:	2a0f      	cmp	r2, #15
 8004954:	ddf3      	ble.n	800493e <_malloc_r+0x8e>
 8004956:	3801      	subs	r0, #1
 8004958:	3001      	adds	r0, #1
 800495a:	49a2      	ldr	r1, [pc, #648]	; (8004be4 <_malloc_r+0x334>)
 800495c:	693c      	ldr	r4, [r7, #16]
 800495e:	f101 0e08 	add.w	lr, r1, #8
 8004962:	4574      	cmp	r4, lr
 8004964:	f000 817e 	beq.w	8004c64 <_malloc_r+0x3b4>
 8004968:	6863      	ldr	r3, [r4, #4]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	1b5a      	subs	r2, r3, r5
 8004970:	2a0f      	cmp	r2, #15
 8004972:	f300 8164 	bgt.w	8004c3e <_malloc_r+0x38e>
 8004976:	2a00      	cmp	r2, #0
 8004978:	f8c1 e014 	str.w	lr, [r1, #20]
 800497c:	f8c1 e010 	str.w	lr, [r1, #16]
 8004980:	da73      	bge.n	8004a6a <_malloc_r+0x1ba>
 8004982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004986:	f080 8139 	bcs.w	8004bfc <_malloc_r+0x34c>
 800498a:	08db      	lsrs	r3, r3, #3
 800498c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8004990:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8004994:	684a      	ldr	r2, [r1, #4]
 8004996:	f8d8 9008 	ldr.w	r9, [r8, #8]
 800499a:	f8c4 9008 	str.w	r9, [r4, #8]
 800499e:	2301      	movs	r3, #1
 80049a0:	fa03 f30c 	lsl.w	r3, r3, ip
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c4 800c 	str.w	r8, [r4, #12]
 80049aa:	604b      	str	r3, [r1, #4]
 80049ac:	f8c8 4008 	str.w	r4, [r8, #8]
 80049b0:	f8c9 400c 	str.w	r4, [r9, #12]
 80049b4:	1082      	asrs	r2, r0, #2
 80049b6:	2401      	movs	r4, #1
 80049b8:	4094      	lsls	r4, r2
 80049ba:	429c      	cmp	r4, r3
 80049bc:	d862      	bhi.n	8004a84 <_malloc_r+0x1d4>
 80049be:	4223      	tst	r3, r4
 80049c0:	d106      	bne.n	80049d0 <_malloc_r+0x120>
 80049c2:	f020 0003 	bic.w	r0, r0, #3
 80049c6:	0064      	lsls	r4, r4, #1
 80049c8:	4223      	tst	r3, r4
 80049ca:	f100 0004 	add.w	r0, r0, #4
 80049ce:	d0fa      	beq.n	80049c6 <_malloc_r+0x116>
 80049d0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 80049d4:	46c4      	mov	ip, r8
 80049d6:	4681      	mov	r9, r0
 80049d8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80049dc:	459c      	cmp	ip, r3
 80049de:	d107      	bne.n	80049f0 <_malloc_r+0x140>
 80049e0:	e142      	b.n	8004c68 <_malloc_r+0x3b8>
 80049e2:	2900      	cmp	r1, #0
 80049e4:	f280 8152 	bge.w	8004c8c <_malloc_r+0x3dc>
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	459c      	cmp	ip, r3
 80049ec:	f000 813c 	beq.w	8004c68 <_malloc_r+0x3b8>
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	f022 0203 	bic.w	r2, r2, #3
 80049f6:	1b51      	subs	r1, r2, r5
 80049f8:	290f      	cmp	r1, #15
 80049fa:	ddf2      	ble.n	80049e2 <_malloc_r+0x132>
 80049fc:	461c      	mov	r4, r3
 80049fe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004a02:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8004a06:	195a      	adds	r2, r3, r5
 8004a08:	f045 0901 	orr.w	r9, r5, #1
 8004a0c:	f041 0501 	orr.w	r5, r1, #1
 8004a10:	f8c3 9004 	str.w	r9, [r3, #4]
 8004a14:	4630      	mov	r0, r6
 8004a16:	f8c8 c00c 	str.w	ip, [r8, #12]
 8004a1a:	f8cc 8008 	str.w	r8, [ip, #8]
 8004a1e:	617a      	str	r2, [r7, #20]
 8004a20:	613a      	str	r2, [r7, #16]
 8004a22:	f8c2 e00c 	str.w	lr, [r2, #12]
 8004a26:	f8c2 e008 	str.w	lr, [r2, #8]
 8004a2a:	6055      	str	r5, [r2, #4]
 8004a2c:	5051      	str	r1, [r2, r1]
 8004a2e:	f000 fa19 	bl	8004e64 <__malloc_unlock>
 8004a32:	e769      	b.n	8004908 <_malloc_r+0x58>
 8004a34:	2400      	movs	r4, #0
 8004a36:	230c      	movs	r3, #12
 8004a38:	4620      	mov	r0, r4
 8004a3a:	6033      	str	r3, [r6, #0]
 8004a3c:	b003      	add	sp, #12
 8004a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a42:	217e      	movs	r1, #126	; 0x7e
 8004a44:	203f      	movs	r0, #63	; 0x3f
 8004a46:	e773      	b.n	8004930 <_malloc_r+0x80>
 8004a48:	4423      	add	r3, r4
 8004a4a:	68e1      	ldr	r1, [r4, #12]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68a5      	ldr	r5, [r4, #8]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	60e9      	str	r1, [r5, #12]
 8004a56:	4630      	mov	r0, r6
 8004a58:	608d      	str	r5, [r1, #8]
 8004a5a:	605a      	str	r2, [r3, #4]
 8004a5c:	f000 fa02 	bl	8004e64 <__malloc_unlock>
 8004a60:	3408      	adds	r4, #8
 8004a62:	4620      	mov	r0, r4
 8004a64:	b003      	add	sp, #12
 8004a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6a:	4423      	add	r3, r4
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	f000 f9f5 	bl	8004e64 <__malloc_unlock>
 8004a7a:	3408      	adds	r4, #8
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	b003      	add	sp, #12
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a84:	68bc      	ldr	r4, [r7, #8]
 8004a86:	6863      	ldr	r3, [r4, #4]
 8004a88:	f023 0803 	bic.w	r8, r3, #3
 8004a8c:	4545      	cmp	r5, r8
 8004a8e:	d804      	bhi.n	8004a9a <_malloc_r+0x1ea>
 8004a90:	ebc5 0308 	rsb	r3, r5, r8
 8004a94:	2b0f      	cmp	r3, #15
 8004a96:	f300 808c 	bgt.w	8004bb2 <_malloc_r+0x302>
 8004a9a:	4b53      	ldr	r3, [pc, #332]	; (8004be8 <_malloc_r+0x338>)
 8004a9c:	f8df a158 	ldr.w	sl, [pc, #344]	; 8004bf8 <_malloc_r+0x348>
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	f8da 3000 	ldr.w	r3, [sl]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	442a      	add	r2, r5
 8004aaa:	eb04 0b08 	add.w	fp, r4, r8
 8004aae:	f000 8150 	beq.w	8004d52 <_malloc_r+0x4a2>
 8004ab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ab6:	320f      	adds	r2, #15
 8004ab8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004abc:	f022 020f 	bic.w	r2, r2, #15
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	9201      	str	r2, [sp, #4]
 8004ac6:	f000 fcef 	bl	80054a8 <_sbrk_r>
 8004aca:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ace:	4681      	mov	r9, r0
 8004ad0:	9a01      	ldr	r2, [sp, #4]
 8004ad2:	f000 80f5 	beq.w	8004cc0 <_malloc_r+0x410>
 8004ad6:	4583      	cmp	fp, r0
 8004ad8:	f200 80ef 	bhi.w	8004cba <_malloc_r+0x40a>
 8004adc:	4b43      	ldr	r3, [pc, #268]	; (8004bec <_malloc_r+0x33c>)
 8004ade:	6819      	ldr	r1, [r3, #0]
 8004ae0:	45cb      	cmp	fp, r9
 8004ae2:	4411      	add	r1, r2
 8004ae4:	6019      	str	r1, [r3, #0]
 8004ae6:	f000 813d 	beq.w	8004d64 <_malloc_r+0x4b4>
 8004aea:	f8da 0000 	ldr.w	r0, [sl]
 8004aee:	f8df e108 	ldr.w	lr, [pc, #264]	; 8004bf8 <_malloc_r+0x348>
 8004af2:	3001      	adds	r0, #1
 8004af4:	bf1b      	ittet	ne
 8004af6:	ebcb 0b09 	rsbne	fp, fp, r9
 8004afa:	4459      	addne	r1, fp
 8004afc:	f8ce 9000 	streq.w	r9, [lr]
 8004b00:	6019      	strne	r1, [r3, #0]
 8004b02:	f019 0107 	ands.w	r1, r9, #7
 8004b06:	f000 8107 	beq.w	8004d18 <_malloc_r+0x468>
 8004b0a:	f1c1 0008 	rsb	r0, r1, #8
 8004b0e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8004b12:	4481      	add	r9, r0
 8004b14:	3108      	adds	r1, #8
 8004b16:	444a      	add	r2, r9
 8004b18:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004b1c:	ebc2 0a01 	rsb	sl, r2, r1
 8004b20:	4651      	mov	r1, sl
 8004b22:	4630      	mov	r0, r6
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	f000 fcbf 	bl	80054a8 <_sbrk_r>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	9b01      	ldr	r3, [sp, #4]
 8004b2e:	f000 8127 	beq.w	8004d80 <_malloc_r+0x4d0>
 8004b32:	ebc9 0200 	rsb	r2, r9, r0
 8004b36:	4452      	add	r2, sl
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	6819      	ldr	r1, [r3, #0]
 8004b3e:	f8c7 9008 	str.w	r9, [r7, #8]
 8004b42:	4451      	add	r1, sl
 8004b44:	42bc      	cmp	r4, r7
 8004b46:	f8c9 2004 	str.w	r2, [r9, #4]
 8004b4a:	6019      	str	r1, [r3, #0]
 8004b4c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8004bec <_malloc_r+0x33c>
 8004b50:	d016      	beq.n	8004b80 <_malloc_r+0x2d0>
 8004b52:	f1b8 0f0f 	cmp.w	r8, #15
 8004b56:	f240 80e2 	bls.w	8004d1e <_malloc_r+0x46e>
 8004b5a:	6862      	ldr	r2, [r4, #4]
 8004b5c:	f1a8 030c 	sub.w	r3, r8, #12
 8004b60:	f023 0307 	bic.w	r3, r3, #7
 8004b64:	18e0      	adds	r0, r4, r3
 8004b66:	f002 0201 	and.w	r2, r2, #1
 8004b6a:	f04f 0e05 	mov.w	lr, #5
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	2b0f      	cmp	r3, #15
 8004b72:	6062      	str	r2, [r4, #4]
 8004b74:	f8c0 e004 	str.w	lr, [r0, #4]
 8004b78:	f8c0 e008 	str.w	lr, [r0, #8]
 8004b7c:	f200 8104 	bhi.w	8004d88 <_malloc_r+0x4d8>
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <_malloc_r+0x340>)
 8004b82:	68bc      	ldr	r4, [r7, #8]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	4291      	cmp	r1, r2
 8004b88:	bf88      	it	hi
 8004b8a:	6019      	strhi	r1, [r3, #0]
 8004b8c:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <_malloc_r+0x344>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	4291      	cmp	r1, r2
 8004b92:	6862      	ldr	r2, [r4, #4]
 8004b94:	bf88      	it	hi
 8004b96:	6019      	strhi	r1, [r3, #0]
 8004b98:	f022 0203 	bic.w	r2, r2, #3
 8004b9c:	4295      	cmp	r5, r2
 8004b9e:	eba2 0305 	sub.w	r3, r2, r5
 8004ba2:	d801      	bhi.n	8004ba8 <_malloc_r+0x2f8>
 8004ba4:	2b0f      	cmp	r3, #15
 8004ba6:	dc04      	bgt.n	8004bb2 <_malloc_r+0x302>
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f000 f95b 	bl	8004e64 <__malloc_unlock>
 8004bae:	2400      	movs	r4, #0
 8004bb0:	e6aa      	b.n	8004908 <_malloc_r+0x58>
 8004bb2:	1962      	adds	r2, r4, r5
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	f045 0501 	orr.w	r5, r5, #1
 8004bbc:	6065      	str	r5, [r4, #4]
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	60ba      	str	r2, [r7, #8]
 8004bc2:	6053      	str	r3, [r2, #4]
 8004bc4:	f000 f94e 	bl	8004e64 <__malloc_unlock>
 8004bc8:	3408      	adds	r4, #8
 8004bca:	4620      	mov	r0, r4
 8004bcc:	b003      	add	sp, #12
 8004bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd2:	2814      	cmp	r0, #20
 8004bd4:	d969      	bls.n	8004caa <_malloc_r+0x3fa>
 8004bd6:	2854      	cmp	r0, #84	; 0x54
 8004bd8:	f200 8097 	bhi.w	8004d0a <_malloc_r+0x45a>
 8004bdc:	0b28      	lsrs	r0, r5, #12
 8004bde:	306e      	adds	r0, #110	; 0x6e
 8004be0:	0041      	lsls	r1, r0, #1
 8004be2:	e6a5      	b.n	8004930 <_malloc_r+0x80>
 8004be4:	20000818 	.word	0x20000818
 8004be8:	20000c6c 	.word	0x20000c6c
 8004bec:	20000c70 	.word	0x20000c70
 8004bf0:	20000c68 	.word	0x20000c68
 8004bf4:	20000c64 	.word	0x20000c64
 8004bf8:	20000c24 	.word	0x20000c24
 8004bfc:	0a5a      	lsrs	r2, r3, #9
 8004bfe:	2a04      	cmp	r2, #4
 8004c00:	d956      	bls.n	8004cb0 <_malloc_r+0x400>
 8004c02:	2a14      	cmp	r2, #20
 8004c04:	f200 80a7 	bhi.w	8004d56 <_malloc_r+0x4a6>
 8004c08:	325b      	adds	r2, #91	; 0x5b
 8004c0a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004c0e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8004c12:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8004dc8 <_malloc_r+0x518>
 8004c16:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004c1a:	4561      	cmp	r1, ip
 8004c1c:	f000 8085 	beq.w	8004d2a <_malloc_r+0x47a>
 8004c20:	684a      	ldr	r2, [r1, #4]
 8004c22:	f022 0203 	bic.w	r2, r2, #3
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d202      	bcs.n	8004c30 <_malloc_r+0x380>
 8004c2a:	6889      	ldr	r1, [r1, #8]
 8004c2c:	458c      	cmp	ip, r1
 8004c2e:	d1f7      	bne.n	8004c20 <_malloc_r+0x370>
 8004c30:	68ca      	ldr	r2, [r1, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60e2      	str	r2, [r4, #12]
 8004c36:	60a1      	str	r1, [r4, #8]
 8004c38:	6094      	str	r4, [r2, #8]
 8004c3a:	60cc      	str	r4, [r1, #12]
 8004c3c:	e6ba      	b.n	80049b4 <_malloc_r+0x104>
 8004c3e:	1963      	adds	r3, r4, r5
 8004c40:	f042 0701 	orr.w	r7, r2, #1
 8004c44:	f045 0501 	orr.w	r5, r5, #1
 8004c48:	6065      	str	r5, [r4, #4]
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	614b      	str	r3, [r1, #20]
 8004c4e:	610b      	str	r3, [r1, #16]
 8004c50:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004c54:	f8c3 e008 	str.w	lr, [r3, #8]
 8004c58:	605f      	str	r7, [r3, #4]
 8004c5a:	509a      	str	r2, [r3, r2]
 8004c5c:	3408      	adds	r4, #8
 8004c5e:	f000 f901 	bl	8004e64 <__malloc_unlock>
 8004c62:	e651      	b.n	8004908 <_malloc_r+0x58>
 8004c64:	684b      	ldr	r3, [r1, #4]
 8004c66:	e6a5      	b.n	80049b4 <_malloc_r+0x104>
 8004c68:	f109 0901 	add.w	r9, r9, #1
 8004c6c:	f019 0f03 	tst.w	r9, #3
 8004c70:	f10c 0c08 	add.w	ip, ip, #8
 8004c74:	f47f aeb0 	bne.w	80049d8 <_malloc_r+0x128>
 8004c78:	e02b      	b.n	8004cd2 <_malloc_r+0x422>
 8004c7a:	f104 0308 	add.w	r3, r4, #8
 8004c7e:	6964      	ldr	r4, [r4, #20]
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	bf08      	it	eq
 8004c84:	3002      	addeq	r0, #2
 8004c86:	f43f ae68 	beq.w	800495a <_malloc_r+0xaa>
 8004c8a:	e62d      	b.n	80048e8 <_malloc_r+0x38>
 8004c8c:	441a      	add	r2, r3
 8004c8e:	461c      	mov	r4, r3
 8004c90:	6851      	ldr	r1, [r2, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8004c98:	f041 0101 	orr.w	r1, r1, #1
 8004c9c:	6051      	str	r1, [r2, #4]
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	60eb      	str	r3, [r5, #12]
 8004ca2:	609d      	str	r5, [r3, #8]
 8004ca4:	f000 f8de 	bl	8004e64 <__malloc_unlock>
 8004ca8:	e62e      	b.n	8004908 <_malloc_r+0x58>
 8004caa:	305b      	adds	r0, #91	; 0x5b
 8004cac:	0041      	lsls	r1, r0, #1
 8004cae:	e63f      	b.n	8004930 <_malloc_r+0x80>
 8004cb0:	099a      	lsrs	r2, r3, #6
 8004cb2:	3238      	adds	r2, #56	; 0x38
 8004cb4:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004cb8:	e7a9      	b.n	8004c0e <_malloc_r+0x35e>
 8004cba:	42bc      	cmp	r4, r7
 8004cbc:	f43f af0e 	beq.w	8004adc <_malloc_r+0x22c>
 8004cc0:	68bc      	ldr	r4, [r7, #8]
 8004cc2:	6862      	ldr	r2, [r4, #4]
 8004cc4:	f022 0203 	bic.w	r2, r2, #3
 8004cc8:	e768      	b.n	8004b9c <_malloc_r+0x2ec>
 8004cca:	f8d8 8000 	ldr.w	r8, [r8]
 8004cce:	4598      	cmp	r8, r3
 8004cd0:	d177      	bne.n	8004dc2 <_malloc_r+0x512>
 8004cd2:	f010 0f03 	tst.w	r0, #3
 8004cd6:	f1a8 0308 	sub.w	r3, r8, #8
 8004cda:	f100 30ff 	add.w	r0, r0, #4294967295
 8004cde:	d1f4      	bne.n	8004cca <_malloc_r+0x41a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	ea23 0304 	bic.w	r3, r3, r4
 8004ce6:	607b      	str	r3, [r7, #4]
 8004ce8:	0064      	lsls	r4, r4, #1
 8004cea:	429c      	cmp	r4, r3
 8004cec:	f63f aeca 	bhi.w	8004a84 <_malloc_r+0x1d4>
 8004cf0:	2c00      	cmp	r4, #0
 8004cf2:	f43f aec7 	beq.w	8004a84 <_malloc_r+0x1d4>
 8004cf6:	4223      	tst	r3, r4
 8004cf8:	4648      	mov	r0, r9
 8004cfa:	f47f ae69 	bne.w	80049d0 <_malloc_r+0x120>
 8004cfe:	0064      	lsls	r4, r4, #1
 8004d00:	4223      	tst	r3, r4
 8004d02:	f100 0004 	add.w	r0, r0, #4
 8004d06:	d0fa      	beq.n	8004cfe <_malloc_r+0x44e>
 8004d08:	e662      	b.n	80049d0 <_malloc_r+0x120>
 8004d0a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8004d0e:	d818      	bhi.n	8004d42 <_malloc_r+0x492>
 8004d10:	0be8      	lsrs	r0, r5, #15
 8004d12:	3077      	adds	r0, #119	; 0x77
 8004d14:	0041      	lsls	r1, r0, #1
 8004d16:	e60b      	b.n	8004930 <_malloc_r+0x80>
 8004d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d1c:	e6fb      	b.n	8004b16 <_malloc_r+0x266>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f8c9 3004 	str.w	r3, [r9, #4]
 8004d24:	464c      	mov	r4, r9
 8004d26:	2200      	movs	r2, #0
 8004d28:	e738      	b.n	8004b9c <_malloc_r+0x2ec>
 8004d2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004d2e:	1092      	asrs	r2, r2, #2
 8004d30:	f04f 0c01 	mov.w	ip, #1
 8004d34:	fa0c f202 	lsl.w	r2, ip, r2
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c8 3004 	str.w	r3, [r8, #4]
 8004d3e:	460a      	mov	r2, r1
 8004d40:	e778      	b.n	8004c34 <_malloc_r+0x384>
 8004d42:	f240 5354 	movw	r3, #1364	; 0x554
 8004d46:	4298      	cmp	r0, r3
 8004d48:	d817      	bhi.n	8004d7a <_malloc_r+0x4ca>
 8004d4a:	0ca8      	lsrs	r0, r5, #18
 8004d4c:	307c      	adds	r0, #124	; 0x7c
 8004d4e:	0041      	lsls	r1, r0, #1
 8004d50:	e5ee      	b.n	8004930 <_malloc_r+0x80>
 8004d52:	3210      	adds	r2, #16
 8004d54:	e6b4      	b.n	8004ac0 <_malloc_r+0x210>
 8004d56:	2a54      	cmp	r2, #84	; 0x54
 8004d58:	d81e      	bhi.n	8004d98 <_malloc_r+0x4e8>
 8004d5a:	0b1a      	lsrs	r2, r3, #12
 8004d5c:	326e      	adds	r2, #110	; 0x6e
 8004d5e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004d62:	e754      	b.n	8004c0e <_malloc_r+0x35e>
 8004d64:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f47f aebe 	bne.w	8004aea <_malloc_r+0x23a>
 8004d6e:	4442      	add	r2, r8
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	e702      	b.n	8004b80 <_malloc_r+0x2d0>
 8004d7a:	21fc      	movs	r1, #252	; 0xfc
 8004d7c:	207e      	movs	r0, #126	; 0x7e
 8004d7e:	e5d7      	b.n	8004930 <_malloc_r+0x80>
 8004d80:	2201      	movs	r2, #1
 8004d82:	f04f 0a00 	mov.w	sl, #0
 8004d86:	e6d9      	b.n	8004b3c <_malloc_r+0x28c>
 8004d88:	f104 0108 	add.w	r1, r4, #8
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f000 fccb 	bl	8005728 <_free_r>
 8004d92:	f8da 1000 	ldr.w	r1, [sl]
 8004d96:	e6f3      	b.n	8004b80 <_malloc_r+0x2d0>
 8004d98:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004d9c:	d804      	bhi.n	8004da8 <_malloc_r+0x4f8>
 8004d9e:	0bda      	lsrs	r2, r3, #15
 8004da0:	3277      	adds	r2, #119	; 0x77
 8004da2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004da6:	e732      	b.n	8004c0e <_malloc_r+0x35e>
 8004da8:	f240 5154 	movw	r1, #1364	; 0x554
 8004dac:	428a      	cmp	r2, r1
 8004dae:	d804      	bhi.n	8004dba <_malloc_r+0x50a>
 8004db0:	0c9a      	lsrs	r2, r3, #18
 8004db2:	327c      	adds	r2, #124	; 0x7c
 8004db4:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004db8:	e729      	b.n	8004c0e <_malloc_r+0x35e>
 8004dba:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8004dbe:	227e      	movs	r2, #126	; 0x7e
 8004dc0:	e725      	b.n	8004c0e <_malloc_r+0x35e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	e790      	b.n	8004ce8 <_malloc_r+0x438>
 8004dc6:	bf00      	nop
 8004dc8:	20000818 	.word	0x20000818

08004dcc <memchr>:
 8004dcc:	0783      	lsls	r3, r0, #30
 8004dce:	b470      	push	{r4, r5, r6}
 8004dd0:	b2c9      	uxtb	r1, r1
 8004dd2:	d040      	beq.n	8004e56 <memchr+0x8a>
 8004dd4:	1e54      	subs	r4, r2, #1
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	d03f      	beq.n	8004e5a <memchr+0x8e>
 8004dda:	7803      	ldrb	r3, [r0, #0]
 8004ddc:	428b      	cmp	r3, r1
 8004dde:	bf18      	it	ne
 8004de0:	1c43      	addne	r3, r0, #1
 8004de2:	d106      	bne.n	8004df2 <memchr+0x26>
 8004de4:	e01d      	b.n	8004e22 <memchr+0x56>
 8004de6:	b1f4      	cbz	r4, 8004e26 <memchr+0x5a>
 8004de8:	7802      	ldrb	r2, [r0, #0]
 8004dea:	428a      	cmp	r2, r1
 8004dec:	f104 34ff 	add.w	r4, r4, #4294967295
 8004df0:	d017      	beq.n	8004e22 <memchr+0x56>
 8004df2:	f013 0f03 	tst.w	r3, #3
 8004df6:	4618      	mov	r0, r3
 8004df8:	f103 0301 	add.w	r3, r3, #1
 8004dfc:	d1f3      	bne.n	8004de6 <memchr+0x1a>
 8004dfe:	2c03      	cmp	r4, #3
 8004e00:	d814      	bhi.n	8004e2c <memchr+0x60>
 8004e02:	b184      	cbz	r4, 8004e26 <memchr+0x5a>
 8004e04:	7803      	ldrb	r3, [r0, #0]
 8004e06:	428b      	cmp	r3, r1
 8004e08:	d00b      	beq.n	8004e22 <memchr+0x56>
 8004e0a:	1905      	adds	r5, r0, r4
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	e002      	b.n	8004e16 <memchr+0x4a>
 8004e10:	7802      	ldrb	r2, [r0, #0]
 8004e12:	428a      	cmp	r2, r1
 8004e14:	d005      	beq.n	8004e22 <memchr+0x56>
 8004e16:	42ab      	cmp	r3, r5
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f103 0301 	add.w	r3, r3, #1
 8004e1e:	d1f7      	bne.n	8004e10 <memchr+0x44>
 8004e20:	2000      	movs	r0, #0
 8004e22:	bc70      	pop	{r4, r5, r6}
 8004e24:	4770      	bx	lr
 8004e26:	4620      	mov	r0, r4
 8004e28:	bc70      	pop	{r4, r5, r6}
 8004e2a:	4770      	bx	lr
 8004e2c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8004e30:	4602      	mov	r2, r0
 8004e32:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8004e36:	4610      	mov	r0, r2
 8004e38:	3204      	adds	r2, #4
 8004e3a:	6803      	ldr	r3, [r0, #0]
 8004e3c:	4073      	eors	r3, r6
 8004e3e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8004e42:	ea25 0303 	bic.w	r3, r5, r3
 8004e46:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004e4a:	d1da      	bne.n	8004e02 <memchr+0x36>
 8004e4c:	3c04      	subs	r4, #4
 8004e4e:	2c03      	cmp	r4, #3
 8004e50:	4610      	mov	r0, r2
 8004e52:	d8f0      	bhi.n	8004e36 <memchr+0x6a>
 8004e54:	e7d5      	b.n	8004e02 <memchr+0x36>
 8004e56:	4614      	mov	r4, r2
 8004e58:	e7d1      	b.n	8004dfe <memchr+0x32>
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	e7e1      	b.n	8004e22 <memchr+0x56>
 8004e5e:	bf00      	nop

08004e60 <__malloc_lock>:
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop

08004e64 <__malloc_unlock>:
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop

08004e68 <_Balloc>:
 8004e68:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004e6a:	b570      	push	{r4, r5, r6, lr}
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	b14b      	cbz	r3, 8004e86 <_Balloc+0x1e>
 8004e72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004e76:	b180      	cbz	r0, 8004e9a <_Balloc+0x32>
 8004e78:	6802      	ldr	r2, [r0, #0]
 8004e7a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6103      	str	r3, [r0, #16]
 8004e82:	60c3      	str	r3, [r0, #12]
 8004e84:	bd70      	pop	{r4, r5, r6, pc}
 8004e86:	2104      	movs	r1, #4
 8004e88:	2221      	movs	r2, #33	; 0x21
 8004e8a:	f000 fbcf 	bl	800562c <_calloc_r>
 8004e8e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8004e90:	4603      	mov	r3, r0
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d1ed      	bne.n	8004e72 <_Balloc+0xa>
 8004e96:	2000      	movs	r0, #0
 8004e98:	bd70      	pop	{r4, r5, r6, pc}
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	fa01 f604 	lsl.w	r6, r1, r4
 8004ea0:	1d72      	adds	r2, r6, #5
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	0092      	lsls	r2, r2, #2
 8004ea6:	f000 fbc1 	bl	800562c <_calloc_r>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d0f3      	beq.n	8004e96 <_Balloc+0x2e>
 8004eae:	6044      	str	r4, [r0, #4]
 8004eb0:	6086      	str	r6, [r0, #8]
 8004eb2:	e7e4      	b.n	8004e7e <_Balloc+0x16>

08004eb4 <_Bfree>:
 8004eb4:	b131      	cbz	r1, 8004ec4 <_Bfree+0x10>
 8004eb6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004eb8:	684a      	ldr	r2, [r1, #4]
 8004eba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004ebe:	6008      	str	r0, [r1, #0]
 8004ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop

08004ec8 <__multadd>:
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eca:	690c      	ldr	r4, [r1, #16]
 8004ecc:	b083      	sub	sp, #12
 8004ece:	460d      	mov	r5, r1
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	f101 0e14 	add.w	lr, r1, #20
 8004ed6:	2700      	movs	r7, #0
 8004ed8:	f8de 1000 	ldr.w	r1, [lr]
 8004edc:	b288      	uxth	r0, r1
 8004ede:	0c09      	lsrs	r1, r1, #16
 8004ee0:	fb02 3300 	mla	r3, r2, r0, r3
 8004ee4:	fb02 f101 	mul.w	r1, r2, r1
 8004ee8:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8004eec:	3701      	adds	r7, #1
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8004ef4:	42bc      	cmp	r4, r7
 8004ef6:	f84e 3b04 	str.w	r3, [lr], #4
 8004efa:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8004efe:	dceb      	bgt.n	8004ed8 <__multadd+0x10>
 8004f00:	b13b      	cbz	r3, 8004f12 <__multadd+0x4a>
 8004f02:	68aa      	ldr	r2, [r5, #8]
 8004f04:	4294      	cmp	r4, r2
 8004f06:	da07      	bge.n	8004f18 <__multadd+0x50>
 8004f08:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004f0c:	3401      	adds	r4, #1
 8004f0e:	6153      	str	r3, [r2, #20]
 8004f10:	612c      	str	r4, [r5, #16]
 8004f12:	4628      	mov	r0, r5
 8004f14:	b003      	add	sp, #12
 8004f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f18:	6869      	ldr	r1, [r5, #4]
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	3101      	adds	r1, #1
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7ff ffa2 	bl	8004e68 <_Balloc>
 8004f24:	692a      	ldr	r2, [r5, #16]
 8004f26:	3202      	adds	r2, #2
 8004f28:	f105 010c 	add.w	r1, r5, #12
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	0092      	lsls	r2, r2, #2
 8004f30:	300c      	adds	r0, #12
 8004f32:	f7fd f8c9 	bl	80020c8 <memcpy>
 8004f36:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8004f38:	6869      	ldr	r1, [r5, #4]
 8004f3a:	9b01      	ldr	r3, [sp, #4]
 8004f3c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8004f40:	6028      	str	r0, [r5, #0]
 8004f42:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8004f46:	463d      	mov	r5, r7
 8004f48:	e7de      	b.n	8004f08 <__multadd+0x40>
 8004f4a:	bf00      	nop

08004f4c <__hi0bits>:
 8004f4c:	0c03      	lsrs	r3, r0, #16
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	b9b3      	cbnz	r3, 8004f80 <__hi0bits+0x34>
 8004f52:	0400      	lsls	r0, r0, #16
 8004f54:	2310      	movs	r3, #16
 8004f56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004f5a:	bf04      	itt	eq
 8004f5c:	0200      	lsleq	r0, r0, #8
 8004f5e:	3308      	addeq	r3, #8
 8004f60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004f64:	bf04      	itt	eq
 8004f66:	0100      	lsleq	r0, r0, #4
 8004f68:	3304      	addeq	r3, #4
 8004f6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004f6e:	bf04      	itt	eq
 8004f70:	0080      	lsleq	r0, r0, #2
 8004f72:	3302      	addeq	r3, #2
 8004f74:	2800      	cmp	r0, #0
 8004f76:	db07      	blt.n	8004f88 <__hi0bits+0x3c>
 8004f78:	0042      	lsls	r2, r0, #1
 8004f7a:	d403      	bmi.n	8004f84 <__hi0bits+0x38>
 8004f7c:	2020      	movs	r0, #32
 8004f7e:	4770      	bx	lr
 8004f80:	2300      	movs	r3, #0
 8004f82:	e7e8      	b.n	8004f56 <__hi0bits+0xa>
 8004f84:	1c58      	adds	r0, r3, #1
 8004f86:	4770      	bx	lr
 8004f88:	4618      	mov	r0, r3
 8004f8a:	4770      	bx	lr

08004f8c <__lo0bits>:
 8004f8c:	6803      	ldr	r3, [r0, #0]
 8004f8e:	f013 0207 	ands.w	r2, r3, #7
 8004f92:	d007      	beq.n	8004fa4 <__lo0bits+0x18>
 8004f94:	07d9      	lsls	r1, r3, #31
 8004f96:	d420      	bmi.n	8004fda <__lo0bits+0x4e>
 8004f98:	079a      	lsls	r2, r3, #30
 8004f9a:	d420      	bmi.n	8004fde <__lo0bits+0x52>
 8004f9c:	089b      	lsrs	r3, r3, #2
 8004f9e:	6003      	str	r3, [r0, #0]
 8004fa0:	2002      	movs	r0, #2
 8004fa2:	4770      	bx	lr
 8004fa4:	b299      	uxth	r1, r3
 8004fa6:	b909      	cbnz	r1, 8004fac <__lo0bits+0x20>
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	2210      	movs	r2, #16
 8004fac:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004fb0:	bf04      	itt	eq
 8004fb2:	0a1b      	lsreq	r3, r3, #8
 8004fb4:	3208      	addeq	r2, #8
 8004fb6:	0719      	lsls	r1, r3, #28
 8004fb8:	bf04      	itt	eq
 8004fba:	091b      	lsreq	r3, r3, #4
 8004fbc:	3204      	addeq	r2, #4
 8004fbe:	0799      	lsls	r1, r3, #30
 8004fc0:	bf04      	itt	eq
 8004fc2:	089b      	lsreq	r3, r3, #2
 8004fc4:	3202      	addeq	r2, #2
 8004fc6:	07d9      	lsls	r1, r3, #31
 8004fc8:	d404      	bmi.n	8004fd4 <__lo0bits+0x48>
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <__lo0bits+0x46>
 8004fce:	2020      	movs	r0, #32
 8004fd0:	4770      	bx	lr
 8004fd2:	3201      	adds	r2, #1
 8004fd4:	6003      	str	r3, [r0, #0]
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4770      	bx	lr
 8004fda:	2000      	movs	r0, #0
 8004fdc:	4770      	bx	lr
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop

08004fe8 <__i2b>:
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	460c      	mov	r4, r1
 8004fec:	2101      	movs	r1, #1
 8004fee:	f7ff ff3b 	bl	8004e68 <_Balloc>
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	6144      	str	r4, [r0, #20]
 8004ff6:	6102      	str	r2, [r0, #16]
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	bf00      	nop

08004ffc <__multiply>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	690f      	ldr	r7, [r1, #16]
 8005002:	6916      	ldr	r6, [r2, #16]
 8005004:	42b7      	cmp	r7, r6
 8005006:	b083      	sub	sp, #12
 8005008:	460d      	mov	r5, r1
 800500a:	4614      	mov	r4, r2
 800500c:	f2c0 808d 	blt.w	800512a <__multiply+0x12e>
 8005010:	4633      	mov	r3, r6
 8005012:	463e      	mov	r6, r7
 8005014:	461f      	mov	r7, r3
 8005016:	68ab      	ldr	r3, [r5, #8]
 8005018:	6869      	ldr	r1, [r5, #4]
 800501a:	eb06 0807 	add.w	r8, r6, r7
 800501e:	4598      	cmp	r8, r3
 8005020:	bfc8      	it	gt
 8005022:	3101      	addgt	r1, #1
 8005024:	f7ff ff20 	bl	8004e68 <_Balloc>
 8005028:	f100 0c14 	add.w	ip, r0, #20
 800502c:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8005030:	45cc      	cmp	ip, r9
 8005032:	9000      	str	r0, [sp, #0]
 8005034:	d205      	bcs.n	8005042 <__multiply+0x46>
 8005036:	4663      	mov	r3, ip
 8005038:	2100      	movs	r1, #0
 800503a:	f843 1b04 	str.w	r1, [r3], #4
 800503e:	4599      	cmp	r9, r3
 8005040:	d8fb      	bhi.n	800503a <__multiply+0x3e>
 8005042:	f104 0214 	add.w	r2, r4, #20
 8005046:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800504a:	f105 0314 	add.w	r3, r5, #20
 800504e:	4552      	cmp	r2, sl
 8005050:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8005054:	d254      	bcs.n	8005100 <__multiply+0x104>
 8005056:	f8cd 9004 	str.w	r9, [sp, #4]
 800505a:	4699      	mov	r9, r3
 800505c:	f852 3b04 	ldr.w	r3, [r2], #4
 8005060:	fa1f fb83 	uxth.w	fp, r3
 8005064:	f1bb 0f00 	cmp.w	fp, #0
 8005068:	d020      	beq.n	80050ac <__multiply+0xb0>
 800506a:	2000      	movs	r0, #0
 800506c:	464f      	mov	r7, r9
 800506e:	4666      	mov	r6, ip
 8005070:	4605      	mov	r5, r0
 8005072:	e000      	b.n	8005076 <__multiply+0x7a>
 8005074:	461e      	mov	r6, r3
 8005076:	f857 4b04 	ldr.w	r4, [r7], #4
 800507a:	6830      	ldr	r0, [r6, #0]
 800507c:	b2a1      	uxth	r1, r4
 800507e:	b283      	uxth	r3, r0
 8005080:	fb0b 3101 	mla	r1, fp, r1, r3
 8005084:	0c24      	lsrs	r4, r4, #16
 8005086:	0c00      	lsrs	r0, r0, #16
 8005088:	194b      	adds	r3, r1, r5
 800508a:	fb0b 0004 	mla	r0, fp, r4, r0
 800508e:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8005092:	b299      	uxth	r1, r3
 8005094:	4633      	mov	r3, r6
 8005096:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800509a:	45be      	cmp	lr, r7
 800509c:	ea4f 4510 	mov.w	r5, r0, lsr #16
 80050a0:	f843 1b04 	str.w	r1, [r3], #4
 80050a4:	d8e6      	bhi.n	8005074 <__multiply+0x78>
 80050a6:	6075      	str	r5, [r6, #4]
 80050a8:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80050ac:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 80050b0:	d020      	beq.n	80050f4 <__multiply+0xf8>
 80050b2:	f8dc 3000 	ldr.w	r3, [ip]
 80050b6:	4667      	mov	r7, ip
 80050b8:	4618      	mov	r0, r3
 80050ba:	464d      	mov	r5, r9
 80050bc:	2100      	movs	r1, #0
 80050be:	e000      	b.n	80050c2 <__multiply+0xc6>
 80050c0:	4637      	mov	r7, r6
 80050c2:	882c      	ldrh	r4, [r5, #0]
 80050c4:	0c00      	lsrs	r0, r0, #16
 80050c6:	fb0b 0004 	mla	r0, fp, r4, r0
 80050ca:	4401      	add	r1, r0
 80050cc:	b29c      	uxth	r4, r3
 80050ce:	463e      	mov	r6, r7
 80050d0:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 80050d4:	f846 3b04 	str.w	r3, [r6], #4
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f855 4b04 	ldr.w	r4, [r5], #4
 80050de:	b283      	uxth	r3, r0
 80050e0:	0c24      	lsrs	r4, r4, #16
 80050e2:	fb0b 3404 	mla	r4, fp, r4, r3
 80050e6:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 80050ea:	45ae      	cmp	lr, r5
 80050ec:	ea4f 4113 	mov.w	r1, r3, lsr #16
 80050f0:	d8e6      	bhi.n	80050c0 <__multiply+0xc4>
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	4592      	cmp	sl, r2
 80050f6:	f10c 0c04 	add.w	ip, ip, #4
 80050fa:	d8af      	bhi.n	800505c <__multiply+0x60>
 80050fc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005100:	f1b8 0f00 	cmp.w	r8, #0
 8005104:	dd0b      	ble.n	800511e <__multiply+0x122>
 8005106:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800510a:	f1a9 0904 	sub.w	r9, r9, #4
 800510e:	b11b      	cbz	r3, 8005118 <__multiply+0x11c>
 8005110:	e005      	b.n	800511e <__multiply+0x122>
 8005112:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8005116:	b913      	cbnz	r3, 800511e <__multiply+0x122>
 8005118:	f1b8 0801 	subs.w	r8, r8, #1
 800511c:	d1f9      	bne.n	8005112 <__multiply+0x116>
 800511e:	9800      	ldr	r0, [sp, #0]
 8005120:	f8c0 8010 	str.w	r8, [r0, #16]
 8005124:	b003      	add	sp, #12
 8005126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512a:	4615      	mov	r5, r2
 800512c:	460c      	mov	r4, r1
 800512e:	e772      	b.n	8005016 <__multiply+0x1a>

08005130 <__pow5mult>:
 8005130:	f012 0303 	ands.w	r3, r2, #3
 8005134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005138:	4614      	mov	r4, r2
 800513a:	4607      	mov	r7, r0
 800513c:	460e      	mov	r6, r1
 800513e:	d12d      	bne.n	800519c <__pow5mult+0x6c>
 8005140:	10a4      	asrs	r4, r4, #2
 8005142:	d01c      	beq.n	800517e <__pow5mult+0x4e>
 8005144:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8005146:	b395      	cbz	r5, 80051ae <__pow5mult+0x7e>
 8005148:	07e3      	lsls	r3, r4, #31
 800514a:	f04f 0800 	mov.w	r8, #0
 800514e:	d406      	bmi.n	800515e <__pow5mult+0x2e>
 8005150:	1064      	asrs	r4, r4, #1
 8005152:	d014      	beq.n	800517e <__pow5mult+0x4e>
 8005154:	6828      	ldr	r0, [r5, #0]
 8005156:	b1a8      	cbz	r0, 8005184 <__pow5mult+0x54>
 8005158:	4605      	mov	r5, r0
 800515a:	07e3      	lsls	r3, r4, #31
 800515c:	d5f8      	bpl.n	8005150 <__pow5mult+0x20>
 800515e:	4638      	mov	r0, r7
 8005160:	4631      	mov	r1, r6
 8005162:	462a      	mov	r2, r5
 8005164:	f7ff ff4a 	bl	8004ffc <__multiply>
 8005168:	b1b6      	cbz	r6, 8005198 <__pow5mult+0x68>
 800516a:	6872      	ldr	r2, [r6, #4]
 800516c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516e:	1064      	asrs	r4, r4, #1
 8005170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005174:	6031      	str	r1, [r6, #0]
 8005176:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800517a:	4606      	mov	r6, r0
 800517c:	d1ea      	bne.n	8005154 <__pow5mult+0x24>
 800517e:	4630      	mov	r0, r6
 8005180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005184:	4629      	mov	r1, r5
 8005186:	462a      	mov	r2, r5
 8005188:	4638      	mov	r0, r7
 800518a:	f7ff ff37 	bl	8004ffc <__multiply>
 800518e:	6028      	str	r0, [r5, #0]
 8005190:	f8c0 8000 	str.w	r8, [r0]
 8005194:	4605      	mov	r5, r0
 8005196:	e7e0      	b.n	800515a <__pow5mult+0x2a>
 8005198:	4606      	mov	r6, r0
 800519a:	e7d9      	b.n	8005150 <__pow5mult+0x20>
 800519c:	1e5a      	subs	r2, r3, #1
 800519e:	4d0b      	ldr	r5, [pc, #44]	; (80051cc <__pow5mult+0x9c>)
 80051a0:	2300      	movs	r3, #0
 80051a2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80051a6:	f7ff fe8f 	bl	8004ec8 <__multadd>
 80051aa:	4606      	mov	r6, r0
 80051ac:	e7c8      	b.n	8005140 <__pow5mult+0x10>
 80051ae:	2101      	movs	r1, #1
 80051b0:	4638      	mov	r0, r7
 80051b2:	f7ff fe59 	bl	8004e68 <_Balloc>
 80051b6:	f240 2171 	movw	r1, #625	; 0x271
 80051ba:	2201      	movs	r2, #1
 80051bc:	2300      	movs	r3, #0
 80051be:	6141      	str	r1, [r0, #20]
 80051c0:	6102      	str	r2, [r0, #16]
 80051c2:	4605      	mov	r5, r0
 80051c4:	64b8      	str	r0, [r7, #72]	; 0x48
 80051c6:	6003      	str	r3, [r0, #0]
 80051c8:	e7be      	b.n	8005148 <__pow5mult+0x18>
 80051ca:	bf00      	nop
 80051cc:	08006ae8 	.word	0x08006ae8

080051d0 <__lshift>:
 80051d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d4:	690f      	ldr	r7, [r1, #16]
 80051d6:	688b      	ldr	r3, [r1, #8]
 80051d8:	ea4f 1962 	mov.w	r9, r2, asr #5
 80051dc:	444f      	add	r7, r9
 80051de:	1c7d      	adds	r5, r7, #1
 80051e0:	429d      	cmp	r5, r3
 80051e2:	460e      	mov	r6, r1
 80051e4:	4614      	mov	r4, r2
 80051e6:	6849      	ldr	r1, [r1, #4]
 80051e8:	4680      	mov	r8, r0
 80051ea:	dd04      	ble.n	80051f6 <__lshift+0x26>
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	429d      	cmp	r5, r3
 80051f0:	f101 0101 	add.w	r1, r1, #1
 80051f4:	dcfa      	bgt.n	80051ec <__lshift+0x1c>
 80051f6:	4640      	mov	r0, r8
 80051f8:	f7ff fe36 	bl	8004e68 <_Balloc>
 80051fc:	f1b9 0f00 	cmp.w	r9, #0
 8005200:	f100 0114 	add.w	r1, r0, #20
 8005204:	dd09      	ble.n	800521a <__lshift+0x4a>
 8005206:	2300      	movs	r3, #0
 8005208:	469e      	mov	lr, r3
 800520a:	460a      	mov	r2, r1
 800520c:	3301      	adds	r3, #1
 800520e:	454b      	cmp	r3, r9
 8005210:	f842 eb04 	str.w	lr, [r2], #4
 8005214:	d1fa      	bne.n	800520c <__lshift+0x3c>
 8005216:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800521a:	6932      	ldr	r2, [r6, #16]
 800521c:	f106 0314 	add.w	r3, r6, #20
 8005220:	f014 0c1f 	ands.w	ip, r4, #31
 8005224:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8005228:	d01f      	beq.n	800526a <__lshift+0x9a>
 800522a:	f1cc 0920 	rsb	r9, ip, #32
 800522e:	2200      	movs	r2, #0
 8005230:	681c      	ldr	r4, [r3, #0]
 8005232:	fa04 f40c 	lsl.w	r4, r4, ip
 8005236:	4314      	orrs	r4, r2
 8005238:	468a      	mov	sl, r1
 800523a:	f841 4b04 	str.w	r4, [r1], #4
 800523e:	f853 4b04 	ldr.w	r4, [r3], #4
 8005242:	459e      	cmp	lr, r3
 8005244:	fa24 f209 	lsr.w	r2, r4, r9
 8005248:	d8f2      	bhi.n	8005230 <__lshift+0x60>
 800524a:	f8ca 2004 	str.w	r2, [sl, #4]
 800524e:	b102      	cbz	r2, 8005252 <__lshift+0x82>
 8005250:	1cbd      	adds	r5, r7, #2
 8005252:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8005256:	6872      	ldr	r2, [r6, #4]
 8005258:	3d01      	subs	r5, #1
 800525a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800525e:	6105      	str	r5, [r0, #16]
 8005260:	6031      	str	r1, [r6, #0]
 8005262:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526a:	3904      	subs	r1, #4
 800526c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005270:	f841 2f04 	str.w	r2, [r1, #4]!
 8005274:	459e      	cmp	lr, r3
 8005276:	d8f9      	bhi.n	800526c <__lshift+0x9c>
 8005278:	e7eb      	b.n	8005252 <__lshift+0x82>
 800527a:	bf00      	nop

0800527c <__mcmp>:
 800527c:	6902      	ldr	r2, [r0, #16]
 800527e:	690b      	ldr	r3, [r1, #16]
 8005280:	1ad2      	subs	r2, r2, r3
 8005282:	d113      	bne.n	80052ac <__mcmp+0x30>
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	3014      	adds	r0, #20
 8005288:	3114      	adds	r1, #20
 800528a:	4419      	add	r1, r3
 800528c:	b410      	push	{r4}
 800528e:	4403      	add	r3, r0
 8005290:	e001      	b.n	8005296 <__mcmp+0x1a>
 8005292:	4298      	cmp	r0, r3
 8005294:	d20c      	bcs.n	80052b0 <__mcmp+0x34>
 8005296:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800529a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800529e:	4294      	cmp	r4, r2
 80052a0:	d0f7      	beq.n	8005292 <__mcmp+0x16>
 80052a2:	d309      	bcc.n	80052b8 <__mcmp+0x3c>
 80052a4:	2001      	movs	r0, #1
 80052a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	4610      	mov	r0, r2
 80052ae:	4770      	bx	lr
 80052b0:	2000      	movs	r0, #0
 80052b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop

080052c4 <__mdiff>:
 80052c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c8:	460e      	mov	r6, r1
 80052ca:	4605      	mov	r5, r0
 80052cc:	4611      	mov	r1, r2
 80052ce:	4630      	mov	r0, r6
 80052d0:	4614      	mov	r4, r2
 80052d2:	f7ff ffd3 	bl	800527c <__mcmp>
 80052d6:	1e07      	subs	r7, r0, #0
 80052d8:	d054      	beq.n	8005384 <__mdiff+0xc0>
 80052da:	db4d      	blt.n	8005378 <__mdiff+0xb4>
 80052dc:	f04f 0800 	mov.w	r8, #0
 80052e0:	6871      	ldr	r1, [r6, #4]
 80052e2:	4628      	mov	r0, r5
 80052e4:	f7ff fdc0 	bl	8004e68 <_Balloc>
 80052e8:	6937      	ldr	r7, [r6, #16]
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	f8c0 800c 	str.w	r8, [r0, #12]
 80052f0:	3614      	adds	r6, #20
 80052f2:	f104 0214 	add.w	r2, r4, #20
 80052f6:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 80052fa:	f100 0514 	add.w	r5, r0, #20
 80052fe:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8005302:	2300      	movs	r3, #0
 8005304:	f856 8b04 	ldr.w	r8, [r6], #4
 8005308:	f852 4b04 	ldr.w	r4, [r2], #4
 800530c:	fa13 f388 	uxtah	r3, r3, r8
 8005310:	b2a1      	uxth	r1, r4
 8005312:	0c24      	lsrs	r4, r4, #16
 8005314:	1a59      	subs	r1, r3, r1
 8005316:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 800531a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800531e:	b289      	uxth	r1, r1
 8005320:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005324:	4594      	cmp	ip, r2
 8005326:	f845 1b04 	str.w	r1, [r5], #4
 800532a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800532e:	4634      	mov	r4, r6
 8005330:	d8e8      	bhi.n	8005304 <__mdiff+0x40>
 8005332:	45b6      	cmp	lr, r6
 8005334:	46ac      	mov	ip, r5
 8005336:	d915      	bls.n	8005364 <__mdiff+0xa0>
 8005338:	f854 2b04 	ldr.w	r2, [r4], #4
 800533c:	fa13 f182 	uxtah	r1, r3, r2
 8005340:	0c13      	lsrs	r3, r2, #16
 8005342:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005346:	b289      	uxth	r1, r1
 8005348:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800534c:	45a6      	cmp	lr, r4
 800534e:	f845 1b04 	str.w	r1, [r5], #4
 8005352:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005356:	d8ef      	bhi.n	8005338 <__mdiff+0x74>
 8005358:	43f6      	mvns	r6, r6
 800535a:	4476      	add	r6, lr
 800535c:	f026 0503 	bic.w	r5, r6, #3
 8005360:	3504      	adds	r5, #4
 8005362:	4465      	add	r5, ip
 8005364:	3d04      	subs	r5, #4
 8005366:	b921      	cbnz	r1, 8005372 <__mdiff+0xae>
 8005368:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800536c:	3f01      	subs	r7, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0fa      	beq.n	8005368 <__mdiff+0xa4>
 8005372:	6107      	str	r7, [r0, #16]
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005378:	4633      	mov	r3, r6
 800537a:	f04f 0801 	mov.w	r8, #1
 800537e:	4626      	mov	r6, r4
 8005380:	461c      	mov	r4, r3
 8005382:	e7ad      	b.n	80052e0 <__mdiff+0x1c>
 8005384:	4628      	mov	r0, r5
 8005386:	4639      	mov	r1, r7
 8005388:	f7ff fd6e 	bl	8004e68 <_Balloc>
 800538c:	2301      	movs	r3, #1
 800538e:	6147      	str	r7, [r0, #20]
 8005390:	6103      	str	r3, [r0, #16]
 8005392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005396:	bf00      	nop

08005398 <__d2b>:
 8005398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800539c:	b083      	sub	sp, #12
 800539e:	2101      	movs	r1, #1
 80053a0:	461c      	mov	r4, r3
 80053a2:	f3c3 550a 	ubfx	r5, r3, #20, #11
 80053a6:	4617      	mov	r7, r2
 80053a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80053aa:	f7ff fd5d 	bl	8004e68 <_Balloc>
 80053ae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80053b2:	4681      	mov	r9, r0
 80053b4:	b10d      	cbz	r5, 80053ba <__d2b+0x22>
 80053b6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80053ba:	9401      	str	r4, [sp, #4]
 80053bc:	b31f      	cbz	r7, 8005406 <__d2b+0x6e>
 80053be:	a802      	add	r0, sp, #8
 80053c0:	f840 7d08 	str.w	r7, [r0, #-8]!
 80053c4:	f7ff fde2 	bl	8004f8c <__lo0bits>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d135      	bne.n	8005438 <__d2b+0xa0>
 80053cc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80053d0:	f8c9 2014 	str.w	r2, [r9, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf14      	ite	ne
 80053d8:	2402      	movne	r4, #2
 80053da:	2401      	moveq	r4, #1
 80053dc:	f8c9 3018 	str.w	r3, [r9, #24]
 80053e0:	f8c9 4010 	str.w	r4, [r9, #16]
 80053e4:	b9dd      	cbnz	r5, 800541e <__d2b+0x86>
 80053e6:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 80053ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80053ee:	6030      	str	r0, [r6, #0]
 80053f0:	6918      	ldr	r0, [r3, #16]
 80053f2:	f7ff fdab 	bl	8004f4c <__hi0bits>
 80053f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053f8:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80053fc:	6018      	str	r0, [r3, #0]
 80053fe:	4648      	mov	r0, r9
 8005400:	b003      	add	sp, #12
 8005402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005406:	a801      	add	r0, sp, #4
 8005408:	f7ff fdc0 	bl	8004f8c <__lo0bits>
 800540c:	2401      	movs	r4, #1
 800540e:	9b01      	ldr	r3, [sp, #4]
 8005410:	f8c9 3014 	str.w	r3, [r9, #20]
 8005414:	3020      	adds	r0, #32
 8005416:	f8c9 4010 	str.w	r4, [r9, #16]
 800541a:	2d00      	cmp	r5, #0
 800541c:	d0e3      	beq.n	80053e6 <__d2b+0x4e>
 800541e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8005422:	eb08 0300 	add.w	r3, r8, r0
 8005426:	6033      	str	r3, [r6, #0]
 8005428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800542a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800542e:	6018      	str	r0, [r3, #0]
 8005430:	4648      	mov	r0, r9
 8005432:	b003      	add	sp, #12
 8005434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005438:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800543c:	f1c0 0120 	rsb	r1, r0, #32
 8005440:	fa03 f101 	lsl.w	r1, r3, r1
 8005444:	430a      	orrs	r2, r1
 8005446:	40c3      	lsrs	r3, r0
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	f8c9 2014 	str.w	r2, [r9, #20]
 800544e:	e7c1      	b.n	80053d4 <__d2b+0x3c>

08005450 <__fpclassifyd>:
 8005450:	b410      	push	{r4}
 8005452:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8005456:	460b      	mov	r3, r1
 8005458:	d008      	beq.n	800546c <__fpclassifyd+0x1c>
 800545a:	4a11      	ldr	r2, [pc, #68]	; (80054a0 <__fpclassifyd+0x50>)
 800545c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005460:	4291      	cmp	r1, r2
 8005462:	d808      	bhi.n	8005476 <__fpclassifyd+0x26>
 8005464:	2004      	movs	r0, #4
 8005466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	b918      	cbnz	r0, 8005476 <__fpclassifyd+0x26>
 800546e:	2002      	movs	r0, #2
 8005470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800547a:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <__fpclassifyd+0x50>)
 800547c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005480:	4293      	cmp	r3, r2
 8005482:	d9ef      	bls.n	8005464 <__fpclassifyd+0x14>
 8005484:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005488:	d201      	bcs.n	800548e <__fpclassifyd+0x3e>
 800548a:	2003      	movs	r0, #3
 800548c:	e7eb      	b.n	8005466 <__fpclassifyd+0x16>
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <__fpclassifyd+0x54>)
 8005490:	429c      	cmp	r4, r3
 8005492:	d001      	beq.n	8005498 <__fpclassifyd+0x48>
 8005494:	2000      	movs	r0, #0
 8005496:	e7e6      	b.n	8005466 <__fpclassifyd+0x16>
 8005498:	fab0 f080 	clz	r0, r0
 800549c:	0940      	lsrs	r0, r0, #5
 800549e:	e7e2      	b.n	8005466 <__fpclassifyd+0x16>
 80054a0:	7fdfffff 	.word	0x7fdfffff
 80054a4:	7ff00000 	.word	0x7ff00000

080054a8 <_sbrk_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4c07      	ldr	r4, [pc, #28]	; (80054c8 <_sbrk_r+0x20>)
 80054ac:	2300      	movs	r3, #0
 80054ae:	4605      	mov	r5, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	f7fb fd42 	bl	8000f3c <_sbrk>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d000      	beq.n	80054be <_sbrk_r+0x16>
 80054bc:	bd38      	pop	{r3, r4, r5, pc}
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0fb      	beq.n	80054bc <_sbrk_r+0x14>
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	20000cb4 	.word	0x20000cb4

080054cc <strlen>:
 80054cc:	f020 0103 	bic.w	r1, r0, #3
 80054d0:	f010 0003 	ands.w	r0, r0, #3
 80054d4:	f1c0 0000 	rsb	r0, r0, #0
 80054d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80054dc:	f100 0c04 	add.w	ip, r0, #4
 80054e0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80054e4:	f06f 0200 	mvn.w	r2, #0
 80054e8:	bf1c      	itt	ne
 80054ea:	fa22 f20c 	lsrne.w	r2, r2, ip
 80054ee:	4313      	orrne	r3, r2
 80054f0:	f04f 0c01 	mov.w	ip, #1
 80054f4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80054f8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80054fc:	eba3 020c 	sub.w	r2, r3, ip
 8005500:	ea22 0203 	bic.w	r2, r2, r3
 8005504:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8005508:	bf04      	itt	eq
 800550a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800550e:	3004      	addeq	r0, #4
 8005510:	d0f4      	beq.n	80054fc <strlen+0x30>
 8005512:	f1c2 0100 	rsb	r1, r2, #0
 8005516:	ea02 0201 	and.w	r2, r2, r1
 800551a:	fab2 f282 	clz	r2, r2
 800551e:	f1c2 021f 	rsb	r2, r2, #31
 8005522:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8005526:	4770      	bx	lr

08005528 <__ssprint_r>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	6893      	ldr	r3, [r2, #8]
 800552e:	f8d2 8000 	ldr.w	r8, [r2]
 8005532:	b083      	sub	sp, #12
 8005534:	4691      	mov	r9, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d072      	beq.n	8005620 <__ssprint_r+0xf8>
 800553a:	4607      	mov	r7, r0
 800553c:	f04f 0b00 	mov.w	fp, #0
 8005540:	6808      	ldr	r0, [r1, #0]
 8005542:	688b      	ldr	r3, [r1, #8]
 8005544:	460d      	mov	r5, r1
 8005546:	465c      	mov	r4, fp
 8005548:	2c00      	cmp	r4, #0
 800554a:	d045      	beq.n	80055d8 <__ssprint_r+0xb0>
 800554c:	429c      	cmp	r4, r3
 800554e:	461e      	mov	r6, r3
 8005550:	469a      	mov	sl, r3
 8005552:	d348      	bcc.n	80055e6 <__ssprint_r+0xbe>
 8005554:	89ab      	ldrh	r3, [r5, #12]
 8005556:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800555a:	d02d      	beq.n	80055b8 <__ssprint_r+0x90>
 800555c:	696e      	ldr	r6, [r5, #20]
 800555e:	6929      	ldr	r1, [r5, #16]
 8005560:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8005564:	ebc1 0a00 	rsb	sl, r1, r0
 8005568:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800556c:	1c60      	adds	r0, r4, #1
 800556e:	1076      	asrs	r6, r6, #1
 8005570:	4450      	add	r0, sl
 8005572:	4286      	cmp	r6, r0
 8005574:	4632      	mov	r2, r6
 8005576:	bf3c      	itt	cc
 8005578:	4606      	movcc	r6, r0
 800557a:	4632      	movcc	r2, r6
 800557c:	055b      	lsls	r3, r3, #21
 800557e:	d535      	bpl.n	80055ec <__ssprint_r+0xc4>
 8005580:	4611      	mov	r1, r2
 8005582:	4638      	mov	r0, r7
 8005584:	f7ff f994 	bl	80048b0 <_malloc_r>
 8005588:	2800      	cmp	r0, #0
 800558a:	d039      	beq.n	8005600 <__ssprint_r+0xd8>
 800558c:	4652      	mov	r2, sl
 800558e:	6929      	ldr	r1, [r5, #16]
 8005590:	9001      	str	r0, [sp, #4]
 8005592:	f7fc fd99 	bl	80020c8 <memcpy>
 8005596:	89aa      	ldrh	r2, [r5, #12]
 8005598:	9b01      	ldr	r3, [sp, #4]
 800559a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800559e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055a2:	81aa      	strh	r2, [r5, #12]
 80055a4:	ebca 0206 	rsb	r2, sl, r6
 80055a8:	eb03 000a 	add.w	r0, r3, sl
 80055ac:	616e      	str	r6, [r5, #20]
 80055ae:	612b      	str	r3, [r5, #16]
 80055b0:	6028      	str	r0, [r5, #0]
 80055b2:	60aa      	str	r2, [r5, #8]
 80055b4:	4626      	mov	r6, r4
 80055b6:	46a2      	mov	sl, r4
 80055b8:	4652      	mov	r2, sl
 80055ba:	4659      	mov	r1, fp
 80055bc:	f000 f98c 	bl	80058d8 <memmove>
 80055c0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80055c4:	68ab      	ldr	r3, [r5, #8]
 80055c6:	6828      	ldr	r0, [r5, #0]
 80055c8:	1b9b      	subs	r3, r3, r6
 80055ca:	4450      	add	r0, sl
 80055cc:	1b14      	subs	r4, r2, r4
 80055ce:	60ab      	str	r3, [r5, #8]
 80055d0:	6028      	str	r0, [r5, #0]
 80055d2:	f8c9 4008 	str.w	r4, [r9, #8]
 80055d6:	b31c      	cbz	r4, 8005620 <__ssprint_r+0xf8>
 80055d8:	f8d8 b000 	ldr.w	fp, [r8]
 80055dc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80055e0:	f108 0808 	add.w	r8, r8, #8
 80055e4:	e7b0      	b.n	8005548 <__ssprint_r+0x20>
 80055e6:	4626      	mov	r6, r4
 80055e8:	46a2      	mov	sl, r4
 80055ea:	e7e5      	b.n	80055b8 <__ssprint_r+0x90>
 80055ec:	4638      	mov	r0, r7
 80055ee:	f000 f9d7 	bl	80059a0 <_realloc_r>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d1d5      	bne.n	80055a4 <__ssprint_r+0x7c>
 80055f8:	4638      	mov	r0, r7
 80055fa:	6929      	ldr	r1, [r5, #16]
 80055fc:	f000 f894 	bl	8005728 <_free_r>
 8005600:	230c      	movs	r3, #12
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	89ab      	ldrh	r3, [r5, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800560c:	f04f 30ff 	mov.w	r0, #4294967295
 8005610:	81ab      	strh	r3, [r5, #12]
 8005612:	f8c9 2008 	str.w	r2, [r9, #8]
 8005616:	f8c9 2004 	str.w	r2, [r9, #4]
 800561a:	b003      	add	sp, #12
 800561c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005620:	2000      	movs	r0, #0
 8005622:	f8c9 0004 	str.w	r0, [r9, #4]
 8005626:	b003      	add	sp, #12
 8005628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800562c <_calloc_r>:
 800562c:	b510      	push	{r4, lr}
 800562e:	fb02 f101 	mul.w	r1, r2, r1
 8005632:	f7ff f93d 	bl	80048b0 <_malloc_r>
 8005636:	4604      	mov	r4, r0
 8005638:	b168      	cbz	r0, 8005656 <_calloc_r+0x2a>
 800563a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800563e:	f022 0203 	bic.w	r2, r2, #3
 8005642:	3a04      	subs	r2, #4
 8005644:	2a24      	cmp	r2, #36	; 0x24
 8005646:	d818      	bhi.n	800567a <_calloc_r+0x4e>
 8005648:	2a13      	cmp	r2, #19
 800564a:	d806      	bhi.n	800565a <_calloc_r+0x2e>
 800564c:	4603      	mov	r3, r0
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	609a      	str	r2, [r3, #8]
 8005656:	4620      	mov	r0, r4
 8005658:	bd10      	pop	{r4, pc}
 800565a:	2300      	movs	r3, #0
 800565c:	2a1b      	cmp	r2, #27
 800565e:	6003      	str	r3, [r0, #0]
 8005660:	6043      	str	r3, [r0, #4]
 8005662:	d90f      	bls.n	8005684 <_calloc_r+0x58>
 8005664:	2a24      	cmp	r2, #36	; 0x24
 8005666:	6083      	str	r3, [r0, #8]
 8005668:	60c3      	str	r3, [r0, #12]
 800566a:	bf05      	ittet	eq
 800566c:	6103      	streq	r3, [r0, #16]
 800566e:	6143      	streq	r3, [r0, #20]
 8005670:	f100 0310 	addne.w	r3, r0, #16
 8005674:	f100 0318 	addeq.w	r3, r0, #24
 8005678:	e7e9      	b.n	800564e <_calloc_r+0x22>
 800567a:	2100      	movs	r1, #0
 800567c:	f7fc fdbe 	bl	80021fc <memset>
 8005680:	4620      	mov	r0, r4
 8005682:	bd10      	pop	{r4, pc}
 8005684:	f100 0308 	add.w	r3, r0, #8
 8005688:	e7e1      	b.n	800564e <_calloc_r+0x22>
 800568a:	bf00      	nop

0800568c <_malloc_trim_r>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	4f23      	ldr	r7, [pc, #140]	; (800571c <_malloc_trim_r+0x90>)
 8005690:	460c      	mov	r4, r1
 8005692:	4606      	mov	r6, r0
 8005694:	f7ff fbe4 	bl	8004e60 <__malloc_lock>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	685d      	ldr	r5, [r3, #4]
 800569c:	f025 0503 	bic.w	r5, r5, #3
 80056a0:	1b29      	subs	r1, r5, r4
 80056a2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80056a6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80056aa:	f021 010f 	bic.w	r1, r1, #15
 80056ae:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80056b2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80056b6:	db07      	blt.n	80056c8 <_malloc_trim_r+0x3c>
 80056b8:	4630      	mov	r0, r6
 80056ba:	2100      	movs	r1, #0
 80056bc:	f7ff fef4 	bl	80054a8 <_sbrk_r>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	442b      	add	r3, r5
 80056c4:	4298      	cmp	r0, r3
 80056c6:	d004      	beq.n	80056d2 <_malloc_trim_r+0x46>
 80056c8:	4630      	mov	r0, r6
 80056ca:	f7ff fbcb 	bl	8004e64 <__malloc_unlock>
 80056ce:	2000      	movs	r0, #0
 80056d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d2:	4630      	mov	r0, r6
 80056d4:	4261      	negs	r1, r4
 80056d6:	f7ff fee7 	bl	80054a8 <_sbrk_r>
 80056da:	3001      	adds	r0, #1
 80056dc:	d00d      	beq.n	80056fa <_malloc_trim_r+0x6e>
 80056de:	4b10      	ldr	r3, [pc, #64]	; (8005720 <_malloc_trim_r+0x94>)
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	6819      	ldr	r1, [r3, #0]
 80056e4:	1b2d      	subs	r5, r5, r4
 80056e6:	f045 0501 	orr.w	r5, r5, #1
 80056ea:	4630      	mov	r0, r6
 80056ec:	1b09      	subs	r1, r1, r4
 80056ee:	6055      	str	r5, [r2, #4]
 80056f0:	6019      	str	r1, [r3, #0]
 80056f2:	f7ff fbb7 	bl	8004e64 <__malloc_unlock>
 80056f6:	2001      	movs	r0, #1
 80056f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fa:	4630      	mov	r0, r6
 80056fc:	2100      	movs	r1, #0
 80056fe:	f7ff fed3 	bl	80054a8 <_sbrk_r>
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	1a83      	subs	r3, r0, r2
 8005706:	2b0f      	cmp	r3, #15
 8005708:	ddde      	ble.n	80056c8 <_malloc_trim_r+0x3c>
 800570a:	4c06      	ldr	r4, [pc, #24]	; (8005724 <_malloc_trim_r+0x98>)
 800570c:	4904      	ldr	r1, [pc, #16]	; (8005720 <_malloc_trim_r+0x94>)
 800570e:	6824      	ldr	r4, [r4, #0]
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	1b00      	subs	r0, r0, r4
 8005716:	6053      	str	r3, [r2, #4]
 8005718:	6008      	str	r0, [r1, #0]
 800571a:	e7d5      	b.n	80056c8 <_malloc_trim_r+0x3c>
 800571c:	20000818 	.word	0x20000818
 8005720:	20000c70 	.word	0x20000c70
 8005724:	20000c24 	.word	0x20000c24

08005728 <_free_r>:
 8005728:	2900      	cmp	r1, #0
 800572a:	d04e      	beq.n	80057ca <_free_r+0xa2>
 800572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005730:	460c      	mov	r4, r1
 8005732:	4680      	mov	r8, r0
 8005734:	f7ff fb94 	bl	8004e60 <__malloc_lock>
 8005738:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800573c:	4962      	ldr	r1, [pc, #392]	; (80058c8 <_free_r+0x1a0>)
 800573e:	f027 0201 	bic.w	r2, r7, #1
 8005742:	f1a4 0508 	sub.w	r5, r4, #8
 8005746:	18ab      	adds	r3, r5, r2
 8005748:	688e      	ldr	r6, [r1, #8]
 800574a:	6858      	ldr	r0, [r3, #4]
 800574c:	429e      	cmp	r6, r3
 800574e:	f020 0003 	bic.w	r0, r0, #3
 8005752:	d05a      	beq.n	800580a <_free_r+0xe2>
 8005754:	07fe      	lsls	r6, r7, #31
 8005756:	6058      	str	r0, [r3, #4]
 8005758:	d40b      	bmi.n	8005772 <_free_r+0x4a>
 800575a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800575e:	1bed      	subs	r5, r5, r7
 8005760:	f101 0e08 	add.w	lr, r1, #8
 8005764:	68ac      	ldr	r4, [r5, #8]
 8005766:	4574      	cmp	r4, lr
 8005768:	443a      	add	r2, r7
 800576a:	d067      	beq.n	800583c <_free_r+0x114>
 800576c:	68ef      	ldr	r7, [r5, #12]
 800576e:	60e7      	str	r7, [r4, #12]
 8005770:	60bc      	str	r4, [r7, #8]
 8005772:	181c      	adds	r4, r3, r0
 8005774:	6864      	ldr	r4, [r4, #4]
 8005776:	07e4      	lsls	r4, r4, #31
 8005778:	d40c      	bmi.n	8005794 <_free_r+0x6c>
 800577a:	4f54      	ldr	r7, [pc, #336]	; (80058cc <_free_r+0x1a4>)
 800577c:	689c      	ldr	r4, [r3, #8]
 800577e:	42bc      	cmp	r4, r7
 8005780:	4402      	add	r2, r0
 8005782:	d07c      	beq.n	800587e <_free_r+0x156>
 8005784:	68d8      	ldr	r0, [r3, #12]
 8005786:	60e0      	str	r0, [r4, #12]
 8005788:	f042 0301 	orr.w	r3, r2, #1
 800578c:	6084      	str	r4, [r0, #8]
 800578e:	606b      	str	r3, [r5, #4]
 8005790:	50aa      	str	r2, [r5, r2]
 8005792:	e003      	b.n	800579c <_free_r+0x74>
 8005794:	f042 0301 	orr.w	r3, r2, #1
 8005798:	606b      	str	r3, [r5, #4]
 800579a:	50aa      	str	r2, [r5, r2]
 800579c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80057a0:	d214      	bcs.n	80057cc <_free_r+0xa4>
 80057a2:	08d2      	lsrs	r2, r2, #3
 80057a4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80057a8:	6848      	ldr	r0, [r1, #4]
 80057aa:	689f      	ldr	r7, [r3, #8]
 80057ac:	60af      	str	r7, [r5, #8]
 80057ae:	1092      	asrs	r2, r2, #2
 80057b0:	2401      	movs	r4, #1
 80057b2:	fa04 f202 	lsl.w	r2, r4, r2
 80057b6:	4310      	orrs	r0, r2
 80057b8:	60eb      	str	r3, [r5, #12]
 80057ba:	6048      	str	r0, [r1, #4]
 80057bc:	609d      	str	r5, [r3, #8]
 80057be:	60fd      	str	r5, [r7, #12]
 80057c0:	4640      	mov	r0, r8
 80057c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057c6:	f7ff bb4d 	b.w	8004e64 <__malloc_unlock>
 80057ca:	4770      	bx	lr
 80057cc:	0a53      	lsrs	r3, r2, #9
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d847      	bhi.n	8005862 <_free_r+0x13a>
 80057d2:	0993      	lsrs	r3, r2, #6
 80057d4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80057d8:	0060      	lsls	r0, r4, #1
 80057da:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80057de:	493a      	ldr	r1, [pc, #232]	; (80058c8 <_free_r+0x1a0>)
 80057e0:	6883      	ldr	r3, [r0, #8]
 80057e2:	4283      	cmp	r3, r0
 80057e4:	d043      	beq.n	800586e <_free_r+0x146>
 80057e6:	6859      	ldr	r1, [r3, #4]
 80057e8:	f021 0103 	bic.w	r1, r1, #3
 80057ec:	4291      	cmp	r1, r2
 80057ee:	d902      	bls.n	80057f6 <_free_r+0xce>
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	4298      	cmp	r0, r3
 80057f4:	d1f7      	bne.n	80057e6 <_free_r+0xbe>
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	60ea      	str	r2, [r5, #12]
 80057fa:	60ab      	str	r3, [r5, #8]
 80057fc:	4640      	mov	r0, r8
 80057fe:	6095      	str	r5, [r2, #8]
 8005800:	60dd      	str	r5, [r3, #12]
 8005802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005806:	f7ff bb2d 	b.w	8004e64 <__malloc_unlock>
 800580a:	07ff      	lsls	r7, r7, #31
 800580c:	4402      	add	r2, r0
 800580e:	d407      	bmi.n	8005820 <_free_r+0xf8>
 8005810:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8005814:	1aed      	subs	r5, r5, r3
 8005816:	441a      	add	r2, r3
 8005818:	68a8      	ldr	r0, [r5, #8]
 800581a:	68eb      	ldr	r3, [r5, #12]
 800581c:	60c3      	str	r3, [r0, #12]
 800581e:	6098      	str	r0, [r3, #8]
 8005820:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <_free_r+0x1a8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 0001 	orr.w	r0, r2, #1
 8005828:	429a      	cmp	r2, r3
 800582a:	6068      	str	r0, [r5, #4]
 800582c:	608d      	str	r5, [r1, #8]
 800582e:	d3c7      	bcc.n	80057c0 <_free_r+0x98>
 8005830:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <_free_r+0x1ac>)
 8005832:	4640      	mov	r0, r8
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	f7ff ff29 	bl	800568c <_malloc_trim_r>
 800583a:	e7c1      	b.n	80057c0 <_free_r+0x98>
 800583c:	1819      	adds	r1, r3, r0
 800583e:	6849      	ldr	r1, [r1, #4]
 8005840:	07c9      	lsls	r1, r1, #31
 8005842:	d409      	bmi.n	8005858 <_free_r+0x130>
 8005844:	68d9      	ldr	r1, [r3, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4402      	add	r2, r0
 800584a:	f042 0001 	orr.w	r0, r2, #1
 800584e:	60d9      	str	r1, [r3, #12]
 8005850:	608b      	str	r3, [r1, #8]
 8005852:	6068      	str	r0, [r5, #4]
 8005854:	50aa      	str	r2, [r5, r2]
 8005856:	e7b3      	b.n	80057c0 <_free_r+0x98>
 8005858:	f042 0301 	orr.w	r3, r2, #1
 800585c:	606b      	str	r3, [r5, #4]
 800585e:	50aa      	str	r2, [r5, r2]
 8005860:	e7ae      	b.n	80057c0 <_free_r+0x98>
 8005862:	2b14      	cmp	r3, #20
 8005864:	d814      	bhi.n	8005890 <_free_r+0x168>
 8005866:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800586a:	0060      	lsls	r0, r4, #1
 800586c:	e7b5      	b.n	80057da <_free_r+0xb2>
 800586e:	684a      	ldr	r2, [r1, #4]
 8005870:	10a4      	asrs	r4, r4, #2
 8005872:	2001      	movs	r0, #1
 8005874:	40a0      	lsls	r0, r4
 8005876:	4302      	orrs	r2, r0
 8005878:	604a      	str	r2, [r1, #4]
 800587a:	461a      	mov	r2, r3
 800587c:	e7bc      	b.n	80057f8 <_free_r+0xd0>
 800587e:	f042 0301 	orr.w	r3, r2, #1
 8005882:	614d      	str	r5, [r1, #20]
 8005884:	610d      	str	r5, [r1, #16]
 8005886:	60ec      	str	r4, [r5, #12]
 8005888:	60ac      	str	r4, [r5, #8]
 800588a:	606b      	str	r3, [r5, #4]
 800588c:	50aa      	str	r2, [r5, r2]
 800588e:	e797      	b.n	80057c0 <_free_r+0x98>
 8005890:	2b54      	cmp	r3, #84	; 0x54
 8005892:	d804      	bhi.n	800589e <_free_r+0x176>
 8005894:	0b13      	lsrs	r3, r2, #12
 8005896:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800589a:	0060      	lsls	r0, r4, #1
 800589c:	e79d      	b.n	80057da <_free_r+0xb2>
 800589e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80058a2:	d804      	bhi.n	80058ae <_free_r+0x186>
 80058a4:	0bd3      	lsrs	r3, r2, #15
 80058a6:	f103 0477 	add.w	r4, r3, #119	; 0x77
 80058aa:	0060      	lsls	r0, r4, #1
 80058ac:	e795      	b.n	80057da <_free_r+0xb2>
 80058ae:	f240 5054 	movw	r0, #1364	; 0x554
 80058b2:	4283      	cmp	r3, r0
 80058b4:	d804      	bhi.n	80058c0 <_free_r+0x198>
 80058b6:	0c93      	lsrs	r3, r2, #18
 80058b8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80058bc:	0060      	lsls	r0, r4, #1
 80058be:	e78c      	b.n	80057da <_free_r+0xb2>
 80058c0:	20fc      	movs	r0, #252	; 0xfc
 80058c2:	247e      	movs	r4, #126	; 0x7e
 80058c4:	e789      	b.n	80057da <_free_r+0xb2>
 80058c6:	bf00      	nop
 80058c8:	20000818 	.word	0x20000818
 80058cc:	20000820 	.word	0x20000820
 80058d0:	20000c20 	.word	0x20000c20
 80058d4:	20000c6c 	.word	0x20000c6c

080058d8 <memmove>:
 80058d8:	4288      	cmp	r0, r1
 80058da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058dc:	d90d      	bls.n	80058fa <memmove+0x22>
 80058de:	188b      	adds	r3, r1, r2
 80058e0:	4298      	cmp	r0, r3
 80058e2:	d20a      	bcs.n	80058fa <memmove+0x22>
 80058e4:	1881      	adds	r1, r0, r2
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	d054      	beq.n	8005994 <memmove+0xbc>
 80058ea:	1a9a      	subs	r2, r3, r2
 80058ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d1f9      	bne.n	80058ec <memmove+0x14>
 80058f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fa:	2a0f      	cmp	r2, #15
 80058fc:	d948      	bls.n	8005990 <memmove+0xb8>
 80058fe:	ea40 0301 	orr.w	r3, r0, r1
 8005902:	079b      	lsls	r3, r3, #30
 8005904:	d147      	bne.n	8005996 <memmove+0xbe>
 8005906:	f100 0410 	add.w	r4, r0, #16
 800590a:	f101 0310 	add.w	r3, r1, #16
 800590e:	4615      	mov	r5, r2
 8005910:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8005914:	f844 6c10 	str.w	r6, [r4, #-16]
 8005918:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800591c:	f844 6c0c 	str.w	r6, [r4, #-12]
 8005920:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8005924:	f844 6c08 	str.w	r6, [r4, #-8]
 8005928:	3d10      	subs	r5, #16
 800592a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800592e:	f844 6c04 	str.w	r6, [r4, #-4]
 8005932:	2d0f      	cmp	r5, #15
 8005934:	f103 0310 	add.w	r3, r3, #16
 8005938:	f104 0410 	add.w	r4, r4, #16
 800593c:	d8e8      	bhi.n	8005910 <memmove+0x38>
 800593e:	f1a2 0310 	sub.w	r3, r2, #16
 8005942:	f023 030f 	bic.w	r3, r3, #15
 8005946:	f002 0e0f 	and.w	lr, r2, #15
 800594a:	3310      	adds	r3, #16
 800594c:	f1be 0f03 	cmp.w	lr, #3
 8005950:	4419      	add	r1, r3
 8005952:	4403      	add	r3, r0
 8005954:	d921      	bls.n	800599a <memmove+0xc2>
 8005956:	1f1e      	subs	r6, r3, #4
 8005958:	460d      	mov	r5, r1
 800595a:	4674      	mov	r4, lr
 800595c:	3c04      	subs	r4, #4
 800595e:	f855 7b04 	ldr.w	r7, [r5], #4
 8005962:	f846 7f04 	str.w	r7, [r6, #4]!
 8005966:	2c03      	cmp	r4, #3
 8005968:	d8f8      	bhi.n	800595c <memmove+0x84>
 800596a:	f1ae 0404 	sub.w	r4, lr, #4
 800596e:	f024 0403 	bic.w	r4, r4, #3
 8005972:	3404      	adds	r4, #4
 8005974:	4423      	add	r3, r4
 8005976:	4421      	add	r1, r4
 8005978:	f002 0203 	and.w	r2, r2, #3
 800597c:	b152      	cbz	r2, 8005994 <memmove+0xbc>
 800597e:	3b01      	subs	r3, #1
 8005980:	440a      	add	r2, r1
 8005982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800598a:	4291      	cmp	r1, r2
 800598c:	d1f9      	bne.n	8005982 <memmove+0xaa>
 800598e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005990:	4603      	mov	r3, r0
 8005992:	e7f3      	b.n	800597c <memmove+0xa4>
 8005994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005996:	4603      	mov	r3, r0
 8005998:	e7f1      	b.n	800597e <memmove+0xa6>
 800599a:	4672      	mov	r2, lr
 800599c:	e7ee      	b.n	800597c <memmove+0xa4>
 800599e:	bf00      	nop

080059a0 <_realloc_r>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	4617      	mov	r7, r2
 80059a6:	b083      	sub	sp, #12
 80059a8:	460e      	mov	r6, r1
 80059aa:	2900      	cmp	r1, #0
 80059ac:	f000 80e7 	beq.w	8005b7e <_realloc_r+0x1de>
 80059b0:	4681      	mov	r9, r0
 80059b2:	f107 050b 	add.w	r5, r7, #11
 80059b6:	f7ff fa53 	bl	8004e60 <__malloc_lock>
 80059ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80059be:	2d16      	cmp	r5, #22
 80059c0:	f023 0403 	bic.w	r4, r3, #3
 80059c4:	f1a6 0808 	sub.w	r8, r6, #8
 80059c8:	d84c      	bhi.n	8005a64 <_realloc_r+0xc4>
 80059ca:	2210      	movs	r2, #16
 80059cc:	4615      	mov	r5, r2
 80059ce:	42af      	cmp	r7, r5
 80059d0:	d84d      	bhi.n	8005a6e <_realloc_r+0xce>
 80059d2:	4294      	cmp	r4, r2
 80059d4:	f280 8084 	bge.w	8005ae0 <_realloc_r+0x140>
 80059d8:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8005d88 <_realloc_r+0x3e8>
 80059dc:	f8db 0008 	ldr.w	r0, [fp, #8]
 80059e0:	eb08 0104 	add.w	r1, r8, r4
 80059e4:	4288      	cmp	r0, r1
 80059e6:	f000 80d6 	beq.w	8005b96 <_realloc_r+0x1f6>
 80059ea:	6848      	ldr	r0, [r1, #4]
 80059ec:	f020 0e01 	bic.w	lr, r0, #1
 80059f0:	448e      	add	lr, r1
 80059f2:	f8de e004 	ldr.w	lr, [lr, #4]
 80059f6:	f01e 0f01 	tst.w	lr, #1
 80059fa:	d13f      	bne.n	8005a7c <_realloc_r+0xdc>
 80059fc:	f020 0003 	bic.w	r0, r0, #3
 8005a00:	4420      	add	r0, r4
 8005a02:	4290      	cmp	r0, r2
 8005a04:	f280 80c1 	bge.w	8005b8a <_realloc_r+0x1ea>
 8005a08:	07db      	lsls	r3, r3, #31
 8005a0a:	f100 808f 	bmi.w	8005b2c <_realloc_r+0x18c>
 8005a0e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005a12:	ebc3 0a08 	rsb	sl, r3, r8
 8005a16:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	eb00 0e03 	add.w	lr, r0, r3
 8005a22:	4596      	cmp	lr, r2
 8005a24:	db34      	blt.n	8005a90 <_realloc_r+0xf0>
 8005a26:	68cb      	ldr	r3, [r1, #12]
 8005a28:	688a      	ldr	r2, [r1, #8]
 8005a2a:	4657      	mov	r7, sl
 8005a2c:	60d3      	str	r3, [r2, #12]
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005a34:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005a38:	60cb      	str	r3, [r1, #12]
 8005a3a:	1f22      	subs	r2, r4, #4
 8005a3c:	2a24      	cmp	r2, #36	; 0x24
 8005a3e:	6099      	str	r1, [r3, #8]
 8005a40:	f200 8136 	bhi.w	8005cb0 <_realloc_r+0x310>
 8005a44:	2a13      	cmp	r2, #19
 8005a46:	f240 80fd 	bls.w	8005c44 <_realloc_r+0x2a4>
 8005a4a:	6833      	ldr	r3, [r6, #0]
 8005a4c:	f8ca 3008 	str.w	r3, [sl, #8]
 8005a50:	6873      	ldr	r3, [r6, #4]
 8005a52:	f8ca 300c 	str.w	r3, [sl, #12]
 8005a56:	2a1b      	cmp	r2, #27
 8005a58:	f200 8140 	bhi.w	8005cdc <_realloc_r+0x33c>
 8005a5c:	3608      	adds	r6, #8
 8005a5e:	f10a 0310 	add.w	r3, sl, #16
 8005a62:	e0f0      	b.n	8005c46 <_realloc_r+0x2a6>
 8005a64:	f025 0507 	bic.w	r5, r5, #7
 8005a68:	2d00      	cmp	r5, #0
 8005a6a:	462a      	mov	r2, r5
 8005a6c:	daaf      	bge.n	80059ce <_realloc_r+0x2e>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	2000      	movs	r0, #0
 8005a72:	f8c9 3000 	str.w	r3, [r9]
 8005a76:	b003      	add	sp, #12
 8005a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7c:	07d9      	lsls	r1, r3, #31
 8005a7e:	d455      	bmi.n	8005b2c <_realloc_r+0x18c>
 8005a80:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005a84:	ebc3 0a08 	rsb	sl, r3, r8
 8005a88:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005a8c:	f023 0303 	bic.w	r3, r3, #3
 8005a90:	4423      	add	r3, r4
 8005a92:	4293      	cmp	r3, r2
 8005a94:	db4a      	blt.n	8005b2c <_realloc_r+0x18c>
 8005a96:	4657      	mov	r7, sl
 8005a98:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005a9c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8005aa0:	1f22      	subs	r2, r4, #4
 8005aa2:	2a24      	cmp	r2, #36	; 0x24
 8005aa4:	60c1      	str	r1, [r0, #12]
 8005aa6:	6088      	str	r0, [r1, #8]
 8005aa8:	f200 810e 	bhi.w	8005cc8 <_realloc_r+0x328>
 8005aac:	2a13      	cmp	r2, #19
 8005aae:	f240 8109 	bls.w	8005cc4 <_realloc_r+0x324>
 8005ab2:	6831      	ldr	r1, [r6, #0]
 8005ab4:	f8ca 1008 	str.w	r1, [sl, #8]
 8005ab8:	6871      	ldr	r1, [r6, #4]
 8005aba:	f8ca 100c 	str.w	r1, [sl, #12]
 8005abe:	2a1b      	cmp	r2, #27
 8005ac0:	f200 8121 	bhi.w	8005d06 <_realloc_r+0x366>
 8005ac4:	3608      	adds	r6, #8
 8005ac6:	f10a 0210 	add.w	r2, sl, #16
 8005aca:	6831      	ldr	r1, [r6, #0]
 8005acc:	6011      	str	r1, [r2, #0]
 8005ace:	6871      	ldr	r1, [r6, #4]
 8005ad0:	6051      	str	r1, [r2, #4]
 8005ad2:	68b1      	ldr	r1, [r6, #8]
 8005ad4:	6091      	str	r1, [r2, #8]
 8005ad6:	461c      	mov	r4, r3
 8005ad8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005adc:	463e      	mov	r6, r7
 8005ade:	46d0      	mov	r8, sl
 8005ae0:	1b62      	subs	r2, r4, r5
 8005ae2:	2a0f      	cmp	r2, #15
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	d80e      	bhi.n	8005b08 <_realloc_r+0x168>
 8005aea:	4323      	orrs	r3, r4
 8005aec:	4444      	add	r4, r8
 8005aee:	f8c8 3004 	str.w	r3, [r8, #4]
 8005af2:	6863      	ldr	r3, [r4, #4]
 8005af4:	f043 0301 	orr.w	r3, r3, #1
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	4648      	mov	r0, r9
 8005afc:	f7ff f9b2 	bl	8004e64 <__malloc_unlock>
 8005b00:	4630      	mov	r0, r6
 8005b02:	b003      	add	sp, #12
 8005b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b08:	eb08 0105 	add.w	r1, r8, r5
 8005b0c:	431d      	orrs	r5, r3
 8005b0e:	f042 0301 	orr.w	r3, r2, #1
 8005b12:	440a      	add	r2, r1
 8005b14:	f8c8 5004 	str.w	r5, [r8, #4]
 8005b18:	604b      	str	r3, [r1, #4]
 8005b1a:	6853      	ldr	r3, [r2, #4]
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	3108      	adds	r1, #8
 8005b22:	6053      	str	r3, [r2, #4]
 8005b24:	4648      	mov	r0, r9
 8005b26:	f7ff fdff 	bl	8005728 <_free_r>
 8005b2a:	e7e6      	b.n	8005afa <_realloc_r+0x15a>
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	4648      	mov	r0, r9
 8005b30:	f7fe febe 	bl	80048b0 <_malloc_r>
 8005b34:	4607      	mov	r7, r0
 8005b36:	b1d8      	cbz	r0, 8005b70 <_realloc_r+0x1d0>
 8005b38:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005b3c:	f023 0201 	bic.w	r2, r3, #1
 8005b40:	4442      	add	r2, r8
 8005b42:	f1a0 0108 	sub.w	r1, r0, #8
 8005b46:	4291      	cmp	r1, r2
 8005b48:	f000 80ac 	beq.w	8005ca4 <_realloc_r+0x304>
 8005b4c:	1f22      	subs	r2, r4, #4
 8005b4e:	2a24      	cmp	r2, #36	; 0x24
 8005b50:	f200 8099 	bhi.w	8005c86 <_realloc_r+0x2e6>
 8005b54:	2a13      	cmp	r2, #19
 8005b56:	d86a      	bhi.n	8005c2e <_realloc_r+0x28e>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4632      	mov	r2, r6
 8005b5c:	6811      	ldr	r1, [r2, #0]
 8005b5e:	6019      	str	r1, [r3, #0]
 8005b60:	6851      	ldr	r1, [r2, #4]
 8005b62:	6059      	str	r1, [r3, #4]
 8005b64:	6892      	ldr	r2, [r2, #8]
 8005b66:	609a      	str	r2, [r3, #8]
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4648      	mov	r0, r9
 8005b6c:	f7ff fddc 	bl	8005728 <_free_r>
 8005b70:	4648      	mov	r0, r9
 8005b72:	f7ff f977 	bl	8004e64 <__malloc_unlock>
 8005b76:	4638      	mov	r0, r7
 8005b78:	b003      	add	sp, #12
 8005b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7e:	4611      	mov	r1, r2
 8005b80:	b003      	add	sp, #12
 8005b82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b86:	f7fe be93 	b.w	80048b0 <_malloc_r>
 8005b8a:	68ca      	ldr	r2, [r1, #12]
 8005b8c:	6889      	ldr	r1, [r1, #8]
 8005b8e:	4604      	mov	r4, r0
 8005b90:	60ca      	str	r2, [r1, #12]
 8005b92:	6091      	str	r1, [r2, #8]
 8005b94:	e7a4      	b.n	8005ae0 <_realloc_r+0x140>
 8005b96:	6841      	ldr	r1, [r0, #4]
 8005b98:	f021 0103 	bic.w	r1, r1, #3
 8005b9c:	4421      	add	r1, r4
 8005b9e:	f105 0010 	add.w	r0, r5, #16
 8005ba2:	4281      	cmp	r1, r0
 8005ba4:	da5b      	bge.n	8005c5e <_realloc_r+0x2be>
 8005ba6:	07db      	lsls	r3, r3, #31
 8005ba8:	d4c0      	bmi.n	8005b2c <_realloc_r+0x18c>
 8005baa:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005bae:	ebc3 0a08 	rsb	sl, r3, r8
 8005bb2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	eb01 0c03 	add.w	ip, r1, r3
 8005bbe:	4560      	cmp	r0, ip
 8005bc0:	f73f af66 	bgt.w	8005a90 <_realloc_r+0xf0>
 8005bc4:	4657      	mov	r7, sl
 8005bc6:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005bca:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005bce:	1f22      	subs	r2, r4, #4
 8005bd0:	2a24      	cmp	r2, #36	; 0x24
 8005bd2:	60cb      	str	r3, [r1, #12]
 8005bd4:	6099      	str	r1, [r3, #8]
 8005bd6:	f200 80b8 	bhi.w	8005d4a <_realloc_r+0x3aa>
 8005bda:	2a13      	cmp	r2, #19
 8005bdc:	f240 80a9 	bls.w	8005d32 <_realloc_r+0x392>
 8005be0:	6833      	ldr	r3, [r6, #0]
 8005be2:	f8ca 3008 	str.w	r3, [sl, #8]
 8005be6:	6873      	ldr	r3, [r6, #4]
 8005be8:	f8ca 300c 	str.w	r3, [sl, #12]
 8005bec:	2a1b      	cmp	r2, #27
 8005bee:	f200 80b5 	bhi.w	8005d5c <_realloc_r+0x3bc>
 8005bf2:	3608      	adds	r6, #8
 8005bf4:	f10a 0310 	add.w	r3, sl, #16
 8005bf8:	6832      	ldr	r2, [r6, #0]
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	6872      	ldr	r2, [r6, #4]
 8005bfe:	605a      	str	r2, [r3, #4]
 8005c00:	68b2      	ldr	r2, [r6, #8]
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	eb0a 0205 	add.w	r2, sl, r5
 8005c08:	ebc5 030c 	rsb	r3, r5, ip
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	f8cb 2008 	str.w	r2, [fp, #8]
 8005c14:	6053      	str	r3, [r2, #4]
 8005c16:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	431d      	orrs	r5, r3
 8005c20:	4648      	mov	r0, r9
 8005c22:	f8ca 5004 	str.w	r5, [sl, #4]
 8005c26:	f7ff f91d 	bl	8004e64 <__malloc_unlock>
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	e769      	b.n	8005b02 <_realloc_r+0x162>
 8005c2e:	6833      	ldr	r3, [r6, #0]
 8005c30:	6003      	str	r3, [r0, #0]
 8005c32:	6873      	ldr	r3, [r6, #4]
 8005c34:	6043      	str	r3, [r0, #4]
 8005c36:	2a1b      	cmp	r2, #27
 8005c38:	d829      	bhi.n	8005c8e <_realloc_r+0x2ee>
 8005c3a:	f100 0308 	add.w	r3, r0, #8
 8005c3e:	f106 0208 	add.w	r2, r6, #8
 8005c42:	e78b      	b.n	8005b5c <_realloc_r+0x1bc>
 8005c44:	463b      	mov	r3, r7
 8005c46:	6832      	ldr	r2, [r6, #0]
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	6872      	ldr	r2, [r6, #4]
 8005c4c:	605a      	str	r2, [r3, #4]
 8005c4e:	68b2      	ldr	r2, [r6, #8]
 8005c50:	609a      	str	r2, [r3, #8]
 8005c52:	463e      	mov	r6, r7
 8005c54:	4674      	mov	r4, lr
 8005c56:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005c5a:	46d0      	mov	r8, sl
 8005c5c:	e740      	b.n	8005ae0 <_realloc_r+0x140>
 8005c5e:	eb08 0205 	add.w	r2, r8, r5
 8005c62:	1b4b      	subs	r3, r1, r5
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	f8cb 2008 	str.w	r2, [fp, #8]
 8005c6c:	6053      	str	r3, [r2, #4]
 8005c6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	431d      	orrs	r5, r3
 8005c78:	4648      	mov	r0, r9
 8005c7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8005c7e:	f7ff f8f1 	bl	8004e64 <__malloc_unlock>
 8005c82:	4630      	mov	r0, r6
 8005c84:	e73d      	b.n	8005b02 <_realloc_r+0x162>
 8005c86:	4631      	mov	r1, r6
 8005c88:	f7ff fe26 	bl	80058d8 <memmove>
 8005c8c:	e76c      	b.n	8005b68 <_realloc_r+0x1c8>
 8005c8e:	68b3      	ldr	r3, [r6, #8]
 8005c90:	6083      	str	r3, [r0, #8]
 8005c92:	68f3      	ldr	r3, [r6, #12]
 8005c94:	60c3      	str	r3, [r0, #12]
 8005c96:	2a24      	cmp	r2, #36	; 0x24
 8005c98:	d02c      	beq.n	8005cf4 <_realloc_r+0x354>
 8005c9a:	f100 0310 	add.w	r3, r0, #16
 8005c9e:	f106 0210 	add.w	r2, r6, #16
 8005ca2:	e75b      	b.n	8005b5c <_realloc_r+0x1bc>
 8005ca4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005ca8:	f022 0203 	bic.w	r2, r2, #3
 8005cac:	4414      	add	r4, r2
 8005cae:	e717      	b.n	8005ae0 <_realloc_r+0x140>
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	4674      	mov	r4, lr
 8005cb6:	463e      	mov	r6, r7
 8005cb8:	f7ff fe0e 	bl	80058d8 <memmove>
 8005cbc:	46d0      	mov	r8, sl
 8005cbe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005cc2:	e70d      	b.n	8005ae0 <_realloc_r+0x140>
 8005cc4:	463a      	mov	r2, r7
 8005cc6:	e700      	b.n	8005aca <_realloc_r+0x12a>
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4638      	mov	r0, r7
 8005ccc:	461c      	mov	r4, r3
 8005cce:	463e      	mov	r6, r7
 8005cd0:	f7ff fe02 	bl	80058d8 <memmove>
 8005cd4:	46d0      	mov	r8, sl
 8005cd6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005cda:	e701      	b.n	8005ae0 <_realloc_r+0x140>
 8005cdc:	68b3      	ldr	r3, [r6, #8]
 8005cde:	f8ca 3010 	str.w	r3, [sl, #16]
 8005ce2:	68f3      	ldr	r3, [r6, #12]
 8005ce4:	f8ca 3014 	str.w	r3, [sl, #20]
 8005ce8:	2a24      	cmp	r2, #36	; 0x24
 8005cea:	d018      	beq.n	8005d1e <_realloc_r+0x37e>
 8005cec:	3610      	adds	r6, #16
 8005cee:	f10a 0318 	add.w	r3, sl, #24
 8005cf2:	e7a8      	b.n	8005c46 <_realloc_r+0x2a6>
 8005cf4:	6933      	ldr	r3, [r6, #16]
 8005cf6:	6103      	str	r3, [r0, #16]
 8005cf8:	6973      	ldr	r3, [r6, #20]
 8005cfa:	6143      	str	r3, [r0, #20]
 8005cfc:	f106 0218 	add.w	r2, r6, #24
 8005d00:	f100 0318 	add.w	r3, r0, #24
 8005d04:	e72a      	b.n	8005b5c <_realloc_r+0x1bc>
 8005d06:	68b1      	ldr	r1, [r6, #8]
 8005d08:	f8ca 1010 	str.w	r1, [sl, #16]
 8005d0c:	68f1      	ldr	r1, [r6, #12]
 8005d0e:	f8ca 1014 	str.w	r1, [sl, #20]
 8005d12:	2a24      	cmp	r2, #36	; 0x24
 8005d14:	d00f      	beq.n	8005d36 <_realloc_r+0x396>
 8005d16:	3610      	adds	r6, #16
 8005d18:	f10a 0218 	add.w	r2, sl, #24
 8005d1c:	e6d5      	b.n	8005aca <_realloc_r+0x12a>
 8005d1e:	6933      	ldr	r3, [r6, #16]
 8005d20:	f8ca 3018 	str.w	r3, [sl, #24]
 8005d24:	6973      	ldr	r3, [r6, #20]
 8005d26:	f8ca 301c 	str.w	r3, [sl, #28]
 8005d2a:	3618      	adds	r6, #24
 8005d2c:	f10a 0320 	add.w	r3, sl, #32
 8005d30:	e789      	b.n	8005c46 <_realloc_r+0x2a6>
 8005d32:	463b      	mov	r3, r7
 8005d34:	e760      	b.n	8005bf8 <_realloc_r+0x258>
 8005d36:	6932      	ldr	r2, [r6, #16]
 8005d38:	f8ca 2018 	str.w	r2, [sl, #24]
 8005d3c:	6972      	ldr	r2, [r6, #20]
 8005d3e:	f8ca 201c 	str.w	r2, [sl, #28]
 8005d42:	3618      	adds	r6, #24
 8005d44:	f10a 0220 	add.w	r2, sl, #32
 8005d48:	e6bf      	b.n	8005aca <_realloc_r+0x12a>
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f8cd c004 	str.w	ip, [sp, #4]
 8005d52:	f7ff fdc1 	bl	80058d8 <memmove>
 8005d56:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005d5a:	e753      	b.n	8005c04 <_realloc_r+0x264>
 8005d5c:	68b3      	ldr	r3, [r6, #8]
 8005d5e:	f8ca 3010 	str.w	r3, [sl, #16]
 8005d62:	68f3      	ldr	r3, [r6, #12]
 8005d64:	f8ca 3014 	str.w	r3, [sl, #20]
 8005d68:	2a24      	cmp	r2, #36	; 0x24
 8005d6a:	d003      	beq.n	8005d74 <_realloc_r+0x3d4>
 8005d6c:	3610      	adds	r6, #16
 8005d6e:	f10a 0318 	add.w	r3, sl, #24
 8005d72:	e741      	b.n	8005bf8 <_realloc_r+0x258>
 8005d74:	6933      	ldr	r3, [r6, #16]
 8005d76:	f8ca 3018 	str.w	r3, [sl, #24]
 8005d7a:	6973      	ldr	r3, [r6, #20]
 8005d7c:	f8ca 301c 	str.w	r3, [sl, #28]
 8005d80:	3618      	adds	r6, #24
 8005d82:	f10a 0320 	add.w	r3, sl, #32
 8005d86:	e737      	b.n	8005bf8 <_realloc_r+0x258>
 8005d88:	20000818 	.word	0x20000818

08005d8c <__aeabi_drsub>:
 8005d8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005d90:	e002      	b.n	8005d98 <__adddf3>
 8005d92:	bf00      	nop

08005d94 <__aeabi_dsub>:
 8005d94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005d98 <__adddf3>:
 8005d98:	b530      	push	{r4, r5, lr}
 8005d9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005d9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005da2:	ea94 0f05 	teq	r4, r5
 8005da6:	bf08      	it	eq
 8005da8:	ea90 0f02 	teqeq	r0, r2
 8005dac:	bf1f      	itttt	ne
 8005dae:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005db2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005db6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005dba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005dbe:	f000 80e2 	beq.w	8005f86 <__adddf3+0x1ee>
 8005dc2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005dc6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005dca:	bfb8      	it	lt
 8005dcc:	426d      	neglt	r5, r5
 8005dce:	dd0c      	ble.n	8005dea <__adddf3+0x52>
 8005dd0:	442c      	add	r4, r5
 8005dd2:	ea80 0202 	eor.w	r2, r0, r2
 8005dd6:	ea81 0303 	eor.w	r3, r1, r3
 8005dda:	ea82 0000 	eor.w	r0, r2, r0
 8005dde:	ea83 0101 	eor.w	r1, r3, r1
 8005de2:	ea80 0202 	eor.w	r2, r0, r2
 8005de6:	ea81 0303 	eor.w	r3, r1, r3
 8005dea:	2d36      	cmp	r5, #54	; 0x36
 8005dec:	bf88      	it	hi
 8005dee:	bd30      	pophi	{r4, r5, pc}
 8005df0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005df4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005df8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005dfc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005e00:	d002      	beq.n	8005e08 <__adddf3+0x70>
 8005e02:	4240      	negs	r0, r0
 8005e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005e0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005e10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005e14:	d002      	beq.n	8005e1c <__adddf3+0x84>
 8005e16:	4252      	negs	r2, r2
 8005e18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005e1c:	ea94 0f05 	teq	r4, r5
 8005e20:	f000 80a7 	beq.w	8005f72 <__adddf3+0x1da>
 8005e24:	f1a4 0401 	sub.w	r4, r4, #1
 8005e28:	f1d5 0e20 	rsbs	lr, r5, #32
 8005e2c:	db0d      	blt.n	8005e4a <__adddf3+0xb2>
 8005e2e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005e32:	fa22 f205 	lsr.w	r2, r2, r5
 8005e36:	1880      	adds	r0, r0, r2
 8005e38:	f141 0100 	adc.w	r1, r1, #0
 8005e3c:	fa03 f20e 	lsl.w	r2, r3, lr
 8005e40:	1880      	adds	r0, r0, r2
 8005e42:	fa43 f305 	asr.w	r3, r3, r5
 8005e46:	4159      	adcs	r1, r3
 8005e48:	e00e      	b.n	8005e68 <__adddf3+0xd0>
 8005e4a:	f1a5 0520 	sub.w	r5, r5, #32
 8005e4e:	f10e 0e20 	add.w	lr, lr, #32
 8005e52:	2a01      	cmp	r2, #1
 8005e54:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005e58:	bf28      	it	cs
 8005e5a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005e5e:	fa43 f305 	asr.w	r3, r3, r5
 8005e62:	18c0      	adds	r0, r0, r3
 8005e64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005e68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005e6c:	d507      	bpl.n	8005e7e <__adddf3+0xe6>
 8005e6e:	f04f 0e00 	mov.w	lr, #0
 8005e72:	f1dc 0c00 	rsbs	ip, ip, #0
 8005e76:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005e7a:	eb6e 0101 	sbc.w	r1, lr, r1
 8005e7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005e82:	d31b      	bcc.n	8005ebc <__adddf3+0x124>
 8005e84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005e88:	d30c      	bcc.n	8005ea4 <__adddf3+0x10c>
 8005e8a:	0849      	lsrs	r1, r1, #1
 8005e8c:	ea5f 0030 	movs.w	r0, r0, rrx
 8005e90:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005e94:	f104 0401 	add.w	r4, r4, #1
 8005e98:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005e9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005ea0:	f080 809a 	bcs.w	8005fd8 <__adddf3+0x240>
 8005ea4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005ea8:	bf08      	it	eq
 8005eaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005eae:	f150 0000 	adcs.w	r0, r0, #0
 8005eb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005eb6:	ea41 0105 	orr.w	r1, r1, r5
 8005eba:	bd30      	pop	{r4, r5, pc}
 8005ebc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005ec0:	4140      	adcs	r0, r0
 8005ec2:	eb41 0101 	adc.w	r1, r1, r1
 8005ec6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005eca:	f1a4 0401 	sub.w	r4, r4, #1
 8005ece:	d1e9      	bne.n	8005ea4 <__adddf3+0x10c>
 8005ed0:	f091 0f00 	teq	r1, #0
 8005ed4:	bf04      	itt	eq
 8005ed6:	4601      	moveq	r1, r0
 8005ed8:	2000      	moveq	r0, #0
 8005eda:	fab1 f381 	clz	r3, r1
 8005ede:	bf08      	it	eq
 8005ee0:	3320      	addeq	r3, #32
 8005ee2:	f1a3 030b 	sub.w	r3, r3, #11
 8005ee6:	f1b3 0220 	subs.w	r2, r3, #32
 8005eea:	da0c      	bge.n	8005f06 <__adddf3+0x16e>
 8005eec:	320c      	adds	r2, #12
 8005eee:	dd08      	ble.n	8005f02 <__adddf3+0x16a>
 8005ef0:	f102 0c14 	add.w	ip, r2, #20
 8005ef4:	f1c2 020c 	rsb	r2, r2, #12
 8005ef8:	fa01 f00c 	lsl.w	r0, r1, ip
 8005efc:	fa21 f102 	lsr.w	r1, r1, r2
 8005f00:	e00c      	b.n	8005f1c <__adddf3+0x184>
 8005f02:	f102 0214 	add.w	r2, r2, #20
 8005f06:	bfd8      	it	le
 8005f08:	f1c2 0c20 	rsble	ip, r2, #32
 8005f0c:	fa01 f102 	lsl.w	r1, r1, r2
 8005f10:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005f14:	bfdc      	itt	le
 8005f16:	ea41 010c 	orrle.w	r1, r1, ip
 8005f1a:	4090      	lslle	r0, r2
 8005f1c:	1ae4      	subs	r4, r4, r3
 8005f1e:	bfa2      	ittt	ge
 8005f20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005f24:	4329      	orrge	r1, r5
 8005f26:	bd30      	popge	{r4, r5, pc}
 8005f28:	ea6f 0404 	mvn.w	r4, r4
 8005f2c:	3c1f      	subs	r4, #31
 8005f2e:	da1c      	bge.n	8005f6a <__adddf3+0x1d2>
 8005f30:	340c      	adds	r4, #12
 8005f32:	dc0e      	bgt.n	8005f52 <__adddf3+0x1ba>
 8005f34:	f104 0414 	add.w	r4, r4, #20
 8005f38:	f1c4 0220 	rsb	r2, r4, #32
 8005f3c:	fa20 f004 	lsr.w	r0, r0, r4
 8005f40:	fa01 f302 	lsl.w	r3, r1, r2
 8005f44:	ea40 0003 	orr.w	r0, r0, r3
 8005f48:	fa21 f304 	lsr.w	r3, r1, r4
 8005f4c:	ea45 0103 	orr.w	r1, r5, r3
 8005f50:	bd30      	pop	{r4, r5, pc}
 8005f52:	f1c4 040c 	rsb	r4, r4, #12
 8005f56:	f1c4 0220 	rsb	r2, r4, #32
 8005f5a:	fa20 f002 	lsr.w	r0, r0, r2
 8005f5e:	fa01 f304 	lsl.w	r3, r1, r4
 8005f62:	ea40 0003 	orr.w	r0, r0, r3
 8005f66:	4629      	mov	r1, r5
 8005f68:	bd30      	pop	{r4, r5, pc}
 8005f6a:	fa21 f004 	lsr.w	r0, r1, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	bd30      	pop	{r4, r5, pc}
 8005f72:	f094 0f00 	teq	r4, #0
 8005f76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005f7a:	bf06      	itte	eq
 8005f7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005f80:	3401      	addeq	r4, #1
 8005f82:	3d01      	subne	r5, #1
 8005f84:	e74e      	b.n	8005e24 <__adddf3+0x8c>
 8005f86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005f8a:	bf18      	it	ne
 8005f8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005f90:	d029      	beq.n	8005fe6 <__adddf3+0x24e>
 8005f92:	ea94 0f05 	teq	r4, r5
 8005f96:	bf08      	it	eq
 8005f98:	ea90 0f02 	teqeq	r0, r2
 8005f9c:	d005      	beq.n	8005faa <__adddf3+0x212>
 8005f9e:	ea54 0c00 	orrs.w	ip, r4, r0
 8005fa2:	bf04      	itt	eq
 8005fa4:	4619      	moveq	r1, r3
 8005fa6:	4610      	moveq	r0, r2
 8005fa8:	bd30      	pop	{r4, r5, pc}
 8005faa:	ea91 0f03 	teq	r1, r3
 8005fae:	bf1e      	ittt	ne
 8005fb0:	2100      	movne	r1, #0
 8005fb2:	2000      	movne	r0, #0
 8005fb4:	bd30      	popne	{r4, r5, pc}
 8005fb6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005fba:	d105      	bne.n	8005fc8 <__adddf3+0x230>
 8005fbc:	0040      	lsls	r0, r0, #1
 8005fbe:	4149      	adcs	r1, r1
 8005fc0:	bf28      	it	cs
 8005fc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005fc6:	bd30      	pop	{r4, r5, pc}
 8005fc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005fcc:	bf3c      	itt	cc
 8005fce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005fd2:	bd30      	popcc	{r4, r5, pc}
 8005fd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005fd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005fdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fe0:	f04f 0000 	mov.w	r0, #0
 8005fe4:	bd30      	pop	{r4, r5, pc}
 8005fe6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005fea:	bf1a      	itte	ne
 8005fec:	4619      	movne	r1, r3
 8005fee:	4610      	movne	r0, r2
 8005ff0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005ff4:	bf1c      	itt	ne
 8005ff6:	460b      	movne	r3, r1
 8005ff8:	4602      	movne	r2, r0
 8005ffa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005ffe:	bf06      	itte	eq
 8006000:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006004:	ea91 0f03 	teqeq	r1, r3
 8006008:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800600c:	bd30      	pop	{r4, r5, pc}
 800600e:	bf00      	nop

08006010 <__aeabi_ui2d>:
 8006010:	f090 0f00 	teq	r0, #0
 8006014:	bf04      	itt	eq
 8006016:	2100      	moveq	r1, #0
 8006018:	4770      	bxeq	lr
 800601a:	b530      	push	{r4, r5, lr}
 800601c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006020:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006024:	f04f 0500 	mov.w	r5, #0
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	e750      	b.n	8005ed0 <__adddf3+0x138>
 800602e:	bf00      	nop

08006030 <__aeabi_i2d>:
 8006030:	f090 0f00 	teq	r0, #0
 8006034:	bf04      	itt	eq
 8006036:	2100      	moveq	r1, #0
 8006038:	4770      	bxeq	lr
 800603a:	b530      	push	{r4, r5, lr}
 800603c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006040:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006044:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006048:	bf48      	it	mi
 800604a:	4240      	negmi	r0, r0
 800604c:	f04f 0100 	mov.w	r1, #0
 8006050:	e73e      	b.n	8005ed0 <__adddf3+0x138>
 8006052:	bf00      	nop

08006054 <__aeabi_f2d>:
 8006054:	0042      	lsls	r2, r0, #1
 8006056:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800605a:	ea4f 0131 	mov.w	r1, r1, rrx
 800605e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006062:	bf1f      	itttt	ne
 8006064:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006068:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800606c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006070:	4770      	bxne	lr
 8006072:	f092 0f00 	teq	r2, #0
 8006076:	bf14      	ite	ne
 8006078:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800607c:	4770      	bxeq	lr
 800607e:	b530      	push	{r4, r5, lr}
 8006080:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006084:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006088:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800608c:	e720      	b.n	8005ed0 <__adddf3+0x138>
 800608e:	bf00      	nop

08006090 <__aeabi_ul2d>:
 8006090:	ea50 0201 	orrs.w	r2, r0, r1
 8006094:	bf08      	it	eq
 8006096:	4770      	bxeq	lr
 8006098:	b530      	push	{r4, r5, lr}
 800609a:	f04f 0500 	mov.w	r5, #0
 800609e:	e00a      	b.n	80060b6 <__aeabi_l2d+0x16>

080060a0 <__aeabi_l2d>:
 80060a0:	ea50 0201 	orrs.w	r2, r0, r1
 80060a4:	bf08      	it	eq
 80060a6:	4770      	bxeq	lr
 80060a8:	b530      	push	{r4, r5, lr}
 80060aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80060ae:	d502      	bpl.n	80060b6 <__aeabi_l2d+0x16>
 80060b0:	4240      	negs	r0, r0
 80060b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80060b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80060ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80060be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80060c2:	f43f aedc 	beq.w	8005e7e <__adddf3+0xe6>
 80060c6:	f04f 0203 	mov.w	r2, #3
 80060ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80060ce:	bf18      	it	ne
 80060d0:	3203      	addne	r2, #3
 80060d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80060d6:	bf18      	it	ne
 80060d8:	3203      	addne	r2, #3
 80060da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80060de:	f1c2 0320 	rsb	r3, r2, #32
 80060e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80060e6:	fa20 f002 	lsr.w	r0, r0, r2
 80060ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80060ee:	ea40 000e 	orr.w	r0, r0, lr
 80060f2:	fa21 f102 	lsr.w	r1, r1, r2
 80060f6:	4414      	add	r4, r2
 80060f8:	e6c1      	b.n	8005e7e <__adddf3+0xe6>
 80060fa:	bf00      	nop

080060fc <__aeabi_dmul>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006102:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006106:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800610a:	bf1d      	ittte	ne
 800610c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006110:	ea94 0f0c 	teqne	r4, ip
 8006114:	ea95 0f0c 	teqne	r5, ip
 8006118:	f000 f8de 	bleq	80062d8 <__aeabi_dmul+0x1dc>
 800611c:	442c      	add	r4, r5
 800611e:	ea81 0603 	eor.w	r6, r1, r3
 8006122:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006126:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800612a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800612e:	bf18      	it	ne
 8006130:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800613c:	d038      	beq.n	80061b0 <__aeabi_dmul+0xb4>
 800613e:	fba0 ce02 	umull	ip, lr, r0, r2
 8006142:	f04f 0500 	mov.w	r5, #0
 8006146:	fbe1 e502 	umlal	lr, r5, r1, r2
 800614a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800614e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006152:	f04f 0600 	mov.w	r6, #0
 8006156:	fbe1 5603 	umlal	r5, r6, r1, r3
 800615a:	f09c 0f00 	teq	ip, #0
 800615e:	bf18      	it	ne
 8006160:	f04e 0e01 	orrne.w	lr, lr, #1
 8006164:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006168:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800616c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006170:	d204      	bcs.n	800617c <__aeabi_dmul+0x80>
 8006172:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006176:	416d      	adcs	r5, r5
 8006178:	eb46 0606 	adc.w	r6, r6, r6
 800617c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006180:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006184:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006188:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800618c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006190:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006194:	bf88      	it	hi
 8006196:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800619a:	d81e      	bhi.n	80061da <__aeabi_dmul+0xde>
 800619c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80061a0:	bf08      	it	eq
 80061a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80061a6:	f150 0000 	adcs.w	r0, r0, #0
 80061aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80061b4:	ea46 0101 	orr.w	r1, r6, r1
 80061b8:	ea40 0002 	orr.w	r0, r0, r2
 80061bc:	ea81 0103 	eor.w	r1, r1, r3
 80061c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80061c4:	bfc2      	ittt	gt
 80061c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80061ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80061ce:	bd70      	popgt	{r4, r5, r6, pc}
 80061d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80061d4:	f04f 0e00 	mov.w	lr, #0
 80061d8:	3c01      	subs	r4, #1
 80061da:	f300 80ab 	bgt.w	8006334 <__aeabi_dmul+0x238>
 80061de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80061e2:	bfde      	ittt	le
 80061e4:	2000      	movle	r0, #0
 80061e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80061ea:	bd70      	pople	{r4, r5, r6, pc}
 80061ec:	f1c4 0400 	rsb	r4, r4, #0
 80061f0:	3c20      	subs	r4, #32
 80061f2:	da35      	bge.n	8006260 <__aeabi_dmul+0x164>
 80061f4:	340c      	adds	r4, #12
 80061f6:	dc1b      	bgt.n	8006230 <__aeabi_dmul+0x134>
 80061f8:	f104 0414 	add.w	r4, r4, #20
 80061fc:	f1c4 0520 	rsb	r5, r4, #32
 8006200:	fa00 f305 	lsl.w	r3, r0, r5
 8006204:	fa20 f004 	lsr.w	r0, r0, r4
 8006208:	fa01 f205 	lsl.w	r2, r1, r5
 800620c:	ea40 0002 	orr.w	r0, r0, r2
 8006210:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006214:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006218:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800621c:	fa21 f604 	lsr.w	r6, r1, r4
 8006220:	eb42 0106 	adc.w	r1, r2, r6
 8006224:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006228:	bf08      	it	eq
 800622a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	f1c4 040c 	rsb	r4, r4, #12
 8006234:	f1c4 0520 	rsb	r5, r4, #32
 8006238:	fa00 f304 	lsl.w	r3, r0, r4
 800623c:	fa20 f005 	lsr.w	r0, r0, r5
 8006240:	fa01 f204 	lsl.w	r2, r1, r4
 8006244:	ea40 0002 	orr.w	r0, r0, r2
 8006248:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800624c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006250:	f141 0100 	adc.w	r1, r1, #0
 8006254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006258:	bf08      	it	eq
 800625a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	f1c4 0520 	rsb	r5, r4, #32
 8006264:	fa00 f205 	lsl.w	r2, r0, r5
 8006268:	ea4e 0e02 	orr.w	lr, lr, r2
 800626c:	fa20 f304 	lsr.w	r3, r0, r4
 8006270:	fa01 f205 	lsl.w	r2, r1, r5
 8006274:	ea43 0302 	orr.w	r3, r3, r2
 8006278:	fa21 f004 	lsr.w	r0, r1, r4
 800627c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006280:	fa21 f204 	lsr.w	r2, r1, r4
 8006284:	ea20 0002 	bic.w	r0, r0, r2
 8006288:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800628c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006290:	bf08      	it	eq
 8006292:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f094 0f00 	teq	r4, #0
 800629c:	d10f      	bne.n	80062be <__aeabi_dmul+0x1c2>
 800629e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80062a2:	0040      	lsls	r0, r0, #1
 80062a4:	eb41 0101 	adc.w	r1, r1, r1
 80062a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80062ac:	bf08      	it	eq
 80062ae:	3c01      	subeq	r4, #1
 80062b0:	d0f7      	beq.n	80062a2 <__aeabi_dmul+0x1a6>
 80062b2:	ea41 0106 	orr.w	r1, r1, r6
 80062b6:	f095 0f00 	teq	r5, #0
 80062ba:	bf18      	it	ne
 80062bc:	4770      	bxne	lr
 80062be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80062c2:	0052      	lsls	r2, r2, #1
 80062c4:	eb43 0303 	adc.w	r3, r3, r3
 80062c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80062cc:	bf08      	it	eq
 80062ce:	3d01      	subeq	r5, #1
 80062d0:	d0f7      	beq.n	80062c2 <__aeabi_dmul+0x1c6>
 80062d2:	ea43 0306 	orr.w	r3, r3, r6
 80062d6:	4770      	bx	lr
 80062d8:	ea94 0f0c 	teq	r4, ip
 80062dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80062e0:	bf18      	it	ne
 80062e2:	ea95 0f0c 	teqne	r5, ip
 80062e6:	d00c      	beq.n	8006302 <__aeabi_dmul+0x206>
 80062e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80062ec:	bf18      	it	ne
 80062ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80062f2:	d1d1      	bne.n	8006298 <__aeabi_dmul+0x19c>
 80062f4:	ea81 0103 	eor.w	r1, r1, r3
 80062f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062fc:	f04f 0000 	mov.w	r0, #0
 8006300:	bd70      	pop	{r4, r5, r6, pc}
 8006302:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006306:	bf06      	itte	eq
 8006308:	4610      	moveq	r0, r2
 800630a:	4619      	moveq	r1, r3
 800630c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006310:	d019      	beq.n	8006346 <__aeabi_dmul+0x24a>
 8006312:	ea94 0f0c 	teq	r4, ip
 8006316:	d102      	bne.n	800631e <__aeabi_dmul+0x222>
 8006318:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800631c:	d113      	bne.n	8006346 <__aeabi_dmul+0x24a>
 800631e:	ea95 0f0c 	teq	r5, ip
 8006322:	d105      	bne.n	8006330 <__aeabi_dmul+0x234>
 8006324:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006328:	bf1c      	itt	ne
 800632a:	4610      	movne	r0, r2
 800632c:	4619      	movne	r1, r3
 800632e:	d10a      	bne.n	8006346 <__aeabi_dmul+0x24a>
 8006330:	ea81 0103 	eor.w	r1, r1, r3
 8006334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006338:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800633c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006340:	f04f 0000 	mov.w	r0, #0
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800634a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800634e:	bd70      	pop	{r4, r5, r6, pc}

08006350 <__aeabi_ddiv>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006356:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800635a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800635e:	bf1d      	ittte	ne
 8006360:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006364:	ea94 0f0c 	teqne	r4, ip
 8006368:	ea95 0f0c 	teqne	r5, ip
 800636c:	f000 f8a7 	bleq	80064be <__aeabi_ddiv+0x16e>
 8006370:	eba4 0405 	sub.w	r4, r4, r5
 8006374:	ea81 0e03 	eor.w	lr, r1, r3
 8006378:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800637c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006380:	f000 8088 	beq.w	8006494 <__aeabi_ddiv+0x144>
 8006384:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006388:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800638c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006390:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006394:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006398:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800639c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80063a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80063a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80063a8:	429d      	cmp	r5, r3
 80063aa:	bf08      	it	eq
 80063ac:	4296      	cmpeq	r6, r2
 80063ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80063b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80063b6:	d202      	bcs.n	80063be <__aeabi_ddiv+0x6e>
 80063b8:	085b      	lsrs	r3, r3, #1
 80063ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80063be:	1ab6      	subs	r6, r6, r2
 80063c0:	eb65 0503 	sbc.w	r5, r5, r3
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80063ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80063ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80063d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80063d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80063da:	bf22      	ittt	cs
 80063dc:	1ab6      	subcs	r6, r6, r2
 80063de:	4675      	movcs	r5, lr
 80063e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80063ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80063ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80063f2:	bf22      	ittt	cs
 80063f4:	1ab6      	subcs	r6, r6, r2
 80063f6:	4675      	movcs	r5, lr
 80063f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80063fc:	085b      	lsrs	r3, r3, #1
 80063fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8006402:	ebb6 0e02 	subs.w	lr, r6, r2
 8006406:	eb75 0e03 	sbcs.w	lr, r5, r3
 800640a:	bf22      	ittt	cs
 800640c:	1ab6      	subcs	r6, r6, r2
 800640e:	4675      	movcs	r5, lr
 8006410:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006414:	085b      	lsrs	r3, r3, #1
 8006416:	ea4f 0232 	mov.w	r2, r2, rrx
 800641a:	ebb6 0e02 	subs.w	lr, r6, r2
 800641e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006422:	bf22      	ittt	cs
 8006424:	1ab6      	subcs	r6, r6, r2
 8006426:	4675      	movcs	r5, lr
 8006428:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800642c:	ea55 0e06 	orrs.w	lr, r5, r6
 8006430:	d018      	beq.n	8006464 <__aeabi_ddiv+0x114>
 8006432:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006436:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800643a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800643e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006442:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006446:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800644a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800644e:	d1c0      	bne.n	80063d2 <__aeabi_ddiv+0x82>
 8006450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006454:	d10b      	bne.n	800646e <__aeabi_ddiv+0x11e>
 8006456:	ea41 0100 	orr.w	r1, r1, r0
 800645a:	f04f 0000 	mov.w	r0, #0
 800645e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006462:	e7b6      	b.n	80063d2 <__aeabi_ddiv+0x82>
 8006464:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006468:	bf04      	itt	eq
 800646a:	4301      	orreq	r1, r0
 800646c:	2000      	moveq	r0, #0
 800646e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006472:	bf88      	it	hi
 8006474:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006478:	f63f aeaf 	bhi.w	80061da <__aeabi_dmul+0xde>
 800647c:	ebb5 0c03 	subs.w	ip, r5, r3
 8006480:	bf04      	itt	eq
 8006482:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006486:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800648a:	f150 0000 	adcs.w	r0, r0, #0
 800648e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006498:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800649c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80064a0:	bfc2      	ittt	gt
 80064a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80064a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80064aa:	bd70      	popgt	{r4, r5, r6, pc}
 80064ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80064b0:	f04f 0e00 	mov.w	lr, #0
 80064b4:	3c01      	subs	r4, #1
 80064b6:	e690      	b.n	80061da <__aeabi_dmul+0xde>
 80064b8:	ea45 0e06 	orr.w	lr, r5, r6
 80064bc:	e68d      	b.n	80061da <__aeabi_dmul+0xde>
 80064be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80064c2:	ea94 0f0c 	teq	r4, ip
 80064c6:	bf08      	it	eq
 80064c8:	ea95 0f0c 	teqeq	r5, ip
 80064cc:	f43f af3b 	beq.w	8006346 <__aeabi_dmul+0x24a>
 80064d0:	ea94 0f0c 	teq	r4, ip
 80064d4:	d10a      	bne.n	80064ec <__aeabi_ddiv+0x19c>
 80064d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80064da:	f47f af34 	bne.w	8006346 <__aeabi_dmul+0x24a>
 80064de:	ea95 0f0c 	teq	r5, ip
 80064e2:	f47f af25 	bne.w	8006330 <__aeabi_dmul+0x234>
 80064e6:	4610      	mov	r0, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	e72c      	b.n	8006346 <__aeabi_dmul+0x24a>
 80064ec:	ea95 0f0c 	teq	r5, ip
 80064f0:	d106      	bne.n	8006500 <__aeabi_ddiv+0x1b0>
 80064f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80064f6:	f43f aefd 	beq.w	80062f4 <__aeabi_dmul+0x1f8>
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	e722      	b.n	8006346 <__aeabi_dmul+0x24a>
 8006500:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006504:	bf18      	it	ne
 8006506:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800650a:	f47f aec5 	bne.w	8006298 <__aeabi_dmul+0x19c>
 800650e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006512:	f47f af0d 	bne.w	8006330 <__aeabi_dmul+0x234>
 8006516:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800651a:	f47f aeeb 	bne.w	80062f4 <__aeabi_dmul+0x1f8>
 800651e:	e712      	b.n	8006346 <__aeabi_dmul+0x24a>

08006520 <__gedf2>:
 8006520:	f04f 3cff 	mov.w	ip, #4294967295
 8006524:	e006      	b.n	8006534 <__cmpdf2+0x4>
 8006526:	bf00      	nop

08006528 <__ledf2>:
 8006528:	f04f 0c01 	mov.w	ip, #1
 800652c:	e002      	b.n	8006534 <__cmpdf2+0x4>
 800652e:	bf00      	nop

08006530 <__cmpdf2>:
 8006530:	f04f 0c01 	mov.w	ip, #1
 8006534:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800653c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006540:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006544:	bf18      	it	ne
 8006546:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800654a:	d01b      	beq.n	8006584 <__cmpdf2+0x54>
 800654c:	b001      	add	sp, #4
 800654e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006552:	bf0c      	ite	eq
 8006554:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006558:	ea91 0f03 	teqne	r1, r3
 800655c:	bf02      	ittt	eq
 800655e:	ea90 0f02 	teqeq	r0, r2
 8006562:	2000      	moveq	r0, #0
 8006564:	4770      	bxeq	lr
 8006566:	f110 0f00 	cmn.w	r0, #0
 800656a:	ea91 0f03 	teq	r1, r3
 800656e:	bf58      	it	pl
 8006570:	4299      	cmppl	r1, r3
 8006572:	bf08      	it	eq
 8006574:	4290      	cmpeq	r0, r2
 8006576:	bf2c      	ite	cs
 8006578:	17d8      	asrcs	r0, r3, #31
 800657a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800657e:	f040 0001 	orr.w	r0, r0, #1
 8006582:	4770      	bx	lr
 8006584:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006588:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800658c:	d102      	bne.n	8006594 <__cmpdf2+0x64>
 800658e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006592:	d107      	bne.n	80065a4 <__cmpdf2+0x74>
 8006594:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800659c:	d1d6      	bne.n	800654c <__cmpdf2+0x1c>
 800659e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80065a2:	d0d3      	beq.n	800654c <__cmpdf2+0x1c>
 80065a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop

080065ac <__aeabi_cdrcmple>:
 80065ac:	4684      	mov	ip, r0
 80065ae:	4610      	mov	r0, r2
 80065b0:	4662      	mov	r2, ip
 80065b2:	468c      	mov	ip, r1
 80065b4:	4619      	mov	r1, r3
 80065b6:	4663      	mov	r3, ip
 80065b8:	e000      	b.n	80065bc <__aeabi_cdcmpeq>
 80065ba:	bf00      	nop

080065bc <__aeabi_cdcmpeq>:
 80065bc:	b501      	push	{r0, lr}
 80065be:	f7ff ffb7 	bl	8006530 <__cmpdf2>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	bf48      	it	mi
 80065c6:	f110 0f00 	cmnmi.w	r0, #0
 80065ca:	bd01      	pop	{r0, pc}

080065cc <__aeabi_dcmpeq>:
 80065cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80065d0:	f7ff fff4 	bl	80065bc <__aeabi_cdcmpeq>
 80065d4:	bf0c      	ite	eq
 80065d6:	2001      	moveq	r0, #1
 80065d8:	2000      	movne	r0, #0
 80065da:	f85d fb08 	ldr.w	pc, [sp], #8
 80065de:	bf00      	nop

080065e0 <__aeabi_dcmplt>:
 80065e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80065e4:	f7ff ffea 	bl	80065bc <__aeabi_cdcmpeq>
 80065e8:	bf34      	ite	cc
 80065ea:	2001      	movcc	r0, #1
 80065ec:	2000      	movcs	r0, #0
 80065ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80065f2:	bf00      	nop

080065f4 <__aeabi_dcmple>:
 80065f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80065f8:	f7ff ffe0 	bl	80065bc <__aeabi_cdcmpeq>
 80065fc:	bf94      	ite	ls
 80065fe:	2001      	movls	r0, #1
 8006600:	2000      	movhi	r0, #0
 8006602:	f85d fb08 	ldr.w	pc, [sp], #8
 8006606:	bf00      	nop

08006608 <__aeabi_dcmpge>:
 8006608:	f84d ed08 	str.w	lr, [sp, #-8]!
 800660c:	f7ff ffce 	bl	80065ac <__aeabi_cdrcmple>
 8006610:	bf94      	ite	ls
 8006612:	2001      	movls	r0, #1
 8006614:	2000      	movhi	r0, #0
 8006616:	f85d fb08 	ldr.w	pc, [sp], #8
 800661a:	bf00      	nop

0800661c <__aeabi_dcmpgt>:
 800661c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006620:	f7ff ffc4 	bl	80065ac <__aeabi_cdrcmple>
 8006624:	bf34      	ite	cc
 8006626:	2001      	movcc	r0, #1
 8006628:	2000      	movcs	r0, #0
 800662a:	f85d fb08 	ldr.w	pc, [sp], #8
 800662e:	bf00      	nop

08006630 <__aeabi_d2iz>:
 8006630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006634:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006638:	d215      	bcs.n	8006666 <__aeabi_d2iz+0x36>
 800663a:	d511      	bpl.n	8006660 <__aeabi_d2iz+0x30>
 800663c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006640:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006644:	d912      	bls.n	800666c <__aeabi_d2iz+0x3c>
 8006646:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800664a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800664e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006652:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006656:	fa23 f002 	lsr.w	r0, r3, r2
 800665a:	bf18      	it	ne
 800665c:	4240      	negne	r0, r0
 800665e:	4770      	bx	lr
 8006660:	f04f 0000 	mov.w	r0, #0
 8006664:	4770      	bx	lr
 8006666:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800666a:	d105      	bne.n	8006678 <__aeabi_d2iz+0x48>
 800666c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006670:	bf08      	it	eq
 8006672:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006676:	4770      	bx	lr
 8006678:	f04f 0000 	mov.w	r0, #0
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop

08006680 <CSWTCH.36>:
 8006680:	0000 0202 0c0c 0c0c 0a08                    ..........

0800668a <CSWTCH.37>:
 800668a:	0003 0003 000c 000c 3000 3000 3000 3000     .........0.0.0.0
 800669a:	0300 0c00 0000                              ......

080066a0 <g_xmc_vadc_group_array>:
 80066a0:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

080066b0 <uart_event_status_flags>:
 80066b0:	0004 0000 0010 0000 0020 0000 0040 0000     ........ ...@...
 80066c0:	0008 0000                                   ....

080066c4 <uart_event_conf_flags>:
 80066c4:	0008 0000 0020 0000 0040 0000 0040 0000     .... ...@...@...
 80066d4:	0010 0000                                   ....

080066d8 <UART_0_config>:
 80066d8:	6728 0800 119d 0800 1aa9 0800 1acb 0800     (g..............
 80066e8:	1ac5 0800 1ac7 0800 1ac9 0800 0000 0000     ................
 80066f8:	6710 0800 0200 0000 0000 0000               .g..........

08006704 <UART_0_rx_pin_config>:
 8006704:	0000 0000 0001 0000 0002 0000               ............

08006710 <UART_0_tx_pin>:
 8006710:	8100 4802 0005 0000 671c 0800               ...H.....g..

0800671c <UART_0_tx_pin_config>:
 800671c:	0090 0000 0001 0000 0002 0000               ............

08006728 <UART_0_channel_config>:
 8006728:	4b00 0000 0800 0108 0010 0000               .K..........

08006734 <PWM_MOTOR_1_gpio_out_config>:
 8006734:	0098 0000 0000 0001 0004 0000               ............

08006740 <PWM_MOTOR_2_compare_config>:
 8006740:	0000 0000 0006 0000                         ........

08006748 <PWM_MOTOR_0_gpio_out_config>:
 8006748:	0098 0000 0000 0001 0004 0000               ............

08006754 <PWM_MOTOR_0_compare_config>:
 8006754:	0000 0000 0006 0000                         ........

0800675c <PWM_MOTOR_2_gpio_out_config>:
 800675c:	0098 0000 0000 0001 0004 0000               ............

08006768 <PWM_MOTOR_1_compare_config>:
 8006768:	0000 0000 0006 0000                         ........

08006770 <INTERRUPT_TIMER_PLATE_SCAN>:
 8006770:	1d35 0100                                   5...

08006774 <INTERRUPT_SET_PWM_VALUES>:
 8006774:	1e39 0100                                   9...

08006778 <group_init_handle0>:
	...

0800678c <group_init_handle1>:
	...

080067a0 <group_init_handle3>:
	...

080067b4 <global_config>:
 80067b4:	0000 0000 0003 0000 0000 0000 0000 0000     ................
	...

080067cc <group_init_handle2>:
	...

080067e0 <DIGITAL_IO_PLATE_LL>:
 80067e0:	8200 4802 0080 0000 0000 0001 0000 0000     ...H............
 80067f0:	000e 0000                                   ....

080067f4 <DIGITAL_IO_PLATE_LR>:
 80067f4:	8200 4802 0080 0000 0001 0000 0000 0000     ...H............
 8006804:	000a 0000                                   ....

08006808 <DIGITAL_IO_PLATE_UL>:
 8006808:	8200 4802 0080 0000 0000 0001 0000 0000     ...H............
 8006818:	0001 0000                                   ....

0800681c <DIGITAL_IO_PLATE_UR>:
 800681c:	8200 4802 0080 0000 0001 0000 0000 0000     ...H............
 800682c:	000f 0000 0250 0104 0000 0001 0000 0000     ....P...........
 800683c:	0000 0001 0101 0101                         ........

08006844 <backgnd_rs_intr_handle>:
 8006844:	0010 0000 001d 0000 0000 0000               ............

08006850 <backgnd_config>:
 8006850:	0005 0000 0000 0000 0008 0000               ............

0800685c <global_iclass_config>:
 800685c:	0000 0000 2524 3430 2064 3025 6434 0021     ....$%04d %04d!.
 800686c:	0043 0000                                   C...

08006870 <blanks.6794>:
 8006870:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8006880:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 8006890:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 80068a0:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 80068b0:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 80068c0:	0030 0000                                   0...

080068c4 <zeroes.6795>:
 80068c4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

080068d4 <_ctype_>:
 80068d4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80068e4:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80068f4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8006904:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8006914:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8006924:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8006934:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8006944:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8006954:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80069d8:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
 80069e8:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

080069f8 <__mprec_tens>:
 80069f8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8006a08:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8006a18:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8006a28:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8006a38:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8006a48:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8006a58:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8006a68:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8006a78:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8006a88:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8006a98:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8006aa8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8006ab8:	9db4 79d9 7843 44ea                         ...yCx.D

08006ac0 <__mprec_bigtens>:
 8006ac0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8006ad0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8006ae0:	bf3c 7f73 4fdd 7515                         <.s..O.u

08006ae8 <p05.5265>:
 8006ae8:	0005 0000 0019 0000 007d 0000               ........}...
