
Balancing_Plate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018bc  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000140  20000000  0c0018bc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000438  20000140  0c0019fc  00010140  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000c08  00000000  00000000  00010140  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001aeda  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b88  00000000  00000000  0002bc22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ade6  00000000  00000000  0002f7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a2c  00000000  00000000  0003a590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00082a08  00000000  00000000  0003bfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000061f9  00000000  00000000  000be9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d80  00000000  00000000  000c4bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000068d  00000000  00000000  000c593d  2**0
                  CONTENTS, READONLY
 14 .debug_macro  0001bb6c  00000000  00000000  000c5fca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 95 15 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 09 16 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0018bc 	.word	0x0c0018bc
 800024c:	20000000 	.word	0x20000000
 8000250:	00000140 	.word	0x00000140
 8000254:	0c0019fc 	.word	0x0c0019fc
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0018bc 	.word	0x0c0018bc
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0018bc 	.word	0x0c0018bc
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000140 	.word	0x20000140
 800027c:	00000434 	.word	0x00000434
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	0800033d 	.word	0x0800033d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08001641 	.word	0x08001641
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08001539 	.word	0x08001539

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemCoreClockUpdate>:
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002b4:	4b1d      	ldr	r3, [pc, #116]	; (800032c <SystemCoreClockUpdate+0x78>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	03d9      	lsls	r1, r3, #15

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002ba:	b510      	push	{r4, lr}
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002bc:	d525      	bpl.n	800030a <SystemCoreClockUpdate+0x56>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <SystemCoreClockUpdate+0x7c>)
 80002c0:	68da      	ldr	r2, [r3, #12]
 80002c2:	f012 0f01 	tst.w	r2, #1
 80002c6:	461c      	mov	r4, r3
 80002c8:	d102      	bne.n	80002d0 <SystemCoreClockUpdate+0x1c>
      temp = OFI_FREQUENCY;
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002ca:	f001 f811 	bl	80012f0 <OSCHP_GetFrequency>
 80002ce:	e000      	b.n	80002d2 <SystemCoreClockUpdate+0x1e>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002d0:	4818      	ldr	r0, [pc, #96]	; (8000334 <SystemCoreClockUpdate+0x80>)
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002d2:	6822      	ldr	r2, [r4, #0]
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <SystemCoreClockUpdate+0x7c>)
 80002d6:	0752      	lsls	r2, r2, #29
 80002d8:	d510      	bpl.n	80002fc <SystemCoreClockUpdate+0x48>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002da:	689a      	ldr	r2, [r3, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80002dc:	6899      	ldr	r1, [r3, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80002de:	689b      	ldr	r3, [r3, #8]
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002e0:	f3c2 6203 	ubfx	r2, r2, #24, #4
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80002e4:	f3c3 4406 	ubfx	r4, r3, #16, #7
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002e8:	1c53      	adds	r3, r2, #1
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80002ea:	fb04 3303 	mla	r3, r4, r3, r3
 80002ee:	fbb0 f0f3 	udiv	r0, r0, r3
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80002f2:	f3c1 2306 	ubfx	r3, r1, #8, #7
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80002f6:	fb03 0000 	mla	r0, r3, r0, r0
 80002fa:	e007      	b.n	800030c <SystemCoreClockUpdate+0x58>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000302:	3301      	adds	r3, #1
      
      temp = (temp / kdiv);
 8000304:	fbb0 f0f3 	udiv	r0, r0, r3
 8000308:	e000      	b.n	800030c <SystemCoreClockUpdate+0x58>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800030a:	480a      	ldr	r0, [pc, #40]	; (8000334 <SystemCoreClockUpdate+0x80>)
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <SystemCoreClockUpdate+0x78>)
 800030e:	68d3      	ldr	r3, [r2, #12]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	3301      	adds	r3, #1
 8000314:	fbb0 f0f3 	udiv	r0, r0, r3
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000318:	6913      	ldr	r3, [r2, #16]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	3301      	adds	r3, #1
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3

  SystemCoreClock = temp;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <SystemCoreClockUpdate+0x84>)
 8000326:	6018      	str	r0, [r3, #0]
 8000328:	bd10      	pop	{r4, pc}
 800032a:	bf00      	nop
 800032c:	50004600 	.word	0x50004600
 8000330:	50004710 	.word	0x50004710
 8000334:	016e3600 	.word	0x016e3600
 8000338:	2000ffc0 	.word	0x2000ffc0

0800033c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800033c:	b538      	push	{r3, r4, r5, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 800033e:	4a09      	ldr	r2, [pc, #36]	; (8000364 <SystemInit+0x28>)
 8000340:	4d09      	ldr	r5, [pc, #36]	; (8000368 <SystemInit+0x2c>)
 8000342:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000346:	4623      	mov	r3, r4
 8000348:	cb03      	ldmia	r3!, {r0, r1}
 800034a:	42ab      	cmp	r3, r5
 800034c:	6010      	str	r0, [r2, #0]
 800034e:	6051      	str	r1, [r2, #4]
 8000350:	461c      	mov	r4, r3
 8000352:	f102 0208 	add.w	r2, r2, #8
 8000356:	d1f6      	bne.n	8000346 <SystemInit+0xa>

  SystemCoreSetup();
 8000358:	f000 ff8a 	bl	8001270 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800035c:	f000 ffcc 	bl	80012f8 <SystemCoreClockSetup>
 8000360:	bd38      	pop	{r3, r4, r5, pc}
 8000362:	bf00      	nop
 8000364:	2000ffc4 	.word	0x2000ffc4
 8000368:	20000010 	.word	0x20000010

0800036c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800036c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000370:	4403      	add	r3, r0
 8000372:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000374:	f001 0403 	and.w	r4, r1, #3
 8000378:	691e      	ldr	r6, [r3, #16]
 800037a:	00e4      	lsls	r4, r4, #3
 800037c:	25f8      	movs	r5, #248	; 0xf8
 800037e:	40a5      	lsls	r5, r4
 8000380:	ea26 0505 	bic.w	r5, r6, r5
 8000384:	611d      	str	r5, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000386:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8000388:	004f      	lsls	r7, r1, #1
 800038a:	2503      	movs	r5, #3
 800038c:	40bd      	lsls	r5, r7
 800038e:	ea26 0505 	bic.w	r5, r6, r5
 8000392:	6745      	str	r5, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000394:	4d16      	ldr	r5, [pc, #88]	; (80003f0 <XMC_GPIO_Init+0x84>)
 8000396:	42a8      	cmp	r0, r5
 8000398:	d003      	beq.n	80003a2 <XMC_GPIO_Init+0x36>
 800039a:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d107      	bne.n	80003b2 <XMC_GPIO_Init+0x46>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003a2:	6e05      	ldr	r5, [r0, #96]	; 0x60
 80003a4:	2601      	movs	r6, #1
 80003a6:	fa06 f101 	lsl.w	r1, r6, r1
 80003aa:	ea25 0101 	bic.w	r1, r5, r1
 80003ae:	6601      	str	r1, [r0, #96]	; 0x60
 80003b0:	e018      	b.n	80003e4 <XMC_GPIO_Init+0x78>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80003b2:	f992 5000 	ldrsb.w	r5, [r2]
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	da14      	bge.n	80003e4 <XMC_GPIO_Init+0x78>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80003ba:	6855      	ldr	r5, [r2, #4]
 80003bc:	408d      	lsls	r5, r1
 80003be:	6045      	str	r5, [r0, #4]
 80003c0:	08cd      	lsrs	r5, r1, #3
 80003c2:	eb00 0085 	add.w	r0, r0, r5, lsl #2

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80003c6:	f001 0107 	and.w	r1, r1, #7
 80003ca:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80003cc:	0089      	lsls	r1, r1, #2
 80003ce:	2507      	movs	r5, #7
 80003d0:	408d      	lsls	r5, r1
 80003d2:	ea26 0505 	bic.w	r5, r6, r5
 80003d6:	6405      	str	r5, [r0, #64]	; 0x40
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80003d8:	7a16      	ldrb	r6, [r2, #8]
 80003da:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80003dc:	fa06 f101 	lsl.w	r1, r6, r1
 80003e0:	4329      	orrs	r1, r5
 80003e2:	6401      	str	r1, [r0, #64]	; 0x40
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80003e4:	7812      	ldrb	r2, [r2, #0]
 80003e6:	6919      	ldr	r1, [r3, #16]
 80003e8:	40a2      	lsls	r2, r4
 80003ea:	430a      	orrs	r2, r1
 80003ec:	611a      	str	r2, [r3, #16]
 80003ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f0:	48028e00 	.word	0x48028e00

080003f4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	4604      	mov	r4, r0
  uint32_t i;

  SystemCoreClockUpdate();
 80003f8:	f7ff ff5c 	bl	80002b4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <XMC_SCU_lDelay+0x24>)
 80003fe:	4807      	ldr	r0, [pc, #28]	; (800041c <XMC_SCU_lDelay+0x28>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	fbb3 f3f0 	udiv	r3, r3, r0
 8000406:	fb03 f004 	mul.w	r0, r3, r4

  for (i = 0U; i < delay; ++i)
 800040a:	2300      	movs	r3, #0
 800040c:	4283      	cmp	r3, r0
 800040e:	d002      	beq.n	8000416 <XMC_SCU_lDelay+0x22>
  {
    __NOP();
 8000410:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000412:	3301      	adds	r3, #1
 8000414:	e7fa      	b.n	800040c <XMC_SCU_lDelay+0x18>
  {
    __NOP();
  }
}
 8000416:	bd10      	pop	{r4, pc}
 8000418:	2000ffc0 	.word	0x2000ffc0
 800041c:	000f4240 	.word	0x000f4240

08000420 <XMC_SCU_RESET_DeassertPeripheralReset>:
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000420:	0f02      	lsrs	r2, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000422:	230c      	movs	r3, #12
 8000424:	4353      	muls	r3, r2
 8000426:	4a02      	ldr	r2, [pc, #8]	; (8000430 <XMC_SCU_RESET_DeassertPeripheralReset+0x10>)

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000428:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800042c:	5098      	str	r0, [r3, r2]
 800042e:	4770      	bx	lr
 8000430:	50004414 	.word	0x50004414

08000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000434:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000438:	230c      	movs	r3, #12
}

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800043a:	0f00      	lsrs	r0, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800043c:	4358      	muls	r0, r3
 800043e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 8000442:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
 8000446:	58c3      	ldr	r3, [r0, r3]
 8000448:	421a      	tst	r2, r3
}
 800044a:	bf14      	ite	ne
 800044c:	2001      	movne	r0, #1
 800044e:	2000      	moveq	r0, #0
 8000450:	4770      	bx	lr
	...

08000454 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000458:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800045a:	6810      	ldr	r0, [r2, #0]
 800045c:	f003 0301 	and.w	r3, r3, #1
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000460:	40d8      	lsrs	r0, r3
 8000462:	4770      	bx	lr
 8000464:	50004600 	.word	0x50004600
 8000468:	2000ffc0 	.word	0x2000ffc0

0800046c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800046c:	4a03      	ldr	r2, [pc, #12]	; (800047c <XMC_SCU_CLOCK_SetSystemClockSource+0x10>)
 800046e:	68d3      	ldr	r3, [r2, #12]
 8000470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000474:	4318      	orrs	r0, r3
 8000476:	60d0      	str	r0, [r2, #12]
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	50004600 	.word	0x50004600

08000480 <XMC_SCU_CLOCK_SetUsbClockSource>:
}

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 8000482:	6993      	ldr	r3, [r2, #24]
 8000484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000488:	4318      	orrs	r0, r3
 800048a:	6190      	str	r0, [r2, #24]
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	50004600 	.word	0x50004600

08000494 <XMC_SCU_CLOCK_SetWdtClockSource>:
}

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000494:	4a03      	ldr	r2, [pc, #12]	; (80004a4 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 8000496:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000498:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800049c:	4318      	orrs	r0, r3
 800049e:	6250      	str	r0, [r2, #36]	; 0x24
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	50004600 	.word	0x50004600

080004a8 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x1c>)
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004aa:	68d3      	ldr	r3, [r2, #12]

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80004ac:	b920      	cbnz	r0, 80004b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x10>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b2:	f023 0301 	bic.w	r3, r3, #1
 80004b6:	e003      	b.n	80004c0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x18>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	60d3      	str	r3, [r2, #12]
 80004c2:	4770      	bx	lr
 80004c4:	50004710 	.word	0x50004710

080004c8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <XMC_SCU_HIB_SetRtcClockSource+0x18>)
 80004ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80004ce:	071b      	lsls	r3, r3, #28
 80004d0:	d4fa      	bmi.n	80004c8 <XMC_SCU_HIB_SetRtcClockSource>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80004d2:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 80004d4:	68d3      	ldr	r3, [r2, #12]
 80004d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004da:	4318      	orrs	r0, r3
 80004dc:	60d0      	str	r0, [r2, #12]
 80004de:	4770      	bx	lr
 80004e0:	50004000 	.word	0x50004000
 80004e4:	50004300 	.word	0x50004300

080004e8 <XMC_SCU_HIB_SetStandbyClockSource>:
}

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <XMC_SCU_HIB_SetStandbyClockSource+0x18>)
 80004ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80004ee:	071b      	lsls	r3, r3, #28
 80004f0:	d4fa      	bmi.n	80004e8 <XMC_SCU_HIB_SetStandbyClockSource>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <XMC_SCU_HIB_SetStandbyClockSource+0x1c>)
 80004f4:	68d3      	ldr	r3, [r2, #12]
 80004f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004fa:	4318      	orrs	r0, r3
 80004fc:	60d0      	str	r0, [r2, #12]
 80004fe:	4770      	bx	lr
 8000500:	50004000 	.word	0x50004000
 8000504:	50004300 	.word	0x50004300

08000508 <XMC_SCU_CLOCK_SetSystemClockDivider>:
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <XMC_SCU_CLOCK_SetSystemClockDivider+0x10>)
 800050a:	68d3      	ldr	r3, [r2, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800050c:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800050e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000512:	4303      	orrs	r3, r0
 8000514:	60d3      	str	r3, [r2, #12]
 8000516:	4770      	bx	lr
 8000518:	50004600 	.word	0x50004600

0800051c <XMC_SCU_CLOCK_SetCcuClockDivider>:
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <XMC_SCU_CLOCK_SetCcuClockDivider+0x10>)
 800051e:	6a13      	ldr	r3, [r2, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000520:	3801      	subs	r0, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000522:	f023 0301 	bic.w	r3, r3, #1
 8000526:	4303      	orrs	r3, r0
 8000528:	6213      	str	r3, [r2, #32]
 800052a:	4770      	bx	lr
 800052c:	50004600 	.word	0x50004600

08000530 <XMC_SCU_CLOCK_SetCpuClockDivider>:
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <XMC_SCU_CLOCK_SetCpuClockDivider+0x10>)
 8000532:	6913      	ldr	r3, [r2, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000534:	3801      	subs	r0, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000536:	f023 0301 	bic.w	r3, r3, #1
 800053a:	4303      	orrs	r3, r0
 800053c:	6113      	str	r3, [r2, #16]
 800053e:	4770      	bx	lr
 8000540:	50004600 	.word	0x50004600

08000544 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x10>)
 8000546:	6953      	ldr	r3, [r2, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000548:	3801      	subs	r0, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	4303      	orrs	r3, r0
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4770      	bx	lr
 8000554:	50004600 	.word	0x50004600

08000558 <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 800055a:	6993      	ldr	r3, [r2, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800055c:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800055e:	f023 0307 	bic.w	r3, r3, #7
 8000562:	4303      	orrs	r3, r0
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4770      	bx	lr
 8000568:	50004600 	.word	0x50004600

0800056c <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 800056e:	69d3      	ldr	r3, [r2, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000570:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000572:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000576:	4303      	orrs	r3, r0
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4770      	bx	lr
 800057c:	50004600 	.word	0x50004600

08000580 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 8000582:	6a53      	ldr	r3, [r2, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000584:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800058a:	4303      	orrs	r3, r0
 800058c:	6253      	str	r3, [r2, #36]	; 0x24
 800058e:	4770      	bx	lr
 8000590:	50004600 	.word	0x50004600

08000594 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <XMC_SCU_CLOCK_EnableClock+0x8>)
 8000596:	6058      	str	r0, [r3, #4]
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	50004600 	.word	0x50004600

080005a0 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <XMC_SCU_CLOCK_StartUsbPll+0x40>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	f042 0201 	orr.w	r2, r2, #1
 80005a8:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005aa:	695a      	ldr	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80005ac:	3801      	subs	r0, #1

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005ae:	3901      	subs	r1, #1
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80005b0:	0600      	lsls	r0, r0, #24
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005b2:	f042 0210 	orr.w	r2, r2, #16

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005b6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005ba:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005bc:	6159      	str	r1, [r3, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005c4:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	f022 0210 	bic.w	r2, r2, #16
 80005cc:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005d4:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80005d6:	691a      	ldr	r2, [r3, #16]
 80005d8:	0752      	lsls	r2, r2, #29
 80005da:	d5fc      	bpl.n	80005d6 <XMC_SCU_CLOCK_StartUsbPll+0x36>
  {
    /* wait for PLL Lock */
  }

}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	50004710 	.word	0x50004710

080005e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80005e4:	b510      	push	{r4, lr}
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80005e6:	4c0b      	ldr	r4, [pc, #44]	; (8000614 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x30>)
 80005e8:	6863      	ldr	r3, [r4, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80005ea:	2801      	cmp	r0, #1

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	6063      	str	r3, [r4, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80005f2:	d10a      	bne.n	800060a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x26>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80005f4:	6863      	ldr	r3, [r4, #4]
 80005f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005fa:	6063      	str	r3, [r4, #4]
    XMC_SCU_lDelay(100UL);
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f7ff fef9 	bl	80003f4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000602:	6863      	ldr	r3, [r4, #4]
 8000604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000608:	6063      	str	r3, [r4, #4]
  }

  XMC_SCU_lDelay(100UL);
 800060a:	2064      	movs	r0, #100	; 0x64
}
 800060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
  }

  XMC_SCU_lDelay(100UL);
 8000610:	f7ff bef0 	b.w	80003f4 <XMC_SCU_lDelay>
 8000614:	50004710 	.word	0x50004710

08000618 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <XMC_SCU_HIB_EnableHibernateDomain+0x2c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	07d2      	lsls	r2, r2, #31
 800061e:	d504      	bpl.n	800062a <XMC_SCU_HIB_EnableHibernateDomain+0x12>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <XMC_SCU_HIB_EnableHibernateDomain+0x30>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	0590      	lsls	r0, r2, #22
 8000626:	d406      	bmi.n	8000636 <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
 8000628:	4770      	bx	lr
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 800062a:	2201      	movs	r2, #1
 800062c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	07d1      	lsls	r1, r2, #31
 8000632:	d5fc      	bpl.n	800062e <XMC_SCU_HIB_EnableHibernateDomain+0x16>
 8000634:	e7f4      	b.n	8000620 <XMC_SCU_HIB_EnableHibernateDomain+0x8>
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063a:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	0592      	lsls	r2, r2, #22
 8000640:	d4fc      	bmi.n	800063c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
 8000642:	4770      	bx	lr
 8000644:	50004200 	.word	0x50004200
 8000648:	50004400 	.word	0x50004400

0800064c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x10>)
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	f080 0008 	eor.w	r0, r0, #8
}
 8000654:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	50004300 	.word	0x50004300

08000660 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 8000662:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000666:	60da      	str	r2, [r3, #12]
/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 800066a:	69d1      	ldr	r1, [r2, #28]
 800066c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000670:	61d1      	str	r1, [r2, #28]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000672:	6859      	ldr	r1, [r3, #4]
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000674:	0208      	lsls	r0, r1, #8
 8000676:	d5fc      	bpl.n	8000672 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x12>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000678:	490a      	ldr	r1, [pc, #40]	; (80006a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 800067a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800067e:	60c8      	str	r0, [r1, #12]
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000680:	2108      	movs	r1, #8
 8000682:	6051      	str	r1, [r2, #4]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000684:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000686:	0391      	lsls	r1, r2, #14
 8000688:	d5fc      	bpl.n	8000684 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x24>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 800068c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000690:	60d1      	str	r1, [r2, #12]
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000692:	4905      	ldr	r1, [pc, #20]	; (80006a8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 8000694:	68ca      	ldr	r2, [r1, #12]
 8000696:	f042 0208 	orr.w	r2, r2, #8
 800069a:	60ca      	str	r2, [r1, #12]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 800069c:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 800069e:	0312      	lsls	r2, r2, #12
 80006a0:	d5fc      	bpl.n	800069c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>
}
 80006a2:	4770      	bx	lr
 80006a4:	50004074 	.word	0x50004074
 80006a8:	50004300 	.word	0x50004300

080006ac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80006ae:	4d0c      	ldr	r5, [pc, #48]	; (80006e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x34>)

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006b0:	4e0c      	ldr	r6, [pc, #48]	; (80006e4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x38>)
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80006b2:	686b      	ldr	r3, [r5, #4]
 80006b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b8:	606b      	str	r3, [r5, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006ba:	6874      	ldr	r4, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80006bc:	f000 fe18 	bl	80012f0 <OSCHP_GetFrequency>
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x3c>)
 80006c2:	fbb0 f0f3 	udiv	r0, r0, r3
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006c6:	f424 2370 	bic.w	r3, r4, #983040	; 0xf0000
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80006ca:	3801      	subs	r0, #1
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80006d4:	6073      	str	r3, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80006d6:	686b      	ldr	r3, [r5, #4]
 80006d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006dc:	606b      	str	r3, [r5, #4]
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	50004710 	.word	0x50004710
 80006e4:	50004700 	.word	0x50004700
 80006e8:	002625a0 	.word	0x002625a0

080006ec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:
}

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x14>)
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	f400 7060 	and.w	r0, r0, #896	; 0x380
}
 80006f4:	f5a0 7360 	sub.w	r3, r0, #896	; 0x380
 80006f8:	4258      	negs	r0, r3
 80006fa:	4158      	adcs	r0, r3
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	50004710 	.word	0x50004710

08000704 <XMC_SCU_CLOCK_EnableSystemPll>:
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <XMC_SCU_CLOCK_EnableSystemPll+0x10>)
 8000706:	6853      	ldr	r3, [r2, #4]
 8000708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800070c:	f023 0302 	bic.w	r3, r3, #2
 8000710:	6053      	str	r3, [r2, #4]
 8000712:	4770      	bx	lr
 8000714:	50004710 	.word	0x50004710

08000718 <XMC_SCU_CLOCK_DisableSystemPll>:
}

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <XMC_SCU_CLOCK_DisableSystemPll+0x10>)
 800071a:	6853      	ldr	r3, [r2, #4]
 800071c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6053      	str	r3, [r2, #4]
 8000726:	4770      	bx	lr
 8000728:	50004710 	.word	0x50004710

0800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800072c:	4a05      	ldr	r2, [pc, #20]	; (8000744 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x18>)
 800072e:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000730:	3801      	subs	r0, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000732:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000736:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800073a:	6093      	str	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 800073c:	2032      	movs	r0, #50	; 0x32
 800073e:	f7ff be59 	b.w	80003f4 <XMC_SCU_lDelay>
 8000742:	bf00      	nop
 8000744:	50004710 	.word	0x50004710

08000748 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800074c:	460c      	mov	r4, r1
 800074e:	4605      	mov	r5, r0
 8000750:	4690      	mov	r8, r2
 8000752:	461f      	mov	r7, r3
 8000754:	9e06      	ldr	r6, [sp, #24]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000756:	f7ff fea7 	bl	80004a8 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800075a:	2c01      	cmp	r4, #1
 800075c:	4c31      	ldr	r4, [pc, #196]	; (8000824 <XMC_SCU_CLOCK_StartSystemPll+0xdc>)
 800075e:	d152      	bne.n	8000806 <XMC_SCU_CLOCK_StartSystemPll+0xbe>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000760:	b935      	cbnz	r5, 8000770 <XMC_SCU_CLOCK_StartSystemPll+0x28>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000762:	f000 fdc5 	bl	80012f0 <OSCHP_GetFrequency>
 8000766:	4d30      	ldr	r5, [pc, #192]	; (8000828 <XMC_SCU_CLOCK_StartSystemPll+0xe0>)
 8000768:	fbb0 f0f5 	udiv	r0, r0, r5
 800076c:	0580      	lsls	r0, r0, #22
 800076e:	e001      	b.n	8000774 <XMC_SCU_CLOCK_StartSystemPll+0x2c>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000770:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000774:	6863      	ldr	r3, [r4, #4]
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6063      	str	r3, [r4, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 800077c:	6863      	ldr	r3, [r4, #4]
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6063      	str	r3, [r4, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000784:	68a1      	ldr	r1, [r4, #8]
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <XMC_SCU_CLOCK_StartSystemPll+0xe4>)
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000788:	f108 32ff 	add.w	r2, r8, #4294967295

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800078c:	400b      	ands	r3, r1
 800078e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000792:	1e7a      	subs	r2, r7, #1
 8000794:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000798:	4378      	muls	r0, r7
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800079a:	2318      	movs	r3, #24
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800079c:	fbb0 f5f8 	udiv	r5, r0, r8
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80007a0:	fbb5 f3f3 	udiv	r3, r5, r3
 80007a4:	0d9b      	lsrs	r3, r3, #22
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80007a6:	3b01      	subs	r3, #1

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80007a8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80007ac:	60a3      	str	r3, [r4, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80007ae:	6863      	ldr	r3, [r4, #4]
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	6063      	str	r3, [r4, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80007b6:	6863      	ldr	r3, [r4, #4]
 80007b8:	f023 0310 	bic.w	r3, r3, #16
 80007bc:	6063      	str	r3, [r4, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80007be:	6863      	ldr	r3, [r4, #4]
 80007c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c4:	6063      	str	r3, [r4, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <XMC_SCU_CLOCK_StartSystemPll+0xdc>)
 80007ca:	0759      	lsls	r1, r3, #29
 80007cc:	d5fb      	bpl.n	80007c6 <XMC_SCU_CLOCK_StartSystemPll+0x7e>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80007ce:	6853      	ldr	r3, [r2, #4]
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	07da      	lsls	r2, r3, #31
 80007da:	d4fc      	bmi.n	80007d6 <XMC_SCU_CLOCK_StartSystemPll+0x8e>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80007dc:	203c      	movs	r0, #60	; 0x3c
 80007de:	fbb5 f0f0 	udiv	r0, r5, r0
 80007e2:	0d80      	lsrs	r0, r0, #22
    if (kdiv < kdiv_temp)
 80007e4:	4286      	cmp	r6, r0
 80007e6:	d201      	bcs.n	80007ec <XMC_SCU_CLOCK_StartSystemPll+0xa4>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80007e8:	f7ff ffa0 	bl	800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80007ec:	205a      	movs	r0, #90	; 0x5a
 80007ee:	fbb5 f0f0 	udiv	r0, r5, r0
 80007f2:	0d80      	lsrs	r0, r0, #22
    if (kdiv < kdiv_temp)
 80007f4:	4286      	cmp	r6, r0
 80007f6:	d201      	bcs.n	80007fc <XMC_SCU_CLOCK_StartSystemPll+0xb4>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80007f8:	f7ff ff98 	bl	800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80007fc:	4630      	mov	r0, r6
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 80007fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (kdiv < kdiv_temp)
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000802:	f7ff bf93 	b.w	800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000806:	68a3      	ldr	r3, [r4, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000808:	3e01      	subs	r6, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800080a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800080e:	431e      	orrs	r6, r3
 8000810:	60a6      	str	r6, [r4, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000812:	6863      	ldr	r3, [r4, #4]
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6063      	str	r3, [r4, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	07db      	lsls	r3, r3, #31
 800081e:	d5fc      	bpl.n	800081a <XMC_SCU_CLOCK_StartSystemPll+0xd2>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000824:	50004710 	.word	0x50004710
 8000828:	000f4240 	.word	0x000f4240
 800082c:	f08080ff 	.word	0xf08080ff

08000830 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000832:	4604      	mov	r4, r0
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fe19 	bl	800046c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800083a:	f7ff feed 	bl	8000618 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800083e:	79e3      	ldrb	r3, [r4, #7]
 8000840:	b91b      	cbnz	r3, 800084a <XMC_SCU_CLOCK_Init+0x1a>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000842:	7a60      	ldrb	r0, [r4, #9]
 8000844:	f7ff fe50 	bl	80004e8 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000848:	e006      	b.n	8000858 <XMC_SCU_CLOCK_Init+0x28>

  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800084a:	f7ff ff09 	bl	8000660 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800084e:	f7ff fefd 	bl	800064c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000852:	2800      	cmp	r0, #0
 8000854:	d0fb      	beq.n	800084e <XMC_SCU_CLOCK_Init+0x1e>
 8000856:	e7f4      	b.n	8000842 <XMC_SCU_CLOCK_Init+0x12>
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <XMC_SCU_CLOCK_Init+0x98>)
 800085a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
  while (XMC_SCU_GetMirrorStatus() != 0)
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1fa      	bne.n	8000858 <XMC_SCU_CLOCK_Init+0x28>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000862:	7a20      	ldrb	r0, [r4, #8]
 8000864:	f7ff febe 	bl	80005e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000868:	7c20      	ldrb	r0, [r4, #16]
 800086a:	f7ff fe4d 	bl	8000508 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800086e:	7c60      	ldrb	r0, [r4, #17]
 8000870:	f7ff fe5e 	bl	8000530 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000874:	7ca0      	ldrb	r0, [r4, #18]
 8000876:	f7ff fe51 	bl	800051c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800087a:	7ce0      	ldrb	r0, [r4, #19]
 800087c:	f7ff fe62 	bl	8000544 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000880:	79a3      	ldrb	r3, [r4, #6]
 8000882:	b923      	cbnz	r3, 800088e <XMC_SCU_CLOCK_Init+0x5e>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000884:	78e3      	ldrb	r3, [r4, #3]
 8000886:	b94b      	cbnz	r3, 800089c <XMC_SCU_CLOCK_Init+0x6c>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000888:	f7ff ff46 	bl	8000718 <XMC_SCU_CLOCK_DisableSystemPll>
 800088c:	e010      	b.n	80008b0 <XMC_SCU_CLOCK_Init+0x80>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800088e:	f7ff ff0d 	bl	80006ac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000892:	f7ff ff2b 	bl	80006ec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000896:	2800      	cmp	r0, #0
 8000898:	d0fb      	beq.n	8000892 <XMC_SCU_CLOCK_Init+0x62>
 800089a:	e7f3      	b.n	8000884 <XMC_SCU_CLOCK_Init+0x54>
    XMC_SCU_CLOCK_DisableSystemPll();
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800089c:	f7ff ff32 	bl	8000704 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80008a0:	78a5      	ldrb	r5, [r4, #2]
 80008a2:	88a0      	ldrh	r0, [r4, #4]
 80008a4:	78e1      	ldrb	r1, [r4, #3]
 80008a6:	7862      	ldrb	r2, [r4, #1]
 80008a8:	7823      	ldrb	r3, [r4, #0]
 80008aa:	9500      	str	r5, [sp, #0]
 80008ac:	f7ff ff4c 	bl	8000748 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80008b0:	68e0      	ldr	r0, [r4, #12]
 80008b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80008b6:	d101      	bne.n	80008bc <XMC_SCU_CLOCK_Init+0x8c>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80008b8:	f7ff fdd8 	bl	800046c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
}
 80008bc:	b003      	add	sp, #12
 80008be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
 80008c2:	f7ff bcf7 	b.w	80002b4 <SystemCoreClockUpdate>
 80008c6:	bf00      	nop
 80008c8:	50004000 	.word	0x50004000

080008cc <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80008cc:	b510      	push	{r4, lr}
 80008ce:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80008d0:	2010      	movs	r0, #16
 80008d2:	f7ff fe5f 	bl	8000594 <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <XMC_CCU4_EnableModule+0x3c>)
 80008d8:	429c      	cmp	r4, r3
 80008da:	d101      	bne.n	80008e0 <XMC_CCU4_EnableModule+0x14>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80008dc:	2004      	movs	r0, #4
 80008de:	e00d      	b.n	80008fc <XMC_CCU4_EnableModule+0x30>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <XMC_CCU4_EnableModule+0x40>)
 80008e2:	429c      	cmp	r4, r3
 80008e4:	d101      	bne.n	80008ea <XMC_CCU4_EnableModule+0x1e>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80008e6:	2008      	movs	r0, #8
 80008e8:	e008      	b.n	80008fc <XMC_CCU4_EnableModule+0x30>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <XMC_CCU4_EnableModule+0x44>)
 80008ec:	429c      	cmp	r4, r3
 80008ee:	d101      	bne.n	80008f4 <XMC_CCU4_EnableModule+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80008f0:	2010      	movs	r0, #16
 80008f2:	e003      	b.n	80008fc <XMC_CCU4_EnableModule+0x30>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <XMC_CCU4_EnableModule+0x48>)
 80008f6:	429c      	cmp	r4, r3
 80008f8:	d104      	bne.n	8000904 <XMC_CCU4_EnableModule+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80008fa:	4807      	ldr	r0, [pc, #28]	; (8000918 <XMC_CCU4_EnableModule+0x4c>)
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
 80008fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000900:	f7ff bd8e 	b.w	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	4000c000 	.word	0x4000c000
 800090c:	40010000 	.word	0x40010000
 8000910:	40014000 	.word	0x40014000
 8000914:	48004000 	.word	0x48004000
 8000918:	10000001 	.word	0x10000001

0800091c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 800091c:	b538      	push	{r3, r4, r5, lr}
 800091e:	4604      	mov	r4, r0
 8000920:	460d      	mov	r5, r1
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000922:	f7ff ffd3 	bl	80008cc <XMC_CCU4_EnableModule>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092a:	60e3      	str	r3, [r4, #12]
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 800092c:	6823      	ldr	r3, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800092e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000932:	ea43 3185 	orr.w	r1, r3, r5, lsl #14
  
  module->GCTRL = gctrl;
 8000936:	6021      	str	r1, [r4, #0]
 8000938:	bd38      	pop	{r3, r4, r5, pc}

0800093a <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800093a:	680b      	ldr	r3, [r1, #0]
 800093c:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800093e:	794b      	ldrb	r3, [r1, #5]
 8000940:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000944:	051b      	lsls	r3, r3, #20
 8000946:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000948:	790b      	ldrb	r3, [r1, #4]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000950:	794b      	ldrb	r3, [r1, #5]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000958:	794b      	ldrb	r3, [r1, #5]
 800095a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800095e:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000960:	790b      	ldrb	r3, [r1, #4]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000966:	4770      	bx	lr

08000968 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000968:	2909      	cmp	r1, #9
 800096a:	b530      	push	{r4, r5, lr}
 800096c:	bf9c      	itt	ls
 800096e:	4c09      	ldrls	r4, [pc, #36]	; (8000994 <XMC_CCU4_SLICE_SetInterruptNode+0x2c>)
 8000970:	4d09      	ldrls	r5, [pc, #36]	; (8000998 <XMC_CCU4_SLICE_SetInterruptNode+0x30>)

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000972:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 8000976:	bf99      	ittee	ls
 8000978:	5c64      	ldrbls	r4, [r4, r1]
 800097a:	f835 1011 	ldrhls.w	r1, [r5, r1, lsl #1]
 800097e:	f44f 5140 	movhi.w	r1, #12288	; 0x3000
 8000982:	240c      	movhi	r4, #12
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
 8000984:	ea23 0301 	bic.w	r3, r3, r1
  srs |= (uint32_t)sr << pos;
 8000988:	40a2      	lsls	r2, r4
 800098a:	431a      	orrs	r2, r3
  slice->SRS = srs;
 800098c:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 8000990:	bd30      	pop	{r4, r5, pc}
 8000992:	bf00      	nop
 8000994:	0800172c 	.word	0x0800172c
 8000998:	08001736 	.word	0x08001736

0800099c <XMC_GPIO_SetHardwareControl>:
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800099c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800099e:	0049      	lsls	r1, r1, #1
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80009a0:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80009a2:	2403      	movs	r4, #3
 80009a4:	408c      	lsls	r4, r1
 80009a6:	ea23 0304 	bic.w	r3, r3, r4
 80009aa:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80009ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80009ae:	408a      	lsls	r2, r1
 80009b0:	4313      	orrs	r3, r2
 80009b2:	6743      	str	r3, [r0, #116]	; 0x74
 80009b4:	bd10      	pop	{r4, pc}

080009b6 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 80009b6:	b570      	push	{r4, r5, r6, lr}
 80009b8:	460e      	mov	r6, r1
 80009ba:	4604      	mov	r4, r0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 80009bc:	f000 f912 	bl	8000be4 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 80009c0:	7a35      	ldrb	r5, [r6, #8]
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
 80009c2:	7933      	ldrb	r3, [r6, #4]
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80009c4:	6831      	ldr	r1, [r6, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
  
  if(config->oversampling != 0U)
 80009c6:	2d00      	cmp	r5, #0
  {
    oversampling = (uint32_t)config->oversampling;
 80009c8:	bf08      	it	eq
 80009ca:	2510      	moveq	r5, #16
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80009cc:	4620      	mov	r0, r4
 80009ce:	462a      	mov	r2, r5
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
 80009d0:	b113      	cbz	r3, 80009d8 <XMC_UART_CH_Init+0x22>
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80009d2:	f000 f88b 	bl	8000aec <XMC_USIC_CH_SetBaudrateEx>
 80009d6:	e001      	b.n	80009dc <XMC_UART_CH_Init+0x26>
  }
  else
  {
    /* Fractional divider mode */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80009d8:	f000 f84a 	bl	8000a70 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80009dc:	79f3      	ldrb	r3, [r6, #7]
 80009de:	3b01      	subs	r3, #1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80009e6:	086d      	lsrs	r5, r5, #1
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	3501      	adds	r5, #1
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80009ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80009f2:	63e3      	str	r3, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80009f4:	7973      	ldrb	r3, [r6, #5]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	061b      	lsls	r3, r3, #24
 80009fa:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80009fe:	6363      	str	r3, [r4, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000a00:	79b3      	ldrb	r3, [r6, #6]
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000a02:	6b62      	ldr	r2, [r4, #52]	; 0x34
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000a04:	b903      	cbnz	r3, 8000a08 <XMC_UART_CH_Init+0x52>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000a06:	7973      	ldrb	r3, [r6, #5]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000a0e:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8000a10:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a14:	63a3      	str	r3, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000a1c:	8973      	ldrh	r3, [r6, #10]
 8000a1e:	6423      	str	r3, [r4, #64]	; 0x40
 8000a20:	bd70      	pop	{r4, r5, r6, pc}

08000a22 <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8000a22:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000a26:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000a2a:	d108      	bne.n	8000a3e <XMC_UART_CH_Transmit+0x1c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000a2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000a2e:	061b      	lsls	r3, r3, #24
 8000a30:	d4fc      	bmi.n	8000a2c <XMC_UART_CH_Transmit+0xa>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8000a38:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000a3c:	4770      	bx	lr
  }
  else
  {
    channel->IN[0U] = data;
 8000a3e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000a42:	4770      	bx	lr

08000a44 <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000a44:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000a48:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint16_t)channel->RBUF;
 8000a4c:	bf0c      	ite	eq
 8000a4e:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000a50:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000a54:	b280      	uxth	r0, r0
  }

  return retval;
}
 8000a56:	4770      	bx	lr

08000a58 <XMC_USIC_Enable.part.0>:
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
 8000a58:	b508      	push	{r3, lr}
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
#endif 
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <XMC_USIC_Enable.part.0+0x14>)
 8000a5c:	f7ff fce0 	bl	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <XMC_USIC_Enable.part.0+0x14>)
 8000a62:	f7ff fce7 	bl	8000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d1fa      	bne.n	8000a60 <XMC_USIC_Enable.part.0+0x8>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8000a6a:	bd08      	pop	{r3, pc}
 8000a6c:	10000080 	.word	0x10000080

08000a70 <XMC_USIC_CH_SetBaudrate>:
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000a70:	2963      	cmp	r1, #99	; 0x63
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a76:	4605      	mov	r5, r0
 8000a78:	460c      	mov	r4, r1
 8000a7a:	4616      	mov	r6, r2
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000a7c:	d930      	bls.n	8000ae0 <XMC_USIC_CH_SetBaudrate+0x70>
 8000a7e:	b37a      	cbz	r2, 8000ae0 <XMC_USIC_CH_SetBaudrate+0x70>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000a80:	f7ff fce8 	bl	8000454 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8000a84:	2164      	movs	r1, #100	; 0x64
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
 8000a86:	f240 3cff 	movw	ip, #1023	; 0x3ff
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000a8a:	fbb0 fef1 	udiv	lr, r0, r1
    rate = rate / 100U;
 8000a8e:	fbb4 f4f1 	udiv	r4, r4, r1

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
 8000a92:	2101      	movs	r1, #1
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8000a94:	4374      	muls	r4, r6
 8000a96:	ebce 278e 	rsb	r7, lr, lr, lsl #10
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
 8000a9a:	460a      	mov	r2, r1
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000a9c:	4660      	mov	r0, ip
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8000a9e:	fbb7 f3f4 	udiv	r3, r7, r4
      pdiv_int = pdiv >> 10U;
 8000aa2:	ea4f 2893 	mov.w	r8, r3, lsr #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000aa6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8000aaa:	d206      	bcs.n	8000aba <XMC_USIC_CH_SetBaudrate+0x4a>

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
 8000aac:	f3c3 0309 	ubfx	r3, r3, #0, #10

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000ab0:	4563      	cmp	r3, ip
 8000ab2:	bf3e      	ittt	cc
 8000ab4:	469c      	movcc	ip, r3
 8000ab6:	4641      	movcc	r1, r8
 8000ab8:	4602      	movcc	r2, r0

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000aba:	3801      	subs	r0, #1
 8000abc:	ebce 0707 	rsb	r7, lr, r7
 8000ac0:	d1ed      	bne.n	8000a9e <XMC_USIC_CH_SetBaudrate+0x2e>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8000ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ac6:	612a      	str	r2, [r5, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000ac8:	696a      	ldr	r2, [r5, #20]
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <XMC_USIC_CH_SetBaudrate+0x78>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000acc:	3e01      	subs	r6, #1
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000ace:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8000ad0:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8000ad4:	3901      	subs	r1, #1

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000ada:	616b      	str	r3, [r5, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8000adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8000ae0:	2001      	movs	r0, #1
  }
  
  return status;
}
 8000ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ae6:	bf00      	nop
 8000ae8:	fc0080ef 	.word	0xfc0080ef

08000aec <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000af0:	460f      	mov	r7, r1
 8000af2:	4690      	mov	r8, r2
 8000af4:	4605      	mov	r5, r0
  uint32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8000af6:	f7ff fcad 	bl	8000454 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
  uint32_t brg_clock = rate * oversampling;
 8000afa:	fb08 f207 	mul.w	r2, r8, r7
  uint32_t actual_rate_upper;
  uint32_t actual_rate_lower;
  XMC_USIC_CH_STATUS_t status;
  uint32_t pdiv = 1;

  if (peripheral_clock > brg_clock)
 8000afe:	4290      	cmp	r0, r2
 8000b00:	d937      	bls.n	8000b72 <XMC_USIC_CH_SetBaudrateEx+0x86>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8000b02:	fbb0 f3f2 	udiv	r3, r0, r2
 8000b06:	0051      	lsls	r1, r2, #1
  uint32_t brg_clock = rate * oversampling;
  uint32_t divider_step;
  uint32_t actual_rate_upper;
  uint32_t actual_rate_lower;
  XMC_USIC_CH_STATUS_t status;
  uint32_t pdiv = 1;
 8000b08:	2601      	movs	r6, #1

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8000b0a:	f240 34fe 	movw	r4, #1022	; 0x3fe
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	d904      	bls.n	8000b1c <XMC_USIC_CH_SetBaudrateEx+0x30>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8000b12:	fbb0 f3f1 	udiv	r3, r0, r1
  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
    {
      pdiv++;
 8000b16:	3601      	adds	r6, #1
 8000b18:	4411      	add	r1, r2
 8000b1a:	e7f6      	b.n	8000b0a <XMC_USIC_CH_SetBaudrateEx+0x1e>
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	fb08 f406 	mul.w	r4, r8, r6
 8000b22:	fb03 f106 	mul.w	r1, r3, r6
 8000b26:	4354      	muls	r4, r2
 8000b28:	fbb0 f4f4 	udiv	r4, r0, r4

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8000b2c:	1b3c      	subs	r4, r7, r4
 8000b2e:	2c00      	cmp	r4, #0
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8000b30:	fb08 f101 	mul.w	r1, r8, r1
 8000b34:	fbb0 f0f1 	udiv	r0, r0, r1
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8000b38:	eba7 0700 	sub.w	r7, r7, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	4264      	neglt	r4, r4
 8000b40:	2f00      	cmp	r7, #0
 8000b42:	bfb8      	it	lt
 8000b44:	427f      	neglt	r7, r7
    {
      divider_step += 1;
 8000b46:	42bc      	cmp	r4, r7
 8000b48:	bfb8      	it	lt
 8000b4a:	4613      	movlt	r3, r2
    }

    divider_step = 1024 - divider_step;
 8000b4c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	612b      	str	r3, [r5, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b56:	696a      	ldr	r2, [r5, #20]
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <XMC_USIC_CH_SetBaudrateEx+0x8c>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000b5a:	f108 38ff 	add.w	r8, r8, #4294967295


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b5e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8000b60:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
 8000b64:	3e01      	subs	r6, #1

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000b66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b6a:	616b      	str	r3, [r5, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8000b72:	2001      	movs	r0, #1
  }

  return status;
}
 8000b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b78:	fc0080ef 	.word	0xfc0080ef

08000b7c <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8000b7c:	b510      	push	{r4, lr}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000b7e:	2307      	movs	r3, #7
 8000b80:	6984      	ldr	r4, [r0, #24]
 8000b82:	408b      	lsls	r3, r1
 8000b84:	ea24 0303 	bic.w	r3, r4, r3
                  (service_request << (uint32_t)interrupt_node));
 8000b88:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	6182      	str	r2, [r0, #24]
 8000b8e:	bd10      	pop	{r4, pc}

08000b90 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8000b90:	b508      	push	{r3, lr}
  if (usic == USIC0)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <XMC_USIC_Enable+0x44>)
 8000b94:	4298      	cmp	r0, r3
 8000b96:	d10a      	bne.n	8000bae <XMC_USIC_Enable+0x1e>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8000b98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b9c:	f7ff fc40 	bl	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8000ba0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ba4:	f7ff fc46 	bl	8000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d1f9      	bne.n	8000ba0 <XMC_USIC_Enable+0x10>
 8000bac:	bd08      	pop	{r3, pc}
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <XMC_USIC_Enable+0x48>)
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	d103      	bne.n	8000bbc <XMC_USIC_Enable+0x2c>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8000bb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000bb8:	f7ff bf4e 	b.w	8000a58 <XMC_USIC_Enable.part.0>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
#endif 
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <XMC_USIC_Enable+0x4c>)
 8000bbe:	4298      	cmp	r0, r3
 8000bc0:	d107      	bne.n	8000bd2 <XMC_USIC_Enable+0x42>
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <XMC_USIC_Enable+0x50>)
 8000bc4:	f7ff fc2c 	bl	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <XMC_USIC_Enable+0x50>)
 8000bca:	f7ff fc33 	bl	8000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d1fa      	bne.n	8000bc8 <XMC_USIC_Enable+0x38>
 8000bd2:	bd08      	pop	{r3, pc}
 8000bd4:	40030008 	.word	0x40030008
 8000bd8:	48020008 	.word	0x48020008
 8000bdc:	48024008 	.word	0x48024008
 8000be0:	10000100 	.word	0x10000100

08000be4 <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <XMC_USIC_CH_Enable+0x54>)
 8000be6:	4298      	cmp	r0, r3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8000be8:	b510      	push	{r4, lr}
 8000bea:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000bec:	d003      	beq.n	8000bf6 <XMC_USIC_CH_Enable+0x12>
 8000bee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d101      	bne.n	8000bfa <XMC_USIC_CH_Enable+0x16>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <XMC_USIC_CH_Enable+0x58>)
 8000bf8:	e011      	b.n	8000c1e <XMC_USIC_CH_Enable+0x3a>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <XMC_USIC_CH_Enable+0x5c>)
 8000bfc:	4298      	cmp	r0, r3
 8000bfe:	d003      	beq.n	8000c08 <XMC_USIC_CH_Enable+0x24>
 8000c00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c04:	4298      	cmp	r0, r3
 8000c06:	d102      	bne.n	8000c0e <XMC_USIC_CH_Enable+0x2a>
 8000c08:	f7ff ff26 	bl	8000a58 <XMC_USIC_Enable.part.0>
 8000c0c:	e009      	b.n	8000c22 <XMC_USIC_CH_Enable+0x3e>
  {
    XMC_USIC_Enable(XMC_USIC1);
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <XMC_USIC_CH_Enable+0x60>)
 8000c10:	4298      	cmp	r0, r3
 8000c12:	d003      	beq.n	8000c1c <XMC_USIC_CH_Enable+0x38>
 8000c14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c18:	4298      	cmp	r0, r3
 8000c1a:	d102      	bne.n	8000c22 <XMC_USIC_CH_Enable+0x3e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <XMC_USIC_CH_Enable+0x64>)
 8000c1e:	f7ff ffb7 	bl	8000b90 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8000c22:	2303      	movs	r3, #3
 8000c24:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8000c26:	68e3      	ldr	r3, [r4, #12]
 8000c28:	07db      	lsls	r3, r3, #31
 8000c2a:	d5fc      	bpl.n	8000c26 <XMC_USIC_CH_Enable+0x42>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8000c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c2e:	f023 030f 	bic.w	r3, r3, #15
 8000c32:	6423      	str	r3, [r4, #64]	; 0x40
 8000c34:	bd10      	pop	{r4, pc}
 8000c36:	bf00      	nop
 8000c38:	40030000 	.word	0x40030000
 8000c3c:	40030008 	.word	0x40030008
 8000c40:	48020000 	.word	0x48020000
 8000c44:	48024000 	.word	0x48024000
 8000c48:	48024008 	.word	0x48024008

08000c4c <XMC_VADC_GLOBAL_EnableModule>:
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff bbe7 	b.w	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>

08000c52 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8000c52:	b538      	push	{r3, r4, r5, lr}
 8000c54:	460d      	mov	r5, r1
 8000c56:	4604      	mov	r4, r0
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8000c58:	f7ff fff8 	bl	8000c4c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8000c5c:	696b      	ldr	r3, [r5, #20]
 8000c5e:	6023      	str	r3, [r4, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8000c60:	686b      	ldr	r3, [r5, #4]
 8000c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c66:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8000c6a:	68ab      	ldr	r3, [r5, #8]
 8000c6c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8000c70:	68eb      	ldr	r3, [r5, #12]
 8000c72:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8000c76:	692b      	ldr	r3, [r5, #16]
 8000c78:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8000c7c:	682b      	ldr	r3, [r5, #0]
 8000c7e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8000c82:	bd38      	pop	{r3, r4, r5, pc}

08000c84 <XMC_VADC_GLOBAL_InputClassInit>:
}

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8000c84:	3328      	adds	r3, #40	; 0x28
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8000c86:	b912      	cbnz	r2, 8000c8e <XMC_VADC_GLOBAL_InputClassInit+0xa>
  {
#endif
	XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8000c88:	f240 721f 	movw	r2, #1823	; 0x71f
 8000c8c:	e000      	b.n	8000c90 <XMC_VADC_GLOBAL_InputClassInit+0xc>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8000c8e:	4a02      	ldr	r2, [pc, #8]	; (8000c98 <XMC_VADC_GLOBAL_InputClassInit+0x14>)
 8000c90:	400a      	ands	r2, r1
 8000c92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8000c96:	4770      	bx	lr
 8000c98:	071f0000 	.word	0x071f0000

08000c9c <XMC_VADC_GLOBAL_StartupCalibration>:
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8000c9c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8000ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8000ca8:	2300      	movs	r3, #0

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8000caa:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <XMC_VADC_GLOBAL_StartupCalibration+0x34>)
 8000cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8000cb0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 8000cb4:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8000cb8:	d005      	beq.n	8000cc6 <XMC_VADC_GLOBAL_StartupCalibration+0x2a>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8000cba:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 8000cbe:	00c9      	lsls	r1, r1, #3
 8000cc0:	d501      	bpl.n	8000cc6 <XMC_VADC_GLOBAL_StartupCalibration+0x2a>
      {
        __NOP();
 8000cc2:	bf00      	nop
 8000cc4:	e7f9      	b.n	8000cba <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
 8000cc6:	3301      	adds	r3, #1

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d1ee      	bne.n	8000caa <XMC_VADC_GLOBAL_StartupCalibration+0xe>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	0800174c 	.word	0x0800174c

08000cd4 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  else
  {
    node = (uint32_t)sr;
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8000cd4:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8000cd8:	f023 030f 	bic.w	r3, r3, #15
 8000cdc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
{
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8000ce0:	2903      	cmp	r1, #3
  {
    node = (uint32_t)sr;
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8000ce2:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8000ce6:	bf88      	it	hi
 8000ce8:	3904      	subhi	r1, #4
  {
    node = (uint32_t)sr;
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8000cea:	4319      	orrs	r1, r3
 8000cec:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
 8000cf0:	4770      	bx	lr

08000cf2 <XMC_VADC_GROUP_InputClassInit>:
}

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8000cf2:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8000cf4:	b942      	cbnz	r2, 8000d08 <XMC_VADC_GROUP_InputClassInit+0x16>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8000cf6:	f001 051f 	and.w	r5, r1, #31
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8000cfa:	261f      	movs	r6, #31
    sample_time      = (uint32_t) config.sample_time_std_conv;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8000cfc:	f3c1 2102 	ubfx	r1, r1, #8, #3
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8000d00:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8000d04:	2708      	movs	r7, #8
 8000d06:	e009      	b.n	8000d1c <XMC_VADC_GROUP_InputClassInit+0x2a>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8000d08:	f3c1 4504 	ubfx	r5, r1, #16, #5
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8000d0c:	f44f 16f8 	mov.w	r6, #2031616	; 0x1f0000
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8000d10:	f3c1 6102 	ubfx	r1, r1, #24, #3
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8000d14:	f04f 6ee0 	mov.w	lr, #117440512	; 0x7000000
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8000d18:	2210      	movs	r2, #16
    sample_time      = (uint32_t) config.sample_time_std_conv;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8000d1a:	2718      	movs	r7, #24
 8000d1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8000d20:	40b9      	lsls	r1, r7
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8000d22:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8000d26:	ea24 040e 	bic.w	r4, r4, lr
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8000d2a:	4321      	orrs	r1, r4
  conv_class &= ~(sample_time_mask);
 8000d2c:	ea21 0106 	bic.w	r1, r1, r6
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8000d30:	4095      	lsls	r5, r2
 8000d32:	4329      	orrs	r1, r5
  group_ptr->ICLASS[set_num] = conv_class;
 8000d34:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 8000d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d3a <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8000d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8000d3c:	2200      	movs	r2, #0
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8000d3e:	460c      	mov	r4, r1
 8000d40:	4605      	mov	r5, r0
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8000d42:	4613      	mov	r3, r2
 8000d44:	6849      	ldr	r1, [r1, #4]
 8000d46:	f7ff ffd4 	bl	8000cf2 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	6861      	ldr	r1, [r4, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2300      	movs	r3, #0
 8000d52:	f7ff ffce 	bl	8000cf2 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8000d56:	4628      	mov	r0, r5
 8000d58:	68a1      	ldr	r1, [r4, #8]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f7ff ffc8 	bl	8000cf2 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8000d62:	2201      	movs	r2, #1
 8000d64:	4613      	mov	r3, r2
 8000d66:	4628      	mov	r0, r5
 8000d68:	68a1      	ldr	r1, [r4, #8]
 8000d6a:	f7ff ffc2 	bl	8000cf2 <XMC_VADC_GROUP_InputClassInit>
 8000d6e:	78a0      	ldrb	r0, [r4, #2]

  group_ptr->ARBCFG = config->g_arbcfg;
 8000d70:	6923      	ldr	r3, [r4, #16]
 8000d72:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8000d76:	f000 061f 	and.w	r6, r0, #31
 8000d7a:	7820      	ldrb	r0, [r4, #0]

  group_ptr->BOUND = config->g_bound;
 8000d7c:	68e3      	ldr	r3, [r4, #12]
 8000d7e:	78e1      	ldrb	r1, [r4, #3]
 8000d80:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8000d84:	f000 0007 	and.w	r0, r0, #7
 8000d88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8000d8c:	f8c5 01f0 	str.w	r0, [r5, #496]	; 0x1f0
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8000d90:	f8d5 21f0 	ldr.w	r2, [r5, #496]	; 0x1f0
 8000d94:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8000d98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d9c:	f3c1 0381 	ubfx	r3, r1, #2, #2
 8000da0:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 8000da4:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8000da8:	ea42 6383 	orr.w	r3, r2, r3, lsl #26
 8000dac:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
 8000db0:	f8c5 31f0 	str.w	r3, [r5, #496]	; 0x1f0
 8000db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000db6 <XMC_VADC_GROUP_SetPowerMode>:
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8000db6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8000dba:	f023 0303 	bic.w	r3, r3, #3
  arbcfg |= (uint32_t)power_mode;
 8000dbe:	4319      	orrs	r1, r3

  group_ptr->ARBCFG = arbcfg;
 8000dc0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000dc4:	4770      	bx	lr
	...

08000dc8 <XMC_VADC_GLOBAL_BackgroundInit>:
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8000dc8:	4a30      	ldr	r2, [pc, #192]	; (8000e8c <XMC_VADC_GLOBAL_BackgroundInit+0xc4>)
 8000dca:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8000dce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8000dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8000dd8:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
 8000ddc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000de0:	f8c2 3484 	str.w	r3, [r2, #1156]	; 0x484
 8000de4:	f8d2 3884 	ldr.w	r3, [r2, #2180]	; 0x884
 8000de8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000dec:	f8c2 3884 	str.w	r3, [r2, #2180]	; 0x884
 8000df0:	f8d2 3c84 	ldr.w	r3, [r2, #3204]	; 0xc84
 8000df4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000df8:	f8c2 3c84 	str.w	r3, [r2, #3204]	; 0xc84
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8000dfc:	780b      	ldrb	r3, [r1, #0]
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8000dfe:	f013 0503 	ands.w	r5, r3, #3
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8000e02:	f3c3 0381 	ubfx	r3, r3, #2, #2
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8000e06:	bf0c      	ite	eq
 8000e08:	2700      	moveq	r7, #0
 8000e0a:	f44f 6700 	movne.w	r7, #2048	; 0x800
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8000e0e:	021a      	lsls	r2, r3, #8
 8000e10:	2400      	movs	r4, #0
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <XMC_VADC_GLOBAL_BackgroundInit+0xc8>)
 8000e14:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 8000e18:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8000e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8000e20:	4313      	orrs	r3, r2
 8000e22:	3401      	adds	r4, #1
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8000e24:	433b      	orrs	r3, r7
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000e26:	2c04      	cmp	r4, #4
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
  
    /* Program the start mode */
    reg |= conv_start_mask;

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8000e28:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8000e2c:	d1f1      	bne.n	8000e12 <XMC_VADC_GLOBAL_BackgroundInit+0x4a>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8000e2e:	684b      	ldr	r3, [r1, #4]
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8000e30:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <XMC_VADC_GLOBAL_BackgroundInit+0xc4>)
 8000e32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8000e3e:	688b      	ldr	r3, [r1, #8]
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8000e48:	2d02      	cmp	r5, #2
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8000e4a:	bf02      	ittt	eq
 8000e4c:	f8d0 3204 	ldreq.w	r3, [r0, #516]	; 0x204
 8000e50:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 8000e54:	f8c0 3204 	streq.w	r3, [r0, #516]	; 0x204
 8000e58:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8000e5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8000e64:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
 8000e68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e6c:	f8c2 3484 	str.w	r3, [r2, #1156]	; 0x484
 8000e70:	f8d2 3884 	ldr.w	r3, [r2, #2180]	; 0x884
 8000e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e78:	f8c2 3884 	str.w	r3, [r2, #2180]	; 0x884
 8000e7c:	f8d2 3c84 	ldr.w	r3, [r2, #3204]	; 0xc84
 8000e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e84:	f8c2 3c84 	str.w	r3, [r2, #3204]	; 0xc84
 8000e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	0800174c 	.word	0x0800174c

08000e94 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8000e94:	b530      	push	{r4, r5, lr}
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8000e96:	2301      	movs	r3, #1
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8000e98:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8000e9c:	408b      	lsls	r3, r1
 8000e9e:	ea25 0403 	bic.w	r4, r5, r3


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8000ea2:	7a13      	ldrb	r3, [r2, #8]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
  ch_assign |= (uint32_t)(prio << ch_num);
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	4323      	orrs	r3, r4
  group_ptr->CHASS = ch_assign;
 8000ea8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8000eac:	f992 3009 	ldrsb.w	r3, [r2, #9]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db19      	blt.n	8000ee8 <XMC_VADC_GROUP_ChannelInit+0x54>
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
 8000eb4:	2901      	cmp	r1, #1
 8000eb6:	d107      	bne.n	8000ec8 <XMC_VADC_GROUP_ChannelInit+0x34>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8000eb8:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8000ebc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000ec0:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  if (config->alias_channel >= (int32_t)0)
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8000ec4:	2508      	movs	r5, #8
 8000ec6:	e007      	b.n	8000ed8 <XMC_VADC_GROUP_ChannelInit+0x44>
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
    }
    else if ((uint32_t)0 == ch_num)
 8000ec8:	b929      	cbnz	r1, 8000ed6 <XMC_VADC_GROUP_ChannelInit+0x42>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8000eca:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8000ece:	f023 031f 	bic.w	r3, r3, #31
 8000ed2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  group_ptr->CHASS = ch_assign;

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
  {
    mask = (uint32_t)0;
 8000ed6:	2500      	movs	r5, #0
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8000ed8:	f992 3009 	ldrsb.w	r3, [r2, #9]
 8000edc:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000ee0:	40ab      	lsls	r3, r5
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8000ee8:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8000eec:	6853      	ldr	r3, [r2, #4]
 8000eee:	4323      	orrs	r3, r4
 8000ef0:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8000ef4:	3180      	adds	r1, #128	; 0x80
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8000efc:	bd30      	pop	{r4, r5, pc}

08000efe <_init>:
  }
}

/* Init */
void _init(void)
{}
 8000efe:	4770      	bx	lr

08000f00 <UART_Init>:
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8000f00:	6843      	ldr	r3, [r0, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	4718      	bx	r3

08000f06 <UART_Transmit>:
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 8000f06:	6843      	ldr	r3, [r0, #4]
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	4604      	mov	r4, r0
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 8000f0c:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8000f10:	2802      	cmp	r0, #2
 8000f12:	d12b      	bne.n	8000f6c <UART_Transmit+0x66>
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)))

  if ((data_ptr != NULL) && (count > 0U))
 8000f14:	b361      	cbz	r1, 8000f70 <UART_Transmit+0x6a>
 8000f16:	b35a      	cbz	r2, 8000f70 <UART_Transmit+0x6a>
  {
    ret_stat = UART_STATUS_BUSY;
    if (handle->runtime->tx_busy == false)
 8000f18:	68a5      	ldr	r5, [r4, #8]
 8000f1a:	7e2e      	ldrb	r6, [r5, #24]
 8000f1c:	bb4e      	cbnz	r6, 8000f72 <UART_Transmit+0x6c>
    {
      handle->runtime->tx_busy = true;
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000f1e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  if ((data_ptr != NULL) && (count > 0U))
  {
    ret_stat = UART_STATUS_BUSY;
    if (handle->runtime->tx_busy == false)
    {
      handle->runtime->tx_busy = true;
 8000f22:	2001      	movs	r0, #1
 8000f24:	7628      	strb	r0, [r5, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000f26:	b123      	cbz	r3, 8000f32 <UART_Transmit+0x2c>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8000f28:	6823      	ldr	r3, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8000f2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f2e:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000f32:	460d      	mov	r5, r1
 8000f34:	188e      	adds	r6, r1, r2
 8000f36:	6863      	ldr	r3, [r4, #4]
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8000f38:	42b5      	cmp	r5, r6
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000f3a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8000f3e:	d00b      	beq.n	8000f58 <UART_Transmit+0x52>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000f40:	b123      	cbz	r3, 8000f4c <UART_Transmit+0x46>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 8000f42:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8000f44:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 8000f48:	04d9      	lsls	r1, r3, #19
 8000f4a:	d4fb      	bmi.n	8000f44 <UART_Transmit+0x3e>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 8000f4c:	6820      	ldr	r0, [r4, #0]
 8000f4e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000f52:	f7ff fd66 	bl	8000a22 <XMC_UART_CH_Transmit>
 8000f56:	e7ee      	b.n	8000f36 <UART_Transmit+0x30>
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000f58:	b123      	cbz	r3, 8000f64 <UART_Transmit+0x5e>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 8000f5a:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8000f5c:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 8000f60:	051b      	lsls	r3, r3, #20
 8000f62:	d5fb      	bpl.n	8000f5c <UART_Transmit+0x56>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
      handle->runtime->tx_busy = false;
 8000f64:	68a3      	ldr	r3, [r4, #8]
 8000f66:	2000      	movs	r0, #0
 8000f68:	7618      	strb	r0, [r3, #24]
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8000f6c:	2004      	movs	r0, #4
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8000f70:	2003      	movs	r0, #3
#endif
  default:
    break;
  }
  return ret_stat;
}
 8000f72:	bd70      	pop	{r4, r5, r6, pc}

08000f74 <UART_Receive>:
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
 8000f74:	6843      	ldr	r3, [r0, #4]
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8000f76:	b570      	push	{r4, r5, r6, lr}
 8000f78:	4604      	mov	r4, r0
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
 8000f7a:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d12d      	bne.n	8000fde <UART_Receive+0x6a>
  uint32_t loc_status;

  XMC_ASSERT("UART_Receive: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if ((data_ptr != NULL) && (count > 0U))
 8000f82:	b371      	cbz	r1, 8000fe2 <UART_Receive+0x6e>
 8000f84:	b36a      	cbz	r2, 8000fe2 <UART_Receive+0x6e>
  {
    ret_stat = UART_STATUS_BUSY;
    if (handle->runtime->rx_busy == false)
 8000f86:	68a5      	ldr	r5, [r4, #8]
 8000f88:	7e6e      	ldrb	r6, [r5, #25]
 8000f8a:	bb5e      	cbnz	r6, 8000fe4 <UART_Receive+0x70>
    {
      handle->runtime->rx_busy = true;
      if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if ((data_ptr != NULL) && (count > 0U))
  {
    ret_stat = UART_STATUS_BUSY;
    if (handle->runtime->rx_busy == false)
    {
      handle->runtime->rx_busy = true;
 8000f90:	2001      	movs	r0, #1
 8000f92:	7668      	strb	r0, [r5, #25]
      if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000f94:	b123      	cbz	r3, 8000fa0 <UART_Receive+0x2c>
      {
        /*Clear the receive FIFO, configure the trigger lime
         * and enable the receive events*/
        XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8000f96:	6823      	ldr	r3, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8000f98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f9c:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
 8000fa0:	460d      	mov	r5, r1
 8000fa2:	188e      	adds	r6, r1, r2
      }
      for (loc_index = 0U; loc_index < count; loc_index++)
 8000fa4:	42b5      	cmp	r5, r6
 8000fa6:	d016      	beq.n	8000fd6 <UART_Receive+0x62>
      {
        /*If receive FIFO is configured, wait for FIFO to get data.*/
        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000fa8:	6863      	ldr	r3, [r4, #4]
 8000faa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	b122      	cbz	r2, 8000fbc <UART_Receive+0x48>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8000fb2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
        {
          /*Wait if FIFO empty*/
          while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8000fb6:	0712      	lsls	r2, r2, #28
 8000fb8:	d4fb      	bmi.n	8000fb2 <UART_Receive+0x3e>
 8000fba:	e006      	b.n	8000fca <UART_Receive+0x56>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 */
__STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return channel->PSR_ASCMode;
 8000fbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        }
        else
        {
          /*Wait for RIF or AIF flag update*/
          loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
          while (!(loc_status & ((uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION |
 8000fbe:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8000fc2:	d0fb      	beq.n	8000fbc <UART_Receive+0x48>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
 8000fc4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000fc8:	64da      	str	r2, [r3, #76]	; 0x4c
           * Both events should not be cleared at once, otherwise if 2 bytes are received, only
           * one byte will be read.*/
          XMC_UART_CH_ClearStatusFlag(handle->channel,
              ((uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | (uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
        }
        data_ptr[loc_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8000fca:	6820      	ldr	r0, [r4, #0]
 8000fcc:	f7ff fd3a 	bl	8000a44 <XMC_UART_CH_GetReceivedData>
 8000fd0:	f805 0b01 	strb.w	r0, [r5], #1
 8000fd4:	e7e6      	b.n	8000fa4 <UART_Receive+0x30>
      }
      ret_stat = UART_STATUS_SUCCESS;
      handle->runtime->rx_busy = false;
 8000fd6:	68a3      	ldr	r3, [r4, #8]
 8000fd8:	2000      	movs	r0, #0
 8000fda:	7658      	strb	r0, [r3, #25]
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8000fde:	2004      	movs	r0, #4
 8000fe0:	bd70      	pop	{r4, r5, r6, pc}
 * either RBUF or OUT register will be read.
 *
 */
static UART_STATUS_t UART_lStartReceivePolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8000fe2:	2003      	movs	r0, #3
#endif
  default:
    break;
  }
  return ret_stat;
}
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000fe8 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8000fe8:	b538      	push	{r3, r4, r5, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 8000fea:	4d16      	ldr	r5, [pc, #88]	; (8001044 <UART_0_init+0x5c>)
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 8000fec:	4c16      	ldr	r4, [pc, #88]	; (8001048 <UART_0_init+0x60>)
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <UART_0_init+0x64>)
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	f7ff f9ba 	bl	800036c <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4915      	ldr	r1, [pc, #84]	; (8001050 <UART_0_init+0x68>)
 8000ffc:	f7ff fcdb 	bl	80009b6 <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001000:	69e3      	ldr	r3, [r4, #28]
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 1U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 5U, &UART_0_tx_pin_config);
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <UART_0_init+0x6c>)
 8001004:	f023 0307 	bic.w	r3, r3, #7
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	61e3      	str	r3, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 800100e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001010:	f023 030f 	bic.w	r3, r3, #15
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6423      	str	r3, [r4, #64]	; 0x40
 800101a:	4628      	mov	r0, r5
 800101c:	2105      	movs	r1, #5
 800101e:	f7ff f9a5 	bl	800036c <XMC_GPIO_Init>

  /*Set service request for receive interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
 8001022:	4620      	mov	r0, r4
 8001024:	2108      	movs	r1, #8
 8001026:	2205      	movs	r2, #5
 8001028:	f7ff fda8 	bl	8000b7c <XMC_USIC_CH_SetInterruptNodePointer>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 800102c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800102e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     5U);
  /*Enable UART standard receive event*/
  XMC_USIC_CH_EnableEvent(XMC_UART0_CH0, XMC_USIC_CH_EVENT_STANDARD_RECEIVE);
  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8001032:	4620      	mov	r0, r4
 8001034:	6423      	str	r3, [r4, #64]	; 0x40
 8001036:	2110      	movs	r1, #16
 8001038:	2200      	movs	r2, #0
 800103a:	f7ff fd9f 	bl	8000b7c <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  return status;
}
 800103e:	2000      	movs	r0, #0
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	bf00      	nop
 8001044:	48028100 	.word	0x48028100
 8001048:	40030000 	.word	0x40030000
 800104c:	08001784 	.word	0x08001784
 8001050:	080017a8 	.word	0x080017a8
 8001054:	0800179c 	.word	0x0800179c

08001058 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
  if ((bool) true == handle_ptr->period_match_enable)
 8001058:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
} /* end of PWM_lCCU4_Init() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 800105c:	b510      	push	{r4, lr}
 800105e:	4604      	mov	r4, r0
  if ((bool) true == handle_ptr->period_match_enable)
 8001060:	b163      	cbz	r3, 800107c <PWM_lCCU4_ConfigInterrupts+0x24>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001062:	6882      	ldr	r2, [r0, #8]
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001064:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8001070:	6880      	ldr	r0, [r0, #8]
 8001072:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8001076:	2100      	movs	r1, #0
 8001078:	f7ff fc76 	bl	8000968 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 800107c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8001080:	b173      	cbz	r3, 80010a0 <PWM_lCCU4_ConfigInterrupts+0x48>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8001082:	68a2      	ldr	r2, [r4, #8]
 8001084:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8001090:	68a0      	ldr	r0, [r4, #8]
 8001092:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8001096:	2102      	movs	r1, #2
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8001098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 800109c:	f7ff bc64 	b.w	8000968 <XMC_CCU4_SLICE_SetInterruptNode>
 80010a0:	bd10      	pop	{r4, pc}

080010a2 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 80010a2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80010a6:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 80010aa:	d10b      	bne.n	80010c4 <PWM_lCCU4_Start+0x22>
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 80010ac:	f890 102e 	ldrb.w	r1, [r0, #46]	; 0x2e
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 80010b0:	6842      	ldr	r2, [r0, #4]
 80010b2:	2301      	movs	r3, #1
 80010b4:	fa03 f101 	lsl.w	r1, r3, r1
 80010b8:	60d1      	str	r1, [r2, #12]
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80010ba:	6882      	ldr	r2, [r0, #8]
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80010bc:	60d3      	str	r3, [r2, #12]

    handle_ptr->state = PWM_STATUS_RUNNING;
 80010be:	2303      	movs	r3, #3
 80010c0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80010c4:	4770      	bx	lr

080010c6 <PWM_Start>:
void PWM_Start(PWM_t *const handle_ptr)
{
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80010c6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80010ca:	b90b      	cbnz	r3, 80010d0 <PWM_Start+0xa>
  {
    PWM_lCCU4_Start(handle_ptr);
 80010cc:	f7ff bfe9 	b.w	80010a2 <PWM_lCCU4_Start>
 80010d0:	4770      	bx	lr

080010d2 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 80010d2:	b570      	push	{r4, r5, r6, lr}
  PWM_STATUS_t status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 80010d4:	f890 6029 	ldrb.w	r6, [r0, #41]	; 0x29
 80010d8:	2e02      	cmp	r6, #2

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 80010da:	4604      	mov	r4, r0
  PWM_STATUS_t status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 80010dc:	d126      	bne.n	800112c <PWM_lCCU4_Init+0x5a>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 80010de:	6800      	ldr	r0, [r0, #0]
 80010e0:	f000 f876 	bl	80011d0 <GLOBAL_CCU4_Init>

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 80010e4:	4605      	mov	r5, r0
 80010e6:	b9f0      	cbnz	r0, 8001126 <PWM_lCCU4_Init+0x54>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80010e8:	68e1      	ldr	r1, [r4, #12]
 80010ea:	68a0      	ldr	r0, [r4, #8]
 80010ec:	f7ff fc25 	bl	800093a <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80010f0:	68a3      	ldr	r3, [r4, #8]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80010f2:	8ba2      	ldrh	r2, [r4, #28]
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80010f6:	68a3      	ldr	r3, [r4, #8]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80010f8:	8b22      	ldrh	r2, [r4, #24]
 80010fa:	63da      	str	r2, [r3, #60]	; 0x3c
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001100:	611a      	str	r2, [r3, #16]

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 8001102:	4620      	mov	r0, r4
 8001104:	f7ff ffa8 	bl	8001058 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8001108:	6920      	ldr	r0, [r4, #16]
 800110a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800110e:	6962      	ldr	r2, [r4, #20]
 8001110:	f7ff f92c 	bl	800036c <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8001114:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
      PWM_lCCU4_ConfigInterrupts(handle_ptr);

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8001118:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 800111c:	b13b      	cbz	r3, 800112e <PWM_lCCU4_Init+0x5c>
      {
        PWM_Start(handle_ptr);
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff ffd1 	bl	80010c6 <PWM_Start>
 8001124:	e003      	b.n	800112e <PWM_lCCU4_Init+0x5c>
      }
      status = PWM_STATUS_SUCCESS;
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8001126:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
 800112a:	e000      	b.n	800112e <PWM_lCCU4_Init+0x5c>
#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 800112c:	2501      	movs	r5, #1
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
    }

  }
  return (status);
} /* end of PWM_lCCU4_Init() api */
 800112e:	4628      	mov	r0, r5
 8001130:	bd70      	pop	{r4, r5, r6, pc}

08001132 <PWM_Init>:
  status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001132:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001136:	b90b      	cbnz	r3, 800113c <PWM_Init+0xa>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 8001138:	f7ff bfcb 	b.w	80010d2 <PWM_lCCU4_Init>
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
}
 800113c:	2001      	movs	r0, #1
 800113e:	4770      	bx	lr

08001140 <INTERRUPT_Init>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <INTERRUPT_Init+0x84>)

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8001142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001144:	68d9      	ldr	r1, [r3, #12]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001146:	7805      	ldrb	r5, [r0, #0]
 8001148:	7842      	ldrb	r2, [r0, #1]
 800114a:	7887      	ldrb	r7, [r0, #2]
 800114c:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	f1c1 0e07 	rsb	lr, r1, #7
 8001154:	f1be 0f06 	cmp.w	lr, #6
 8001158:	bf28      	it	cs
 800115a:	f04f 0e06 	movcs.w	lr, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	b101      	cbz	r1, 8001162 <INTERRUPT_Init+0x22>
 8001160:	3901      	subs	r1, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001162:	2401      	movs	r4, #1
 8001164:	fa04 f301 	lsl.w	r3, r4, r1
 8001168:	3b01      	subs	r3, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116a:	fa04 f40e 	lsl.w	r4, r4, lr
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116e:	ea03 0607 	and.w	r6, r3, r7

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001172:	1e63      	subs	r3, r4, #1
 8001174:	4013      	ands	r3, r2
 8001176:	408b      	lsls	r3, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001178:	b26a      	sxtb	r2, r5
 800117a:	2a00      	cmp	r2, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800117c:	ea43 0306 	orr.w	r3, r3, r6
 8001180:	ea4f 0383 	mov.w	r3, r3, lsl #2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	bfaf      	iteee	ge
 8001186:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	f005 050f 	andlt.w	r5, r5, #15
 800118e:	4a0e      	ldrlt	r2, [pc, #56]	; (80011c8 <INTERRUPT_Init+0x88>)
 8001190:	b2db      	uxtblt	r3, r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	bfa5      	ittet	ge
 8001194:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
 8001198:	b2db      	uxtbge	r3, r3
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	5553      	strblt	r3, [r2, r5]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80011a0:	78c3      	ldrb	r3, [r0, #3]
 80011a2:	b16b      	cbz	r3, 80011c0 <INTERRUPT_Init+0x80>
 80011a4:	7802      	ldrb	r2, [r0, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80011a6:	b253      	sxtb	r3, r2
 80011a8:	2b00      	cmp	r3, #0
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	bfa1      	itttt	ge
 80011ac:	2101      	movge	r1, #1
 80011ae:	f002 021f 	andge.w	r2, r2, #31
 80011b2:	fa01 f202 	lslge.w	r2, r1, r2
 80011b6:	095b      	lsrge	r3, r3, #5
 80011b8:	bfa4      	itt	ge
 80011ba:	4904      	ldrge	r1, [pc, #16]	; (80011cc <INTERRUPT_Init+0x8c>)
 80011bc:	f841 2023 	strge.w	r2, [r1, r3, lsl #2]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
 80011c0:	2000      	movs	r0, #0
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	e000ed14 	.word	0xe000ed14
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <GLOBAL_CCU4_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80011d0:	7b43      	ldrb	r3, [r0, #13]
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80011d2:	b510      	push	{r4, lr}
 80011d4:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80011d6:	b94b      	cbnz	r3, 80011ec <GLOBAL_CCU4_Init+0x1c>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80011d8:	6880      	ldr	r0, [r0, #8]
 80011da:	7b21      	ldrb	r1, [r4, #12]
 80011dc:	f7ff fb9e 	bl	800091c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80011e0:	68a3      	ldr	r3, [r4, #8]
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	60da      	str	r2, [r3, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80011e8:	2301      	movs	r3, #1
 80011ea:	7363      	strb	r3, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 80011ec:	2000      	movs	r0, #0
 80011ee:	bd10      	pop	{r4, pc}

080011f0 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 80011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 80011f2:	7e03      	ldrb	r3, [r0, #24]
 80011f4:	2b02      	cmp	r3, #2
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 80011f6:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 80011f8:	d129      	bne.n	800124e <GLOBAL_ADC_Init+0x5e>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 80011fa:	6940      	ldr	r0, [r0, #20]
 80011fc:	6921      	ldr	r1, [r4, #16]
 80011fe:	f7ff fd28 	bl	8000c52 <XMC_VADC_GLOBAL_Init>
 8001202:	1f27      	subs	r7, r4, #4

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001204:	2600      	movs	r6, #0
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001206:	f857 3f04 	ldr.w	r3, [r7, #4]!
 800120a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800120e:	f7ff fd94 	bl	8000d3a <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2103      	movs	r1, #3
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	f7ff fdcd 	bl	8000db6 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	7a0b      	ldrb	r3, [r1, #8]
 8001220:	b94b      	cbnz	r3, 8001236 <GLOBAL_ADC_Init+0x46>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8001222:	6960      	ldr	r0, [r4, #20]
 8001224:	f106 0510 	add.w	r5, r6, #16

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8001228:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800122c:	2301      	movs	r3, #1
 800122e:	40ab      	lsls	r3, r5
 8001230:	4313      	orrs	r3, r2
 8001232:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001236:	3601      	adds	r6, #1

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8001238:	2300      	movs	r3, #0
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800123a:	2e04      	cmp	r6, #4

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 800123c:	724b      	strb	r3, [r1, #9]
 800123e:	461d      	mov	r5, r3
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001240:	d1e1      	bne.n	8001206 <GLOBAL_ADC_Init+0x16>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8001242:	7e63      	ldrb	r3, [r4, #25]
 8001244:	b113      	cbz	r3, 800124c <GLOBAL_ADC_Init+0x5c>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8001246:	6960      	ldr	r0, [r4, #20]
 8001248:	f7ff fd28 	bl	8000c9c <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 800124c:	7625      	strb	r5, [r4, #24]
  }
  return (handle_ptr->init_state);
}
 800124e:	7e20      	ldrb	r0, [r4, #24]
 8001250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001252 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8001252:	b510      	push	{r4, lr}
 8001254:	4604      	mov	r4, r0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8001256:	1d22      	adds	r2, r4, #4
 8001258:	7c21      	ldrb	r1, [r4, #16]
 800125a:	6800      	ldr	r0, [r0, #0]
 800125c:	f7ff f886 	bl	800036c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8001260:	6820      	ldr	r0, [r4, #0]
 8001262:	7c21      	ldrb	r1, [r4, #16]
 8001264:	7c62      	ldrb	r2, [r4, #17]
 8001266:	f7ff fb99 	bl	800099c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
 800126a:	2000      	movs	r0, #0
 800126c:	bd10      	pop	{r4, pc}
	...

08001270 <SystemCoreSetup>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <SystemCoreSetup+0x68>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <SystemCoreSetup+0x6c>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800127a:	0409      	lsls	r1, r1, #16
 800127c:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 800127e:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001280:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001282:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <SystemCoreSetup+0x70>)
 8001286:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001288:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800128c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800128e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001292:	4814      	ldr	r0, [pc, #80]	; (80012e4 <SystemCoreSetup+0x74>)

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001294:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001298:	f241 0114 	movw	r1, #4116	; 0x1014

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800129c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80012a0:	5842      	ldr	r2, [r0, r1]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80012a2:	f022 020f 	bic.w	r2, r2, #15
  temp |= PMU_FLASH_WS;
 80012a6:	f042 0203 	orr.w	r2, r2, #3
  FLASH0->FCON = temp;
 80012aa:	5042      	str	r2, [r0, r1]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	f022 0210 	bic.w	r2, r2, #16
 80012b2:	615a      	str	r2, [r3, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	f022 0208 	bic.w	r2, r2, #8
 80012ba:	615a      	str	r2, [r3, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80012c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80012cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	05fa0100 	.word	0x05fa0100
 80012e0:	08000000 	.word	0x08000000
 80012e4:	58001000 	.word	0x58001000

080012e8 <CLOCK_XMC4_Init>:
{
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80012e8:	2301      	movs	r3, #1
 80012ea:	7003      	strb	r3, [r0, #0]

  return (status);
}
 80012ec:	2000      	movs	r0, #0
 80012ee:	4770      	bx	lr

080012f0 <OSCHP_GetFrequency>:
#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
}
 80012f0:	4800      	ldr	r0, [pc, #0]	; (80012f4 <OSCHP_GetFrequency+0x4>)
 80012f2:	4770      	bx	lr
 80012f4:	00b71b00 	.word	0x00b71b00

080012f8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80012f8:	b530      	push	{r4, r5, lr}
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80012fa:	4d11      	ldr	r5, [pc, #68]	; (8001340 <SystemCoreClockSetup+0x48>)
 80012fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80012fe:	b087      	sub	sp, #28
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8001300:	ac01      	add	r4, sp, #4
 8001302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8001308:	a801      	add	r0, sp, #4
 800130a:	f7ff fa91 	bl	8000830 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff f8da 	bl	80004c8 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff f8b3 	bl	8000480 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800131a:	2004      	movs	r0, #4
 800131c:	f7ff f91c 	bl	8000558 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8001320:	2120      	movs	r1, #32
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff f93c 	bl	80005a0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff f8b3 	bl	8000494 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff f926 	bl	8000580 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff f919 	bl	800056c <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800133a:	b007      	add	sp, #28
 800133c:	bd30      	pop	{r4, r5, pc}
 800133e:	bf00      	nop
 8001340:	08001884 	.word	0x08001884

08001344 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 8001344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8001346:	7e03      	ldrb	r3, [r0, #24]
 8001348:	2b02      	cmp	r3, #2
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800134a:	4604      	mov	r4, r0
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 800134c:	f040 808b 	bne.w	8001466 <ADC_MEASUREMENT_Init+0x122>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8001350:	68c0      	ldr	r0, [r0, #12]
 8001352:	f7ff ff4d 	bl	80011f0 <GLOBAL_ADC_Init>
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8001356:	68e2      	ldr	r2, [r4, #12]
 8001358:	68a3      	ldr	r3, [r4, #8]
  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800135a:	4605      	mov	r5, r0
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800135c:	6950      	ldr	r0, [r2, #20]
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	4613      	mov	r3, r2
 8001364:	f7ff fc8e 	bl	8000c84 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 8001368:	68e3      	ldr	r3, [r4, #12]
 800136a:	6861      	ldr	r1, [r4, #4]
 800136c:	6958      	ldr	r0, [r3, #20]
 800136e:	f7ff fd2b 	bl	8000dc8 <XMC_VADC_GLOBAL_BackgroundInit>
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
    {
      indexed = handle_ptr->array->channel_array[j];
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	681e      	ldr	r6, [r3, #0]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 8001376:	68b0      	ldr	r0, [r6, #8]
 8001378:	7b71      	ldrb	r1, [r6, #13]
 800137a:	6832      	ldr	r2, [r6, #0]
 800137c:	f7ff fd8a 	bl	8000e94 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8001380:	6833      	ldr	r3, [r6, #0]
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8001382:	6871      	ldr	r1, [r6, #4]
 8001384:	789b      	ldrb	r3, [r3, #2]
 8001386:	68b2      	ldr	r2, [r6, #8]
 8001388:	6809      	ldr	r1, [r1, #0]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	33a0      	adds	r3, #160	; 0xa0
 8001390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8001394:	68e3      	ldr	r3, [r4, #12]
 8001396:	7b32      	ldrb	r2, [r6, #12]
 8001398:	695b      	ldr	r3, [r3, #20]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800139a:	7b70      	ldrb	r0, [r6, #13]
 800139c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80013a0:	2201      	movs	r2, #1
 80013a2:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 80013a6:	4082      	lsls	r2, r0
 80013a8:	430a      	orrs	r2, r1
 80013aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 80013ae:	6863      	ldr	r3, [r4, #4]
 80013b0:	7a1b      	ldrb	r3, [r3, #8]
 80013b2:	071b      	lsls	r3, r3, #28
 80013b4:	d549      	bpl.n	800144a <ADC_MEASUREMENT_Init+0x106>
 80013b6:	6923      	ldr	r3, [r4, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d046      	beq.n	800144a <ADC_MEASUREMENT_Init+0x106>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4a2b      	ldr	r2, [pc, #172]	; (800146c <ADC_MEASUREMENT_Init+0x128>)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80013be:	681e      	ldr	r6, [r3, #0]
 80013c0:	68d1      	ldr	r1, [r2, #12]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ca:	f1c1 0c07 	rsb	ip, r1, #7
 80013ce:	f1bc 0f06 	cmp.w	ip, #6
 80013d2:	b2f7      	uxtb	r7, r6
 80013d4:	bf28      	it	cs
 80013d6:	f04f 0c06 	movcs.w	ip, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	b109      	cbz	r1, 80013e0 <ADC_MEASUREMENT_Init+0x9c>
 80013dc:	1e48      	subs	r0, r1, #1
 80013de:	e000      	b.n	80013e2 <ADC_MEASUREMENT_Init+0x9e>
 80013e0:	4608      	mov	r0, r1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 fe00 	lsl.w	lr, r1, r0
 80013e8:	f10e 3eff 	add.w	lr, lr, #4294967295

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	fa01 f10c 	lsl.w	r1, r1, ip
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	ea0e 0e03 	and.w	lr, lr, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	1e4b      	subs	r3, r1, #1
 80013f6:	4013      	ands	r3, r2
 80013f8:	4083      	lsls	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80013fa:	b27a      	sxtb	r2, r7
 80013fc:	2a00      	cmp	r2, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80013fe:	ea4e 0303 	orr.w	r3, lr, r3
 8001402:	ea4f 0383 	mov.w	r3, r3, lsl #2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	bfad      	iteet	ge
 8001408:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	4a18      	ldrlt	r2, [pc, #96]	; (8001470 <ADC_MEASUREMENT_Init+0x12c>)
 800140e:	f006 060f 	andlt.w	r6, r6, #15
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	bfb9      	ittee	lt
 8001418:	b2db      	uxtblt	r3, r3
 800141a:	5593      	strblt	r3, [r2, r6]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	b2db      	uxtbge	r3, r3
 800141e:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8001422:	68e3      	ldr	r3, [r4, #12]
 8001424:	7e61      	ldrb	r1, [r4, #25]
 8001426:	6958      	ldr	r0, [r3, #20]
 8001428:	f7ff fc54 	bl	8000cd4 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 800142c:	6923      	ldr	r3, [r4, #16]
 800142e:	681a      	ldr	r2, [r3, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001430:	b253      	sxtb	r3, r2
 8001432:	2b00      	cmp	r3, #0
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001434:	bfa1      	itttt	ge
 8001436:	2101      	movge	r1, #1
 8001438:	f002 021f 	andge.w	r2, r2, #31
 800143c:	fa01 f202 	lslge.w	r2, r1, r2
 8001440:	095b      	lsrge	r3, r3, #5
 8001442:	bfa4      	itt	ge
 8001444:	490b      	ldrge	r1, [pc, #44]	; (8001474 <ADC_MEASUREMENT_Init+0x130>)
 8001446:	f841 2023 	strge.w	r2, [r1, r3, lsl #2]
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 800144a:	6963      	ldr	r3, [r4, #20]
 800144c:	b103      	cbz	r3, 8001450 <ADC_MEASUREMENT_Init+0x10c>
    {
    	(handle_ptr->mux_config)();
 800144e:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 8001450:	7ea3      	ldrb	r3, [r4, #26]
 8001452:	b13b      	cbz	r3, 8001464 <ADC_MEASUREMENT_Init+0x120>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8001454:	68e3      	ldr	r3, [r4, #12]
 8001456:	695a      	ldr	r2, [r3, #20]
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8001458:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 800145c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001460:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    }
    handle_ptr->init_state = status;
 8001464:	7625      	strb	r5, [r4, #24]
  }
  return (handle_ptr->init_state);
}
 8001466:	7e20      	ldrb	r0, [r4, #24]
 8001468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	e000ed14 	.word	0xe000ed14
 8001474:	e000e100 	.word	0xe000e100

08001478 <ADC_MEASUREMENT_StartConversion>:
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL))

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8001478:	68c3      	ldr	r3, [r0, #12]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001484:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8001488:	4770      	bx	lr

0800148a <ADC_MEASUREMENT_GetResult>:
{
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 800148a:	6803      	ldr	r3, [r0, #0]
 800148c:	6882      	ldr	r2, [r0, #8]
 800148e:	789b      	ldrb	r3, [r3, #2]
 8001490:	f003 030f 	and.w	r3, r3, #15
                                                                const uint32_t res_reg)
{
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8001494:	33c0      	adds	r3, #192	; 0xc0
 8001496:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]

  return (result);
}
 800149a:	b280      	uxth	r0, r0
 800149c:	4770      	bx	lr
	...

080014a0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80014a0:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80014a2:	4813      	ldr	r0, [pc, #76]	; (80014f0 <DAVE_Init+0x50>)
 80014a4:	f7ff ff20 	bl	80012e8 <CLOCK_XMC4_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
 80014a8:	bb00      	cbnz	r0, 80014ec <DAVE_Init+0x4c>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_0 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_0); 
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <DAVE_Init+0x54>)
 80014ac:	f7ff fe41 	bl	8001132 <PWM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80014b0:	b9e0      	cbnz	r0, 80014ec <DAVE_Init+0x4c>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <DAVE_Init+0x58>)
 80014b4:	f7ff fd24 	bl	8000f00 <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80014b8:	b9c0      	cbnz	r0, 80014ec <DAVE_Init+0x4c>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_1 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_1); 
 80014ba:	4810      	ldr	r0, [pc, #64]	; (80014fc <DAVE_Init+0x5c>)
 80014bc:	f7ff fe39 	bl	8001132 <PWM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80014c0:	b9a0      	cbnz	r0, 80014ec <DAVE_Init+0x4c>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_2 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_2); 
 80014c2:	480f      	ldr	r0, [pc, #60]	; (8001500 <DAVE_Init+0x60>)
 80014c4:	f7ff fe35 	bl	8001132 <PWM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80014c8:	b980      	cbnz	r0, 80014ec <DAVE_Init+0x4c>
  {
	 /**  Initialization of INTERRUPT APP instance UART_ISR */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&UART_ISR); 
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <DAVE_Init+0x64>)
 80014cc:	f7ff fe38 	bl	8001140 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80014d0:	b960      	cbnz	r0, 80014ec <DAVE_Init+0x4c>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <DAVE_Init+0x68>)
 80014d4:	f7ff ff36 	bl	8001344 <ADC_MEASUREMENT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80014d8:	b940      	cbnz	r0, 80014ec <DAVE_Init+0x4c>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
 80014da:	480c      	ldr	r0, [pc, #48]	; (800150c <DAVE_Init+0x6c>)
 80014dc:	f7ff feb9 	bl	8001252 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80014e0:	b920      	cbnz	r0, 80014ec <DAVE_Init+0x4c>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_1); 
 80014e2:	480b      	ldr	r0, [pc, #44]	; (8001510 <DAVE_Init+0x70>)
   }  
  return init_status;
} /**  End of function DAVE_Init */
 80014e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_1); 
 80014e8:	f7ff beb3 	b.w	8001252 <DIGITAL_IO_Init>
   }  
  return init_status;
} /**  End of function DAVE_Init */
 80014ec:	bd08      	pop	{r3, pc}
 80014ee:	bf00      	nop
 80014f0:	2000015c 	.word	0x2000015c
 80014f4:	20000074 	.word	0x20000074
 80014f8:	20000000 	.word	0x20000000
 80014fc:	2000000c 	.word	0x2000000c
 8001500:	20000040 	.word	0x20000040
 8001504:	080017f0 	.word	0x080017f0
 8001508:	20000104 	.word	0x20000104
 800150c:	0800185c 	.word	0x0800185c
 8001510:	08001870 	.word	0x08001870

08001514 <busy_waitMs>:

void busy_waitMs(int ms)
{
	int i;

	for(int c = 0; c < ms; c++)
 8001514:	2300      	movs	r3, #0
 8001516:	4283      	cmp	r3, r0
 8001518:	da0c      	bge.n	8001534 <busy_waitMs+0x20>
 800151a:	f242 7210 	movw	r2, #10000	; 0x2710
	{
		i = 10000;
		while(--i)
 800151e:	3a01      	subs	r2, #1
 8001520:	d006      	beq.n	8001530 <busy_waitMs+0x1c>
		{
			__NOP();
 8001522:	bf00      	nop
			__NOP();
 8001524:	bf00      	nop
			__NOP();
 8001526:	bf00      	nop
			__NOP();
 8001528:	bf00      	nop
			__NOP();
 800152a:	bf00      	nop
			__NOP();
 800152c:	bf00      	nop
 800152e:	e7f6      	b.n	800151e <busy_waitMs+0xa>

void busy_waitMs(int ms)
{
	int i;

	for(int c = 0; c < ms; c++)
 8001530:	3301      	adds	r3, #1
 8001532:	e7f0      	b.n	8001516 <busy_waitMs+0x2>
			__NOP();
			__NOP();
			__NOP();
		}
	}
}
 8001534:	4770      	bx	lr
	...

08001538 <main>:
uint8_t testdata[] = "testdata";
uint32_t touchPanelResult;
uint16_t x, y;

int main(void)
{
 8001538:	b507      	push	{r0, r1, r2, lr}
  DAVE_STATUS_t status;
  uint8_t init_data[] = "start";
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <main+0x4c>)
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	9000      	str	r0, [sp, #0]
 8001540:	889b      	ldrh	r3, [r3, #4]

  memset(read_data, 0, BUFFERSIZE);
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <main+0x50>)
uint16_t x, y;

int main(void)
{
  DAVE_STATUS_t status;
  uint8_t init_data[] = "start";
 8001544:	f8ad 3004 	strh.w	r3, [sp, #4]

  memset(read_data, 0, BUFFERSIZE);
 8001548:	2100      	movs	r1, #0
 800154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154e:	f000 f89f 	bl	8001690 <memset>
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8001552:	f7ff ffa5 	bl	80014a0 <DAVE_Init>

  if(status != DAVE_STATUS_SUCCESS)
 8001556:	b100      	cbz	r0, 800155a <main+0x22>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8001558:	e7fe      	b.n	8001558 <main+0x20>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <main+0x54>)
 800155c:	f7ff ff8c 	bl	8001478 <ADC_MEASUREMENT_StartConversion>

  // Minimal position 450  ^ 4,5  duty ^ 0,9ms
  // Neutral position 750  ^ 7,5  duty ^ 1,5ms
  // Maximal position 1050 ^ 10,5 duty ^ 2,1ms

  UART_Transmit(&UART_0, init_data, sizeof(init_data));
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <main+0x58>)
 8001562:	4669      	mov	r1, sp
 8001564:	2206      	movs	r2, #6
 8001566:	f7ff fcce 	bl	8000f06 <UART_Transmit>
	  {
		  PWM_SetDutyCycle(&PWM_MOTOR_0, i);
		  busy_waitMs(20);
	  }
		*/
	  busy_waitMs(1000);
 800156a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156e:	f7ff ffd1 	bl	8001514 <busy_waitMs>
	  ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <main+0x54>)
 8001574:	f7ff ff80 	bl	8001478 <ADC_MEASUREMENT_StartConversion>
	  busy_waitMs(1000);
 8001578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800157c:	f7ff ffca 	bl	8001514 <busy_waitMs>
	  if(read_data[0] != '\0') {
		  busy_waitMs(5000);
		  UART_Transmit(&UART_0, read_data, BUFFERSIZE);
		  memset(read_data, 0, BUFFERSIZE);
	  }*/
  }
 8001580:	e7f3      	b.n	800156a <main+0x32>
 8001582:	bf00      	nop
 8001584:	080018b4 	.word	0x080018b4
 8001588:	20000170 	.word	0x20000170
 800158c:	20000104 	.word	0x20000104
 8001590:	20000000 	.word	0x20000000

08001594 <VADC0_C0_2_IRQHandler>:
 * VDD 3.3V => PIN 2 (LR)
 * GND => PIN 4 (UL)
 * 2.14 => PIN 5 (LL) DIGITAL_IO_0
 */
void Adc_Measurement_Handler(void)
{
 8001594:	b510      	push	{r4, lr}
	static uint16_t result_Channel_A = 0;
    /* Read out conversion results */
    result_Channel_A = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A_handle);
 8001596:	4815      	ldr	r0, [pc, #84]	; (80015ec <VADC0_C0_2_IRQHandler+0x58>)
 8001598:	f7ff ff77 	bl	800148a <ADC_MEASUREMENT_GetResult>
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800159c:	4914      	ldr	r1, [pc, #80]	; (80015f0 <VADC0_C0_2_IRQHandler+0x5c>)
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <VADC0_C0_2_IRQHandler+0x60>)
 80015a0:	680a      	ldr	r2, [r1, #0]
 80015a2:	8018      	strh	r0, [r3, #0]

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80015a4:	7c09      	ldrb	r1, [r1, #16]
 80015a6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80015a8:	40cb      	lsrs	r3, r1

    if(DIGITAL_IO_GetInput(&DIGITAL_IO_1) == 1) {
 80015aa:	f013 0f01 	tst.w	r3, #1
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <VADC0_C0_2_IRQHandler+0x64>)
 80015b0:	d00f      	beq.n	80015d2 <VADC0_C0_2_IRQHandler+0x3e>
    	x = result_Channel_A;
 80015b2:	4c12      	ldr	r4, [pc, #72]	; (80015fc <VADC0_C0_2_IRQHandler+0x68>)
 80015b4:	8020      	strh	r0, [r4, #0]

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80015b6:	7c1c      	ldrb	r4, [r3, #16]
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80015be:	fa03 f404 	lsl.w	r4, r3, r4
 80015c2:	408b      	lsls	r3, r1
 80015c4:	6044      	str	r4, [r0, #4]
 80015c6:	6053      	str	r3, [r2, #4]

        DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
        DIGITAL_IO_ToggleOutput(&DIGITAL_IO_1);

        /* Re-trigger conversion sequence */
        ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <VADC0_C0_2_IRQHandler+0x6c>)
        DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
        DIGITAL_IO_ToggleOutput(&DIGITAL_IO_1);
    	/* After second read transmit data */

    }
}
 80015ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
        DIGITAL_IO_ToggleOutput(&DIGITAL_IO_1);

        /* Re-trigger conversion sequence */
        ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 80015ce:	f7ff bf53 	b.w	8001478 <ADC_MEASUREMENT_StartConversion>
    } else {
    	y = result_Channel_A;
 80015d2:	4c0c      	ldr	r4, [pc, #48]	; (8001604 <VADC0_C0_2_IRQHandler+0x70>)
 80015d4:	8020      	strh	r0, [r4, #0]
 80015d6:	7c1c      	ldrb	r4, [r3, #16]
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80015de:	fa03 f404 	lsl.w	r4, r3, r4
 80015e2:	408b      	lsls	r3, r1
 80015e4:	6044      	str	r4, [r0, #4]
 80015e6:	6053      	str	r3, [r2, #4]
 80015e8:	bd10      	pop	{r4, pc}
 80015ea:	bf00      	nop
 80015ec:	20000120 	.word	0x20000120
 80015f0:	08001870 	.word	0x08001870
 80015f4:	20000164 	.word	0x20000164
 80015f8:	0800185c 	.word	0x0800185c
 80015fc:	20000168 	.word	0x20000168
 8001600:	20000104 	.word	0x20000104
 8001604:	20000570 	.word	0x20000570

08001608 <USIC0_5_IRQHandler>:
    	/* After second read transmit data */

    }
}

void DataReceived(void) {
 8001608:	b538      	push	{r3, r4, r5, lr}
	UART_Receive(&UART_0, read_data, 8);
 800160a:	4c0b      	ldr	r4, [pc, #44]	; (8001638 <USIC0_5_IRQHandler+0x30>)
 800160c:	4d0b      	ldr	r5, [pc, #44]	; (800163c <USIC0_5_IRQHandler+0x34>)
 800160e:	4621      	mov	r1, r4
 8001610:	4628      	mov	r0, r5
 8001612:	2208      	movs	r2, #8
 8001614:	f7ff fcae 	bl	8000f74 <UART_Receive>
	read_data[0] = '1';
 8001618:	2331      	movs	r3, #49	; 0x31
	read_data[1] = '1';
	UART_Transmit(&UART_0, read_data, 8);
 800161a:	4621      	mov	r1, r4
 800161c:	4628      	mov	r0, r5
 800161e:	2208      	movs	r2, #8
    }
}

void DataReceived(void) {
	UART_Receive(&UART_0, read_data, 8);
	read_data[0] = '1';
 8001620:	7023      	strb	r3, [r4, #0]
	read_data[1] = '1';
 8001622:	7063      	strb	r3, [r4, #1]
	UART_Transmit(&UART_0, read_data, 8);
 8001624:	f7ff fc6f 	bl	8000f06 <UART_Transmit>
	memset(read_data, 0, BUFFERSIZE);
 8001628:	4620      	mov	r0, r4
 800162a:	2100      	movs	r1, #0
 800162c:	f44f 6280 	mov.w	r2, #1024	; 0x400
}
 8001630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void DataReceived(void) {
	UART_Receive(&UART_0, read_data, 8);
	read_data[0] = '1';
	read_data[1] = '1';
	UART_Transmit(&UART_0, read_data, 8);
	memset(read_data, 0, BUFFERSIZE);
 8001634:	f000 b82c 	b.w	8001690 <memset>
 8001638:	20000170 	.word	0x20000170
 800163c:	20000000 	.word	0x20000000

08001640 <__libc_init_array>:
 8001640:	b570      	push	{r4, r5, r6, lr}
 8001642:	4e0f      	ldr	r6, [pc, #60]	; (8001680 <__libc_init_array+0x40>)
 8001644:	4d0f      	ldr	r5, [pc, #60]	; (8001684 <__libc_init_array+0x44>)
 8001646:	1b76      	subs	r6, r6, r5
 8001648:	10b6      	asrs	r6, r6, #2
 800164a:	bf18      	it	ne
 800164c:	2400      	movne	r4, #0
 800164e:	d005      	beq.n	800165c <__libc_init_array+0x1c>
 8001650:	3401      	adds	r4, #1
 8001652:	f855 3b04 	ldr.w	r3, [r5], #4
 8001656:	4798      	blx	r3
 8001658:	42a6      	cmp	r6, r4
 800165a:	d1f9      	bne.n	8001650 <__libc_init_array+0x10>
 800165c:	4e0a      	ldr	r6, [pc, #40]	; (8001688 <__libc_init_array+0x48>)
 800165e:	4d0b      	ldr	r5, [pc, #44]	; (800168c <__libc_init_array+0x4c>)
 8001660:	1b76      	subs	r6, r6, r5
 8001662:	f7ff fc4c 	bl	8000efe <_init>
 8001666:	10b6      	asrs	r6, r6, #2
 8001668:	bf18      	it	ne
 800166a:	2400      	movne	r4, #0
 800166c:	d006      	beq.n	800167c <__libc_init_array+0x3c>
 800166e:	3401      	adds	r4, #1
 8001670:	f855 3b04 	ldr.w	r3, [r5], #4
 8001674:	4798      	blx	r3
 8001676:	42a6      	cmp	r6, r4
 8001678:	d1f9      	bne.n	800166e <__libc_init_array+0x2e>
 800167a:	bd70      	pop	{r4, r5, r6, pc}
 800167c:	bd70      	pop	{r4, r5, r6, pc}
 800167e:	bf00      	nop
 8001680:	20000140 	.word	0x20000140
 8001684:	20000140 	.word	0x20000140
 8001688:	20000140 	.word	0x20000140
 800168c:	20000140 	.word	0x20000140

08001690 <memset>:
 8001690:	b470      	push	{r4, r5, r6}
 8001692:	0784      	lsls	r4, r0, #30
 8001694:	d046      	beq.n	8001724 <memset+0x94>
 8001696:	1e54      	subs	r4, r2, #1
 8001698:	2a00      	cmp	r2, #0
 800169a:	d041      	beq.n	8001720 <memset+0x90>
 800169c:	b2cd      	uxtb	r5, r1
 800169e:	4603      	mov	r3, r0
 80016a0:	e002      	b.n	80016a8 <memset+0x18>
 80016a2:	1e62      	subs	r2, r4, #1
 80016a4:	b3e4      	cbz	r4, 8001720 <memset+0x90>
 80016a6:	4614      	mov	r4, r2
 80016a8:	f803 5b01 	strb.w	r5, [r3], #1
 80016ac:	079a      	lsls	r2, r3, #30
 80016ae:	d1f8      	bne.n	80016a2 <memset+0x12>
 80016b0:	2c03      	cmp	r4, #3
 80016b2:	d92e      	bls.n	8001712 <memset+0x82>
 80016b4:	b2cd      	uxtb	r5, r1
 80016b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80016ba:	2c0f      	cmp	r4, #15
 80016bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80016c0:	d919      	bls.n	80016f6 <memset+0x66>
 80016c2:	f103 0210 	add.w	r2, r3, #16
 80016c6:	4626      	mov	r6, r4
 80016c8:	3e10      	subs	r6, #16
 80016ca:	2e0f      	cmp	r6, #15
 80016cc:	f842 5c10 	str.w	r5, [r2, #-16]
 80016d0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80016d4:	f842 5c08 	str.w	r5, [r2, #-8]
 80016d8:	f842 5c04 	str.w	r5, [r2, #-4]
 80016dc:	f102 0210 	add.w	r2, r2, #16
 80016e0:	d8f2      	bhi.n	80016c8 <memset+0x38>
 80016e2:	f1a4 0210 	sub.w	r2, r4, #16
 80016e6:	f022 020f 	bic.w	r2, r2, #15
 80016ea:	f004 040f 	and.w	r4, r4, #15
 80016ee:	3210      	adds	r2, #16
 80016f0:	2c03      	cmp	r4, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	d90d      	bls.n	8001712 <memset+0x82>
 80016f6:	461e      	mov	r6, r3
 80016f8:	4622      	mov	r2, r4
 80016fa:	3a04      	subs	r2, #4
 80016fc:	2a03      	cmp	r2, #3
 80016fe:	f846 5b04 	str.w	r5, [r6], #4
 8001702:	d8fa      	bhi.n	80016fa <memset+0x6a>
 8001704:	1f22      	subs	r2, r4, #4
 8001706:	f022 0203 	bic.w	r2, r2, #3
 800170a:	3204      	adds	r2, #4
 800170c:	4413      	add	r3, r2
 800170e:	f004 0403 	and.w	r4, r4, #3
 8001712:	b12c      	cbz	r4, 8001720 <memset+0x90>
 8001714:	b2c9      	uxtb	r1, r1
 8001716:	441c      	add	r4, r3
 8001718:	f803 1b01 	strb.w	r1, [r3], #1
 800171c:	42a3      	cmp	r3, r4
 800171e:	d1fb      	bne.n	8001718 <memset+0x88>
 8001720:	bc70      	pop	{r4, r5, r6}
 8001722:	4770      	bx	lr
 8001724:	4614      	mov	r4, r2
 8001726:	4603      	mov	r3, r0
 8001728:	e7c2      	b.n	80016b0 <memset+0x20>
 800172a:	bf00      	nop

0800172c <CSWTCH.36>:
 800172c:	0000 0202 0c0c 0c0c 0a08                    ..........

08001736 <CSWTCH.37>:
 8001736:	0003 0003 000c 000c 3000 3000 3000 3000     .........0.0.0.0
 8001746:	0300 0c00 0000                              ......

0800174c <g_xmc_vadc_group_array>:
 800174c:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

0800175c <UART_0_config>:
 800175c:	17a8 0800 0fe9 0800 0000 0000 0000 0000     ................
	...
 8001778:	1790 0800 0200 0002 0000 0000               ............

08001784 <UART_0_rx_pin_config>:
 8001784:	0000 0000 0001 0000 0002 0000               ............

08001790 <UART_0_tx_pin>:
 8001790:	8100 4802 0005 0000 179c 0800               ...H........

0800179c <UART_0_tx_pin_config>:
 800179c:	0090 0000 0001 0000 0002 0000               ............

080017a8 <UART_0_channel_config>:
 80017a8:	4b00 0000 0800 0108 0010 0000               .K..........

080017b4 <PWM_MOTOR_1_gpio_out_config>:
 80017b4:	0098 0000 0000 0001 0004 0000               ............

080017c0 <PWM_MOTOR_2_compare_config>:
 80017c0:	0000 0000 0006 0000                         ........

080017c8 <PWM_MOTOR_0_gpio_out_config>:
 80017c8:	0098 0000 0000 0001 0004 0000               ............

080017d4 <PWM_MOTOR_0_compare_config>:
 80017d4:	0000 0000 0006 0000                         ........

080017dc <PWM_MOTOR_2_gpio_out_config>:
 80017dc:	0098 0000 0000 0001 0004 0000               ............

080017e8 <PWM_MOTOR_1_compare_config>:
 80017e8:	0000 0000 0006 0000                         ........

080017f0 <UART_ISR>:
 80017f0:	3f59 0100                                   Y?..

080017f4 <group_init_handle0>:
	...

08001808 <group_init_handle1>:
	...

0800181c <group_init_handle3>:
	...

08001830 <global_config>:
 8001830:	0000 0000 0003 0000 0000 0000 0000 0000     ................
	...

08001848 <group_init_handle2>:
	...

0800185c <DIGITAL_IO_0>:
 800185c:	8200 4802 0080 0000 0000 0001 0000 0000     ...H............
 800186c:	000e 0000                                   ....

08001870 <DIGITAL_IO_1>:
 8001870:	8200 4802 0080 0000 0001 0000 0000 0000     ...H............
 8001880:	000f 0000 0250 0104 0000 0001 0000 0000     ....P...........
 8001890:	0000 0001 0101 0101                         ........

08001898 <backgnd_rs_intr_handle>:
 8001898:	0010 0000 003f 0000 0000 0000               ....?.......

080018a4 <backgnd_config>:
 80018a4:	0005 0000 0000 0000 0008 0000               ............

080018b0 <global_iclass_config>:
 80018b0:	0000 0000 7473 7261 0074 0000               ....start...
