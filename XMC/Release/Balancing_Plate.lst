
Balancing_Plate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001440  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         000000b8  20000000  0c001440  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000020  200000b8  0c0014f8  000100b8  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000008d8  00000000  00000000  000100b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ed65  00000000  00000000  00010990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002964  00000000  00000000  0001f6f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007132  00000000  00000000  00022059  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013d0  00000000  00000000  0002918c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0007ec87  00000000  00000000  0002a55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000049ae  00000000  00000000  000a91e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e0  00000000  00000000  000adb91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000435  00000000  00000000  000ae471  2**0
                  CONTENTS, READONLY
 14 .debug_macro  0001a4af  00000000  00000000  000ae8a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	11 10 00 08 b1 02 00 08 1d 10 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001440 	.word	0x0c001440
 800024c:	20000000 	.word	0x20000000
 8000250:	000000b8 	.word	0x000000b8
 8000254:	0c0014f8 	.word	0x0c0014f8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c001440 	.word	0x0c001440
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c001440 	.word	0x0c001440
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200000b8 	.word	0x200000b8
 800027c:	00000020 	.word	0x00000020
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	0800033d 	.word	0x0800033d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080012f1 	.word	0x080012f1
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08001275 	.word	0x08001275

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemCoreClockUpdate>:
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002b4:	4b1d      	ldr	r3, [pc, #116]	; (800032c <SystemCoreClockUpdate+0x78>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	03d9      	lsls	r1, r3, #15

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002ba:	b510      	push	{r4, lr}
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002bc:	d525      	bpl.n	800030a <SystemCoreClockUpdate+0x56>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <SystemCoreClockUpdate+0x7c>)
 80002c0:	68da      	ldr	r2, [r3, #12]
 80002c2:	f012 0f01 	tst.w	r2, #1
 80002c6:	461c      	mov	r4, r3
 80002c8:	d102      	bne.n	80002d0 <SystemCoreClockUpdate+0x1c>
      temp = OFI_FREQUENCY;
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002ca:	f000 ff71 	bl	80011b0 <OSCHP_GetFrequency>
 80002ce:	e000      	b.n	80002d2 <SystemCoreClockUpdate+0x1e>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002d0:	4818      	ldr	r0, [pc, #96]	; (8000334 <SystemCoreClockUpdate+0x80>)
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002d2:	6822      	ldr	r2, [r4, #0]
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <SystemCoreClockUpdate+0x7c>)
 80002d6:	0752      	lsls	r2, r2, #29
 80002d8:	d510      	bpl.n	80002fc <SystemCoreClockUpdate+0x48>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002da:	689a      	ldr	r2, [r3, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80002dc:	6899      	ldr	r1, [r3, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80002de:	689b      	ldr	r3, [r3, #8]
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002e0:	f3c2 6203 	ubfx	r2, r2, #24, #4
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80002e4:	f3c3 4406 	ubfx	r4, r3, #16, #7
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002e8:	1c53      	adds	r3, r2, #1
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80002ea:	fb04 3303 	mla	r3, r4, r3, r3
 80002ee:	fbb0 f0f3 	udiv	r0, r0, r3
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80002f2:	f3c1 2306 	ubfx	r3, r1, #8, #7
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80002f6:	fb03 0000 	mla	r0, r3, r0, r0
 80002fa:	e007      	b.n	800030c <SystemCoreClockUpdate+0x58>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000302:	3301      	adds	r3, #1
      
      temp = (temp / kdiv);
 8000304:	fbb0 f0f3 	udiv	r0, r0, r3
 8000308:	e000      	b.n	800030c <SystemCoreClockUpdate+0x58>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800030a:	480a      	ldr	r0, [pc, #40]	; (8000334 <SystemCoreClockUpdate+0x80>)
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <SystemCoreClockUpdate+0x78>)
 800030e:	68d3      	ldr	r3, [r2, #12]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	3301      	adds	r3, #1
 8000314:	fbb0 f0f3 	udiv	r0, r0, r3
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000318:	6913      	ldr	r3, [r2, #16]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	3301      	adds	r3, #1
 8000320:	fbb0 f0f3 	udiv	r0, r0, r3

  SystemCoreClock = temp;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <SystemCoreClockUpdate+0x84>)
 8000326:	6018      	str	r0, [r3, #0]
 8000328:	bd10      	pop	{r4, pc}
 800032a:	bf00      	nop
 800032c:	50004600 	.word	0x50004600
 8000330:	50004710 	.word	0x50004710
 8000334:	016e3600 	.word	0x016e3600
 8000338:	2000ffc0 	.word	0x2000ffc0

0800033c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800033c:	b538      	push	{r3, r4, r5, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 800033e:	4a09      	ldr	r2, [pc, #36]	; (8000364 <SystemInit+0x28>)
 8000340:	4d09      	ldr	r5, [pc, #36]	; (8000368 <SystemInit+0x2c>)
 8000342:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000346:	4623      	mov	r3, r4
 8000348:	cb03      	ldmia	r3!, {r0, r1}
 800034a:	42ab      	cmp	r3, r5
 800034c:	6010      	str	r0, [r2, #0]
 800034e:	6051      	str	r1, [r2, #4]
 8000350:	461c      	mov	r4, r3
 8000352:	f102 0208 	add.w	r2, r2, #8
 8000356:	d1f6      	bne.n	8000346 <SystemInit+0xa>

  SystemCoreSetup();
 8000358:	f000 feea 	bl	8001130 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800035c:	f000 ff2c 	bl	80011b8 <SystemCoreClockSetup>
 8000360:	bd38      	pop	{r3, r4, r5, pc}
 8000362:	bf00      	nop
 8000364:	2000ffc4 	.word	0x2000ffc4
 8000368:	20000010 	.word	0x20000010

0800036c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800036c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000370:	4403      	add	r3, r0
 8000372:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000374:	f001 0403 	and.w	r4, r1, #3
 8000378:	691e      	ldr	r6, [r3, #16]
 800037a:	00e4      	lsls	r4, r4, #3
 800037c:	25f8      	movs	r5, #248	; 0xf8
 800037e:	40a5      	lsls	r5, r4
 8000380:	ea26 0505 	bic.w	r5, r6, r5
 8000384:	611d      	str	r5, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000386:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8000388:	004f      	lsls	r7, r1, #1
 800038a:	2503      	movs	r5, #3
 800038c:	40bd      	lsls	r5, r7
 800038e:	ea26 0505 	bic.w	r5, r6, r5
 8000392:	6745      	str	r5, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000394:	4d16      	ldr	r5, [pc, #88]	; (80003f0 <XMC_GPIO_Init+0x84>)
 8000396:	42a8      	cmp	r0, r5
 8000398:	d003      	beq.n	80003a2 <XMC_GPIO_Init+0x36>
 800039a:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d107      	bne.n	80003b2 <XMC_GPIO_Init+0x46>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003a2:	6e05      	ldr	r5, [r0, #96]	; 0x60
 80003a4:	2601      	movs	r6, #1
 80003a6:	fa06 f101 	lsl.w	r1, r6, r1
 80003aa:	ea25 0101 	bic.w	r1, r5, r1
 80003ae:	6601      	str	r1, [r0, #96]	; 0x60
 80003b0:	e018      	b.n	80003e4 <XMC_GPIO_Init+0x78>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80003b2:	f992 5000 	ldrsb.w	r5, [r2]
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	da14      	bge.n	80003e4 <XMC_GPIO_Init+0x78>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80003ba:	6855      	ldr	r5, [r2, #4]
 80003bc:	408d      	lsls	r5, r1
 80003be:	6045      	str	r5, [r0, #4]
 80003c0:	08cd      	lsrs	r5, r1, #3
 80003c2:	eb00 0085 	add.w	r0, r0, r5, lsl #2

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80003c6:	f001 0107 	and.w	r1, r1, #7
 80003ca:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80003cc:	0089      	lsls	r1, r1, #2
 80003ce:	2507      	movs	r5, #7
 80003d0:	408d      	lsls	r5, r1
 80003d2:	ea26 0505 	bic.w	r5, r6, r5
 80003d6:	6405      	str	r5, [r0, #64]	; 0x40
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80003d8:	7a16      	ldrb	r6, [r2, #8]
 80003da:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80003dc:	fa06 f101 	lsl.w	r1, r6, r1
 80003e0:	4329      	orrs	r1, r5
 80003e2:	6401      	str	r1, [r0, #64]	; 0x40
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80003e4:	7812      	ldrb	r2, [r2, #0]
 80003e6:	6919      	ldr	r1, [r3, #16]
 80003e8:	40a2      	lsls	r2, r4
 80003ea:	430a      	orrs	r2, r1
 80003ec:	611a      	str	r2, [r3, #16]
 80003ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f0:	48028e00 	.word	0x48028e00

080003f4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	4604      	mov	r4, r0
  uint32_t i;

  SystemCoreClockUpdate();
 80003f8:	f7ff ff5c 	bl	80002b4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <XMC_SCU_lDelay+0x24>)
 80003fe:	4807      	ldr	r0, [pc, #28]	; (800041c <XMC_SCU_lDelay+0x28>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	fbb3 f3f0 	udiv	r3, r3, r0
 8000406:	fb03 f004 	mul.w	r0, r3, r4

  for (i = 0U; i < delay; ++i)
 800040a:	2300      	movs	r3, #0
 800040c:	4283      	cmp	r3, r0
 800040e:	d002      	beq.n	8000416 <XMC_SCU_lDelay+0x22>
  {
    __NOP();
 8000410:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000412:	3301      	adds	r3, #1
 8000414:	e7fa      	b.n	800040c <XMC_SCU_lDelay+0x18>
  {
    __NOP();
  }
}
 8000416:	bd10      	pop	{r4, pc}
 8000418:	2000ffc0 	.word	0x2000ffc0
 800041c:	000f4240 	.word	0x000f4240

08000420 <XMC_SCU_RESET_DeassertPeripheralReset>:
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000420:	0f02      	lsrs	r2, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000422:	230c      	movs	r3, #12
 8000424:	4353      	muls	r3, r2
 8000426:	4a02      	ldr	r2, [pc, #8]	; (8000430 <XMC_SCU_RESET_DeassertPeripheralReset+0x10>)

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000428:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800042c:	5098      	str	r0, [r3, r2]
 800042e:	4770      	bx	lr
 8000430:	50004414 	.word	0x50004414

08000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000434:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000438:	230c      	movs	r3, #12
}

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800043a:	0f00      	lsrs	r0, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800043c:	4358      	muls	r0, r3
 800043e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 8000442:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
 8000446:	58c3      	ldr	r3, [r0, r3]
 8000448:	421a      	tst	r2, r3
}
 800044a:	bf14      	ite	ne
 800044c:	2001      	movne	r0, #1
 800044e:	2000      	moveq	r0, #0
 8000450:	4770      	bx	lr
	...

08000454 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000458:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800045a:	6810      	ldr	r0, [r2, #0]
 800045c:	f003 0301 	and.w	r3, r3, #1
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000460:	40d8      	lsrs	r0, r3
 8000462:	4770      	bx	lr
 8000464:	50004600 	.word	0x50004600
 8000468:	2000ffc0 	.word	0x2000ffc0

0800046c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800046c:	4a03      	ldr	r2, [pc, #12]	; (800047c <XMC_SCU_CLOCK_SetSystemClockSource+0x10>)
 800046e:	68d3      	ldr	r3, [r2, #12]
 8000470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000474:	4318      	orrs	r0, r3
 8000476:	60d0      	str	r0, [r2, #12]
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	50004600 	.word	0x50004600

08000480 <XMC_SCU_CLOCK_SetUsbClockSource>:
}

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 8000482:	6993      	ldr	r3, [r2, #24]
 8000484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000488:	4318      	orrs	r0, r3
 800048a:	6190      	str	r0, [r2, #24]
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	50004600 	.word	0x50004600

08000494 <XMC_SCU_CLOCK_SetWdtClockSource>:
}

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000494:	4a03      	ldr	r2, [pc, #12]	; (80004a4 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 8000496:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000498:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800049c:	4318      	orrs	r0, r3
 800049e:	6250      	str	r0, [r2, #36]	; 0x24
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	50004600 	.word	0x50004600

080004a8 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x1c>)
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004aa:	68d3      	ldr	r3, [r2, #12]

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80004ac:	b920      	cbnz	r0, 80004b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x10>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b2:	f023 0301 	bic.w	r3, r3, #1
 80004b6:	e003      	b.n	80004c0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x18>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	60d3      	str	r3, [r2, #12]
 80004c2:	4770      	bx	lr
 80004c4:	50004710 	.word	0x50004710

080004c8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <XMC_SCU_HIB_SetRtcClockSource+0x18>)
 80004ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80004ce:	071b      	lsls	r3, r3, #28
 80004d0:	d4fa      	bmi.n	80004c8 <XMC_SCU_HIB_SetRtcClockSource>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80004d2:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 80004d4:	68d3      	ldr	r3, [r2, #12]
 80004d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004da:	4318      	orrs	r0, r3
 80004dc:	60d0      	str	r0, [r2, #12]
 80004de:	4770      	bx	lr
 80004e0:	50004000 	.word	0x50004000
 80004e4:	50004300 	.word	0x50004300

080004e8 <XMC_SCU_HIB_SetStandbyClockSource>:
}

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <XMC_SCU_HIB_SetStandbyClockSource+0x18>)
 80004ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80004ee:	071b      	lsls	r3, r3, #28
 80004f0:	d4fa      	bmi.n	80004e8 <XMC_SCU_HIB_SetStandbyClockSource>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <XMC_SCU_HIB_SetStandbyClockSource+0x1c>)
 80004f4:	68d3      	ldr	r3, [r2, #12]
 80004f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004fa:	4318      	orrs	r0, r3
 80004fc:	60d0      	str	r0, [r2, #12]
 80004fe:	4770      	bx	lr
 8000500:	50004000 	.word	0x50004000
 8000504:	50004300 	.word	0x50004300

08000508 <XMC_SCU_CLOCK_SetSystemClockDivider>:
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <XMC_SCU_CLOCK_SetSystemClockDivider+0x10>)
 800050a:	68d3      	ldr	r3, [r2, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800050c:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800050e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000512:	4303      	orrs	r3, r0
 8000514:	60d3      	str	r3, [r2, #12]
 8000516:	4770      	bx	lr
 8000518:	50004600 	.word	0x50004600

0800051c <XMC_SCU_CLOCK_SetCcuClockDivider>:
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <XMC_SCU_CLOCK_SetCcuClockDivider+0x10>)
 800051e:	6a13      	ldr	r3, [r2, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000520:	3801      	subs	r0, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000522:	f023 0301 	bic.w	r3, r3, #1
 8000526:	4303      	orrs	r3, r0
 8000528:	6213      	str	r3, [r2, #32]
 800052a:	4770      	bx	lr
 800052c:	50004600 	.word	0x50004600

08000530 <XMC_SCU_CLOCK_SetCpuClockDivider>:
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <XMC_SCU_CLOCK_SetCpuClockDivider+0x10>)
 8000532:	6913      	ldr	r3, [r2, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000534:	3801      	subs	r0, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000536:	f023 0301 	bic.w	r3, r3, #1
 800053a:	4303      	orrs	r3, r0
 800053c:	6113      	str	r3, [r2, #16]
 800053e:	4770      	bx	lr
 8000540:	50004600 	.word	0x50004600

08000544 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x10>)
 8000546:	6953      	ldr	r3, [r2, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000548:	3801      	subs	r0, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	4303      	orrs	r3, r0
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4770      	bx	lr
 8000554:	50004600 	.word	0x50004600

08000558 <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 800055a:	6993      	ldr	r3, [r2, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800055c:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800055e:	f023 0307 	bic.w	r3, r3, #7
 8000562:	4303      	orrs	r3, r0
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4770      	bx	lr
 8000568:	50004600 	.word	0x50004600

0800056c <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 800056e:	69d3      	ldr	r3, [r2, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000570:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000572:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000576:	4303      	orrs	r3, r0
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4770      	bx	lr
 800057c:	50004600 	.word	0x50004600

08000580 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 8000582:	6a53      	ldr	r3, [r2, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000584:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800058a:	4303      	orrs	r3, r0
 800058c:	6253      	str	r3, [r2, #36]	; 0x24
 800058e:	4770      	bx	lr
 8000590:	50004600 	.word	0x50004600

08000594 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <XMC_SCU_CLOCK_EnableClock+0x8>)
 8000596:	6058      	str	r0, [r3, #4]
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	50004600 	.word	0x50004600

080005a0 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <XMC_SCU_CLOCK_StartUsbPll+0x40>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	f042 0201 	orr.w	r2, r2, #1
 80005a8:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005aa:	695a      	ldr	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80005ac:	3801      	subs	r0, #1

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005ae:	3901      	subs	r1, #1
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80005b0:	0600      	lsls	r0, r0, #24
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005b2:	f042 0210 	orr.w	r2, r2, #16

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005b6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005ba:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80005bc:	6159      	str	r1, [r3, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005c4:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	f022 0210 	bic.w	r2, r2, #16
 80005cc:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005d4:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80005d6:	691a      	ldr	r2, [r3, #16]
 80005d8:	0752      	lsls	r2, r2, #29
 80005da:	d5fc      	bpl.n	80005d6 <XMC_SCU_CLOCK_StartUsbPll+0x36>
  {
    /* wait for PLL Lock */
  }

}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	50004710 	.word	0x50004710

080005e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80005e4:	b510      	push	{r4, lr}
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80005e6:	4c0b      	ldr	r4, [pc, #44]	; (8000614 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x30>)
 80005e8:	6863      	ldr	r3, [r4, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80005ea:	2801      	cmp	r0, #1

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	6063      	str	r3, [r4, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80005f2:	d10a      	bne.n	800060a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x26>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80005f4:	6863      	ldr	r3, [r4, #4]
 80005f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005fa:	6063      	str	r3, [r4, #4]
    XMC_SCU_lDelay(100UL);
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f7ff fef9 	bl	80003f4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000602:	6863      	ldr	r3, [r4, #4]
 8000604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000608:	6063      	str	r3, [r4, #4]
  }

  XMC_SCU_lDelay(100UL);
 800060a:	2064      	movs	r0, #100	; 0x64
}
 800060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
  }

  XMC_SCU_lDelay(100UL);
 8000610:	f7ff bef0 	b.w	80003f4 <XMC_SCU_lDelay>
 8000614:	50004710 	.word	0x50004710

08000618 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <XMC_SCU_HIB_EnableHibernateDomain+0x2c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	07d2      	lsls	r2, r2, #31
 800061e:	d504      	bpl.n	800062a <XMC_SCU_HIB_EnableHibernateDomain+0x12>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <XMC_SCU_HIB_EnableHibernateDomain+0x30>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	0590      	lsls	r0, r2, #22
 8000626:	d406      	bmi.n	8000636 <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
 8000628:	4770      	bx	lr
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 800062a:	2201      	movs	r2, #1
 800062c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	07d1      	lsls	r1, r2, #31
 8000632:	d5fc      	bpl.n	800062e <XMC_SCU_HIB_EnableHibernateDomain+0x16>
 8000634:	e7f4      	b.n	8000620 <XMC_SCU_HIB_EnableHibernateDomain+0x8>
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063a:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	0592      	lsls	r2, r2, #22
 8000640:	d4fc      	bmi.n	800063c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
 8000642:	4770      	bx	lr
 8000644:	50004200 	.word	0x50004200
 8000648:	50004400 	.word	0x50004400

0800064c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x10>)
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	f080 0008 	eor.w	r0, r0, #8
}
 8000654:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	50004300 	.word	0x50004300

08000660 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 8000662:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000666:	60da      	str	r2, [r3, #12]
/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 800066a:	69d1      	ldr	r1, [r2, #28]
 800066c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000670:	61d1      	str	r1, [r2, #28]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000672:	6859      	ldr	r1, [r3, #4]
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000674:	0208      	lsls	r0, r1, #8
 8000676:	d5fc      	bpl.n	8000672 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x12>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000678:	490a      	ldr	r1, [pc, #40]	; (80006a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 800067a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800067e:	60c8      	str	r0, [r1, #12]
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000680:	2108      	movs	r1, #8
 8000682:	6051      	str	r1, [r2, #4]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000684:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000686:	0391      	lsls	r1, r2, #14
 8000688:	d5fc      	bpl.n	8000684 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x24>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 800068c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000690:	60d1      	str	r1, [r2, #12]
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000692:	4905      	ldr	r1, [pc, #20]	; (80006a8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 8000694:	68ca      	ldr	r2, [r1, #12]
 8000696:	f042 0208 	orr.w	r2, r2, #8
 800069a:	60ca      	str	r2, [r1, #12]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 800069c:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 800069e:	0312      	lsls	r2, r2, #12
 80006a0:	d5fc      	bpl.n	800069c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>
}
 80006a2:	4770      	bx	lr
 80006a4:	50004074 	.word	0x50004074
 80006a8:	50004300 	.word	0x50004300

080006ac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80006ae:	4d0c      	ldr	r5, [pc, #48]	; (80006e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x34>)

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006b0:	4e0c      	ldr	r6, [pc, #48]	; (80006e4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x38>)
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80006b2:	686b      	ldr	r3, [r5, #4]
 80006b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b8:	606b      	str	r3, [r5, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006ba:	6874      	ldr	r4, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80006bc:	f000 fd78 	bl	80011b0 <OSCHP_GetFrequency>
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x3c>)
 80006c2:	fbb0 f0f3 	udiv	r0, r0, r3
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006c6:	f424 2370 	bic.w	r3, r4, #983040	; 0xf0000
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80006ca:	3801      	subs	r0, #1
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80006cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80006d4:	6073      	str	r3, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80006d6:	686b      	ldr	r3, [r5, #4]
 80006d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006dc:	606b      	str	r3, [r5, #4]
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	50004710 	.word	0x50004710
 80006e4:	50004700 	.word	0x50004700
 80006e8:	002625a0 	.word	0x002625a0

080006ec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:
}

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x14>)
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	f400 7060 	and.w	r0, r0, #896	; 0x380
}
 80006f4:	f5a0 7360 	sub.w	r3, r0, #896	; 0x380
 80006f8:	4258      	negs	r0, r3
 80006fa:	4158      	adcs	r0, r3
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	50004710 	.word	0x50004710

08000704 <XMC_SCU_CLOCK_EnableSystemPll>:
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <XMC_SCU_CLOCK_EnableSystemPll+0x10>)
 8000706:	6853      	ldr	r3, [r2, #4]
 8000708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800070c:	f023 0302 	bic.w	r3, r3, #2
 8000710:	6053      	str	r3, [r2, #4]
 8000712:	4770      	bx	lr
 8000714:	50004710 	.word	0x50004710

08000718 <XMC_SCU_CLOCK_DisableSystemPll>:
}

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <XMC_SCU_CLOCK_DisableSystemPll+0x10>)
 800071a:	6853      	ldr	r3, [r2, #4]
 800071c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6053      	str	r3, [r2, #4]
 8000726:	4770      	bx	lr
 8000728:	50004710 	.word	0x50004710

0800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800072c:	4a05      	ldr	r2, [pc, #20]	; (8000744 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x18>)
 800072e:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000730:	3801      	subs	r0, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000732:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000736:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800073a:	6093      	str	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 800073c:	2032      	movs	r0, #50	; 0x32
 800073e:	f7ff be59 	b.w	80003f4 <XMC_SCU_lDelay>
 8000742:	bf00      	nop
 8000744:	50004710 	.word	0x50004710

08000748 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800074c:	460c      	mov	r4, r1
 800074e:	4605      	mov	r5, r0
 8000750:	4690      	mov	r8, r2
 8000752:	461f      	mov	r7, r3
 8000754:	9e06      	ldr	r6, [sp, #24]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000756:	f7ff fea7 	bl	80004a8 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800075a:	2c01      	cmp	r4, #1
 800075c:	4c31      	ldr	r4, [pc, #196]	; (8000824 <XMC_SCU_CLOCK_StartSystemPll+0xdc>)
 800075e:	d152      	bne.n	8000806 <XMC_SCU_CLOCK_StartSystemPll+0xbe>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000760:	b935      	cbnz	r5, 8000770 <XMC_SCU_CLOCK_StartSystemPll+0x28>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000762:	f000 fd25 	bl	80011b0 <OSCHP_GetFrequency>
 8000766:	4d30      	ldr	r5, [pc, #192]	; (8000828 <XMC_SCU_CLOCK_StartSystemPll+0xe0>)
 8000768:	fbb0 f0f5 	udiv	r0, r0, r5
 800076c:	0580      	lsls	r0, r0, #22
 800076e:	e001      	b.n	8000774 <XMC_SCU_CLOCK_StartSystemPll+0x2c>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000770:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000774:	6863      	ldr	r3, [r4, #4]
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6063      	str	r3, [r4, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 800077c:	6863      	ldr	r3, [r4, #4]
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6063      	str	r3, [r4, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000784:	68a1      	ldr	r1, [r4, #8]
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <XMC_SCU_CLOCK_StartSystemPll+0xe4>)
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000788:	f108 32ff 	add.w	r2, r8, #4294967295

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800078c:	400b      	ands	r3, r1
 800078e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000792:	1e7a      	subs	r2, r7, #1
 8000794:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000798:	4378      	muls	r0, r7
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800079a:	2318      	movs	r3, #24
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800079c:	fbb0 f5f8 	udiv	r5, r0, r8
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80007a0:	fbb5 f3f3 	udiv	r3, r5, r3
 80007a4:	0d9b      	lsrs	r3, r3, #22
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80007a6:	3b01      	subs	r3, #1

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80007a8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80007ac:	60a3      	str	r3, [r4, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80007ae:	6863      	ldr	r3, [r4, #4]
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	6063      	str	r3, [r4, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80007b6:	6863      	ldr	r3, [r4, #4]
 80007b8:	f023 0310 	bic.w	r3, r3, #16
 80007bc:	6063      	str	r3, [r4, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80007be:	6863      	ldr	r3, [r4, #4]
 80007c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c4:	6063      	str	r3, [r4, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <XMC_SCU_CLOCK_StartSystemPll+0xdc>)
 80007ca:	0759      	lsls	r1, r3, #29
 80007cc:	d5fb      	bpl.n	80007c6 <XMC_SCU_CLOCK_StartSystemPll+0x7e>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80007ce:	6853      	ldr	r3, [r2, #4]
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	07da      	lsls	r2, r3, #31
 80007da:	d4fc      	bmi.n	80007d6 <XMC_SCU_CLOCK_StartSystemPll+0x8e>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80007dc:	203c      	movs	r0, #60	; 0x3c
 80007de:	fbb5 f0f0 	udiv	r0, r5, r0
 80007e2:	0d80      	lsrs	r0, r0, #22
    if (kdiv < kdiv_temp)
 80007e4:	4286      	cmp	r6, r0
 80007e6:	d201      	bcs.n	80007ec <XMC_SCU_CLOCK_StartSystemPll+0xa4>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80007e8:	f7ff ffa0 	bl	800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80007ec:	205a      	movs	r0, #90	; 0x5a
 80007ee:	fbb5 f0f0 	udiv	r0, r5, r0
 80007f2:	0d80      	lsrs	r0, r0, #22
    if (kdiv < kdiv_temp)
 80007f4:	4286      	cmp	r6, r0
 80007f6:	d201      	bcs.n	80007fc <XMC_SCU_CLOCK_StartSystemPll+0xb4>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80007f8:	f7ff ff98 	bl	800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80007fc:	4630      	mov	r0, r6
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 80007fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (kdiv < kdiv_temp)
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000802:	f7ff bf93 	b.w	800072c <XMC_SCU_CLOCK_StepSystemPllFrequency>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000806:	68a3      	ldr	r3, [r4, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000808:	3e01      	subs	r6, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800080a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800080e:	431e      	orrs	r6, r3
 8000810:	60a6      	str	r6, [r4, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000812:	6863      	ldr	r3, [r4, #4]
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6063      	str	r3, [r4, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	07db      	lsls	r3, r3, #31
 800081e:	d5fc      	bpl.n	800081a <XMC_SCU_CLOCK_StartSystemPll+0xd2>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000824:	50004710 	.word	0x50004710
 8000828:	000f4240 	.word	0x000f4240
 800082c:	f08080ff 	.word	0xf08080ff

08000830 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000832:	4604      	mov	r4, r0
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fe19 	bl	800046c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800083a:	f7ff feed 	bl	8000618 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800083e:	79e3      	ldrb	r3, [r4, #7]
 8000840:	b91b      	cbnz	r3, 800084a <XMC_SCU_CLOCK_Init+0x1a>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000842:	7a60      	ldrb	r0, [r4, #9]
 8000844:	f7ff fe50 	bl	80004e8 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000848:	e006      	b.n	8000858 <XMC_SCU_CLOCK_Init+0x28>

  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800084a:	f7ff ff09 	bl	8000660 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800084e:	f7ff fefd 	bl	800064c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000852:	2800      	cmp	r0, #0
 8000854:	d0fb      	beq.n	800084e <XMC_SCU_CLOCK_Init+0x1e>
 8000856:	e7f4      	b.n	8000842 <XMC_SCU_CLOCK_Init+0x12>
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <XMC_SCU_CLOCK_Init+0x98>)
 800085a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
  while (XMC_SCU_GetMirrorStatus() != 0)
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1fa      	bne.n	8000858 <XMC_SCU_CLOCK_Init+0x28>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000862:	7a20      	ldrb	r0, [r4, #8]
 8000864:	f7ff febe 	bl	80005e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000868:	7c20      	ldrb	r0, [r4, #16]
 800086a:	f7ff fe4d 	bl	8000508 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800086e:	7c60      	ldrb	r0, [r4, #17]
 8000870:	f7ff fe5e 	bl	8000530 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000874:	7ca0      	ldrb	r0, [r4, #18]
 8000876:	f7ff fe51 	bl	800051c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800087a:	7ce0      	ldrb	r0, [r4, #19]
 800087c:	f7ff fe62 	bl	8000544 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000880:	79a3      	ldrb	r3, [r4, #6]
 8000882:	b923      	cbnz	r3, 800088e <XMC_SCU_CLOCK_Init+0x5e>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000884:	78e3      	ldrb	r3, [r4, #3]
 8000886:	b94b      	cbnz	r3, 800089c <XMC_SCU_CLOCK_Init+0x6c>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000888:	f7ff ff46 	bl	8000718 <XMC_SCU_CLOCK_DisableSystemPll>
 800088c:	e010      	b.n	80008b0 <XMC_SCU_CLOCK_Init+0x80>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800088e:	f7ff ff0d 	bl	80006ac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000892:	f7ff ff2b 	bl	80006ec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000896:	2800      	cmp	r0, #0
 8000898:	d0fb      	beq.n	8000892 <XMC_SCU_CLOCK_Init+0x62>
 800089a:	e7f3      	b.n	8000884 <XMC_SCU_CLOCK_Init+0x54>
    XMC_SCU_CLOCK_DisableSystemPll();
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800089c:	f7ff ff32 	bl	8000704 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80008a0:	78a5      	ldrb	r5, [r4, #2]
 80008a2:	88a0      	ldrh	r0, [r4, #4]
 80008a4:	78e1      	ldrb	r1, [r4, #3]
 80008a6:	7862      	ldrb	r2, [r4, #1]
 80008a8:	7823      	ldrb	r3, [r4, #0]
 80008aa:	9500      	str	r5, [sp, #0]
 80008ac:	f7ff ff4c 	bl	8000748 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80008b0:	68e0      	ldr	r0, [r4, #12]
 80008b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80008b6:	d101      	bne.n	80008bc <XMC_SCU_CLOCK_Init+0x8c>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80008b8:	f7ff fdd8 	bl	800046c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
}
 80008bc:	b003      	add	sp, #12
 80008be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
 80008c2:	f7ff bcf7 	b.w	80002b4 <SystemCoreClockUpdate>
 80008c6:	bf00      	nop
 80008c8:	50004000 	.word	0x50004000

080008cc <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80008cc:	b510      	push	{r4, lr}
 80008ce:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80008d0:	2010      	movs	r0, #16
 80008d2:	f7ff fe5f 	bl	8000594 <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <XMC_CCU4_EnableModule+0x3c>)
 80008d8:	429c      	cmp	r4, r3
 80008da:	d101      	bne.n	80008e0 <XMC_CCU4_EnableModule+0x14>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80008dc:	2004      	movs	r0, #4
 80008de:	e00d      	b.n	80008fc <XMC_CCU4_EnableModule+0x30>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <XMC_CCU4_EnableModule+0x40>)
 80008e2:	429c      	cmp	r4, r3
 80008e4:	d101      	bne.n	80008ea <XMC_CCU4_EnableModule+0x1e>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80008e6:	2008      	movs	r0, #8
 80008e8:	e008      	b.n	80008fc <XMC_CCU4_EnableModule+0x30>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <XMC_CCU4_EnableModule+0x44>)
 80008ec:	429c      	cmp	r4, r3
 80008ee:	d101      	bne.n	80008f4 <XMC_CCU4_EnableModule+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80008f0:	2010      	movs	r0, #16
 80008f2:	e003      	b.n	80008fc <XMC_CCU4_EnableModule+0x30>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <XMC_CCU4_EnableModule+0x48>)
 80008f6:	429c      	cmp	r4, r3
 80008f8:	d104      	bne.n	8000904 <XMC_CCU4_EnableModule+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80008fa:	4807      	ldr	r0, [pc, #28]	; (8000918 <XMC_CCU4_EnableModule+0x4c>)
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
 80008fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000900:	f7ff bd8e 	b.w	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	4000c000 	.word	0x4000c000
 800090c:	40010000 	.word	0x40010000
 8000910:	40014000 	.word	0x40014000
 8000914:	48004000 	.word	0x48004000
 8000918:	10000001 	.word	0x10000001

0800091c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 800091c:	b538      	push	{r3, r4, r5, lr}
 800091e:	4604      	mov	r4, r0
 8000920:	460d      	mov	r5, r1
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000922:	f7ff ffd3 	bl	80008cc <XMC_CCU4_EnableModule>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092a:	60e3      	str	r3, [r4, #12]
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 800092c:	6823      	ldr	r3, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800092e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000932:	ea43 3185 	orr.w	r1, r3, r5, lsl #14
  
  module->GCTRL = gctrl;
 8000936:	6021      	str	r1, [r4, #0]
 8000938:	bd38      	pop	{r3, r4, r5, pc}

0800093a <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800093a:	680b      	ldr	r3, [r1, #0]
 800093c:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800093e:	794b      	ldrb	r3, [r1, #5]
 8000940:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000944:	051b      	lsls	r3, r3, #20
 8000946:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000948:	790b      	ldrb	r3, [r1, #4]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000950:	794b      	ldrb	r3, [r1, #5]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000958:	794b      	ldrb	r3, [r1, #5]
 800095a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800095e:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000960:	790b      	ldrb	r3, [r1, #4]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000966:	4770      	bx	lr

08000968 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000968:	2909      	cmp	r1, #9
 800096a:	b530      	push	{r4, r5, lr}
 800096c:	bf9c      	itt	ls
 800096e:	4c09      	ldrls	r4, [pc, #36]	; (8000994 <XMC_CCU4_SLICE_SetInterruptNode+0x2c>)
 8000970:	4d09      	ldrls	r5, [pc, #36]	; (8000998 <XMC_CCU4_SLICE_SetInterruptNode+0x30>)

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000972:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 8000976:	bf99      	ittee	ls
 8000978:	5c64      	ldrbls	r4, [r4, r1]
 800097a:	f835 1011 	ldrhls.w	r1, [r5, r1, lsl #1]
 800097e:	f44f 5140 	movhi.w	r1, #12288	; 0x3000
 8000982:	240c      	movhi	r4, #12
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
 8000984:	ea23 0301 	bic.w	r3, r3, r1
  srs |= (uint32_t)sr << pos;
 8000988:	40a2      	lsls	r2, r4
 800098a:	431a      	orrs	r2, r3
  slice->SRS = srs;
 800098c:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 8000990:	bd30      	pop	{r4, r5, pc}
 8000992:	bf00      	nop
 8000994:	08001340 	.word	0x08001340
 8000998:	0800134a 	.word	0x0800134a

0800099c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	460e      	mov	r6, r1
 80009a0:	4604      	mov	r4, r0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 80009a2:	f000 f96b 	bl	8000c7c <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 80009a6:	7a35      	ldrb	r5, [r6, #8]
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
 80009a8:	7933      	ldrb	r3, [r6, #4]
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80009aa:	6831      	ldr	r1, [r6, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
  
  if(config->oversampling != 0U)
 80009ac:	2d00      	cmp	r5, #0
  {
    oversampling = (uint32_t)config->oversampling;
 80009ae:	bf08      	it	eq
 80009b0:	2510      	moveq	r5, #16
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80009b2:	4620      	mov	r0, r4
 80009b4:	462a      	mov	r2, r5
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
 80009b6:	b113      	cbz	r3, 80009be <XMC_UART_CH_Init+0x22>
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80009b8:	f000 f88c 	bl	8000ad4 <XMC_USIC_CH_SetBaudrateEx>
 80009bc:	e001      	b.n	80009c2 <XMC_UART_CH_Init+0x26>
  }
  else
  {
    /* Fractional divider mode */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80009be:	f000 f84b 	bl	8000a58 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80009c2:	79f3      	ldrb	r3, [r6, #7]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80009cc:	086d      	lsrs	r5, r5, #1
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	3501      	adds	r5, #1
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80009d4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80009d8:	63e3      	str	r3, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80009da:	7973      	ldrb	r3, [r6, #5]
 80009dc:	3b01      	subs	r3, #1
 80009de:	061b      	lsls	r3, r3, #24
 80009e0:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80009e4:	6363      	str	r3, [r4, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80009e6:	79b3      	ldrb	r3, [r6, #6]
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80009e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80009ea:	b903      	cbnz	r3, 80009ee <XMC_UART_CH_Init+0x52>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80009ec:	7973      	ldrb	r3, [r6, #5]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80009f4:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80009f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009fa:	63a3      	str	r3, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000a02:	8973      	ldrh	r3, [r6, #10]
 8000a04:	6423      	str	r3, [r4, #64]	; 0x40
 8000a06:	bd70      	pop	{r4, r5, r6, pc}

08000a08 <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8000a08:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000a0c:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000a10:	d108      	bne.n	8000a24 <XMC_UART_CH_Transmit+0x1c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000a12:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000a14:	061b      	lsls	r3, r3, #24
 8000a16:	d4fc      	bmi.n	8000a12 <XMC_UART_CH_Transmit+0xa>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8000a1e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000a22:	4770      	bx	lr
  }
  else
  {
    channel->IN[0U] = data;
 8000a24:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000a28:	4770      	bx	lr

08000a2a <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000a2a:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000a2e:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint16_t)channel->RBUF;
 8000a32:	bf0c      	ite	eq
 8000a34:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000a36:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000a3a:	b280      	uxth	r0, r0
  }

  return retval;
}
 8000a3c:	4770      	bx	lr
	...

08000a40 <XMC_USIC_Enable.part.0>:
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
 8000a40:	b508      	push	{r3, lr}
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
#endif 
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <XMC_USIC_Enable.part.0+0x14>)
 8000a44:	f7ff fcec 	bl	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <XMC_USIC_Enable.part.0+0x14>)
 8000a4a:	f7ff fcf3 	bl	8000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d1fa      	bne.n	8000a48 <XMC_USIC_Enable.part.0+0x8>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8000a52:	bd08      	pop	{r3, pc}
 8000a54:	10000080 	.word	0x10000080

08000a58 <XMC_USIC_CH_SetBaudrate>:
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000a58:	2963      	cmp	r1, #99	; 0x63
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a5e:	4605      	mov	r5, r0
 8000a60:	460c      	mov	r4, r1
 8000a62:	4616      	mov	r6, r2
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000a64:	d930      	bls.n	8000ac8 <XMC_USIC_CH_SetBaudrate+0x70>
 8000a66:	b37a      	cbz	r2, 8000ac8 <XMC_USIC_CH_SetBaudrate+0x70>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000a68:	f7ff fcf4 	bl	8000454 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8000a6c:	2164      	movs	r1, #100	; 0x64
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
 8000a6e:	f240 3cff 	movw	ip, #1023	; 0x3ff
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000a72:	fbb0 fef1 	udiv	lr, r0, r1
    rate = rate / 100U;
 8000a76:	fbb4 f4f1 	udiv	r4, r4, r1

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
 8000a7a:	2101      	movs	r1, #1
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8000a7c:	4374      	muls	r4, r6
 8000a7e:	ebce 278e 	rsb	r7, lr, lr, lsl #10
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
 8000a82:	460a      	mov	r2, r1
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000a84:	4660      	mov	r0, ip
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8000a86:	fbb7 f3f4 	udiv	r3, r7, r4
      pdiv_int = pdiv >> 10U;
 8000a8a:	ea4f 2893 	mov.w	r8, r3, lsr #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000a8e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8000a92:	d206      	bcs.n	8000aa2 <XMC_USIC_CH_SetBaudrate+0x4a>

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
 8000a94:	f3c3 0309 	ubfx	r3, r3, #0, #10

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000a98:	4563      	cmp	r3, ip
 8000a9a:	bf3e      	ittt	cc
 8000a9c:	469c      	movcc	ip, r3
 8000a9e:	4641      	movcc	r1, r8
 8000aa0:	4602      	movcc	r2, r0

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000aa2:	3801      	subs	r0, #1
 8000aa4:	ebce 0707 	rsb	r7, lr, r7
 8000aa8:	d1ed      	bne.n	8000a86 <XMC_USIC_CH_SetBaudrate+0x2e>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8000aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000aae:	612a      	str	r2, [r5, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000ab0:	696a      	ldr	r2, [r5, #20]
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <XMC_USIC_CH_SetBaudrate+0x78>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000ab4:	3e01      	subs	r6, #1
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000ab6:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8000ab8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8000abc:	3901      	subs	r1, #1

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000ac2:	616b      	str	r3, [r5, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8000ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8000ac8:	2001      	movs	r0, #1
  }
  
  return status;
}
 8000aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ace:	bf00      	nop
 8000ad0:	fc0080ef 	.word	0xfc0080ef

08000ad4 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ad8:	460f      	mov	r7, r1
 8000ada:	4690      	mov	r8, r2
 8000adc:	4605      	mov	r5, r0
  uint32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8000ade:	f7ff fcb9 	bl	8000454 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
  uint32_t brg_clock = rate * oversampling;
 8000ae2:	fb08 f207 	mul.w	r2, r8, r7
  uint32_t actual_rate_upper;
  uint32_t actual_rate_lower;
  XMC_USIC_CH_STATUS_t status;
  uint32_t pdiv = 1;

  if (peripheral_clock > brg_clock)
 8000ae6:	4290      	cmp	r0, r2
 8000ae8:	d937      	bls.n	8000b5a <XMC_USIC_CH_SetBaudrateEx+0x86>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8000aea:	fbb0 f3f2 	udiv	r3, r0, r2
 8000aee:	0051      	lsls	r1, r2, #1
  uint32_t brg_clock = rate * oversampling;
  uint32_t divider_step;
  uint32_t actual_rate_upper;
  uint32_t actual_rate_lower;
  XMC_USIC_CH_STATUS_t status;
  uint32_t pdiv = 1;
 8000af0:	2601      	movs	r6, #1

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8000af2:	f240 34fe 	movw	r4, #1022	; 0x3fe
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d904      	bls.n	8000b04 <XMC_USIC_CH_SetBaudrateEx+0x30>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8000afa:	fbb0 f3f1 	udiv	r3, r0, r1
  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
    {
      pdiv++;
 8000afe:	3601      	adds	r6, #1
 8000b00:	4411      	add	r1, r2
 8000b02:	e7f6      	b.n	8000af2 <XMC_USIC_CH_SetBaudrateEx+0x1e>
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	fb08 f406 	mul.w	r4, r8, r6
 8000b0a:	fb03 f106 	mul.w	r1, r3, r6
 8000b0e:	4354      	muls	r4, r2
 8000b10:	fbb0 f4f4 	udiv	r4, r0, r4

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8000b14:	1b3c      	subs	r4, r7, r4
 8000b16:	2c00      	cmp	r4, #0
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8000b18:	fb08 f101 	mul.w	r1, r8, r1
 8000b1c:	fbb0 f0f1 	udiv	r0, r0, r1
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8000b20:	eba7 0700 	sub.w	r7, r7, r0
 8000b24:	bfb8      	it	lt
 8000b26:	4264      	neglt	r4, r4
 8000b28:	2f00      	cmp	r7, #0
 8000b2a:	bfb8      	it	lt
 8000b2c:	427f      	neglt	r7, r7
    {
      divider_step += 1;
 8000b2e:	42bc      	cmp	r4, r7
 8000b30:	bfb8      	it	lt
 8000b32:	4613      	movlt	r3, r2
    }

    divider_step = 1024 - divider_step;
 8000b34:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	612b      	str	r3, [r5, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b3e:	696a      	ldr	r2, [r5, #20]
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <XMC_USIC_CH_SetBaudrateEx+0x8c>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000b42:	f108 38ff 	add.w	r8, r8, #4294967295


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b46:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8000b48:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
 8000b4c:	3e01      	subs	r6, #1

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000b4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b52:	616b      	str	r3, [r5, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8000b54:	2000      	movs	r0, #0
 8000b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8000b5a:	2001      	movs	r0, #1
  }

  return status;
}
 8000b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b60:	fc0080ef 	.word	0xfc0080ef

08000b64 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8000b64:	b530      	push	{r4, r5, lr}
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8000b66:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 8000b6a:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8000b6e:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8000b72:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8000b76:	4c05      	ldr	r4, [pc, #20]	; (8000b8c <XMC_USIC_CH_TXFIFO_Configure+0x28>)
 8000b78:	402c      	ands	r4, r5
 8000b7a:	4321      	orrs	r1, r4
 8000b7c:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8000b80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8000b84:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8000b88:	bd30      	pop	{r4, r5, pc}
 8000b8a:	bf00      	nop
 8000b8c:	f8ffc0c0 	.word	0xf8ffc0c0

08000b90 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8000b90:	b530      	push	{r4, r5, lr}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8000b92:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
 8000b96:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8000b9a:	f8c0 410c 	str.w	r4, [r0, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8000b9e:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c
 8000ba2:	4c06      	ldr	r4, [pc, #24]	; (8000bbc <XMC_USIC_CH_RXFIFO_Configure+0x2c>)
 8000ba4:	402c      	ands	r4, r5
 8000ba6:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8000baa:	4321      	orrs	r1, r4
 8000bac:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8000bb0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000bb4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8000bb8:	bd30      	pop	{r4, r5, pc}
 8000bba:	bf00      	nop
 8000bbc:	efffc0c0 	.word	0xefffc0c0

08000bc0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8000bc0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000bc4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bc8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8000bcc:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8000bd0:	0609      	lsls	r1, r1, #24
 8000bd2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8000bd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8000be0:	4770      	bx	lr

08000be2 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8000be2:	b510      	push	{r4, lr}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000be4:	2307      	movs	r3, #7
 8000be6:	6984      	ldr	r4, [r0, #24]
 8000be8:	408b      	lsls	r3, r1
 8000bea:	ea24 0303 	bic.w	r3, r4, r3
                  (service_request << (uint32_t)interrupt_node));
 8000bee:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	6182      	str	r2, [r0, #24]
 8000bf4:	bd10      	pop	{r4, pc}

08000bf6 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8000bf6:	b510      	push	{r4, lr}
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 8000bfe:	408b      	lsls	r3, r1
 8000c00:	ea24 0303 	bic.w	r3, r4, r3
                   (service_request << (uint32_t)interrupt_node));
 8000c04:	408a      	lsls	r2, r1

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000c06:	431a      	orrs	r2, r3
 8000c08:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 8000c0c:	bd10      	pop	{r4, pc}

08000c0e <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8000c0e:	b510      	push	{r4, lr}
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000c10:	2307      	movs	r3, #7
 8000c12:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
 8000c16:	408b      	lsls	r3, r1
 8000c18:	ea24 0303 	bic.w	r3, r4, r3
                   (service_request << (uint32_t)interrupt_node));
 8000c1c:	408a      	lsls	r2, r1

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8000c24:	bd10      	pop	{r4, pc}
	...

08000c28 <XMC_USIC_Enable>:
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8000c28:	b508      	push	{r3, lr}
  if (usic == USIC0)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <XMC_USIC_Enable+0x44>)
 8000c2c:	4298      	cmp	r0, r3
 8000c2e:	d10a      	bne.n	8000c46 <XMC_USIC_Enable+0x1e>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8000c30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c34:	f7ff fbf4 	bl	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8000c38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c3c:	f7ff fbfa 	bl	8000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d1f9      	bne.n	8000c38 <XMC_USIC_Enable+0x10>
 8000c44:	bd08      	pop	{r3, pc}
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <XMC_USIC_Enable+0x48>)
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	d103      	bne.n	8000c54 <XMC_USIC_Enable+0x2c>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8000c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c50:	f7ff bef6 	b.w	8000a40 <XMC_USIC_Enable.part.0>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
#endif 
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <XMC_USIC_Enable+0x4c>)
 8000c56:	4298      	cmp	r0, r3
 8000c58:	d107      	bne.n	8000c6a <XMC_USIC_Enable+0x42>
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <XMC_USIC_Enable+0x50>)
 8000c5c:	f7ff fbe0 	bl	8000420 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <XMC_USIC_Enable+0x50>)
 8000c62:	f7ff fbe7 	bl	8000434 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d1fa      	bne.n	8000c60 <XMC_USIC_Enable+0x38>
 8000c6a:	bd08      	pop	{r3, pc}
 8000c6c:	40030008 	.word	0x40030008
 8000c70:	48020008 	.word	0x48020008
 8000c74:	48024008 	.word	0x48024008
 8000c78:	10000100 	.word	0x10000100

08000c7c <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <XMC_USIC_CH_Enable+0x54>)
 8000c7e:	4298      	cmp	r0, r3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8000c80:	b510      	push	{r4, lr}
 8000c82:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000c84:	d003      	beq.n	8000c8e <XMC_USIC_CH_Enable+0x12>
 8000c86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d101      	bne.n	8000c92 <XMC_USIC_CH_Enable+0x16>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <XMC_USIC_CH_Enable+0x58>)
 8000c90:	e011      	b.n	8000cb6 <XMC_USIC_CH_Enable+0x3a>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <XMC_USIC_CH_Enable+0x5c>)
 8000c94:	4298      	cmp	r0, r3
 8000c96:	d003      	beq.n	8000ca0 <XMC_USIC_CH_Enable+0x24>
 8000c98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	d102      	bne.n	8000ca6 <XMC_USIC_CH_Enable+0x2a>
 8000ca0:	f7ff fece 	bl	8000a40 <XMC_USIC_Enable.part.0>
 8000ca4:	e009      	b.n	8000cba <XMC_USIC_CH_Enable+0x3e>
  {
    XMC_USIC_Enable(XMC_USIC1);
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <XMC_USIC_CH_Enable+0x60>)
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	d003      	beq.n	8000cb4 <XMC_USIC_CH_Enable+0x38>
 8000cac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	d102      	bne.n	8000cba <XMC_USIC_CH_Enable+0x3e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <XMC_USIC_CH_Enable+0x64>)
 8000cb6:	f7ff ffb7 	bl	8000c28 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8000cba:	2303      	movs	r3, #3
 8000cbc:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8000cbe:	68e3      	ldr	r3, [r4, #12]
 8000cc0:	07db      	lsls	r3, r3, #31
 8000cc2:	d5fc      	bpl.n	8000cbe <XMC_USIC_CH_Enable+0x42>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8000cc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cc6:	f023 030f 	bic.w	r3, r3, #15
 8000cca:	6423      	str	r3, [r4, #64]	; 0x40
 8000ccc:	bd10      	pop	{r4, pc}
 8000cce:	bf00      	nop
 8000cd0:	40030000 	.word	0x40030000
 8000cd4:	40030008 	.word	0x40030008
 8000cd8:	48020000 	.word	0x48020000
 8000cdc:	48024000 	.word	0x48024000
 8000ce0:	48024008 	.word	0x48024008

08000ce4 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8000ce4:	4770      	bx	lr

08000ce6 <UART_lReconfigureRxFIFO>:
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8000ce6:	6843      	ldr	r3, [r0, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8000ce8:	6800      	ldr	r0, [r0, #0]
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8000cea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000cee:	2201      	movs	r2, #1
 8000cf0:	409a      	lsls	r2, r3
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8000cf2:	4291      	cmp	r1, r2
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8000cf4:	bf34      	ite	cc
 8000cf6:	f101 32ff 	addcc.w	r2, r1, #4294967295
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8000cfa:	f102 32ff 	addcs.w	r2, r2, #4294967295
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff bf5e 	b.w	8000bc0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>

08000d04 <UART_Init>:
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8000d04:	6843      	ldr	r3, [r0, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4718      	bx	r3

08000d0a <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8000d0a:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 8000d0c:	6844      	ldr	r4, [r0, #4]
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8000d0e:	6883      	ldr	r3, [r0, #8]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 8000d10:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 8000d14:	bb2d      	cbnz	r5, 8000d62 <UART_StartTransmitIRQ+0x58>
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->tx_busy == false)
 8000d16:	7e1d      	ldrb	r5, [r3, #24]
 8000d18:	f005 06ff 	and.w	r6, r5, #255	; 0xff
 8000d1c:	bb1d      	cbnz	r5, 8000d66 <UART_StartTransmitIRQ+0x5c>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8000d1e:	b321      	cbz	r1, 8000d6a <UART_StartTransmitIRQ+0x60>
 8000d20:	b31a      	cbz	r2, 8000d6a <UART_StartTransmitIRQ+0x60>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
        ptr_runtime->tx_data_count = count;
 8000d22:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
        ptr_runtime->tx_busy = true;
 8000d24:	2201      	movs	r2, #1
 8000d26:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000d28:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8000d2c:	6019      	str	r1, [r3, #0]
        ptr_runtime->tx_data_count = count;
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8000d2e:	60de      	str	r6, [r3, #12]
 8000d30:	6803      	ldr	r3, [r0, #0]
        ptr_runtime->tx_busy = true;

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000d32:	b152      	cbz	r2, 8000d4a <UART_StartTransmitIRQ+0x40>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8000d34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d38:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
 8000d3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8000d40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d44:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8000d48:	e003      	b.n	8000d52 <UART_StartTransmitIRQ+0x48>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 8000d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8000d52:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8000d56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d5a:	408a      	lsls	r2, r1
 8000d5c:	669a      	str	r2, [r3, #104]	; 0x68
 8000d5e:	2000      	movs	r0, #0
 8000d60:	bd70      	pop	{r4, r5, r6, pc}
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8000d62:	2004      	movs	r0, #4
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
 8000d66:	2002      	movs	r0, #2
 8000d68:	bd70      	pop	{r4, r5, r6, pc}
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8000d6a:	2003      	movs	r0, #3
      }
    }
  }
  return ret_stat;
}
 8000d6c:	bd70      	pop	{r4, r5, r6, pc}

08000d6e <UART_Transmit>:
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 8000d6e:	6843      	ldr	r3, [r0, #4]
 8000d70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000d74:	b90b      	cbnz	r3, 8000d7a <UART_Transmit+0xc>
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 8000d76:	f7ff bfc8 	b.w	8000d0a <UART_StartTransmitIRQ>
#endif
  default:
    break;
  }
  return ret_stat;
}
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	4770      	bx	lr

08000d7e <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8000d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8000d80:	6845      	ldr	r5, [r0, #4]
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8000d82:	6883      	ldr	r3, [r0, #8]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8000d84:	f895 602a 	ldrb.w	r6, [r5, #42]	; 0x2a
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8000d88:	4604      	mov	r4, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8000d8a:	bb26      	cbnz	r6, 8000dd6 <UART_StartReceiveIRQ+0x58>
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->rx_busy == false)
 8000d8c:	7e5f      	ldrb	r7, [r3, #25]
 8000d8e:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8000d92:	bb17      	cbnz	r7, 8000dda <UART_StartReceiveIRQ+0x5c>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8000d94:	b319      	cbz	r1, 8000dde <UART_StartReceiveIRQ+0x60>
 8000d96:	b312      	cbz	r2, 8000dde <UART_StartReceiveIRQ+0x60>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 8000d98:	6059      	str	r1, [r3, #4]
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
 8000d9a:	2101      	movs	r1, #1
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
 8000d9c:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 8000d9e:	7659      	strb	r1, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 8000da0:	615e      	str	r6, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000da2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8000da6:	6805      	ldr	r5, [r0, #0]
 8000da8:	b17b      	cbz	r3, 8000dca <UART_StartReceiveIRQ+0x4c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8000daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dae:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8000db2:	4611      	mov	r1, r2
 8000db4:	f7ff ff97 	bl	8000ce6 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8000db8:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 8000dba:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8000dbe:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8000dc2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 8000dca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000dcc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000dd0:	642a      	str	r2, [r5, #64]	; 0x40
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8000dd6:	2004      	movs	r0, #4
 8000dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
 8000dda:	2002      	movs	r0, #2
 8000ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
        ret_stat = UART_STATUS_SUCCESS;
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8000dde:	2003      	movs	r0, #3
      }
    }
  }
  return ret_stat;
}
 8000de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000de2 <UART_Receive>:
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
 8000de2:	6843      	ldr	r3, [r0, #4]
 8000de4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000de8:	b90b      	cbnz	r3, 8000dee <UART_Receive+0xc>
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 8000dea:	f7ff bfc8 	b.w	8000d7e <UART_StartReceiveIRQ>
#endif
  default:
    break;
  }
  return ret_stat;
}
 8000dee:	2004      	movs	r0, #4
 8000df0:	4770      	bx	lr

08000df2 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8000df2:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8000df4:	6884      	ldr	r4, [r0, #8]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8000df6:	68e3      	ldr	r3, [r4, #12]
 8000df8:	68a2      	ldr	r2, [r4, #8]
 8000dfa:	4293      	cmp	r3, r2
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8000dfc:	4605      	mov	r5, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8000dfe:	d21e      	bcs.n	8000e3e <UART_lTransmitHandler+0x4c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000e00:	6842      	ldr	r2, [r0, #4]
 8000e02:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8000e06:	b18a      	cbz	r2, 8000e2c <UART_lTransmitHandler+0x3a>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8000e08:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8000e0a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8000e0e:	04de      	lsls	r6, r3, #19
 8000e10:	d40b      	bmi.n	8000e2a <UART_lTransmitHandler+0x38>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8000e12:	68e3      	ldr	r3, [r4, #12]
 8000e14:	68a2      	ldr	r2, [r4, #8]
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d230      	bcs.n	8000e7c <UART_lTransmitHandler+0x8a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8000e1a:	6822      	ldr	r2, [r4, #0]
 8000e1c:	5cd1      	ldrb	r1, [r2, r3]
 8000e1e:	f7ff fdf3 	bl	8000a08 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8000e22:	68e3      	ldr	r3, [r4, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60e3      	str	r3, [r4, #12]
 8000e28:	e7ee      	b.n	8000e08 <UART_lTransmitHandler+0x16>
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8000e2c:	6822      	ldr	r2, [r4, #0]
 8000e2e:	6800      	ldr	r0, [r0, #0]
 8000e30:	5cd1      	ldrb	r1, [r2, r3]
 8000e32:	f7ff fde9 	bl	8000a08 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8000e36:	68e3      	ldr	r3, [r4, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60e3      	str	r3, [r4, #12]
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8000e3e:	6803      	ldr	r3, [r0, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8000e40:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8000e44:	0511      	lsls	r1, r2, #20
 8000e46:	d519      	bpl.n	8000e7c <UART_lTransmitHandler+0x8a>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000e48:	6841      	ldr	r1, [r0, #4]
 8000e4a:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 8000e4e:	b132      	cbz	r2, 8000e5e <UART_lTransmitHandler+0x6c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8000e50:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8000e54:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000e58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8000e5c:	e003      	b.n	8000e66 <UART_lTransmitHandler+0x74>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8000e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000e68:	0612      	lsls	r2, r2, #24
 8000e6a:	d4fc      	bmi.n	8000e66 <UART_lTransmitHandler+0x74>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	7623      	strb	r3, [r4, #24]
      ptr_runtime->tx_data = NULL;
 8000e70:	6023      	str	r3, [r4, #0]

      if (handle->config->tx_cbhandler != NULL)
 8000e72:	688b      	ldr	r3, [r1, #8]
 8000e74:	b113      	cbz	r3, 8000e7c <UART_lTransmitHandler+0x8a>
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
      }
    }
  }
}
 8000e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ptr_runtime->tx_data = NULL;

      if (handle->config->tx_cbhandler != NULL)
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8000e7a:	4718      	bx	r3
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}

08000e7e <UART_lReceiveHandler>:
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000e7e:	6843      	ldr	r3, [r0, #4]
 8000e80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8000e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e88:	4605      	mov	r5, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8000e8a:	6884      	ldr	r4, [r0, #8]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8000e8c:	b353      	cbz	r3, 8000ee4 <UART_lReceiveHandler+0x66>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8000e8e:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8000e90:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8000e94:	071b      	lsls	r3, r3, #28
 8000e96:	d41b      	bmi.n	8000ed0 <UART_lReceiveHandler+0x52>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8000e98:	6966      	ldr	r6, [r4, #20]
 8000e9a:	6923      	ldr	r3, [r4, #16]
 8000e9c:	429e      	cmp	r6, r3
 8000e9e:	d206      	bcs.n	8000eae <UART_lReceiveHandler+0x30>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8000ea0:	6867      	ldr	r7, [r4, #4]
 8000ea2:	f7ff fdc2 	bl	8000a2a <XMC_UART_CH_GetReceivedData>
 8000ea6:	55b8      	strb	r0, [r7, r6]
        (ptr_runtime->rx_data_index)++;
 8000ea8:	6963      	ldr	r3, [r4, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	6163      	str	r3, [r4, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8000eae:	6962      	ldr	r2, [r4, #20]
 8000eb0:	6923      	ldr	r3, [r4, #16]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d1eb      	bne.n	8000e8e <UART_lReceiveHandler+0x10>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8000eb6:	2300      	movs	r3, #0
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8000eb8:	682a      	ldr	r2, [r5, #0]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8000eba:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 8000ebc:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8000ec0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8000ec4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8000ec8:	686b      	ldr	r3, [r5, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	b103      	cbz	r3, 8000ed0 <UART_lReceiveHandler+0x52>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8000ece:	4798      	blx	r3
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8000ed0:	6963      	ldr	r3, [r4, #20]
 8000ed2:	6921      	ldr	r1, [r4, #16]
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d222      	bcs.n	8000f1e <UART_lReceiveHandler+0xa0>
    {
      UART_lReconfigureRxFIFO(handle,
 8000ed8:	4628      	mov	r0, r5
 8000eda:	1ac9      	subs	r1, r1, r3
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 8000edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8000ee0:	f7ff bf01 	b.w	8000ce6 <UART_lReconfigureRxFIFO>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8000ee4:	6966      	ldr	r6, [r4, #20]
 8000ee6:	6923      	ldr	r3, [r4, #16]
 8000ee8:	429e      	cmp	r6, r3
 8000eea:	d207      	bcs.n	8000efc <UART_lReceiveHandler+0x7e>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8000eec:	6800      	ldr	r0, [r0, #0]
 8000eee:	6867      	ldr	r7, [r4, #4]
 8000ef0:	f7ff fd9b 	bl	8000a2a <XMC_UART_CH_GetReceivedData>
 8000ef4:	55b8      	strb	r0, [r7, r6]
      (ptr_runtime->rx_data_index)++;
 8000ef6:	6963      	ldr	r3, [r4, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	6163      	str	r3, [r4, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8000efc:	6962      	ldr	r2, [r4, #20]
 8000efe:	6923      	ldr	r3, [r4, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d10c      	bne.n	8000f1e <UART_lReceiveHandler+0xa0>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8000f04:	2300      	movs	r3, #0
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8000f06:	682a      	ldr	r2, [r5, #0]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8000f08:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8000f0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8000f12:	686b      	ldr	r3, [r5, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	b113      	cbz	r3, 8000f1e <UART_lReceiveHandler+0xa0>
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 8000f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8000f1c:	4718      	bx	r3
 8000f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f22 <NVIC_EncodePriority.constprop.1>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f22:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f26:	f1c0 0207 	rsb	r2, r0, #7
 8000f2a:	2a06      	cmp	r2, #6
 8000f2c:	bf28      	it	cs
 8000f2e:	2206      	movcs	r2, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f30:	b100      	cbz	r0, 8000f34 <NVIC_EncodePriority.constprop.1+0x12>
 8000f32:	3801      	subs	r0, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	2301      	movs	r3, #1
 8000f36:	4093      	lsls	r3, r2
 8000f38:	3b01      	subs	r3, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8000f3e:	4770      	bx	lr

08000f40 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8000f40:	b538      	push	{r3, r4, r5, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 8000f42:	4d2c      	ldr	r5, [pc, #176]	; (8000ff4 <UART_0_init+0xb4>)
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 8000f44:	4c2c      	ldr	r4, [pc, #176]	; (8000ff8 <UART_0_init+0xb8>)
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 8000f46:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <UART_0_init+0xbc>)
 8000f48:	4628      	mov	r0, r5
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	f7ff fa0e 	bl	800036c <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 8000f50:	4620      	mov	r0, r4
 8000f52:	492b      	ldr	r1, [pc, #172]	; (8001000 <UART_0_init+0xc0>)
 8000f54:	f7ff fd22 	bl	800099c <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000f58:	69e3      	ldr	r3, [r4, #28]
 8000f5a:	f023 0307 	bic.w	r3, r3, #7
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	61e3      	str	r3, [r4, #28]
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 1U);
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
 8000f64:	4620      	mov	r0, r4
 8000f66:	2120      	movs	r1, #32
 8000f68:	2205      	movs	r2, #5
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f7ff fdfa 	bl	8000b64 <XMC_USIC_CH_TXFIFO_Configure>
        32U,
        XMC_USIC_CH_FIFO_SIZE_32WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
 8000f70:	2100      	movs	r1, #0
 8000f72:	4620      	mov	r0, r4
 8000f74:	460b      	mov	r3, r1
 8000f76:	2205      	movs	r2, #5
 8000f78:	f7ff fe0a 	bl	8000b90 <XMC_USIC_CH_RXFIFO_Configure>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8000f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 5U, &UART_0_tx_pin_config);
 8000f7e:	4a21      	ldr	r2, [pc, #132]	; (8001004 <UART_0_init+0xc4>)
 8000f80:	f023 030f 	bic.w	r3, r3, #15
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6423      	str	r3, [r4, #64]	; 0x40
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	f7ff f9ed 	bl	800036c <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8000f92:	4620      	mov	r0, r4
 8000f94:	2110      	movs	r1, #16
 8000f96:	2200      	movs	r2, #0
 8000f98:	f7ff fe23 	bl	8000be2 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	f7ff fe28 	bl	8000bf6 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa6:	4d18      	ldr	r5, [pc, #96]	; (8001008 <UART_0_init+0xc8>)
      3U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8000fa8:	4620      	mov	r0, r4
 8000faa:	2110      	movs	r1, #16
 8000fac:	2205      	movs	r2, #5
 8000fae:	f7ff fe2e 	bl	8000c0e <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 8000fb2:	2113      	movs	r1, #19
 8000fb4:	2205      	movs	r2, #5
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff fe29 	bl	8000c0e <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
 8000fbc:	68e8      	ldr	r0, [r5, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	4c13      	ldr	r4, [pc, #76]	; (800100c <UART_0_init+0xcc>)
       0x5U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8000fc0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000fc4:	f7ff ffad 	bl	8000f22 <NVIC_EncodePriority.constprop.1>
 8000fc8:	0080      	lsls	r0, r0, #2
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	b2c0      	uxtb	r0, r0
 8000fd0:	f884 0357 	strb.w	r0, [r4, #855]	; 0x357
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd4:	60a3      	str	r3, [r4, #8]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd6:	68e8      	ldr	r0, [r5, #12]
                        63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)87);
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8000fd8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000fdc:	f7ff ffa1 	bl	8000f22 <NVIC_EncodePriority.constprop.1>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	0080      	lsls	r0, r0, #2
 8000fe2:	b2c0      	uxtb	r0, r0
 8000fe4:	f884 0359 	strb.w	r0, [r4, #857]	; 0x359
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fec:	60a3      	str	r3, [r4, #8]
                      63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)89);
  return status;
}
 8000fee:	2000      	movs	r0, #0
 8000ff0:	bd38      	pop	{r3, r4, r5, pc}
 8000ff2:	bf00      	nop
 8000ff4:	48028100 	.word	0x48028100
 8000ff8:	40030000 	.word	0x40030000
 8000ffc:	08001390 	.word	0x08001390
 8001000:	080013b4 	.word	0x080013b4
 8001004:	080013a8 	.word	0x080013a8
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	e000e100 	.word	0xe000e100

08001010 <USIC0_3_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
  UART_lTransmitHandler(&UART_0);
 8001010:	4801      	ldr	r0, [pc, #4]	; (8001018 <USIC0_3_IRQHandler+0x8>)
 8001012:	f7ff beee 	b.w	8000df2 <UART_lTransmitHandler>
 8001016:	bf00      	nop
 8001018:	20000000 	.word	0x20000000

0800101c <USIC0_5_IRQHandler>:
}

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
  UART_lReceiveHandler(&UART_0);
 800101c:	4801      	ldr	r0, [pc, #4]	; (8001024 <USIC0_5_IRQHandler+0x8>)
 800101e:	f7ff bf2e 	b.w	8000e7e <UART_lReceiveHandler>
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000

08001028 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
  if ((bool) true == handle_ptr->period_match_enable)
 8001028:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
} /* end of PWM_lCCU4_Init() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 800102c:	b510      	push	{r4, lr}
 800102e:	4604      	mov	r4, r0
  if ((bool) true == handle_ptr->period_match_enable)
 8001030:	b163      	cbz	r3, 800104c <PWM_lCCU4_ConfigInterrupts+0x24>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001032:	6882      	ldr	r2, [r0, #8]
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001034:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8001040:	6880      	ldr	r0, [r0, #8]
 8001042:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8001046:	2100      	movs	r1, #0
 8001048:	f7ff fc8e 	bl	8000968 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 800104c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8001050:	b173      	cbz	r3, 8001070 <PWM_lCCU4_ConfigInterrupts+0x48>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8001052:	68a2      	ldr	r2, [r4, #8]
 8001054:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8001060:	68a0      	ldr	r0, [r4, #8]
 8001062:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8001066:	2102      	movs	r1, #2
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8001068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 800106c:	f7ff bc7c 	b.w	8000968 <XMC_CCU4_SLICE_SetInterruptNode>
 8001070:	bd10      	pop	{r4, pc}

08001072 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8001072:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001076:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 800107a:	d10b      	bne.n	8001094 <PWM_lCCU4_Start+0x22>
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 800107c:	f890 102e 	ldrb.w	r1, [r0, #46]	; 0x2e
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 8001080:	6842      	ldr	r2, [r0, #4]
 8001082:	2301      	movs	r3, #1
 8001084:	fa03 f101 	lsl.w	r1, r3, r1
 8001088:	60d1      	str	r1, [r2, #12]
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800108a:	6882      	ldr	r2, [r0, #8]
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 800108c:	60d3      	str	r3, [r2, #12]

    handle_ptr->state = PWM_STATUS_RUNNING;
 800108e:	2303      	movs	r3, #3
 8001090:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8001094:	4770      	bx	lr

08001096 <PWM_Start>:
void PWM_Start(PWM_t *const handle_ptr)
{
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001096:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800109a:	b90b      	cbnz	r3, 80010a0 <PWM_Start+0xa>
  {
    PWM_lCCU4_Start(handle_ptr);
 800109c:	f7ff bfe9 	b.w	8001072 <PWM_lCCU4_Start>
 80010a0:	4770      	bx	lr

080010a2 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 80010a2:	b570      	push	{r4, r5, r6, lr}
  PWM_STATUS_t status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 80010a4:	f890 6029 	ldrb.w	r6, [r0, #41]	; 0x29
 80010a8:	2e02      	cmp	r6, #2

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 80010aa:	4604      	mov	r4, r0
  PWM_STATUS_t status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 80010ac:	d126      	bne.n	80010fc <PWM_lCCU4_Init+0x5a>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 80010ae:	6800      	ldr	r0, [r0, #0]
 80010b0:	f000 f82e 	bl	8001110 <GLOBAL_CCU4_Init>

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 80010b4:	4605      	mov	r5, r0
 80010b6:	b9f0      	cbnz	r0, 80010f6 <PWM_lCCU4_Init+0x54>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80010b8:	68e1      	ldr	r1, [r4, #12]
 80010ba:	68a0      	ldr	r0, [r4, #8]
 80010bc:	f7ff fc3d 	bl	800093a <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80010c0:	68a3      	ldr	r3, [r4, #8]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80010c2:	8ba2      	ldrh	r2, [r4, #28]
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80010c6:	68a3      	ldr	r3, [r4, #8]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80010c8:	8b22      	ldrh	r2, [r4, #24]
 80010ca:	63da      	str	r2, [r3, #60]	; 0x3c
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 80010cc:	6863      	ldr	r3, [r4, #4]
 80010ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80010d0:	611a      	str	r2, [r3, #16]

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 80010d2:	4620      	mov	r0, r4
 80010d4:	f7ff ffa8 	bl	8001028 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 80010d8:	6920      	ldr	r0, [r4, #16]
 80010da:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80010de:	6962      	ldr	r2, [r4, #20]
 80010e0:	f7ff f944 	bl	800036c <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 80010e4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
      PWM_lCCU4_ConfigInterrupts(handle_ptr);

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 80010e8:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 80010ec:	b13b      	cbz	r3, 80010fe <PWM_lCCU4_Init+0x5c>
      {
        PWM_Start(handle_ptr);
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff ffd1 	bl	8001096 <PWM_Start>
 80010f4:	e003      	b.n	80010fe <PWM_lCCU4_Init+0x5c>
      }
      status = PWM_STATUS_SUCCESS;
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 80010f6:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
 80010fa:	e000      	b.n	80010fe <PWM_lCCU4_Init+0x5c>
#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 80010fc:	2501      	movs	r5, #1
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
    }

  }
  return (status);
} /* end of PWM_lCCU4_Init() api */
 80010fe:	4628      	mov	r0, r5
 8001100:	bd70      	pop	{r4, r5, r6, pc}

08001102 <PWM_Init>:
  status = PWM_STATUS_FAILURE;

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001102:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001106:	b90b      	cbnz	r3, 800110c <PWM_Init+0xa>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 8001108:	f7ff bfcb 	b.w	80010a2 <PWM_lCCU4_Init>
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
}
 800110c:	2001      	movs	r0, #1
 800110e:	4770      	bx	lr

08001110 <GLOBAL_CCU4_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001110:	7b43      	ldrb	r3, [r0, #13]
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8001112:	b510      	push	{r4, lr}
 8001114:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001116:	b94b      	cbnz	r3, 800112c <GLOBAL_CCU4_Init+0x1c>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8001118:	6880      	ldr	r0, [r0, #8]
 800111a:	7b21      	ldrb	r1, [r4, #12]
 800111c:	f7ff fbfe 	bl	800091c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8001120:	68a3      	ldr	r3, [r4, #8]
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001126:	60da      	str	r2, [r3, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001128:	2301      	movs	r3, #1
 800112a:	7363      	strb	r3, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 800112c:	2000      	movs	r0, #0
 800112e:	bd10      	pop	{r4, pc}

08001130 <SystemCoreSetup>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <SystemCoreSetup+0x68>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001132:	4a1a      	ldr	r2, [pc, #104]	; (800119c <SystemCoreSetup+0x6c>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800113a:	0409      	lsls	r1, r1, #16
 800113c:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 800113e:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001140:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001142:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001144:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <SystemCoreSetup+0x70>)
 8001146:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001148:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800114c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800114e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001152:	4814      	ldr	r0, [pc, #80]	; (80011a4 <SystemCoreSetup+0x74>)

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001154:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001158:	f241 0114 	movw	r1, #4116	; 0x1014

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800115c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001160:	5842      	ldr	r2, [r0, r1]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001162:	f022 020f 	bic.w	r2, r2, #15
  temp |= PMU_FLASH_WS;
 8001166:	f042 0203 	orr.w	r2, r2, #3
  FLASH0->FCON = temp;
 800116a:	5042      	str	r2, [r0, r1]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	f022 0210 	bic.w	r2, r2, #16
 8001172:	615a      	str	r2, [r3, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	f022 0208 	bic.w	r2, r2, #8
 800117a:	615a      	str	r2, [r3, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800117c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800117e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8001184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001186:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800118a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 800118c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800118e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00
 800119c:	05fa0100 	.word	0x05fa0100
 80011a0:	08000000 	.word	0x08000000
 80011a4:	58001000 	.word	0x58001000

080011a8 <CLOCK_XMC4_Init>:
{
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80011a8:	2301      	movs	r3, #1
 80011aa:	7003      	strb	r3, [r0, #0]

  return (status);
}
 80011ac:	2000      	movs	r0, #0
 80011ae:	4770      	bx	lr

080011b0 <OSCHP_GetFrequency>:
#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
}
 80011b0:	4800      	ldr	r0, [pc, #0]	; (80011b4 <OSCHP_GetFrequency+0x4>)
 80011b2:	4770      	bx	lr
 80011b4:	00b71b00 	.word	0x00b71b00

080011b8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80011b8:	b530      	push	{r4, r5, lr}
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80011ba:	4d11      	ldr	r5, [pc, #68]	; (8001200 <SystemCoreClockSetup+0x48>)
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80011be:	b087      	sub	sp, #28
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80011c0:	ac01      	add	r4, sp, #4
 80011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80011c8:	a801      	add	r0, sp, #4
 80011ca:	f7ff fb31 	bl	8000830 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff f97a 	bl	80004c8 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff f953 	bl	8000480 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80011da:	2004      	movs	r0, #4
 80011dc:	f7ff f9bc 	bl	8000558 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80011e0:	2120      	movs	r1, #32
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff f9dc 	bl	80005a0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff f953 	bl	8000494 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff f9c6 	bl	8000580 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff f9b9 	bl	800056c <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80011fa:	b007      	add	sp, #28
 80011fc:	bd30      	pop	{r4, r5, pc}
 80011fe:	bf00      	nop
 8001200:	080013fc 	.word	0x080013fc

08001204 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8001204:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <DAVE_Init+0x30>)
 8001208:	f7ff ffce 	bl	80011a8 <CLOCK_XMC4_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
 800120c:	b980      	cbnz	r0, 8001230 <DAVE_Init+0x2c>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_0 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_0); 
 800120e:	480a      	ldr	r0, [pc, #40]	; (8001238 <DAVE_Init+0x34>)
 8001210:	f7ff ff77 	bl	8001102 <PWM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001214:	b960      	cbnz	r0, 8001230 <DAVE_Init+0x2c>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <DAVE_Init+0x38>)
 8001218:	f7ff fd74 	bl	8000d04 <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800121c:	b940      	cbnz	r0, 8001230 <DAVE_Init+0x2c>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_1 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_1); 
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <DAVE_Init+0x3c>)
 8001220:	f7ff ff6f 	bl	8001102 <PWM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001224:	b920      	cbnz	r0, 8001230 <DAVE_Init+0x2c>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_2 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_2); 
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <DAVE_Init+0x40>)
   }  
  return init_status;
} /**  End of function DAVE_Init */
 8001228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_1); 
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR_2 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR_2); 
 800122c:	f7ff bf69 	b.w	8001102 <PWM_Init>
   }  
  return init_status;
} /**  End of function DAVE_Init */
 8001230:	bd08      	pop	{r3, pc}
 8001232:	bf00      	nop
 8001234:	200000d4 	.word	0x200000d4
 8001238:	20000074 	.word	0x20000074
 800123c:	20000000 	.word	0x20000000
 8001240:	2000000c 	.word	0x2000000c
 8001244:	20000040 	.word	0x20000040

08001248 <busy_waitMs>:

void busy_waitMs(int ms)
{
	int i;

	for(int c = 0; c < ms; c++)
 8001248:	2300      	movs	r3, #0
 800124a:	4283      	cmp	r3, r0
 800124c:	da07      	bge.n	800125e <busy_waitMs+0x16>
 800124e:	f64e 2260 	movw	r2, #60000	; 0xea60
	{
		i = 60000;
		while(--i) { __NOP(); }
 8001252:	3a01      	subs	r2, #1
 8001254:	d001      	beq.n	800125a <busy_waitMs+0x12>
 8001256:	bf00      	nop
 8001258:	e7fb      	b.n	8001252 <busy_waitMs+0xa>

void busy_waitMs(int ms)
{
	int i;

	for(int c = 0; c < ms; c++)
 800125a:	3301      	adds	r3, #1
 800125c:	e7f5      	b.n	800124a <busy_waitMs+0x2>
	{
		i = 60000;
		while(--i) { __NOP(); }
	}
}
 800125e:	4770      	bx	lr

08001260 <setMemNull>:

void setMemNull(uint8_t *data, int size) {
	int i;
	for(i = 0 ;i < size; i++) {
 8001260:	4603      	mov	r3, r0
 8001262:	1a1a      	subs	r2, r3, r0
 8001264:	428a      	cmp	r2, r1
 8001266:	da03      	bge.n	8001270 <setMemNull+0x10>
		data[i] = 0;
 8001268:	2200      	movs	r2, #0
 800126a:	f803 2b01 	strb.w	r2, [r3], #1
 800126e:	e7f8      	b.n	8001262 <setMemNull+0x2>
	}
}
 8001270:	4770      	bx	lr
	...

08001274 <main>:

#define BUFFERSIZE 1024

int main(void)
{
 8001274:	b530      	push	{r4, r5, lr}
  DAVE_STATUS_t status;
  uint8_t init_data[] = "startasfdasfdasfsadfasdfsafdasfdsadfasdfsadfasf";
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <main+0x74>)
}

#define BUFFERSIZE 1024

int main(void)
{
 8001278:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
  DAVE_STATUS_t status;
  uint8_t init_data[] = "startasfdasfdasfsadfasdfsafdasfdsadfasdfsadfasf";
 800127c:	466c      	mov	r4, sp
 800127e:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	6859      	ldr	r1, [r3, #4]
 8001286:	4622      	mov	r2, r4
 8001288:	c203      	stmia	r2!, {r0, r1}
 800128a:	3308      	adds	r3, #8
 800128c:	42ab      	cmp	r3, r5
 800128e:	4614      	mov	r4, r2
 8001290:	d1f7      	bne.n	8001282 <main+0xe>
  uint8_t read_data[BUFFERSIZE];

  setMemNull(read_data, BUFFERSIZE);
 8001292:	a80c      	add	r0, sp, #48	; 0x30
 8001294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001298:	f7ff ffe2 	bl	8001260 <setMemNull>
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800129c:	f7ff ffb2 	bl	8001204 <DAVE_Init>

  if(status != DAVE_STATUS_SUCCESS)
 80012a0:	b100      	cbz	r0, 80012a4 <main+0x30>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 80012a2:	e7fe      	b.n	80012a2 <main+0x2e>

  // Minimal position 450  ^ 4,5  duty ^ 0,9ms
  // Neutral position 750  ^ 7,5  duty ^ 1,5ms
  // Maximal position 1050 ^ 10,5 duty ^ 2,1ms

  UART_Transmit(&UART_0, init_data, sizeof(init_data));
 80012a4:	4811      	ldr	r0, [pc, #68]	; (80012ec <main+0x78>)
 80012a6:	4669      	mov	r1, sp
 80012a8:	2230      	movs	r2, #48	; 0x30
 80012aa:	f7ff fd60 	bl	8000d6e <UART_Transmit>
	  {
		  PWM_SetDutyCycle(&PWM_MOTOR_0, i);
		  busy_waitMs(20);
	  }
	  */
	  busy_waitMs(100);
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f7ff ffca 	bl	8001248 <busy_waitMs>
	  UART_Receive(&UART_0, read_data, BUFFERSIZE);
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <main+0x78>)
 80012b6:	a90c      	add	r1, sp, #48	; 0x30
 80012b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012bc:	f7ff fd91 	bl	8000de2 <UART_Receive>
	  if(read_data[0] != '\0') {
 80012c0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f2      	beq.n	80012ae <main+0x3a>
		  busy_waitMs(10000);
 80012c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80012cc:	f7ff ffbc 	bl	8001248 <busy_waitMs>
		  UART_Transmit(&UART_0, read_data, sizeof(BUFFERSIZE));
 80012d0:	a90c      	add	r1, sp, #48	; 0x30
 80012d2:	2204      	movs	r2, #4
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <main+0x78>)
 80012d6:	f7ff fd4a 	bl	8000d6e <UART_Transmit>
		  setMemNull(read_data, BUFFERSIZE);
 80012da:	a80c      	add	r0, sp, #48	; 0x30
 80012dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e0:	f7ff ffbe 	bl	8001260 <setMemNull>
 80012e4:	e7e3      	b.n	80012ae <main+0x3a>
 80012e6:	bf00      	nop
 80012e8:	08001410 	.word	0x08001410
 80012ec:	20000000 	.word	0x20000000

080012f0 <__libc_init_array>:
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	4e0f      	ldr	r6, [pc, #60]	; (8001330 <__libc_init_array+0x40>)
 80012f4:	4d0f      	ldr	r5, [pc, #60]	; (8001334 <__libc_init_array+0x44>)
 80012f6:	1b76      	subs	r6, r6, r5
 80012f8:	10b6      	asrs	r6, r6, #2
 80012fa:	bf18      	it	ne
 80012fc:	2400      	movne	r4, #0
 80012fe:	d005      	beq.n	800130c <__libc_init_array+0x1c>
 8001300:	3401      	adds	r4, #1
 8001302:	f855 3b04 	ldr.w	r3, [r5], #4
 8001306:	4798      	blx	r3
 8001308:	42a6      	cmp	r6, r4
 800130a:	d1f9      	bne.n	8001300 <__libc_init_array+0x10>
 800130c:	4e0a      	ldr	r6, [pc, #40]	; (8001338 <__libc_init_array+0x48>)
 800130e:	4d0b      	ldr	r5, [pc, #44]	; (800133c <__libc_init_array+0x4c>)
 8001310:	1b76      	subs	r6, r6, r5
 8001312:	f7ff fce7 	bl	8000ce4 <_init>
 8001316:	10b6      	asrs	r6, r6, #2
 8001318:	bf18      	it	ne
 800131a:	2400      	movne	r4, #0
 800131c:	d006      	beq.n	800132c <__libc_init_array+0x3c>
 800131e:	3401      	adds	r4, #1
 8001320:	f855 3b04 	ldr.w	r3, [r5], #4
 8001324:	4798      	blx	r3
 8001326:	42a6      	cmp	r6, r4
 8001328:	d1f9      	bne.n	800131e <__libc_init_array+0x2e>
 800132a:	bd70      	pop	{r4, r5, r6, pc}
 800132c:	bd70      	pop	{r4, r5, r6, pc}
 800132e:	bf00      	nop
 8001330:	200000b8 	.word	0x200000b8
 8001334:	200000b8 	.word	0x200000b8
 8001338:	200000b8 	.word	0x200000b8
 800133c:	200000b8 	.word	0x200000b8

08001340 <CSWTCH.36>:
 8001340:	02020000 0c0c0c0c 00030a08                       ..........

0800134a <CSWTCH.37>:
 800134a:	00030003 000c000c 30003000 30003000     .........0.0.0.0
 800135a:	0c000300 13b40000                                ......

08001360 <UART_0_config>:
 8001360:	080013b4 08000f41 00000000 00000000     ....A...........
	...
 8001384:	0800139c 05000000 00000305              ............

08001390 <UART_0_rx_pin_config>:
 8001390:	00000000 00000001 00000002              ............

0800139c <UART_0_tx_pin>:
 800139c:	48028100 00000005 080013a8              ...H........

080013a8 <UART_0_tx_pin_config>:
 80013a8:	00000090 00000001 00000002              ............

080013b4 <UART_0_channel_config>:
 80013b4:	00004b00 01080800 00000010              .K..........

080013c0 <PWM_MOTOR_1_gpio_out_config>:
 80013c0:	00000098 00010000 00000004              ............

080013cc <PWM_MOTOR_2_compare_config>:
 80013cc:	00000000 00000006                       ........

080013d4 <PWM_MOTOR_0_gpio_out_config>:
 80013d4:	00000098 00010000 00000004              ............

080013e0 <PWM_MOTOR_0_compare_config>:
 80013e0:	00000000 00000006                       ........

080013e8 <PWM_MOTOR_2_gpio_out_config>:
 80013e8:	00000098 00010000 00000004              ............

080013f4 <PWM_MOTOR_1_compare_config>:
 80013f4:	00000000 00000006 01040250 00010000     ........P.......
 8001404:	00000000 00010000 01010101 72617473     ............star
 8001414:	66736174 66736164 66736164 66646173     tasfdasfdasfsadf
 8001424:	66647361 64666173 64667361 66646173     asdfsafdasfdsadf
 8001434:	66647361 66646173 00667361              asdfsadfasf.
