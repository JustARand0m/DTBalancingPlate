   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "global_adc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.GLOBAL_ADC_GetAppVersion,"ax",%progbits
  20              	 .align 1
  21              	 .global GLOBAL_ADC_GetAppVersion
  22              	 .thumb
  23              	 .thumb_func
  25              	GLOBAL_ADC_GetAppVersion:
  26              	.LFB255:
  27              	 .file 1 "../Dave/Generated/GLOBAL_ADC/global_adc.c"
   1:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**
   2:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @file global_adc.c
   3:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @date 2017-06-24
   4:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
   5:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * NOTE:
   6:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
   8:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @cond
   9:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  10:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * GLOBAL_ADC v4.0.18 - Initializes VADC GLOBAL and GROUP resources.
  11:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  12:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  13:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * All rights reserved.
  14:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  15:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * following conditions are met:
  17:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  18:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   disclaimer.
  20:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  21:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  24:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  27:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  35:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  38:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  39:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * Change History
  40:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * --------------
  41:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  42:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-02-16:
  43:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Initial version for DAVEv4.<BR>
  44:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  45:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-04-27:
  46:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Configuration structure modified.<BR>
  47:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - GLOBAL_ADC_group_t changed to GLOBAL_ADC_GROUP_t.<BR>
  48:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  49:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-06-20:
  50:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Updated the copyright section.<BR>
  51:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  52:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-09-01:
  53:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for XMC14 and XMC48/47.<BR>
  54:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  55:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-10-01:
  56:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Analog clock default value changed to 26Mhz in XMC42.<BR>
  57:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  58:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-10-08:
  59:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for XMC4700/XMC4800 devices.<BR>
  60:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  61:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-12-03:
  62:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for XMC4300 devices.<BR>
  63:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Optimized the manifest.<BR>
  64:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  65:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2016-03-18:
  66:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     -Modified the minimum configurable value for Desired analog clock in XMC1x to 1MHz.<BR>
  67:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  68:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2016-07-08:
  69:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Fixed incorrect case for an included header.<br>
  70:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  71:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2016-08-18:
  72:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for low frequency operations by configuring DIVS.<BR>
  73:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  74:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @endcond
  75:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  76:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  */
  77:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  78:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  79:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * HEADER FILES
  80:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  81:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  82:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /** Inclusion of header file */
  83:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #include "global_adc.h"
  84:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  85:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  86:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * MACROS
  87:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  88:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  89:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  90:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * LOCAL DATA
  91:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  92:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  93:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  94:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * LOCAL ROUTINES
  95:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  96:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  97:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  /*************************************************************************************************
  98:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * API IMPLEMENTATION
  99:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
 100:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 101:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /*This function returns the version of the GLOBAL_ADC APP*/
 102:../Dave/Generated/GLOBAL_ADC/global_adc.c **** DAVE_APP_VERSION_t GLOBAL_ADC_GetAppVersion(void)
 103:../Dave/Generated/GLOBAL_ADC/global_adc.c **** {
  28              	 .loc 1 103 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
 104:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   DAVE_APP_VERSION_t version;
 105:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 106:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   version.major = (uint8_t) GLOBAL_ADC_MAJOR_VERSION;
 107:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   version.minor = (uint8_t) GLOBAL_ADC_MINOR_VERSION;
 108:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   version.patch = (uint8_t) GLOBAL_ADC_PATCH_VERSION;
 109:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 110:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   return version;
  34              	 .loc 1 110 0
  35 0000 0023     	 movs r3,#0
  36 0002 1846     	 mov r0,r3
  37 0004 0422     	 movs r2,#4
  38 0006 62F30700 	 bfi r0,r2,#0,#8
  39 000a 63F30F20 	 bfi r0,r3,#8,#8
  40 000e 1223     	 movs r3,#18
  41 0010 63F31740 	 bfi r0,r3,#16,#8
 103:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   DAVE_APP_VERSION_t version;
  42              	 .loc 1 103 0
  43 0014 82B0     	 sub sp,sp,#8
  44              	.LCFI0:
  45              	 .cfi_def_cfa_offset 8
 111:../Dave/Generated/GLOBAL_ADC/global_adc.c **** }
  46              	 .loc 1 111 0
  47 0016 02B0     	 add sp,sp,#8
  48              	.LCFI1:
  49              	 .cfi_def_cfa_offset 0
  50              	 
  51 0018 7047     	 bx lr
  52              	 .cfi_endproc
  53              	.LFE255:
  55              	 .section .text.GLOBAL_ADC_Init,"ax",%progbits
  56              	 .align 1
  57              	 .global GLOBAL_ADC_Init
  58              	 .thumb
  59              	 .thumb_func
  61              	GLOBAL_ADC_Init:
  62              	.LFB256:
 112:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 113:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**
 114:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * This function initializes all instances of the ADC Global APP and low level app.
 115:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  */
 116:../Dave/Generated/GLOBAL_ADC/global_adc.c **** GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
 117:../Dave/Generated/GLOBAL_ADC/global_adc.c **** {
  63              	 .loc 1 117 0
  64              	 .cfi_startproc
  65              	 
  66              	 
  67              	.LVL1:
  68 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
  69              	.LCFI2:
  70              	 .cfi_def_cfa_offset 24
  71              	 .cfi_offset 3,-24
  72              	 .cfi_offset 4,-20
  73              	 .cfi_offset 5,-16
  74              	 .cfi_offset 6,-12
  75              	 .cfi_offset 7,-8
  76              	 .cfi_offset 14,-4
 118:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
 119:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 120:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   uint32_t group_index;
 121:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 122:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 123:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
  77              	 .loc 1 123 0
  78 0002 037E     	 ldrb r3,[r0,#24]
  79 0004 022B     	 cmp r3,#2
 117:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
  80              	 .loc 1 117 0
  81 0006 0446     	 mov r4,r0
  82              	 .loc 1 123 0
  83 0008 29D1     	 bne .L3
 124:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   {  
 125:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     /* Initialize an instance of Global hardware */
 126:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
  84              	 .loc 1 126 0
  85 000a 4069     	 ldr r0,[r0,#20]
  86              	.LVL2:
  87 000c 2169     	 ldr r1,[r4,#16]
  88 000e FFF7FEFF 	 bl XMC_VADC_GLOBAL_Init
  89              	.LVL3:
  90 0012 271F     	 subs r7,r4,#4
 127:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 128:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     /* Initialize all the Groups */
 129:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
  91              	 .loc 1 130 0
  92 0014 0026     	 movs r6,#0
  93              	.LVL4:
  94              	.L5:
 131:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 132:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       /*Initialize Group*/
 133:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
  95              	 .loc 1 133 0
  96 0016 57F8043F 	 ldr r3,[r7,#4]!
  97 001a 93E80300 	 ldmia r3,{r0,r1}
  98 001e FFF7FEFF 	 bl XMC_VADC_GROUP_Init
  99              	.LVL5:
 134:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 135:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 136:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       /* Switch on the converter of the Group[group_index]*/
 137:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 100              	 .loc 1 137 0
 101 0022 3B68     	 ldr r3,[r7]
 102 0024 0321     	 movs r1,#3
 103 0026 1868     	 ldr r0,[r3]
 104 0028 FFF7FEFF 	 bl XMC_VADC_GROUP_SetPowerMode
 105              	.LVL6:
 138:../Dave/Generated/GLOBAL_ADC/global_adc.c ****                                   XMC_VADC_GROUP_POWERMODE_NORMAL);
 139:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 140:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       /* Disable the post calibration option for the respective group*/
 141:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 106              	 .loc 1 141 0
 107 002c 3968     	 ldr r1,[r7]
 108 002e 0B7A     	 ldrb r3,[r1,#8]
 109 0030 4BB9     	 cbnz r3,.L4
 142:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       {
 143:../Dave/Generated/GLOBAL_ADC/global_adc.c ****         XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 110              	 .loc 1 143 0
 111 0032 6069     	 ldr r0,[r4,#20]
 112              	.LVL7:
 113 0034 06F11005 	 add r5,r6,#16
 114              	.LBB4:
 115              	.LBB5:
 116              	 .file 2 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_vadc.h"
   1:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2019-03-30
   4:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
   7:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2019-03-30:
 118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Changed XMC_VADC_GROUP_SetChannelAlias() to inline function
 119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GROUP_GetChannelAlias()
 120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
 121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   
 390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   
 417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 614:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 615:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 616:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 617:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 618:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 619:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 620:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 621:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 622:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 623:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 624:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 625:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 626:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 627:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 628:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 629:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 630:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 631:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 632:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 633:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 634:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 635:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 636:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 637:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 638:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 639:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 640:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 641:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 642:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 643:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 644:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 645:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 646:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 647:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 648:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 649:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 650:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 651:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 652:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 653:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 654:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 655:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 656:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 657:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 658:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 659:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 660:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 661:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 662:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 663:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 664:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 665:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 666:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 667:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 668:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 669:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 670:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 671:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 672:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 673:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 674:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 675:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 676:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 677:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 678:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 679:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 680:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 681:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 682:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 683:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 684:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 685:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 686:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 687:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 688:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 689:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 690:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 691:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 692:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 693:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 694:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 695:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 696:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 697:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 698:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 699:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 700:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 701:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 702:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** */
 703:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 704:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 705:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 706:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 707:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 708:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 709:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 710:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 711:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 712:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 713:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 714:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 715:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 716:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 717:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 718:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 719:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 720:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 721:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 722:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 723:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 724:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 725:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 726:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 727:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 728:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 729:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 730:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 731:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 732:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 733:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 734:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 735:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 736:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 737:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 738:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 739:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 740:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 741:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 742:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 743:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 744:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 745:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 746:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 747:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 748:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 749:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 750:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 751:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 752:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 753:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 754:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 755:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 756:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 757:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 758:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 759:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 760:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 761:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 762:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 763:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 764:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 765:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 766:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 767:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 768:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 769:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 770:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 771:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 772:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 773:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 774:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 775:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 776:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 777:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 778:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 779:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 780:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 781:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 782:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 783:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 784:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 785:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 786:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 787:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 788:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 789:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 790:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 791:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 792:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 793:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 794:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 795:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 796:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 797:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 798:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 799:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 800:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 801:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 802:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 803:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 804:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 805:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 806:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 807:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 808:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 809:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 810:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 811:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 812:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 813:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 814:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 815:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 816:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 817:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 818:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 819:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 820:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 821:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 822:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 823:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 824:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 825:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 826:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 827:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 829:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 830:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 831:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 832:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 833:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 834:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 835:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 836:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 837:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 838:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 839:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 840:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 841:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 842:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 843:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 844:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 845:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 846:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 847:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 848:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 849:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 850:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 851:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 852:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 853:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 854:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 855:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 856:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 857:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 858:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 859:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 860:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 861:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 862:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 863:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 864:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 865:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 866:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 867:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 868:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 869:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 870:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 871:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 872:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 873:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 874:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 875:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 876:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 877:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 878:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 879:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 880:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 882:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 883:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 884:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 885:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 886:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 887:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 888:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 889:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 890:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 891:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 892:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 893:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 894:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 895:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 896:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 897:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 898:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 899:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 900:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 901:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 902:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 903:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 904:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 905:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 906:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 907:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 908:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 909:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 910:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 911:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 912:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 913:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 914:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 915:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 916:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 917:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 918:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 919:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 920:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 921:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 922:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 923:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 924:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 925:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 926:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 927:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 928:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 929:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 931:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 932:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 933:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 934:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 935:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 936:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 937:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 938:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 939:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 940:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 941:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 942:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 943:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 944:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 945:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 946:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 947:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 948:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 949:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 950:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 951:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 952:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 953:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 954:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 955:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 956:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 957:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 958:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 959:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 960:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 961:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 962:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 963:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 964:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 965:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 966:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 967:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 968:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 969:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 970:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 971:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 972:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 973:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 974:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 975:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 976:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 977:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 978:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 979:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 980:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 981:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 982:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 983:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 984:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 985:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 986:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 987:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 988:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 989:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 990:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 991:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 992:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 993:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 994:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 995:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 996:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 997:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 998:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 999:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
1000:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
1001:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
1002:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1003:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
1004:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1005:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1006:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1007:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1008:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1009:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
1010:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1011:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
1012:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1013:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
1014:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1015:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1016:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1017:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1018:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1019:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1020:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1021:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1022:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1023:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1024:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1025:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1026:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1027:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1028:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1029:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1030:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1031:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1032:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1033:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1034:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1035:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1036:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1037:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1038:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1039:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1040:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1041:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1042:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1043:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1044:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1045:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1046:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1047:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1048:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1049:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1050:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1051:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1052:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1053:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1054:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1055:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1056:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1057:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1058:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1059:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1060:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1061:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1062:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1063:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1064:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1065:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1066:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1067:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1068:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1069:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1070:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1071:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1072:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1073:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1074:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1075:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1076:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1077:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1078:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1079:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1080:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1081:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1082:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1083:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1084:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1085:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1086:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1087:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1088:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1089:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1090:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1091:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1092:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1093:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1094:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1095:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1096:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1097:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1098:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1099:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :10;
1302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif      
1303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             :4;   /**< Indicates the group to which the channel_number 
1326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
1359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
1595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1614:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1615:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1616:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1617:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1618:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1619:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1620:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1621:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1622:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1623:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1624:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1625:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1626:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1627:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1628:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1629:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1630:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1631:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1632:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1633:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1634:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1635:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1636:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1637:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1638:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1639:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1640:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1641:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1642:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1643:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1644:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1645:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1646:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1647:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1648:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1649:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1650:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1651:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1652:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1653:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1654:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1655:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1656:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1657:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1658:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1659:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1660:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1661:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1662:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
 117              	 .loc 2 1662 0
 118 0038 D0F88020 	 ldr r2,[r0,#128]
 119 003c 0123     	 movs r3,#1
 120 003e AB40     	 lsls r3,r3,r5
 121 0040 1343     	 orrs r3,r3,r2
 122 0042 C0F88030 	 str r3,[r0,#128]
 123              	.LVL8:
 124              	.L4:
 125              	.LBE5:
 126              	.LBE4:
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 127              	 .loc 1 130 0 discriminator 2
 128 0046 0136     	 adds r6,r6,#1
 129              	.LVL9:
 144:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       }
 145:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 146:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 147:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t
 148:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 149:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 150:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 130              	 .loc 1 150 0 discriminator 2
 131 0048 0023     	 movs r3,#0
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 132              	 .loc 1 130 0 discriminator 2
 133 004a 042E     	 cmp r6,#4
 134              	 .loc 1 150 0 discriminator 2
 135 004c 4B72     	 strb r3,[r1,#9]
 136 004e 1D46     	 mov r5,r3
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 137              	 .loc 1 130 0 discriminator 2
 138 0050 E1D1     	 bne .L5
 151:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     }
 152:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 153:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE
 154:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 155:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif /* _XMC_VADC_GROUP_AVAILABLE_ */
 156:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 157:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
 158:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 159:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     if((bool)true == handle_ptr->enable_startup_calibration)
 139              	 .loc 1 159 0
 140 0052 637E     	 ldrb r3,[r4,#25]
 141 0054 13B1     	 cbz r3,.L6
 160:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 161:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 142              	 .loc 1 161 0
 143 0056 6069     	 ldr r0,[r4,#20]
 144 0058 FFF7FEFF 	 bl XMC_VADC_GLOBAL_StartupCalibration
 145              	.LVL10:
 146              	.L6:
 162:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     }
 163:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 147              	 .loc 1 163 0
 148 005c 2576     	 strb r5,[r4,#24]
 149              	.LVL11:
 150              	.L3:
 164:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   }
 165:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   return (handle_ptr->init_state);
 166:../Dave/Generated/GLOBAL_ADC/global_adc.c **** }
 151              	 .loc 1 166 0
 152 005e 207E     	 ldrb r0,[r4,#24]
 153 0060 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 154              	 .cfi_endproc
 155              	.LFE256:
 157              	 .text
 158              	.Letext0:
 159              	 .file 3 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 160              	 .file 4 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 161              	 .file 5 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 162              	 .file 6 "G:/dt_g1_balancing_plate_wise20192020/XMC/Dave/Generated/DAVE_Common.h"
 163              	 .file 7 "../Dave/Generated/GLOBAL_ADC/global_adc.h"
 164              	 .file 8 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Include/core_cm4.h"
 165              	 .file 9 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 global_adc.c
    {standard input}:20     .text.GLOBAL_ADC_GetAppVersion:00000000 $t
    {standard input}:25     .text.GLOBAL_ADC_GetAppVersion:00000000 GLOBAL_ADC_GetAppVersion
    {standard input}:56     .text.GLOBAL_ADC_Init:00000000 $t
    {standard input}:61     .text.GLOBAL_ADC_Init:00000000 GLOBAL_ADC_Init
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.ca5ae67a873a4952d630d8e4120b9e3e
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4e89a3f145accdcb1100c37260c088e6
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.65.5c0d35eb1a6853ff8300ab2ec1b944b0
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.57f124f9262f3dbf77da6a6506ffb430
                           .group:00000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:00000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1500.3eca65ed9ba7f90e09c1ffcb0b3f5724
                           .group:00000000 wm4.xmc_common.h.98.806f17e888fd51d0e4be2ad115163551
                           .group:00000000 wm4.xmc4_scu.h.113.70a903f8782696023ba1d8628d8ac2d6
                           .group:00000000 wm4.xmc_vadc_map.h.62.9df0d76d5c18106393e06548a14f52be
                           .group:00000000 wm4.xmc_vadc.h.237.61ed5fbd33c6c067453e9298502ec2a9
                           .group:00000000 wm4.global_adc_conf.h.79.ad3d3c9f6f306cd3e989ca81b8da07e7

UNDEFINED SYMBOLS
XMC_VADC_GLOBAL_Init
XMC_VADC_GROUP_Init
XMC_VADC_GROUP_SetPowerMode
XMC_VADC_GLOBAL_StartupCalibration
