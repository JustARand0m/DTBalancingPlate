   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc4_scu.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SCU_lDelay,"ax",%progbits
  20              	 .align 1
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_SCU_lDelay:
  25              	.LFB174:
  26              	 .file 1 "../Libraries/XMCLib/src/xmc4_scu.c"
   1:../Libraries/XMCLib/src/xmc4_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc4_scu.c ****  * @file xmc4_scu.c
   3:../Libraries/XMCLib/src/xmc4_scu.c ****  * @date 2018-06-21
   4:../Libraries/XMCLib/src/xmc4_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc4_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc4_scu.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc4_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc4_scu.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc4_scu.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc4_scu.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc4_scu.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc4_scu.c ****  * 
  18:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc4_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc4_scu.c ****  * 
  21:../Libraries/XMCLib/src/xmc4_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc4_scu.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc4_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc4_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc4_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc4_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc4_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc4_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc4_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc4_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc4_scu.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc4_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc4_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc4_scu.c ****  *      
  42:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_ASSERT() hanging issues have fixed.  <br>
  44:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Line indentation aligned with 120 characters. <br>
  45:../Libraries/XMCLib/src/xmc4_scu.c ****  *     
  46:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus are added
  50:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added Weak implementation for OSCHP_GetFrequency()
  51:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  52:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-11-30:
  53:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Documentation improved <br>
  54:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Following API functionalities are improved
  55:../Libraries/XMCLib/src/xmc4_scu.c ****  *       XMC_SCU_CLOCK_GatePeripheralClock, XMC_SCU_CLOCK_UngatePeripheralClock, XMC_SCU_CLOCK_IsPe
  56:../Libraries/XMCLib/src/xmc4_scu.c ****  *       XMC_SCU_RESET_AssertPeripheralReset, XMC_SCU_RESET_DeassertPeripheralReset, XMC_SCU_RESET_
  57:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  58:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-12-08:
  59:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_GetTemperature renamed to XMC_SCU_GetTemperatureMeasurement
  60:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-03-09:
  62:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Optimize write only registers
  63:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_SetPinMode
  64:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  65:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  66:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  67:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  68:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  69:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  70:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-04-06:
  71:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Fixed XMC_SCU_ReadFromRetentionMemory functionality
  72:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  73:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-05-19:
  74:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Changed XMC_SCU_CLOCK_StartSystemPll to avoid using floating point calculation which might
  75:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_CLOCK_IsLowPowerOscillatorStable() and XMC_SCU_CLOCK_IsHighPerformanceOscill
  76:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(), 
  77:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(),
  78:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus()
  79:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(), 
  80:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(),
  81:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus()
  82:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  83:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-06-15:
  84:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_EnterHibernateStateEx() which allows to select between external or inter
  85:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Extended wakeup hibernate events using LPAC wakeup on events. Only available in XMC44, XMC
  86:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added LPAC APIs. Only available in XMC44, XMC42 and XMC41 series.
  87:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  88:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2018-06-21:
  89:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Fixed XMC_SCU_HIB_SetSR1Input()
  90:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Fixed XMC_SCU_CLOCK_EnableLowPowerOscillator()
  91:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  92:../Libraries/XMCLib/src/xmc4_scu.c ****  * @endcond 
  93:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  94:../Libraries/XMCLib/src/xmc4_scu.c ****  */
  95:../Libraries/XMCLib/src/xmc4_scu.c **** 
  96:../Libraries/XMCLib/src/xmc4_scu.c **** /**
  97:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  98:../Libraries/XMCLib/src/xmc4_scu.c ****  * @brief SCU low level driver API prototype definition for XMC4 family of microcontrollers. 
  99:../Libraries/XMCLib/src/xmc4_scu.c ****  *
 100:../Libraries/XMCLib/src/xmc4_scu.c ****  * <b>Detailed description of file:</b> <br>
 101:../Libraries/XMCLib/src/xmc4_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
 102:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
 103:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Temperature Monitoring, Bootmode selection, CCU Start, Comparator configuration etc  <br>
 104:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_) <br>
 105:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Clock sources init, Clock tree init, Clock gating, Sleep Management etc <br>
 106:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
 107:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Reset Init, Cause, Manual Reset Assert/Deassert <br>
 108:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_) <br>
 109:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Manual Assert/Deassert, Acknowledge etc <br>
 110:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- PARITY (APIs prefixed with XMC_SCU_PARITY_) <br>
 111:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Acknowledge etc <br>
 112:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- HIBERNATION (APIs prefixed with XMC_SCU_HIB_) <br>
 113:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Hibernation entry/exit config, entry/wakeup sequences, LPAC configuration etc <br>
 114:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- TRAP (APIs prefixed with XMC_SCU_TRAP_) <br>
 115:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Enable/Disable, Acknowledge etc <br>
 116:../Libraries/XMCLib/src/xmc4_scu.c ****  *
 117:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 118:../Libraries/XMCLib/src/xmc4_scu.c **** 
 119:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 120:../Libraries/XMCLib/src/xmc4_scu.c ****  * HEADER FILES
 121:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 122:../Libraries/XMCLib/src/xmc4_scu.c **** #include <xmc_scu.h>
 123:../Libraries/XMCLib/src/xmc4_scu.c **** 
 124:../Libraries/XMCLib/src/xmc4_scu.c **** #if UC_FAMILY == XMC4
 125:../Libraries/XMCLib/src/xmc4_scu.c **** 
 126:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 127:../Libraries/XMCLib/src/xmc4_scu.c ****  * MACROS
 128:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 129:../Libraries/XMCLib/src/xmc4_scu.c **** #define FOSCREF   (2500000UL)    /**< Oscillator reference frequency (fOSCREF) monitored by Oscilla
 130:../Libraries/XMCLib/src/xmc4_scu.c **** #define FREQ_1MHZ (1000000UL)    /**< Used during calculation. */
 131:../Libraries/XMCLib/src/xmc4_scu.c **** 
 132:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OFI_FREQUENCY
 133:../Libraries/XMCLib/src/xmc4_scu.c **** #define OFI_FREQUENCY (24000000UL)    /**< Fast internal backup clock source. */
 134:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 135:../Libraries/XMCLib/src/xmc4_scu.c **** 
 136:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OSI_FREQUENCY
 137:../Libraries/XMCLib/src/xmc4_scu.c **** #define OSI_FREQUENCY (32768UL)    /**< Internal slow clock source. */
 138:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 139:../Libraries/XMCLib/src/xmc4_scu.c **** 
 140:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OSCHP_FREQUENCY
 141:../Libraries/XMCLib/src/xmc4_scu.c **** #define OSCHP_FREQUENCY (12000000U)    /**< External crystal High Precision Oscillator. */
 142:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 143:../Libraries/XMCLib/src/xmc4_scu.c **** 
 144:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_PLL_PLLSTAT_OSC_USABLE  (SCU_PLL_PLLSTAT_PLLHV_Msk | \
 145:../Libraries/XMCLib/src/xmc4_scu.c ****                                          SCU_PLL_PLLSTAT_PLLLV_Msk | \
 146:../Libraries/XMCLib/src/xmc4_scu.c ****                                          SCU_PLL_PLLSTAT_PLLSP_Msk)  /**< Used to verify the OSC fr
 147:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                           usable or not.*/
 148:../Libraries/XMCLib/src/xmc4_scu.c **** 
 149:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_ADC_START_GROUP    (0UL)    /**< The ADC group whose channel input is compared 
 150:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 151:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC star
 152:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this group number. */
 153:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_ADC_END_GROUP      (1UL)    /**< The ADC group whose channel input is compared 
 154:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 155:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC end 
 156:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this group number. */
 157:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_START_ADC_CHANNEL  (6UL)    /**< The ADC channel whose channel input is compare
 158:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 159:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC star
 160:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this channel number. */
 161:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_END_ADC_CHANNEL    (7UL)    /**< The ADC channel whose channel input is compare
 162:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 163:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC ends
 164:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this channel number. */
 165:../Libraries/XMCLib/src/xmc4_scu.c **** 
 166:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_CHECK_GRPNUM(GROUP_NUM)   (((GROUP_NUM) == XMC_SCU_ORC_ADC_START_GROUP) || \
 167:../Libraries/XMCLib/src/xmc4_scu.c ****                                         ((GROUP_NUM) == XMC_SCU_ORC_ADC_END_GROUP) ) /**< Used to v
 168:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       provided ADC 
 169:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       within specif
 170:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       end group num
 171:../Libraries/XMCLib/src/xmc4_scu.c ****                                         
 172:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_CHECK_CHNUM(CH_NUM)       (((CH_NUM) == XMC_SCU_ORC_START_ADC_CHANNEL) || \
 173:../Libraries/XMCLib/src/xmc4_scu.c ****                                         ((CH_NUM) == XMC_SCU_ORC_END_ADC_CHANNEL) )  /**< Used to v
 174:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       provided ADC 
 175:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       within specif
 176:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       end channel n
 177:../Libraries/XMCLib/src/xmc4_scu.c **** 
 178:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX            (32U)      /**< Maximum supported SCU events. */
 179:../Libraries/XMCLib/src/xmc4_scu.c **** 
 180:../Libraries/XMCLib/src/xmc4_scu.c **** #define SCU_HIBERNATE_HDCR_HIBIOSEL_Size (4U)
 181:../Libraries/XMCLib/src/xmc4_scu.c **** 
 182:../Libraries/XMCLib/src/xmc4_scu.c **** #define SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN (0x2U)
 183:../Libraries/XMCLib/src/xmc4_scu.c **** 
 184:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_POWER_LSB13V (0.0058F)
 185:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_POWER_LSB33V (0.0225F)
 186:../Libraries/XMCLib/src/xmc4_scu.c **** 
 187:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 188:../Libraries/XMCLib/src/xmc4_scu.c ****  * LOCAL DATA
 189:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 190:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For registe
 191:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                         functions o
 192:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                         occurrence.
 193:../Libraries/XMCLib/src/xmc4_scu.c **** 
 194:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 195:../Libraries/XMCLib/src/xmc4_scu.c ****  * LOCAL ROUTINES
 196:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 197:../Libraries/XMCLib/src/xmc4_scu.c ****  #if defined(UC_ID)
 198:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a non-weak function, which retrieves high precision external oscillator frequency. */
 199:../Libraries/XMCLib/src/xmc4_scu.c **** __WEAK uint32_t OSCHP_GetFrequency(void)
 200:../Libraries/XMCLib/src/xmc4_scu.c **** {
 201:../Libraries/XMCLib/src/xmc4_scu.c ****   return (OSCHP_FREQUENCY);
 202:../Libraries/XMCLib/src/xmc4_scu.c **** }
 203:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 204:../Libraries/XMCLib/src/xmc4_scu.c **** 
 205:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 206:../Libraries/XMCLib/src/xmc4_scu.c **** static void XMC_SCU_lDelay(uint32_t cycles);
 207:../Libraries/XMCLib/src/xmc4_scu.c **** 
 208:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 209:../Libraries/XMCLib/src/xmc4_scu.c ****  * API IMPLEMENTATION
 210:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 211:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 212:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_lDelay(uint32_t delay)
 213:../Libraries/XMCLib/src/xmc4_scu.c **** {
  27              	 .loc 1 213 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
  32 0000 10B5     	 push {r4,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 4,-8
  36              	 .cfi_offset 14,-4
  37              	 .loc 1 213 0
  38 0002 0446     	 mov r4,r0
 214:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t i;
 215:../Libraries/XMCLib/src/xmc4_scu.c **** 
 216:../Libraries/XMCLib/src/xmc4_scu.c ****   SystemCoreClockUpdate();
  39              	 .loc 1 216 0
  40 0004 FFF7FEFF 	 bl SystemCoreClockUpdate
  41              	.LVL1:
 217:../Libraries/XMCLib/src/xmc4_scu.c ****   delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
  42              	 .loc 1 217 0
  43 0008 064B     	 ldr r3,.L6
  44 000a 0748     	 ldr r0,.L6+4
  45 000c 1B68     	 ldr r3,[r3]
  46 000e B3FBF0F3 	 udiv r3,r3,r0
  47 0012 03FB04F0 	 mul r0,r3,r4
  48              	.LVL2:
 218:../Libraries/XMCLib/src/xmc4_scu.c **** 
 219:../Libraries/XMCLib/src/xmc4_scu.c ****   for (i = 0U; i < delay; ++i)
  49              	 .loc 1 219 0
  50 0016 0023     	 movs r3,#0
  51              	.LVL3:
  52              	.L2:
  53              	 .loc 1 219 0 is_stmt 0 discriminator 1
  54 0018 8342     	 cmp r3,r0
  55 001a 02D0     	 beq .L5
 220:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 221:../Libraries/XMCLib/src/xmc4_scu.c ****     __NOP();
  56              	 .loc 1 221 0 is_stmt 1 discriminator 3
  57              	
  58 001c 00BF     	 nop
  59              	
 219:../Libraries/XMCLib/src/xmc4_scu.c ****   {
  60              	 .loc 1 219 0 discriminator 3
  61              	 .thumb
  62 001e 0133     	 adds r3,r3,#1
  63              	.LVL4:
  64 0020 FAE7     	 b .L2
  65              	.L5:
 222:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 223:../Libraries/XMCLib/src/xmc4_scu.c **** }
  66              	 .loc 1 223 0
  67 0022 10BD     	 pop {r4,pc}
  68              	.L7:
  69              	 .align 2
  70              	.L6:
  71 0024 00000000 	 .word SystemCoreClock
  72 0028 40420F00 	 .word 1000000
  73              	 .cfi_endproc
  74              	.LFE174:
  76              	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
  77              	 .align 1
  78              	 .global XMC_SCU_INTERRUPT_EnableEvent
  79              	 .thumb
  80              	 .thumb_func
  82              	XMC_SCU_INTERRUPT_EnableEvent:
  83              	.LFB175:
 224:../Libraries/XMCLib/src/xmc4_scu.c **** 
 225:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable the SCU event */
 226:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 227:../Libraries/XMCLib/src/xmc4_scu.c **** {
  84              	 .loc 1 227 0
  85              	 .cfi_startproc
  86              	 
  87              	 
  88              	 
  89              	.LVL5:
 228:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
  90              	 .loc 1 228 0
  91 0000 024A     	 ldr r2,.L9
  92 0002 9368     	 ldr r3,[r2,#8]
  93 0004 1843     	 orrs r0,r0,r3
  94              	.LVL6:
  95 0006 9060     	 str r0,[r2,#8]
  96 0008 7047     	 bx lr
  97              	.L10:
  98 000a 00BF     	 .align 2
  99              	.L9:
 100 000c 74400050 	 .word 1342193780
 101              	 .cfi_endproc
 102              	.LFE175:
 104              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 105              	 .align 1
 106              	 .global XMC_SCU_INTERRUPT_DisableEvent
 107              	 .thumb
 108              	 .thumb_func
 110              	XMC_SCU_INTERRUPT_DisableEvent:
 111              	.LFB176:
 229:../Libraries/XMCLib/src/xmc4_scu.c **** }
 230:../Libraries/XMCLib/src/xmc4_scu.c **** 
 231:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable the SCU event */
 232:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 233:../Libraries/XMCLib/src/xmc4_scu.c **** {
 112              	 .loc 1 233 0
 113              	 .cfi_startproc
 114              	 
 115              	 
 116              	 
 117              	.LVL7:
 234:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 118              	 .loc 1 234 0
 119 0000 024A     	 ldr r2,.L12
 120 0002 9368     	 ldr r3,[r2,#8]
 121 0004 23EA0000 	 bic r0,r3,r0
 122              	.LVL8:
 123 0008 9060     	 str r0,[r2,#8]
 124 000a 7047     	 bx lr
 125              	.L13:
 126              	 .align 2
 127              	.L12:
 128 000c 74400050 	 .word 1342193780
 129              	 .cfi_endproc
 130              	.LFE176:
 132              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 133              	 .align 1
 134              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 135              	 .thumb
 136              	 .thumb_func
 138              	XMC_SCU_INTERRUPT_TriggerEvent:
 139              	.LFB177:
 235:../Libraries/XMCLib/src/xmc4_scu.c **** }
 236:../Libraries/XMCLib/src/xmc4_scu.c **** 
 237:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to trigger the SCU event */
 238:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 239:../Libraries/XMCLib/src/xmc4_scu.c **** {
 140              	 .loc 1 239 0
 141              	 .cfi_startproc
 142              	 
 143              	 
 144              	 
 145              	.LVL9:
 240:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 146              	 .loc 1 240 0
 147 0000 024A     	 ldr r2,.L15
 148 0002 1369     	 ldr r3,[r2,#16]
 149 0004 1843     	 orrs r0,r0,r3
 150              	.LVL10:
 151 0006 1061     	 str r0,[r2,#16]
 152 0008 7047     	 bx lr
 153              	.L16:
 154 000a 00BF     	 .align 2
 155              	.L15:
 156 000c 74400050 	 .word 1342193780
 157              	 .cfi_endproc
 158              	.LFE177:
 160              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 161              	 .align 1
 162              	 .global XMC_SCU_INTERUPT_GetEventStatus
 163              	 .thumb
 164              	 .thumb_func
 166              	XMC_SCU_INTERUPT_GetEventStatus:
 167              	.LFB178:
 241:../Libraries/XMCLib/src/xmc4_scu.c **** }
 242:../Libraries/XMCLib/src/xmc4_scu.c **** 
 243:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the SCU event status */
 244:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 245:../Libraries/XMCLib/src/xmc4_scu.c **** {
 168              	 .loc 1 245 0
 169              	 .cfi_startproc
 170              	 
 171              	 
 172              	 
 246:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_INTERRUPT->SRRAW);
 173              	 .loc 1 246 0
 174 0000 014B     	 ldr r3,.L18
 175 0002 5868     	 ldr r0,[r3,#4]
 247:../Libraries/XMCLib/src/xmc4_scu.c **** }
 176              	 .loc 1 247 0
 177 0004 7047     	 bx lr
 178              	.L19:
 179 0006 00BF     	 .align 2
 180              	.L18:
 181 0008 74400050 	 .word 1342193780
 182              	 .cfi_endproc
 183              	.LFE178:
 185              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 186              	 .align 1
 187              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 188              	 .thumb
 189              	 .thumb_func
 191              	XMC_SCU_INTERRUPT_ClearEventStatus:
 192              	.LFB179:
 248:../Libraries/XMCLib/src/xmc4_scu.c **** 
 249:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear the SCU event status */
 250:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 251:../Libraries/XMCLib/src/xmc4_scu.c **** {
 193              	 .loc 1 251 0
 194              	 .cfi_startproc
 195              	 
 196              	 
 197              	 
 198              	.LVL11:
 252:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRCLR = (uint32_t)event;
 199              	 .loc 1 252 0
 200 0000 014B     	 ldr r3,.L21
 201 0002 D860     	 str r0,[r3,#12]
 202 0004 7047     	 bx lr
 203              	.L22:
 204 0006 00BF     	 .align 2
 205              	.L21:
 206 0008 74400050 	 .word 1342193780
 207              	 .cfi_endproc
 208              	.LFE179:
 210              	 .section .text.XMC_SCU_GetBootMode,"ax",%progbits
 211              	 .align 1
 212              	 .global XMC_SCU_GetBootMode
 213              	 .thumb
 214              	 .thumb_func
 216              	XMC_SCU_GetBootMode:
 217              	.LFB180:
 253:../Libraries/XMCLib/src/xmc4_scu.c **** }
 254:../Libraries/XMCLib/src/xmc4_scu.c **** 
 255:../Libraries/XMCLib/src/xmc4_scu.c **** 
 256:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the currently deployed device bootmode */
 257:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_GetBootMode(void)
 258:../Libraries/XMCLib/src/xmc4_scu.c **** {
 218              	 .loc 1 258 0
 219              	 .cfi_startproc
 220              	 
 221              	 
 222              	 
 259:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 223              	 .loc 1 259 0
 224 0000 024B     	 ldr r3,.L24
 225 0002 1869     	 ldr r0,[r3,#16]
 260:../Libraries/XMCLib/src/xmc4_scu.c **** }
 226              	 .loc 1 260 0
 227 0004 00F47060 	 and r0,r0,#3840
 228 0008 7047     	 bx lr
 229              	.L25:
 230 000a 00BF     	 .align 2
 231              	.L24:
 232 000c 00400050 	 .word 1342193664
 233              	 .cfi_endproc
 234              	.LFE180:
 236              	 .section .text.XMC_SCU_SetBootMode,"ax",%progbits
 237              	 .align 1
 238              	 .global XMC_SCU_SetBootMode
 239              	 .thumb
 240              	 .thumb_func
 242              	XMC_SCU_SetBootMode:
 243              	.LFB181:
 261:../Libraries/XMCLib/src/xmc4_scu.c **** 
 262:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program a new device bootmode */
 263:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
 264:../Libraries/XMCLib/src/xmc4_scu.c **** {
 244              	 .loc 1 264 0
 245              	 .cfi_startproc
 246              	 
 247              	 
 248              	 
 249              	.LVL12:
 265:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->STCON = (uint32_t)bootmode;
 250              	 .loc 1 265 0
 251 0000 014B     	 ldr r3,.L27
 252 0002 1861     	 str r0,[r3,#16]
 253 0004 7047     	 bx lr
 254              	.L28:
 255 0006 00BF     	 .align 2
 256              	.L27:
 257 0008 00400050 	 .word 1342193664
 258              	 .cfi_endproc
 259              	.LFE181:
 261              	 .section .text.XMC_SCU_ReadGPR,"ax",%progbits
 262              	 .align 1
 263              	 .global XMC_SCU_ReadGPR
 264              	 .thumb
 265              	 .thumb_func
 267              	XMC_SCU_ReadGPR:
 268              	.LFB182:
 266:../Libraries/XMCLib/src/xmc4_scu.c **** }
 267:../Libraries/XMCLib/src/xmc4_scu.c **** 
 268:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to read from General purpose register */
 269:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_ReadGPR(const uint32_t index)
 270:../Libraries/XMCLib/src/xmc4_scu.c **** {
 269              	 .loc 1 270 0
 270              	 .cfi_startproc
 271              	 
 272              	 
 273              	 
 274              	.LVL13:
 271:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_GENERAL->GPR[index]);
 275              	 .loc 1 271 0
 276 0000 014B     	 ldr r3,.L30
 277 0002 8000     	 lsls r0,r0,#2
 278              	.LVL14:
 279 0004 1858     	 ldr r0,[r3,r0]
 272:../Libraries/XMCLib/src/xmc4_scu.c **** }
 280              	 .loc 1 272 0
 281 0006 7047     	 bx lr
 282              	.L31:
 283              	 .align 2
 284              	.L30:
 285 0008 2C400050 	 .word 1342193708
 286              	 .cfi_endproc
 287              	.LFE182:
 289              	 .section .text.XMC_SCU_WriteGPR,"ax",%progbits
 290              	 .align 1
 291              	 .global XMC_SCU_WriteGPR
 292              	 .thumb
 293              	 .thumb_func
 295              	XMC_SCU_WriteGPR:
 296              	.LFB183:
 273:../Libraries/XMCLib/src/xmc4_scu.c **** 
 274:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to write to GPR */
 275:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
 276:../Libraries/XMCLib/src/xmc4_scu.c **** {
 297              	 .loc 1 276 0
 298              	 .cfi_startproc
 299              	 
 300              	 
 301              	 
 302              	.LVL15:
 277:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GPR[index] = data;
 303              	 .loc 1 277 0
 304 0000 8000     	 lsls r0,r0,#2
 305              	.LVL16:
 306 0002 014B     	 ldr r3,.L33
 307 0004 1950     	 str r1,[r3,r0]
 308 0006 7047     	 bx lr
 309              	.L34:
 310              	 .align 2
 311              	.L33:
 312 0008 2C400050 	 .word 1342193708
 313              	 .cfi_endproc
 314              	.LFE183:
 316              	 .section .text.XMC_SCU_EnableOutOfRangeComparator,"ax",%progbits
 317              	 .align 1
 318              	 .global XMC_SCU_EnableOutOfRangeComparator
 319              	 .thumb
 320              	 .thumb_func
 322              	XMC_SCU_EnableOutOfRangeComparator:
 323              	.LFB184:
 278:../Libraries/XMCLib/src/xmc4_scu.c **** }
 279:../Libraries/XMCLib/src/xmc4_scu.c **** 
 280:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
 281:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
 282:../Libraries/XMCLib/src/xmc4_scu.c **** {
 324              	 .loc 1 282 0
 325              	 .cfi_startproc
 326              	 
 327              	 
 328              	 
 329              	.LVL17:
 330 0000 8000     	 lsls r0,r0,#2
 331              	.LVL18:
 332 0002 00F1A040 	 add r0,r0,#1342177280
 333 0006 00F58040 	 add r0,r0,#16384
 283:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
 284:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel))
 285:../Libraries/XMCLib/src/xmc4_scu.c ****    
 286:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 334              	 .loc 1 286 0
 335 000a 0122     	 movs r2,#1
 336 000c D0F8A030 	 ldr r3,[r0,#160]
 337 0010 8A40     	 lsls r2,r2,r1
 338 0012 1343     	 orrs r3,r3,r2
 339 0014 C0F8A030 	 str r3,[r0,#160]
 340 0018 7047     	 bx lr
 341              	 .cfi_endproc
 342              	.LFE184:
 344              	 .section .text.XMC_SCU_DisableOutOfRangeComparator,"ax",%progbits
 345              	 .align 1
 346              	 .global XMC_SCU_DisableOutOfRangeComparator
 347              	 .thumb
 348              	 .thumb_func
 350              	XMC_SCU_DisableOutOfRangeComparator:
 351              	.LFB185:
 287:../Libraries/XMCLib/src/xmc4_scu.c **** }
 288:../Libraries/XMCLib/src/xmc4_scu.c **** 
 289:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
 290:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
 291:../Libraries/XMCLib/src/xmc4_scu.c **** {
 352              	 .loc 1 291 0
 353              	 .cfi_startproc
 354              	 
 355              	 
 356              	 
 357              	.LVL19:
 358 0000 8000     	 lsls r0,r0,#2
 359              	.LVL20:
 360 0002 00F1A040 	 add r0,r0,#1342177280
 361 0006 00F58040 	 add r0,r0,#16384
 292:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
 293:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel
 294:../Libraries/XMCLib/src/xmc4_scu.c ****    
 295:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 362              	 .loc 1 295 0
 363 000a 0122     	 movs r2,#1
 364 000c D0F8A030 	 ldr r3,[r0,#160]
 365 0010 8A40     	 lsls r2,r2,r1
 366 0012 23EA0203 	 bic r3,r3,r2
 367 0016 C0F8A030 	 str r3,[r0,#160]
 368 001a 7047     	 bx lr
 369              	 .cfi_endproc
 370              	.LFE185:
 372              	 .section .text.XMC_SCU_CalibrateTemperatureSensor,"ax",%progbits
 373              	 .align 1
 374              	 .global XMC_SCU_CalibrateTemperatureSensor
 375              	 .thumb
 376              	 .thumb_func
 378              	XMC_SCU_CalibrateTemperatureSensor:
 379              	.LFB186:
 296:../Libraries/XMCLib/src/xmc4_scu.c **** }
 297:../Libraries/XMCLib/src/xmc4_scu.c **** 
 298:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to calibrate temperature sensor */
 299:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
 300:../Libraries/XMCLib/src/xmc4_scu.c **** {
 380              	 .loc 1 300 0
 381              	 .cfi_startproc
 382              	 
 383              	 
 384              	 
 385              	.LVL21:
 301:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 302:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 386              	 .loc 1 302 0
 387 0000 C902     	 lsls r1,r1,#11
 388              	.LVL22:
 389 0002 41F40801 	 orr r1,r1,#8912896
 301:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 390              	 .loc 1 301 0
 391 0006 034B     	 ldr r3,.L38
 303:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 392              	 .loc 1 303 0
 393 0008 41EA0010 	 orr r0,r1,r0,lsl#4
 394              	.LVL23:
 301:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 395              	 .loc 1 301 0
 396 000c C3F88C00 	 str r0,[r3,#140]
 397 0010 7047     	 bx lr
 398              	.L39:
 399 0012 00BF     	 .align 2
 400              	.L38:
 401 0014 00400050 	 .word 1342193664
 402              	 .cfi_endproc
 403              	.LFE186:
 405              	 .section .text.XMC_SCU_EnableTemperatureSensor,"ax",%progbits
 406              	 .align 1
 407              	 .global XMC_SCU_EnableTemperatureSensor
 408              	 .thumb
 409              	 .thumb_func
 411              	XMC_SCU_EnableTemperatureSensor:
 412              	.LFB187:
 304:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
 305:../Libraries/XMCLib/src/xmc4_scu.c **** }
 306:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable die temperature measurement by powering the DTS module. */
 307:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_EnableTemperatureSensor(void)
 308:../Libraries/XMCLib/src/xmc4_scu.c **** {
 413              	 .loc 1 308 0
 414              	 .cfi_startproc
 415              	 
 416              	 
 417              	 
 309:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 418              	 .loc 1 309 0
 419 0000 034A     	 ldr r2,.L41
 420 0002 D2F88C30 	 ldr r3,[r2,#140]
 421 0006 23F00103 	 bic r3,r3,#1
 422 000a C2F88C30 	 str r3,[r2,#140]
 423 000e 7047     	 bx lr
 424              	.L42:
 425              	 .align 2
 426              	.L41:
 427 0010 00400050 	 .word 1342193664
 428              	 .cfi_endproc
 429              	.LFE187:
 431              	 .section .text.XMC_SCU_DisableTemperatureSensor,"ax",%progbits
 432              	 .align 1
 433              	 .global XMC_SCU_DisableTemperatureSensor
 434              	 .thumb
 435              	 .thumb_func
 437              	XMC_SCU_DisableTemperatureSensor:
 438              	.LFB188:
 310:../Libraries/XMCLib/src/xmc4_scu.c **** }
 311:../Libraries/XMCLib/src/xmc4_scu.c **** 
 312:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable die temperature measurement by powering the DTS module off. */
 313:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_DisableTemperatureSensor(void)
 314:../Libraries/XMCLib/src/xmc4_scu.c **** {
 439              	 .loc 1 314 0
 440              	 .cfi_startproc
 441              	 
 442              	 
 443              	 
 315:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 444              	 .loc 1 315 0
 445 0000 034A     	 ldr r2,.L44
 446 0002 D2F88C30 	 ldr r3,[r2,#140]
 447 0006 43F00103 	 orr r3,r3,#1
 448 000a C2F88C30 	 str r3,[r2,#140]
 449 000e 7047     	 bx lr
 450              	.L45:
 451              	 .align 2
 452              	.L44:
 453 0010 00400050 	 .word 1342193664
 454              	 .cfi_endproc
 455              	.LFE188:
 457              	 .section .text.XMC_SCU_IsTemperatureSensorEnabled,"ax",%progbits
 458              	 .align 1
 459              	 .global XMC_SCU_IsTemperatureSensorEnabled
 460              	 .thumb
 461              	 .thumb_func
 463              	XMC_SCU_IsTemperatureSensorEnabled:
 464              	.LFB189:
 316:../Libraries/XMCLib/src/xmc4_scu.c **** }
 317:../Libraries/XMCLib/src/xmc4_scu.c **** 
 318:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to provide the die temperature sensor power status. */
 319:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorEnabled(void)
 320:../Libraries/XMCLib/src/xmc4_scu.c **** {
 465              	 .loc 1 320 0
 466              	 .cfi_startproc
 467              	 
 468              	 
 469              	 
 321:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 470              	 .loc 1 321 0
 471 0000 034B     	 ldr r3,.L47
 472 0002 D3F88C00 	 ldr r0,[r3,#140]
 473 0006 00F00100 	 and r0,r0,#1
 322:../Libraries/XMCLib/src/xmc4_scu.c **** }
 474              	 .loc 1 322 0
 475 000a 80F00100 	 eor r0,r0,#1
 476 000e 7047     	 bx lr
 477              	.L48:
 478              	 .align 2
 479              	.L47:
 480 0010 00400050 	 .word 1342193664
 481              	 .cfi_endproc
 482              	.LFE189:
 484              	 .section .text.XMC_SCU_IsTemperatureSensorReady,"ax",%progbits
 485              	 .align 1
 486              	 .global XMC_SCU_IsTemperatureSensorReady
 487              	 .thumb
 488              	 .thumb_func
 490              	XMC_SCU_IsTemperatureSensorReady:
 491              	.LFB190:
 323:../Libraries/XMCLib/src/xmc4_scu.c **** 
 324:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check if the die temperature sensor is ready to start a measurement. */
 325:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorReady(void)
 326:../Libraries/XMCLib/src/xmc4_scu.c **** {
 492              	 .loc 1 326 0
 493              	 .cfi_startproc
 494              	 
 495              	 
 496              	 
 327:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 497              	 .loc 1 327 0
 498 0000 024B     	 ldr r3,.L50
 499 0002 D3F89000 	 ldr r0,[r3,#144]
 328:../Libraries/XMCLib/src/xmc4_scu.c **** }
 500              	 .loc 1 328 0
 501 0006 C0F38030 	 ubfx r0,r0,#14,#1
 502 000a 7047     	 bx lr
 503              	.L51:
 504              	 .align 2
 505              	.L50:
 506 000c 00400050 	 .word 1342193664
 507              	 .cfi_endproc
 508              	.LFE190:
 510              	 .section .text.XMC_SCU_GetTemperatureMeasurement,"ax",%progbits
 511              	 .align 1
 512              	 .global XMC_SCU_GetTemperatureMeasurement
 513              	 .thumb
 514              	 .thumb_func
 516              	XMC_SCU_GetTemperatureMeasurement:
 517              	.LFB192:
 329:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to start device temperature measurements */
 330:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
 331:../Libraries/XMCLib/src/xmc4_scu.c **** {
 332:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 333:../Libraries/XMCLib/src/xmc4_scu.c **** 
 334:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 335:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 336:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 337:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 338:../Libraries/XMCLib/src/xmc4_scu.c ****    
 339:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorBusy() == true)
 340:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 341:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_BUSY;
 342:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 343:../Libraries/XMCLib/src/xmc4_scu.c **** 
 344:../Libraries/XMCLib/src/xmc4_scu.c ****   /* And start the measurement */
 345:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 346:../Libraries/XMCLib/src/xmc4_scu.c ****   
 347:../Libraries/XMCLib/src/xmc4_scu.c ****   return (status);
 348:../Libraries/XMCLib/src/xmc4_scu.c **** }
 349:../Libraries/XMCLib/src/xmc4_scu.c **** 
 350:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the temperature measured */
 351:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_GetTemperatureMeasurement(void)
 352:../Libraries/XMCLib/src/xmc4_scu.c **** {
 518              	 .loc 1 352 0
 519              	 .cfi_startproc
 520              	 
 521              	 
 522 0000 08B5     	 push {r3,lr}
 523              	.LCFI1:
 524              	 .cfi_def_cfa_offset 8
 525              	 .cfi_offset 3,-8
 526              	 .cfi_offset 14,-4
 353:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t temperature;
 354:../Libraries/XMCLib/src/xmc4_scu.c **** 
 355:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 527              	 .loc 1 355 0
 528 0002 FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorEnabled
 529              	.LVL24:
 530 0006 28B1     	 cbz r0,.L54
 356:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 357:../Libraries/XMCLib/src/xmc4_scu.c ****     temperature = 0x7FFFFFFFUL;
 358:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 359:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 360:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 361:../Libraries/XMCLib/src/xmc4_scu.c ****     temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL
 531              	 .loc 1 361 0
 532 0008 044B     	 ldr r3,.L55
 533 000a D3F89000 	 ldr r0,[r3,#144]
 534 000e C0F30900 	 ubfx r0,r0,#0,#10
 535              	.LVL25:
 536 0012 08BD     	 pop {r3,pc}
 537              	.LVL26:
 538              	.L54:
 357:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 539              	 .loc 1 357 0
 540 0014 6FF00040 	 mvn r0,#-2147483648
 541              	.LVL27:
 362:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 363:../Libraries/XMCLib/src/xmc4_scu.c ****   
 364:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((uint32_t)temperature);
 365:../Libraries/XMCLib/src/xmc4_scu.c **** }
 542              	 .loc 1 365 0
 543 0018 08BD     	 pop {r3,pc}
 544              	.L56:
 545 001a 00BF     	 .align 2
 546              	.L55:
 547 001c 00400050 	 .word 1342193664
 548              	 .cfi_endproc
 549              	.LFE192:
 551              	 .section .text.XMC_SCU_IsTemperatureSensorBusy,"ax",%progbits
 552              	 .align 1
 553              	 .global XMC_SCU_IsTemperatureSensorBusy
 554              	 .thumb
 555              	 .thumb_func
 557              	XMC_SCU_IsTemperatureSensorBusy:
 558              	.LFB193:
 366:../Libraries/XMCLib/src/xmc4_scu.c **** 
 367:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to know whether Die temperature sensor is busy */
 368:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorBusy(void)
 369:../Libraries/XMCLib/src/xmc4_scu.c **** {
 559              	 .loc 1 369 0
 560              	 .cfi_startproc
 561              	 
 562              	 
 563              	 
 370:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 564              	 .loc 1 370 0
 565 0000 024B     	 ldr r3,.L58
 566 0002 D3F89000 	 ldr r0,[r3,#144]
 371:../Libraries/XMCLib/src/xmc4_scu.c **** }
 567              	 .loc 1 371 0
 568 0006 C0F3C030 	 ubfx r0,r0,#15,#1
 569 000a 7047     	 bx lr
 570              	.L59:
 571              	 .align 2
 572              	.L58:
 573 000c 00400050 	 .word 1342193664
 574              	 .cfi_endproc
 575              	.LFE193:
 577              	 .section .text.XMC_SCU_StartTemperatureMeasurement,"ax",%progbits
 578              	 .align 1
 579              	 .global XMC_SCU_StartTemperatureMeasurement
 580              	 .thumb
 581              	 .thumb_func
 583              	XMC_SCU_StartTemperatureMeasurement:
 584              	.LFB191:
 331:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 585              	 .loc 1 331 0
 586              	 .cfi_startproc
 587              	 
 588              	 
 589              	.LVL28:
 590 0000 10B5     	 push {r4,lr}
 591              	.LCFI2:
 592              	 .cfi_def_cfa_offset 8
 593              	 .cfi_offset 4,-8
 594              	 .cfi_offset 14,-4
 334:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 595              	 .loc 1 334 0
 596 0002 FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorEnabled
 597              	.LVL29:
 598 0006 0446     	 mov r4,r0
 599              	.LVL30:
 339:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 600              	 .loc 1 339 0
 601 0008 FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorBusy
 602              	.LVL31:
 603 000c 18B9     	 cbnz r0,.L62
 334:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 604              	 .loc 1 334 0
 605 000e 84F00100 	 eor r0,r4,#1
 332:../Libraries/XMCLib/src/xmc4_scu.c **** 
 606              	 .loc 1 332 0
 607 0012 C0B2     	 uxtb r0,r0
 608 0014 00E0     	 b .L61
 609              	.L62:
 341:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 610              	 .loc 1 341 0
 611 0016 0220     	 movs r0,#2
 612              	.L61:
 613              	.LVL32:
 345:../Libraries/XMCLib/src/xmc4_scu.c ****   
 614              	 .loc 1 345 0
 615 0018 034A     	 ldr r2,.L63
 616 001a D2F88C30 	 ldr r3,[r2,#140]
 617 001e 43F00203 	 orr r3,r3,#2
 618 0022 C2F88C30 	 str r3,[r2,#140]
 348:../Libraries/XMCLib/src/xmc4_scu.c **** 
 619              	 .loc 1 348 0
 620 0026 10BD     	 pop {r4,pc}
 621              	.L64:
 622              	 .align 2
 623              	.L63:
 624 0028 00400050 	 .word 1342193664
 625              	 .cfi_endproc
 626              	.LFE191:
 628              	 .section .text.XMC_SCU_WriteToRetentionMemory,"ax",%progbits
 629              	 .align 1
 630              	 .global XMC_SCU_WriteToRetentionMemory
 631              	 .thumb
 632              	 .thumb_func
 634              	XMC_SCU_WriteToRetentionMemory:
 635              	.LFB194:
 372:../Libraries/XMCLib/src/xmc4_scu.c **** 
 373:../Libraries/XMCLib/src/xmc4_scu.c **** 
 374:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(SCU_GENERAL_DTEMPLIM_LOWER_Msk) && defined(SCU_GENERAL_DTEMPLIM_UPPER_Msk)
 375:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if device temperature has gone past the ceiling */
 376:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_HighTemperature(void)
 377:../Libraries/XMCLib/src/xmc4_scu.c **** {
 378:../Libraries/XMCLib/src/xmc4_scu.c ****   bool ret_val;
 379:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtscon;
 380:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtempalarm;
 381:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = SCU_GENERAL->DTSCON;
 382:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = dtscon & SCU_GENERAL_DTSCON_PWD_Msk;
 383:../Libraries/XMCLib/src/xmc4_scu.c **** 
 384:../Libraries/XMCLib/src/xmc4_scu.c ****   ret_val = false;
 385:../Libraries/XMCLib/src/xmc4_scu.c **** 
 386:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Any audit makes sense only if the DTS were powered up */  
 387:../Libraries/XMCLib/src/xmc4_scu.c ****   if(dtscon)
 388:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 389:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered down - return false */
 390:../Libraries/XMCLib/src/xmc4_scu.c ****     ret_val = false;
 391:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 392:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 393:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 394:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered up - Read the overflow bit and decide accordingly*/
 395:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = SCU_GENERAL->DTEMPALARM;
 396:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = dtempalarm & SCU_GENERAL_DTEMPALARM_OVERFL_Msk;
 397:../Libraries/XMCLib/src/xmc4_scu.c ****     
 398:../Libraries/XMCLib/src/xmc4_scu.c ****     if(dtempalarm)
 399:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 400:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = true;
 401:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 402:../Libraries/XMCLib/src/xmc4_scu.c ****     else
 403:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 404:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = false;
 405:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 406:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 407:../Libraries/XMCLib/src/xmc4_scu.c ****   return (ret_val);
 408:../Libraries/XMCLib/src/xmc4_scu.c **** }
 409:../Libraries/XMCLib/src/xmc4_scu.c **** 
 410:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program raw values of temperature limits into the DTS */
 411:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 412:../Libraries/XMCLib/src/xmc4_scu.c **** {
 413:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Power up the DTS module */
 414:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON &= (uint32_t)~SCU_GENERAL_DTSCON_PWD_Msk;
 415:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM = 0;
 416:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM = (lower_temp & SCU_GENERAL_DTEMPLIM_LOWER_Msk);
 417:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM |= (uint32_t)((upper_temp & SCU_GENERAL_DTEMPLIM_LOWER_Msk) << SCU_GENERAL_
 418:../Libraries/XMCLib/src/xmc4_scu.c **** }
 419:../Libraries/XMCLib/src/xmc4_scu.c **** 
 420:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if device temperature has gone below the stipulated limit */
 421:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_LowTemperature(void)
 422:../Libraries/XMCLib/src/xmc4_scu.c **** {
 423:../Libraries/XMCLib/src/xmc4_scu.c ****   bool ret_val;
 424:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtscon;
 425:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtempalarm;
 426:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = SCU_GENERAL->DTSCON;
 427:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = dtscon & SCU_GENERAL_DTSCON_PWD_Msk;
 428:../Libraries/XMCLib/src/xmc4_scu.c **** 
 429:../Libraries/XMCLib/src/xmc4_scu.c ****   ret_val = false;
 430:../Libraries/XMCLib/src/xmc4_scu.c **** 
 431:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Any audit makes sense only if the DTS were powered up */  
 432:../Libraries/XMCLib/src/xmc4_scu.c ****   if(dtscon)
 433:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 434:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered down - return false */
 435:../Libraries/XMCLib/src/xmc4_scu.c ****     ret_val = false;
 436:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 437:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 438:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 439:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered up - Read the overflow bit and decide accordingly*/
 440:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = SCU_GENERAL->DTEMPALARM;
 441:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = dtempalarm & SCU_GENERAL_DTEMPALARM_UNDERFL_Msk;
 442:../Libraries/XMCLib/src/xmc4_scu.c ****     
 443:../Libraries/XMCLib/src/xmc4_scu.c ****     if(dtempalarm)
 444:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 445:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = true;
 446:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 447:../Libraries/XMCLib/src/xmc4_scu.c ****     else
 448:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 449:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = false;
 450:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 451:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 452:../Libraries/XMCLib/src/xmc4_scu.c ****   
 453:../Libraries/XMCLib/src/xmc4_scu.c ****   return (ret_val);
 454:../Libraries/XMCLib/src/xmc4_scu.c **** }
 455:../Libraries/XMCLib/src/xmc4_scu.c **** #endif  
 456:../Libraries/XMCLib/src/xmc4_scu.c **** 
 457:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to write into Retention memory in hibernate domain */
 458:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
 459:../Libraries/XMCLib/src/xmc4_scu.c **** {
 636              	 .loc 1 459 0
 637              	 .cfi_startproc
 638              	 
 639              	 
 640              	 
 641              	.LVL33:
 460:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t rmacr;
 461:../Libraries/XMCLib/src/xmc4_scu.c ****   
 462:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Get the address right */  
 463:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk
 642              	 .loc 1 463 0
 643 0000 0004     	 lsls r0,r0,#16
 644              	.LVL34:
 464:../Libraries/XMCLib/src/xmc4_scu.c ****   
 465:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Transfer from RMDATA to Retention memory */
 466:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 467:../Libraries/XMCLib/src/xmc4_scu.c ****   
 468:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Write desired data into RMDATA register */  
 469:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMDATA = data;
 645              	 .loc 1 469 0
 646 0002 074B     	 ldr r3,.L68
 463:../Libraries/XMCLib/src/xmc4_scu.c ****   
 647              	 .loc 1 463 0
 648 0004 00F47020 	 and r0,r0,#983040
 649              	.LVL35:
 466:../Libraries/XMCLib/src/xmc4_scu.c ****   
 650              	 .loc 1 466 0
 651 0008 40F00100 	 orr r0,r0,#1
 652              	.LVL36:
 653              	 .loc 1 469 0
 654 000c C3F8CC10 	 str r1,[r3,#204]
 470:../Libraries/XMCLib/src/xmc4_scu.c ****   
 471:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Write address & direction of transfer into RMACR register */  
 472:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMACR = rmacr;
 655              	 .loc 1 472 0
 656 0010 C3F8C800 	 str r0,[r3,#200]
 657              	.L66:
 473:../Libraries/XMCLib/src/xmc4_scu.c ****   
 474:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of RMX register in hibernate domain is completed */
 475:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 658              	 .loc 1 475 0 discriminator 1
 659 0014 D3F8C420 	 ldr r2,[r3,#196]
 660 0018 9204     	 lsls r2,r2,#18
 661 001a FBD4     	 bmi .L66
 476:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 477:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 478:../Libraries/XMCLib/src/xmc4_scu.c **** }
 662              	 .loc 1 478 0
 663 001c 7047     	 bx lr
 664              	.L69:
 665 001e 00BF     	 .align 2
 666              	.L68:
 667 0020 00400050 	 .word 1342193664
 668              	 .cfi_endproc
 669              	.LFE194:
 671              	 .section .text.XMC_SCU_ReadFromRetentionMemory,"ax",%progbits
 672              	 .align 1
 673              	 .global XMC_SCU_ReadFromRetentionMemory
 674              	 .thumb
 675              	 .thumb_func
 677              	XMC_SCU_ReadFromRetentionMemory:
 678              	.LFB195:
 479:../Libraries/XMCLib/src/xmc4_scu.c **** 
 480:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to read from Retention memory in hibernate domain */
 481:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
 482:../Libraries/XMCLib/src/xmc4_scu.c **** {
 679              	 .loc 1 482 0
 680              	 .cfi_startproc
 681              	 
 682              	 
 683              	 
 684              	.LVL37:
 483:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t rmacr;
 484:../Libraries/XMCLib/src/xmc4_scu.c **** 
 485:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Get the address right */  
 486:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk
 685              	 .loc 1 486 0
 686 0000 0004     	 lsls r0,r0,#16
 687              	.LVL38:
 487:../Libraries/XMCLib/src/xmc4_scu.c ****   
 488:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Transfer from RMDATA to Retention memory */
 489:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 490:../Libraries/XMCLib/src/xmc4_scu.c ****   
 491:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Writing an adress & direction of transfer into RMACR register */  
 492:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMACR = rmacr;
 688              	 .loc 1 492 0
 689 0002 064B     	 ldr r3,.L73
 489:../Libraries/XMCLib/src/xmc4_scu.c ****   
 690              	 .loc 1 489 0
 691 0004 00F47020 	 and r0,r0,#983040
 692              	.LVL39:
 693              	 .loc 1 492 0
 694 0008 C3F8C800 	 str r0,[r3,#200]
 695              	.L71:
 493:../Libraries/XMCLib/src/xmc4_scu.c ****   
 494:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of RMX register in hibernate domain is completed */
 495:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 696              	 .loc 1 495 0 discriminator 1
 697 000c D3F8C420 	 ldr r2,[r3,#196]
 698 0010 9204     	 lsls r2,r2,#18
 699 0012 FBD4     	 bmi .L71
 496:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 497:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 498:../Libraries/XMCLib/src/xmc4_scu.c **** 
 499:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_GENERAL->RMDATA);
 700              	 .loc 1 499 0
 701 0014 014B     	 ldr r3,.L73
 702 0016 D3F8CC00 	 ldr r0,[r3,#204]
 703              	.LVL40:
 500:../Libraries/XMCLib/src/xmc4_scu.c **** }
 704              	 .loc 1 500 0
 705 001a 7047     	 bx lr
 706              	.L74:
 707              	 .align 2
 708              	.L73:
 709 001c 00400050 	 .word 1342193664
 710              	 .cfi_endproc
 711              	.LFE195:
 713              	 .section .text.XMC_SCU_TRAP_Enable,"ax",%progbits
 714              	 .align 1
 715              	 .global XMC_SCU_TRAP_Enable
 716              	 .thumb
 717              	 .thumb_func
 719              	XMC_SCU_TRAP_Enable:
 720              	.LFB197:
 501:../Libraries/XMCLib/src/xmc4_scu.c **** 
 502:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to initialize the clock tree */
 503:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 504:../Libraries/XMCLib/src/xmc4_scu.c **** {
 505:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fsys_clkdiv != 0);
 506:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fcpu_clkdiv != 0);
 507:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fccu_clkdiv != 0);
 508:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fperipheral_clkdiv != 0);
 509:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.p_div != 0) &&
 510:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)) ||
 511:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR));
 512:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.n_div != 0) &&
 513:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)) ||
 514:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR));
 515:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", (config->syspll_config.k_div != 0) &&
 516:../Libraries/XMCLib/src/xmc4_scu.c ****                  ((config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL) ||
 517:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR)));
 518:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL) ||
 519:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_OFI)) &&
 520:../Libraries/XMCLib/src/xmc4_scu.c ****                  ((config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL) ||
 521:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR)));
 522:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_oscu
 523:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
 524:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
 525:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_
 526:../Libraries/XMCLib/src/xmc4_scu.c **** 
 527:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 528:../Libraries/XMCLib/src/xmc4_scu.c **** 
 529:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_HIB_EnableHibernateDomain();
 530:../Libraries/XMCLib/src/xmc4_scu.c **** 
 531:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->enable_osculp == true)
 532:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 533:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableLowPowerOscillator();
 534:../Libraries/XMCLib/src/xmc4_scu.c ****     while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 535:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 536:../Libraries/XMCLib/src/xmc4_scu.c ****   
 537:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 538:../Libraries/XMCLib/src/xmc4_scu.c ****   while (XMC_SCU_GetMirrorStatus() != 0)
 539:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 540:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until update of the stanby clock source is done in the HIB domain */    
 541:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 542:../Libraries/XMCLib/src/xmc4_scu.c **** 
 543:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 544:../Libraries/XMCLib/src/xmc4_scu.c **** 
 545:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 546:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 547:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 548:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 549:../Libraries/XMCLib/src/xmc4_scu.c **** 
 550:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->enable_oschp == true)
 551:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 552:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 553:../Libraries/XMCLib/src/xmc4_scu.c ****     while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 554:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 555:../Libraries/XMCLib/src/xmc4_scu.c **** 
 556:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 557:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 558:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_DisableSystemPll();
 559:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 560:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 561:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 562:../Libraries/XMCLib/src/xmc4_scu.c **** 
 563:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableSystemPll();
 564:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 565:../Libraries/XMCLib/src/xmc4_scu.c ****                                  config->syspll_config.mode,
 566:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.p_div,
 567:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.n_div,
 568:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.k_div);
 569:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 570:../Libraries/XMCLib/src/xmc4_scu.c **** 
 571:../Libraries/XMCLib/src/xmc4_scu.c ****   /* use SYSPLL? */
 572:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 573:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 574:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 575:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 576:../Libraries/XMCLib/src/xmc4_scu.c ****   SystemCoreClockUpdate();
 577:../Libraries/XMCLib/src/xmc4_scu.c **** }
 578:../Libraries/XMCLib/src/xmc4_scu.c **** 
 579:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable a trap source */
 580:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Enable(const uint32_t trap)
 581:../Libraries/XMCLib/src/xmc4_scu.c **** {
 721              	 .loc 1 581 0
 722              	 .cfi_startproc
 723              	 
 724              	 
 725              	 
 726              	.LVL41:
 582:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 727              	 .loc 1 582 0
 728 0000 024A     	 ldr r2,.L76
 729 0002 9368     	 ldr r3,[r2,#8]
 730 0004 23EA0000 	 bic r0,r3,r0
 731              	.LVL42:
 732 0008 9060     	 str r0,[r2,#8]
 733 000a 7047     	 bx lr
 734              	.L77:
 735              	 .align 2
 736              	.L76:
 737 000c 60410050 	 .word 1342194016
 738              	 .cfi_endproc
 739              	.LFE197:
 741              	 .section .text.XMC_SCU_TRAP_Disable,"ax",%progbits
 742              	 .align 1
 743              	 .global XMC_SCU_TRAP_Disable
 744              	 .thumb
 745              	 .thumb_func
 747              	XMC_SCU_TRAP_Disable:
 748              	.LFB198:
 583:../Libraries/XMCLib/src/xmc4_scu.c **** }
 584:../Libraries/XMCLib/src/xmc4_scu.c **** 
 585:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable a trap source */
 586:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Disable(const uint32_t trap)
 587:../Libraries/XMCLib/src/xmc4_scu.c **** {
 749              	 .loc 1 587 0
 750              	 .cfi_startproc
 751              	 
 752              	 
 753              	 
 754              	.LVL43:
 588:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 755              	 .loc 1 588 0
 756 0000 024A     	 ldr r2,.L79
 757 0002 9368     	 ldr r3,[r2,#8]
 758 0004 1843     	 orrs r0,r0,r3
 759              	.LVL44:
 760 0006 9060     	 str r0,[r2,#8]
 761 0008 7047     	 bx lr
 762              	.L80:
 763 000a 00BF     	 .align 2
 764              	.L79:
 765 000c 60410050 	 .word 1342194016
 766              	 .cfi_endproc
 767              	.LFE198:
 769              	 .section .text.XMC_SCU_TRAP_GetStatus,"ax",%progbits
 770              	 .align 1
 771              	 .global XMC_SCU_TRAP_GetStatus
 772              	 .thumb
 773              	 .thumb_func
 775              	XMC_SCU_TRAP_GetStatus:
 776              	.LFB199:
 589:../Libraries/XMCLib/src/xmc4_scu.c **** }
 590:../Libraries/XMCLib/src/xmc4_scu.c **** 
 591:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if a trap source has generated event */
 592:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_TRAP_GetStatus(void)
 593:../Libraries/XMCLib/src/xmc4_scu.c **** {
 777              	 .loc 1 593 0
 778              	 .cfi_startproc
 779              	 
 780              	 
 781              	 
 594:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_TRAP->TRAPRAW);
 782              	 .loc 1 594 0
 783 0000 014B     	 ldr r3,.L82
 784 0002 5868     	 ldr r0,[r3,#4]
 595:../Libraries/XMCLib/src/xmc4_scu.c **** }
 785              	 .loc 1 595 0
 786 0004 7047     	 bx lr
 787              	.L83:
 788 0006 00BF     	 .align 2
 789              	.L82:
 790 0008 60410050 	 .word 1342194016
 791              	 .cfi_endproc
 792              	.LFE199:
 794              	 .section .text.XMC_SCU_TRAP_Trigger,"ax",%progbits
 795              	 .align 1
 796              	 .global XMC_SCU_TRAP_Trigger
 797              	 .thumb
 798              	 .thumb_func
 800              	XMC_SCU_TRAP_Trigger:
 801              	.LFB200:
 596:../Libraries/XMCLib/src/xmc4_scu.c **** 
 597:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually trigger a trap event */
 598:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Trigger(const uint32_t trap)
 599:../Libraries/XMCLib/src/xmc4_scu.c **** {
 802              	 .loc 1 599 0
 803              	 .cfi_startproc
 804              	 
 805              	 
 806              	 
 807              	.LVL45:
 600:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPSET = (uint32_t)trap;
 808              	 .loc 1 600 0
 809 0000 014B     	 ldr r3,.L85
 810 0002 1861     	 str r0,[r3,#16]
 811 0004 7047     	 bx lr
 812              	.L86:
 813 0006 00BF     	 .align 2
 814              	.L85:
 815 0008 60410050 	 .word 1342194016
 816              	 .cfi_endproc
 817              	.LFE200:
 819              	 .section .text.XMC_SCU_TRAP_ClearStatus,"ax",%progbits
 820              	 .align 1
 821              	 .global XMC_SCU_TRAP_ClearStatus
 822              	 .thumb
 823              	 .thumb_func
 825              	XMC_SCU_TRAP_ClearStatus:
 826              	.LFB201:
 601:../Libraries/XMCLib/src/xmc4_scu.c **** }
 602:../Libraries/XMCLib/src/xmc4_scu.c **** 
 603:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear a trap event */
 604:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
 605:../Libraries/XMCLib/src/xmc4_scu.c **** {
 827              	 .loc 1 605 0
 828              	 .cfi_startproc
 829              	 
 830              	 
 831              	 
 832              	.LVL46:
 606:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPCLR = (uint32_t)trap;
 833              	 .loc 1 606 0
 834 0000 014B     	 ldr r3,.L88
 835 0002 D860     	 str r0,[r3,#12]
 836 0004 7047     	 bx lr
 837              	.L89:
 838 0006 00BF     	 .align 2
 839              	.L88:
 840 0008 60410050 	 .word 1342194016
 841              	 .cfi_endproc
 842              	.LFE201:
 844              	 .section .text.XMC_SCU_PARITY_ClearStatus,"ax",%progbits
 845              	 .align 1
 846              	 .global XMC_SCU_PARITY_ClearStatus
 847              	 .thumb
 848              	 .thumb_func
 850              	XMC_SCU_PARITY_ClearStatus:
 851              	.LFB202:
 607:../Libraries/XMCLib/src/xmc4_scu.c **** }
 608:../Libraries/XMCLib/src/xmc4_scu.c **** 
 609:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear parity error event */
 610:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
 611:../Libraries/XMCLib/src/xmc4_scu.c **** {
 852              	 .loc 1 611 0
 853              	 .cfi_startproc
 854              	 
 855              	 
 856              	 
 857              	.LVL47:
 612:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 858              	 .loc 1 612 0
 859 0000 024A     	 ldr r2,.L91
 860 0002 5369     	 ldr r3,[r2,#20]
 861 0004 1843     	 orrs r0,r0,r3
 862              	.LVL48:
 863 0006 5061     	 str r0,[r2,#20]
 864 0008 7047     	 bx lr
 865              	.L92:
 866 000a 00BF     	 .align 2
 867              	.L91:
 868 000c 3C410050 	 .word 1342193980
 869              	 .cfi_endproc
 870              	.LFE202:
 872              	 .section .text.XMC_SCU_PARITY_GetStatus,"ax",%progbits
 873              	 .align 1
 874              	 .global XMC_SCU_PARITY_GetStatus
 875              	 .thumb
 876              	 .thumb_func
 878              	XMC_SCU_PARITY_GetStatus:
 879              	.LFB203:
 613:../Libraries/XMCLib/src/xmc4_scu.c **** }
 614:../Libraries/XMCLib/src/xmc4_scu.c **** 
 615:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if the specified parity error has occured or not */
 616:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_PARITY_GetStatus(void)
 617:../Libraries/XMCLib/src/xmc4_scu.c **** {
 880              	 .loc 1 617 0
 881              	 .cfi_startproc
 882              	 
 883              	 
 884              	 
 618:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_PARITY->PEFLAG);
 885              	 .loc 1 618 0
 886 0000 014B     	 ldr r3,.L94
 887 0002 5869     	 ldr r0,[r3,#20]
 619:../Libraries/XMCLib/src/xmc4_scu.c **** } 
 888              	 .loc 1 619 0
 889 0004 7047     	 bx lr
 890              	.L95:
 891 0006 00BF     	 .align 2
 892              	.L94:
 893 0008 3C410050 	 .word 1342193980
 894              	 .cfi_endproc
 895              	.LFE203:
 897              	 .section .text.XMC_SCU_PARITY_Enable,"ax",%progbits
 898              	 .align 1
 899              	 .global XMC_SCU_PARITY_Enable
 900              	 .thumb
 901              	 .thumb_func
 903              	XMC_SCU_PARITY_Enable:
 904              	.LFB204:
 620:../Libraries/XMCLib/src/xmc4_scu.c **** 
 621:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable parity error checking for the selected on-chip RAM type */
 622:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_Enable(const uint32_t memory)
 623:../Libraries/XMCLib/src/xmc4_scu.c **** {
 905              	 .loc 1 623 0
 906              	 .cfi_startproc
 907              	 
 908              	 
 909              	 
 910              	.LVL49:
 624:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEEN |= (uint32_t)memory; 
 911              	 .loc 1 624 0
 912 0000 024A     	 ldr r2,.L97
 913 0002 1368     	 ldr r3,[r2]
 914 0004 1843     	 orrs r0,r0,r3
 915              	.LVL50:
 916 0006 1060     	 str r0,[r2]
 917 0008 7047     	 bx lr
 918              	.L98:
 919 000a 00BF     	 .align 2
 920              	.L97:
 921 000c 3C410050 	 .word 1342193980
 922              	 .cfi_endproc
 923              	.LFE204:
 925              	 .section .text.XMC_SCU_PARITY_Disable,"ax",%progbits
 926              	 .align 1
 927              	 .global XMC_SCU_PARITY_Disable
 928              	 .thumb
 929              	 .thumb_func
 931              	XMC_SCU_PARITY_Disable:
 932              	.LFB205:
 625:../Libraries/XMCLib/src/xmc4_scu.c **** }
 626:../Libraries/XMCLib/src/xmc4_scu.c **** 
 627:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable parity error checking for the selected on-chip RAM type */
 628:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_Disable(const uint32_t memory)
 629:../Libraries/XMCLib/src/xmc4_scu.c **** {
 933              	 .loc 1 629 0
 934              	 .cfi_startproc
 935              	 
 936              	 
 937              	 
 938              	.LVL51:
 630:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEEN &= (uint32_t)~memory; 
 939              	 .loc 1 630 0
 940 0000 024A     	 ldr r2,.L100
 941 0002 1368     	 ldr r3,[r2]
 942 0004 23EA0000 	 bic r0,r3,r0
 943              	.LVL52:
 944 0008 1060     	 str r0,[r2]
 945 000a 7047     	 bx lr
 946              	.L101:
 947              	 .align 2
 948              	.L100:
 949 000c 3C410050 	 .word 1342193980
 950              	 .cfi_endproc
 951              	.LFE205:
 953              	 .section .text.XMC_SCU_PARITY_EnableTrapGeneration,"ax",%progbits
 954              	 .align 1
 955              	 .global XMC_SCU_PARITY_EnableTrapGeneration
 956              	 .thumb
 957              	 .thumb_func
 959              	XMC_SCU_PARITY_EnableTrapGeneration:
 960              	.LFB206:
 631:../Libraries/XMCLib/src/xmc4_scu.c **** }
 632:../Libraries/XMCLib/src/xmc4_scu.c **** 
 633:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable trap assertion for the parity error source */
 634:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
 635:../Libraries/XMCLib/src/xmc4_scu.c **** {
 961              	 .loc 1 635 0
 962              	 .cfi_startproc
 963              	 
 964              	 
 965              	 
 966              	.LVL53:
 636:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PETE |= (uint32_t)memory; 
 967              	 .loc 1 636 0
 968 0000 024A     	 ldr r2,.L103
 969 0002 9368     	 ldr r3,[r2,#8]
 970 0004 1843     	 orrs r0,r0,r3
 971              	.LVL54:
 972 0006 9060     	 str r0,[r2,#8]
 973 0008 7047     	 bx lr
 974              	.L104:
 975 000a 00BF     	 .align 2
 976              	.L103:
 977 000c 3C410050 	 .word 1342193980
 978              	 .cfi_endproc
 979              	.LFE206:
 981              	 .section .text.XMC_SCU_PARITY_DisableTrapGeneration,"ax",%progbits
 982              	 .align 1
 983              	 .global XMC_SCU_PARITY_DisableTrapGeneration
 984              	 .thumb
 985              	 .thumb_func
 987              	XMC_SCU_PARITY_DisableTrapGeneration:
 988              	.LFB207:
 637:../Libraries/XMCLib/src/xmc4_scu.c **** }
 638:../Libraries/XMCLib/src/xmc4_scu.c **** 
 639:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable the assertion of trap for the parity error source */
 640:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
 641:../Libraries/XMCLib/src/xmc4_scu.c **** {
 989              	 .loc 1 641 0
 990              	 .cfi_startproc
 991              	 
 992              	 
 993              	 
 994              	.LVL55:
 642:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PETE &= (uint32_t)~memory; 
 995              	 .loc 1 642 0
 996 0000 024A     	 ldr r2,.L106
 997 0002 9368     	 ldr r3,[r2,#8]
 998 0004 23EA0000 	 bic r0,r3,r0
 999              	.LVL56:
 1000 0008 9060     	 str r0,[r2,#8]
 1001 000a 7047     	 bx lr
 1002              	.L107:
 1003              	 .align 2
 1004              	.L106:
 1005 000c 3C410050 	 .word 1342193980
 1006              	 .cfi_endproc
 1007              	.LFE207:
 1009              	 .section .text.XMC_SCU_INTERRUPT_EnableNmiRequest,"ax",%progbits
 1010              	 .align 1
 1011              	 .global XMC_SCU_INTERRUPT_EnableNmiRequest
 1012              	 .thumb
 1013              	 .thumb_func
 1015              	XMC_SCU_INTERRUPT_EnableNmiRequest:
 1016              	.LFB208:
 643:../Libraries/XMCLib/src/xmc4_scu.c **** }
 644:../Libraries/XMCLib/src/xmc4_scu.c **** 
 645:../Libraries/XMCLib/src/xmc4_scu.c **** /* Enables a NMI source */
 646:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
 647:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1017              	 .loc 1 647 0
 1018              	 .cfi_startproc
 1019              	 
 1020              	 
 1021              	 
 1022              	.LVL57:
 648:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 1023              	 .loc 1 648 0
 1024 0000 024A     	 ldr r2,.L109
 1025 0002 5369     	 ldr r3,[r2,#20]
 1026 0004 1843     	 orrs r0,r0,r3
 1027              	.LVL58:
 1028 0006 5061     	 str r0,[r2,#20]
 1029 0008 7047     	 bx lr
 1030              	.L110:
 1031 000a 00BF     	 .align 2
 1032              	.L109:
 1033 000c 74400050 	 .word 1342193780
 1034              	 .cfi_endproc
 1035              	.LFE208:
 1037              	 .section .text.XMC_SCU_INTERRUPT_DisableNmiRequest,"ax",%progbits
 1038              	 .align 1
 1039              	 .global XMC_SCU_INTERRUPT_DisableNmiRequest
 1040              	 .thumb
 1041              	 .thumb_func
 1043              	XMC_SCU_INTERRUPT_DisableNmiRequest:
 1044              	.LFB209:
 649:../Libraries/XMCLib/src/xmc4_scu.c **** }
 650:../Libraries/XMCLib/src/xmc4_scu.c **** 
 651:../Libraries/XMCLib/src/xmc4_scu.c **** /* Disables a NMI source */
 652:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
 653:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1045              	 .loc 1 653 0
 1046              	 .cfi_startproc
 1047              	 
 1048              	 
 1049              	 
 1050              	.LVL59:
 654:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 1051              	 .loc 1 654 0
 1052 0000 024A     	 ldr r2,.L112
 1053 0002 5369     	 ldr r3,[r2,#20]
 1054 0004 23EA0000 	 bic r0,r3,r0
 1055              	.LVL60:
 1056 0008 5061     	 str r0,[r2,#20]
 1057 000a 7047     	 bx lr
 1058              	.L113:
 1059              	 .align 2
 1060              	.L112:
 1061 000c 74400050 	 .word 1342193780
 1062              	 .cfi_endproc
 1063              	.LFE209:
 1065              	 .section .text.XMC_SCU_RESET_AssertPeripheralReset,"ax",%progbits
 1066              	 .align 1
 1067              	 .global XMC_SCU_RESET_AssertPeripheralReset
 1068              	 .thumb
 1069              	 .thumb_func
 1071              	XMC_SCU_RESET_AssertPeripheralReset:
 1072              	.LFB210:
 655:../Libraries/XMCLib/src/xmc4_scu.c **** }
 656:../Libraries/XMCLib/src/xmc4_scu.c **** 
 657:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually assert a reset request */
 658:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 659:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1073              	 .loc 1 659 0
 1074              	 .cfi_startproc
 1075              	 
 1076              	 
 1077              	 
 1078              	.LVL61:
 660:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 1079              	 .loc 1 660 0
 1080 0000 020F     	 lsrs r2,r0,#28
 1081              	.LVL62:
 661:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 662:../Libraries/XMCLib/src/xmc4_scu.c **** 
 663:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 1082              	 .loc 1 663 0
 1083 0002 0C23     	 movs r3,#12
 1084 0004 5343     	 muls r3,r2,r3
 1085 0006 024A     	 ldr r2,.L115
 1086              	.LVL63:
 661:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 1087              	 .loc 1 661 0
 1088 0008 20F07040 	 bic r0,r0,#-268435456
 1089              	.LVL64:
 1090              	 .loc 1 663 0
 1091 000c 9850     	 str r0,[r3,r2]
 1092 000e 7047     	 bx lr
 1093              	.L116:
 1094              	 .align 2
 1095              	.L115:
 1096 0010 10440050 	 .word 1342194704
 1097              	 .cfi_endproc
 1098              	.LFE210:
 1100              	 .section .text.XMC_SCU_RESET_DeassertPeripheralReset,"ax",%progbits
 1101              	 .align 1
 1102              	 .global XMC_SCU_RESET_DeassertPeripheralReset
 1103              	 .thumb
 1104              	 .thumb_func
 1106              	XMC_SCU_RESET_DeassertPeripheralReset:
 1107              	.LFB211:
 664:../Libraries/XMCLib/src/xmc4_scu.c **** }
 665:../Libraries/XMCLib/src/xmc4_scu.c **** 
 666:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually de-assert a reset request */
 667:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 668:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1108              	 .loc 1 668 0
 1109              	 .cfi_startproc
 1110              	 
 1111              	 
 1112              	 
 1113              	.LVL65:
 669:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 1114              	 .loc 1 669 0
 1115 0000 020F     	 lsrs r2,r0,#28
 1116              	.LVL66:
 670:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 671:../Libraries/XMCLib/src/xmc4_scu.c **** 
 672:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 1117              	 .loc 1 672 0
 1118 0002 0C23     	 movs r3,#12
 1119 0004 5343     	 muls r3,r2,r3
 1120 0006 024A     	 ldr r2,.L118
 1121              	.LVL67:
 670:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 1122              	 .loc 1 670 0
 1123 0008 20F07040 	 bic r0,r0,#-268435456
 1124              	.LVL68:
 1125              	 .loc 1 672 0
 1126 000c 9850     	 str r0,[r3,r2]
 1127 000e 7047     	 bx lr
 1128              	.L119:
 1129              	 .align 2
 1130              	.L118:
 1131 0010 14440050 	 .word 1342194708
 1132              	 .cfi_endproc
 1133              	.LFE211:
 1135              	 .section .text.XMC_SCU_RESET_IsPeripheralResetAsserted,"ax",%progbits
 1136              	 .align 1
 1137              	 .global XMC_SCU_RESET_IsPeripheralResetAsserted
 1138              	 .thumb
 1139              	 .thumb_func
 1141              	XMC_SCU_RESET_IsPeripheralResetAsserted:
 1142              	.LFB212:
 673:../Libraries/XMCLib/src/xmc4_scu.c **** }
 674:../Libraries/XMCLib/src/xmc4_scu.c **** 
 675:../Libraries/XMCLib/src/xmc4_scu.c **** /* Find out if the peripheral reset is asserted */
 676:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 677:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1143              	 .loc 1 677 0
 1144              	 .cfi_startproc
 1145              	 
 1146              	 
 1147              	 
 1148              	.LVL69:
 678:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 679:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 1149              	 .loc 1 679 0
 1150 0000 20F07042 	 bic r2,r0,#-268435456
 1151              	.LVL70:
 680:../Libraries/XMCLib/src/xmc4_scu.c **** 
 681:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 1152              	 .loc 1 681 0
 1153 0004 0C23     	 movs r3,#12
 678:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 1154              	 .loc 1 678 0
 1155 0006 000F     	 lsrs r0,r0,#28
 1156              	.LVL71:
 1157              	 .loc 1 681 0
 1158 0008 5843     	 muls r0,r3,r0
 1159              	.LVL72:
 1160 000a 03F1A043 	 add r3,r3,#1342177280
 1161 000e 03F58843 	 add r3,r3,#17408
 1162 0012 C358     	 ldr r3,[r0,r3]
 1163 0014 1A42     	 tst r2,r3
 682:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1164              	 .loc 1 682 0
 1165 0016 14BF     	 ite ne
 1166 0018 0120     	 movne r0,#1
 1167 001a 0020     	 moveq r0,#0
 1168 001c 7047     	 bx lr
 1169              	 .cfi_endproc
 1170              	.LFE212:
 1172              	 .section .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency,"ax",%progbits
 1173              	 .align 1
 1174              	 .global XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
 1175              	 .thumb
 1176              	 .thumb_func
 1178              	XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:
 1179              	.LFB214:
 683:../Libraries/XMCLib/src/xmc4_scu.c **** 
 684:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 685:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of System PLL output clock
 686:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 687:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
 688:../Libraries/XMCLib/src/xmc4_scu.c **** {
 689:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 690:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t p_div;
 691:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t n_div;
 692:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t k2_div;
 693:../Libraries/XMCLib/src/xmc4_scu.c **** 
 694:../Libraries/XMCLib/src/xmc4_scu.c ****   clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 695:../Libraries/XMCLib/src/xmc4_scu.c ****   if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 696:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 697:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Prescalar mode - fOSC is the parent*/
 698:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (uint32_t)(clock_frequency / 
 699:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_P
 700:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 701:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 702:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 703:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Po
 704:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Po
 705:../Libraries/XMCLib/src/xmc4_scu.c ****     k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_
 706:../Libraries/XMCLib/src/xmc4_scu.c ****        
 707:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 708:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 709:../Libraries/XMCLib/src/xmc4_scu.c **** 
 710:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 711:../Libraries/XMCLib/src/xmc4_scu.c **** }
 712:../Libraries/XMCLib/src/xmc4_scu.c **** 
 713:../Libraries/XMCLib/src/xmc4_scu.c **** /**
 714:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of System PLL VCO input clock
 715:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 716:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
 717:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1180              	 .loc 1 717 0
 1181              	 .cfi_startproc
 1182              	 
 1183              	 
 1184              	 
 718:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 719:../Libraries/XMCLib/src/xmc4_scu.c **** 
 720:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Prescalar mode - fOSC is the parent*/
 721:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 1185              	 .loc 1 721 0
 1186 0000 034B     	 ldr r3,.L123
 1187 0002 DB68     	 ldr r3,[r3,#12]
 1188 0004 DB07     	 lsls r3,r3,#31
 1189 0006 01D4     	 bmi .L122
 722:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 723:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = OSCHP_GetFrequency();
 1190              	 .loc 1 723 0
 1191 0008 FFF7FEBF 	 b OSCHP_GetFrequency
 1192              	.LVL73:
 1193              	.L122:
 724:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 725:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 726:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 727:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = OFI_FREQUENCY;
 728:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 729:../Libraries/XMCLib/src/xmc4_scu.c ****   
 730:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 731:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1194              	 .loc 1 731 0
 1195 000c 0148     	 ldr r0,.L123+4
 1196 000e 7047     	 bx lr
 1197              	.L124:
 1198              	 .align 2
 1199              	.L123:
 1200 0010 10470050 	 .word 1342195472
 1201 0014 00366E01 	 .word 24000000
 1202              	 .cfi_endproc
 1203              	.LFE214:
 1205              	 .section .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency,"ax",%progbits
 1206              	 .align 1
 1207              	 .global XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1208              	 .thumb
 1209              	 .thumb_func
 1211              	XMC_SCU_CLOCK_GetSystemPllClockFrequency:
 1212              	.LFB213:
 688:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 1213              	 .loc 1 688 0
 1214              	 .cfi_startproc
 1215              	 
 1216              	 
 1217 0000 08B5     	 push {r3,lr}
 1218              	.LCFI3:
 1219              	 .cfi_def_cfa_offset 8
 1220              	 .cfi_offset 3,-8
 1221              	 .cfi_offset 14,-4
 694:../Libraries/XMCLib/src/xmc4_scu.c ****   if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 1222              	 .loc 1 694 0
 1223 0002 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
 1224              	.LVL74:
 695:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 1225              	 .loc 1 695 0
 1226 0006 0D4B     	 ldr r3,.L129
 1227 0008 1A68     	 ldr r2,[r3]
 1228 000a D207     	 lsls r2,r2,#31
 703:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Po
 1229              	 .loc 1 703 0
 1230 000c 5BBF     	 ittet pl
 1231 000e 9A68     	 ldrpl r2,[r3,#8]
 1232              	.LVL75:
 704:../Libraries/XMCLib/src/xmc4_scu.c ****     k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_
 1233              	 .loc 1 704 0
 1234 0010 9968     	 ldrpl r1,[r3,#8]
 1235              	.LVL76:
 699:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1236              	 .loc 1 699 0
 1237 0012 9B68     	 ldrmi r3,[r3,#8]
 705:../Libraries/XMCLib/src/xmc4_scu.c ****        
 1238              	 .loc 1 705 0
 1239 0014 9B68     	 ldrpl r3,[r3,#8]
 704:../Libraries/XMCLib/src/xmc4_scu.c ****     k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_
 1240              	 .loc 1 704 0
 1241 0016 5BBF     	 ittet pl
 1242 0018 C1F30621 	 ubfxpl r1,r1,#8,#7
 1243              	.LVL77:
 703:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Po
 1244              	 .loc 1 703 0
 1245 001c C2F30362 	 ubfxpl r2,r2,#24,#4
 1246              	.LVL78:
 699:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1247              	 .loc 1 699 0
 1248 0020 03F07F03 	 andmi r3,r3,#127
 707:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1249              	 .loc 1 707 0
 1250 0024 01FB0000 	 mlapl r0,r1,r0,r0
 1251              	.LVL79:
 705:../Libraries/XMCLib/src/xmc4_scu.c ****        
 1252              	 .loc 1 705 0
 1253 0028 5BBF     	 ittet pl
 1254 002a C3F30641 	 ubfxpl r1,r3,#16,#7
 703:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Po
 1255              	 .loc 1 703 0
 1256 002e 531C     	 addpl r3,r2,#1
 699:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1257              	 .loc 1 699 0
 1258 0030 0133     	 addmi r3,r3,#1
 707:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1259              	 .loc 1 707 0
 1260 0032 01FB0333 	 mlapl r3,r1,r3,r3
 1261 0036 B0FBF3F0 	 udiv r0,r0,r3
 1262              	.LVL80:
 711:../Libraries/XMCLib/src/xmc4_scu.c **** 
 1263              	 .loc 1 711 0
 1264 003a 08BD     	 pop {r3,pc}
 1265              	.L130:
 1266              	 .align 2
 1267              	.L129:
 1268 003c 10470050 	 .word 1342195472
 1269              	 .cfi_endproc
 1270              	.LFE213:
 1272              	 .section .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency,"ax",%progbits
 1273              	 .align 1
 1274              	 .global XMC_SCU_CLOCK_GetUsbPllClockFrequency
 1275              	 .thumb
 1276              	 .thumb_func
 1278              	XMC_SCU_CLOCK_GetUsbPllClockFrequency:
 1279              	.LFB215:
 732:../Libraries/XMCLib/src/xmc4_scu.c **** 
 733:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 734:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of USB PLL output clock
 735:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 736:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
 737:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1280              	 .loc 1 737 0
 1281              	 .cfi_startproc
 1282              	 
 1283              	 
 1284 0000 08B5     	 push {r3,lr}
 1285              	.LCFI4:
 1286              	 .cfi_def_cfa_offset 8
 1287              	 .cfi_offset 3,-8
 1288              	 .cfi_offset 14,-4
 738:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 739:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t n_div;
 740:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t p_div;
 741:../Libraries/XMCLib/src/xmc4_scu.c ****   
 742:../Libraries/XMCLib/src/xmc4_scu.c ****   clock_frequency = OSCHP_GetFrequency();
 1289              	 .loc 1 742 0
 1290 0002 FFF7FEFF 	 bl OSCHP_GetFrequency
 1291              	.LVL81:
 743:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 1292              	 .loc 1 743 0
 1293 0006 084B     	 ldr r3,.L133
 1294 0008 1A69     	 ldr r2,[r3,#16]
 1295 000a D207     	 lsls r2,r2,#31
 1296 000c 0BD4     	 bmi .L132
 744:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 745:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Normal mode - fVCO is the parent*/
 746:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_ND
 1297              	 .loc 1 746 0
 1298 000e 5A69     	 ldr r2,[r3,#20]
 1299              	.LVL82:
 747:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PD
 1300              	 .loc 1 747 0
 1301 0010 5B69     	 ldr r3,[r3,#20]
 1302              	.LVL83:
 1303 0012 C3F30363 	 ubfx r3,r3,#24,#4
 1304              	.LVL84:
 746:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PD
 1305              	 .loc 1 746 0
 1306 0016 C2F30622 	 ubfx r2,r2,#8,#7
 1307              	.LVL85:
 1308              	 .loc 1 747 0
 1309 001a 0133     	 adds r3,r3,#1
 748:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 1310              	 .loc 1 748 0
 1311 001c 02FB0000 	 mla r0,r2,r0,r0
 1312              	.LVL86:
 1313 0020 5B00     	 lsls r3,r3,#1
 1314 0022 B0FBF3F0 	 udiv r0,r0,r3
 1315              	.LVL87:
 1316              	.L132:
 749:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 750:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 751:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1317              	 .loc 1 751 0
 1318 0026 08BD     	 pop {r3,pc}
 1319              	.L134:
 1320              	 .align 2
 1321              	.L133:
 1322 0028 10470050 	 .word 1342195472
 1323              	 .cfi_endproc
 1324              	.LFE215:
 1326              	 .section .text.XMC_SCU_CLOCK_GetCcuClockFrequency,"ax",%progbits
 1327              	 .align 1
 1328              	 .global XMC_SCU_CLOCK_GetCcuClockFrequency
 1329              	 .thumb
 1330              	 .thumb_func
 1332              	XMC_SCU_CLOCK_GetCcuClockFrequency:
 1333              	.LFB216:
 752:../Libraries/XMCLib/src/xmc4_scu.c **** 
 753:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 754:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of CCU clock frequency
 755:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 756:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
 757:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1334              	 .loc 1 757 0
 1335              	 .cfi_startproc
 1336              	 
 1337              	 
 1338              	 
 1339              	.LVL88:
 1340              	.LBB30:
 1341              	.LBB31:
 1342              	 .file 2 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc4_scu.h"
   1:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
   2:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @file xmc4_scu.h
   3:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @date 2019-02-18
   4:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   5:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @cond
   6:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
   7:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   9:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * All rights reserved.                        
  11:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                             
  12:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * following conditions are met:   
  14:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  15:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer.                        
  17:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  18:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  21:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  24:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  32:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  35:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  36:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Change History
  37:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * --------------
  38:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  39:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-06-20:
  40:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Initial version
  41:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  42:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  43:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-11-30:
  44:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  45:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *      
  46:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-03-09:
  47:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_EnableMonitor/XMC_SCU_POWER_DisableMonitor
  48:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_POWER_GetEVRStatus, XMC_SCU_POWER_GetEVR13Voltage, XMC_SCU_POWER_GetEVR33Vol
  49:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  50:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  51:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  52:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  53:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  54:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  55:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-04-15:
  56:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Fixed naming of XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG peripheral clock.
  57:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *       Added enable and disable for peripheral clocks       
  58:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  59:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-05-19:
  60:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_IsLowPowerOscillatorStable() and XMC_SCU_CLOCK_IsHighPerformanceOscill
  61:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_WaitForInterrupt() and XMC_SCU_POWER_WaitForEvent()
  62:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(), 
  63:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(),
  64:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus()
  65:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(), 
  66:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(),
  67:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus()
  68:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Removed XMC_SCU_INTERRUPT_EVENT_OSCULSTAT_UPDATED, XMC_SCU_INTERRUPT_EVENT_HDSTAT_UPDATED
  69:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  70:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-14:
  71:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_IsWakeupEventDetected() and XMC_SCU_HIB_ClearWakeupEventDetectionStatus(
  72:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  73:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-15:
  74:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_EnterHibernateStateEx() which allows to select between external or inter
  75:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Extended wakeup hibernate events using LPAC wakeup on events. Only available in XMC44, XMC
  76:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added LPAC APIs. Only available in XMC44, XMC42 and XMC41 series.
  77:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  78:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2019-02-18:
  79:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Fix conditional definition of XMC_SCU_PARITY_t elements
  80:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_PARITY_OverrideParityBitLogic(uint32_t memory)
  81:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_PARITY_SelectMemoryTest(const XMC_SCU_PARITY_t memory)
  82:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_PARITY_SetParityWriteValue(uint8_t val)
  83:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_PARITY_GetParityReadValue(void)
  84:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  85:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @endcond 
  86:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  87:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  88:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  89:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #ifndef XMC4_SCU_H
  90:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC4_SCU_H
  91:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  92:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
  93:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HEADER FILES
  94:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  95:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  96:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #include "xmc_common.h"
  97:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  98:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if UC_FAMILY == XMC4
  99:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
 102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
 103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  
 105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup SCU
 107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
 108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * MACROS
 112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_8MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MH
 114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_8MHZ (89U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8M
 115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_8MHZ (2U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 8
 116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_12MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12
 118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_12MHZ (79U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_12MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_16MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16
 122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_16MHZ (59U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_16MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_WDT_WARN           SCU_INTERRUPT_SRSTAT_PRWARN_Msk /**< Watchdog pr
 126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC       SCU_INTERRUPT_SRSTAT_PI_Msk     /**< RTC periodi
 127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_ALARM          SCU_INTERRUPT_SRSTAT_AI_Msk     /**< RTC alarm e
 128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_DLR_OVERRUN        SCU_INTERRUPT_SRSTAT_DLROVR_Msk /**< DLR overrun
 129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCR_Msk)
 130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCR_UPDATED     SCU_INTERRUPT_SRSTAT_LPACCR_Msk /**< LPAC Contro
 131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH0_Msk)
 133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH0_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH0_Msk /**< LPAC Thres
 134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH1_Msk)
 136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH1_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH1_Msk  /**< LPAC Thre
 137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACST_Msk)
 139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACST_UPDATED     SCU_INTERRUPT_SRSTAT_LPACST_Msk  /**< LPAC Statu
 140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCLR_Msk)
 142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCLR_UPDATED    SCU_INTERRUPT_SRSTAT_LPACCLR_Msk /**< LPAC event
 143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACSET_Msk)
 145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACSET_UPDATED    SCU_INTERRUPT_SRSTAT_LPACSET_Msk /**< LPAC event
 146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTST_Msk)
 148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTST_UPDATED     SCU_INTERRUPT_SRSTAT_HINTST_Msk /**< HIB HINTST 
 149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTCLR_Msk)
 151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTCLR_UPDATED    SCU_INTERRUPT_SRSTAT_HINTCLR_Msk /**< HIB HINTCL
 152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTSET_Msk)
 154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTSET_UPDATED    SCU_INTERRUPT_SRSTAT_HINTSET_Msk /**< HIB HINTSE
 155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED      SCU_INTERRUPT_SRSTAT_HDCLR_Msk /**< HIB HDCLR re
 157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSET_UPDATED      SCU_INTERRUPT_SRSTAT_HDSET_Msk /**< HIB HDSET re
 158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED       SCU_INTERRUPT_SRSTAT_HDCR_Msk /**< HIB HDCR regi
 159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCSICTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCSICTRL_Msk /**< HIB OSCS
 160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULCTRL_Msk /**< HIB OSCU
 161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED     SCU_INTERRUPT_SRSTAT_RTC_CTR_Msk /**< HIB RTCCTR
 162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM0_Msk /**< HIB RTCA
 163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM1_Msk /**< HIB RTCA
 164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM0_Msk /**< HIB TIM0 
 165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM1_Msk /**< HIB TIM1 
 166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RMX_UPDATED        SCU_INTERRUPT_SRSTAT_RMX_Msk /**< HIB RMX regist
 167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * ENUMS
 170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines Capture/Compare unit timer slice trigger, that enables synchronous start function avail
 173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  CCUCON register. Use type \a XMC_SCU_CCU_TRIGGER_t for accessing these enum parameters.
 174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CCU_TRIGGER
 176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU40)
 178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU40 = SCU_GENERAL_CCUCON_GSC40_Msk, /**< Trigger mask used for Global Start
 179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU40 peripheral. */
 180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU41 = SCU_GENERAL_CCUCON_GSC41_Msk, /**< Trigger mask used for Global Start
 183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU42 = SCU_GENERAL_CCUCON_GSC42_Msk, /**< Trigger mask used for Global Start
 187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU42 peripheral. */
 188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU43 = SCU_GENERAL_CCUCON_GSC43_Msk, /**< Trigger mask used for Global Start
 191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU43 peripheral. */
 192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU80 = SCU_GENERAL_CCUCON_GSC80_Msk, /**< Trigger mask used for Global Start
 195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU80 peripheral. */
 196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU81 = SCU_GENERAL_CCUCON_GSC81_Msk /**< Trigger mask used for Global Start 
 199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU81 peripheral. */
 200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CCU_TRIGGER_t;
 202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations representing the status of trap cause. The cause of the trap gets automati
 205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a TRAPSTAT register and can be checked by user software to determine the state of the syst
 206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. 
 207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_TRAP_t for accessing these enum parameters.
 208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_TRAP 
 210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_OSC_WDG      = SCU_TRAP_TRAPSTAT_SOSCWDGT_Msk, /**< OSC_HP Oscillator Watchdog trap.
 212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_VCO_LOCK     = SCU_TRAP_TRAPSTAT_SVCOLCKT_Msk, /**< PLL loss of lock trap. */
 213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_USB_VCO_LOCK = SCU_TRAP_TRAPSTAT_UVCOLCKT_Msk, /**< USB PLL loss of lock trap. */ 
 214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PARITY_ERROR = SCU_TRAP_TRAPSTAT_PET_Msk,      /**< Memory Parity error trap. */  
 215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_BROWNOUT     = SCU_TRAP_TRAPSTAT_BRWNT_Msk,    /**< Brownout trap. */ 
 216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ULP_WDG      = SCU_TRAP_TRAPSTAT_ULPWDGT_Msk,  /**< Unstable 32KHz clock trap. */ 
 217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE0  = SCU_TRAP_TRAPSTAT_BWERR0T_Msk,  /**< Bad memory access of peripherals
 218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE1  = SCU_TRAP_TRAPSTAT_BWERR1T_Msk,  /**< Bad memory access of peripherals
 219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPHIT_Msk)
 220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_HIGH = SCU_TRAP_TRAPSTAT_TEMPHIT_Msk,  /**< Die temperature higher than expe
 221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPLOT_Msk)
 223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_LOW  = SCU_TRAP_TRAPSTAT_TEMPLOT_Msk,  /**< Die temperature lower than expec
 224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ECAT_RESET = SCU_TRAP_TRAPSTAT_ECAT0RST_Msk, /**< EtherCat Reset */ 
 227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_TRAP_t;
 229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for different parity event generating modules that in turn generate a trap
 232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Parity can be enabled with \a PETE register in order to get the trap flag reflected in \a TRAPR
 233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  configure parity error trap generation mechanism bits of \a PETE register.
 234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PETE register.
 235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PARITY_t for accessing these enum parameters.
 236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PARITY
 238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PSRAM_MEM  = SCU_PARITY_PEEN_PEENPS_Msk,   /**< Program SRAM parity error trap. */
 240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM1_MEM = SCU_PARITY_PEEN_PEENDS1_Msk,  /**< Data SRAM-1 parity error trap. */ 
 241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENDS2_Msk)
 242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM2_MEM = SCU_PARITY_PEEN_PEENDS2_Msk,  /**< Data SRAM-2 parity error trap. */ 
 243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC0_MEM  = SCU_PARITY_PEEN_PEENU0_Msk,   /**< USIC0 memory parity error trap. */
 245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENU1_Msk)
 246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC1_MEM  = SCU_PARITY_PEEN_PEENU1_Msk,   /**< USIC1 memory parity error trap. */
 247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENU2_Msk)
 249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC2_MEM  = SCU_PARITY_PEEN_PEENU2_Msk,   /**< USIC2 memory parity error trap. */
 250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_MCAN_MEM   = SCU_PARITY_PEEN_PEENMC_Msk,   /**< CAN memory parity error trap. */
 252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PMU_MEM    = SCU_PARITY_PEEN_PEENPPRF_Msk, /**< PMU Prefetch memory parity error t
 253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USB_MEM    = SCU_PARITY_PEEN_PEENUSB_Msk,  /**< USB memory parity error trap. */ 
 254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0TX_Msk)
 255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_TXMEM  = SCU_PARITY_PEEN_PEENETH0TX_Msk, /**< Ethernet transmit memory parity 
 256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0RX_Msk)
 258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_RXMEM  = SCU_PARITY_PEEN_PEENETH0RX_Msk, /**< Ethernet receive memory parity e
 259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD0_Msk)
 261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM0 = SCU_PARITY_PEEN_PEENSD0_Msk, /**< SDMMC Memory-0 parity error trap. *
 262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD1_Msk)
 264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM1 = SCU_PARITY_PEEN_PEENSD1_Msk, /**< SDMMC Memory-1 parity error trap. *
 265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENECAT0_Msk)
 267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ECAT_MEM = SCU_PARITY_PEEN_PEENECAT0_Msk, /**< ECAT0 SRAM parity error trap. */ 
 268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PARITY_t;
 270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the different causes for last reset. The cause of the last reset gets automatically sto
 273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a SCU_RSTSTAT register and can be checked by user software to determine the state of the s
 274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. All the enum items are tabulated as per bits present in \a SCU_RSTSTAT register.
 275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_RESET_REASON_t for accessing these enum parameters.
 276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_RESET_REASON
 278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PORST        = (1UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SWD          = (2UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sup
 281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PV           = (4UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SW           = (8UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sof
 283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_LOCKUP       = (16UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to re
 284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_WATCHDOG     = (32UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Wa
 285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PARITY_ERROR = (128UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to r
 286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_RESET_REASON_t;
 287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for events which can lead to interrupt. These enumeration values represent
 290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * status of one of the bits in \a SRSTAT register. 
 291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_INTERRUPT_EVENT_t for accessing these enum parameters.
 292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef uint32_t XMC_SCU_INTERRUPT_EVENT_t;
 294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  
 296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration for the events that can generate non maskable interrupt(NMI).
 298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The NMI generation can be enabled with \a NMIREQEN register. The event will be reflected in \a 
 299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  mirrored in the TRAPSTAT register. These enums can be used to configure NMI request generation 
 300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  NMIREQEN register.  Once configured, these events can generate non maskable interrupt.
 301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a NMIREQEN register.
 302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_NMIREQ_t for accessing these enum parameters.
 303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_NMIREQ
 305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_WDT_WARN = SCU_INTERRUPT_NMIREQEN_PRWARN_Msk, /**< Watchdog timer Pre-Warning even
 307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_PI   = SCU_INTERRUPT_NMIREQEN_PI_Msk,     /**< RTC Periodic event */ 
 308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_AI   = SCU_INTERRUPT_NMIREQEN_AI_Msk,     /**< RTC Alarm event */ 
 309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_0   = SCU_INTERRUPT_NMIREQEN_ERU00_Msk,  /**< Channel 0 event of ERU0 */  
 310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_1   = SCU_INTERRUPT_NMIREQEN_ERU01_Msk,  /**< Channel 1 event of ERU0 */ 
 311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_2   = SCU_INTERRUPT_NMIREQEN_ERU02_Msk,  /**< Channel 2 event of ERU0 */ 
 312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_3   = SCU_INTERRUPT_NMIREQEN_ERU03_Msk   /**< Channel 3 event of ERU0 */ 
 313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_NMIREQ_t;
 314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   
 315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration representing different peripheral reset bits in the \a PRSTAT registers.
 318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PRSTAT0,  \a PRSTAT1,  \a PRSTAT2,
 319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  \a PRSTAT3 registers. Use type \a XMC_SCU_PERIPHERAL_RESET_t for accessing these enum parameter
 320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Note: Release of reset should be prevented when the peripheral clock is gated in cases where ke
 321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock and bus interface clocks are shared, in order to avoid system hang-up.
 322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_RESET
 324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_VADC   = SCU_RESET_PRSTAT0_VADCRS_Msk,   /**< VADC reset. */ 
 326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DSD    = SCU_RESET_PRSTAT0_DSDRS_Msk,    /**< DSD reset. */
 328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU40  = SCU_RESET_PRSTAT0_CCU40RS_Msk,  /**< CCU40 reset. */
 330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU41  = SCU_RESET_PRSTAT0_CCU41RS_Msk,  /**< CCU41 reset. */
 332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU42  = SCU_RESET_PRSTAT0_CCU42RS_Msk,  /**< CCU42 reset. */
 335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU80  = SCU_RESET_PRSTAT0_CCU80RS_Msk,  /**< CCU80 reset. */
 338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU81  = SCU_RESET_PRSTAT0_CCU81RS_Msk,  /**< CCU81 reset. */
 341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF0 = SCU_RESET_PRSTAT0_POSIF0RS_Msk, /**< POSIF0 reset. */
 344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF1 = SCU_RESET_PRSTAT0_POSIF1RS_Msk, /**< POSIF1 reset.*/
 347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC0  = SCU_RESET_PRSTAT0_USIC0RS_Msk,  /**< USIC0 reset. */
 349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ERU1   = SCU_RESET_PRSTAT0_ERU1RS_Msk,   /**< ERU1 reset. */
 350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_HRPWM0 = SCU_RESET_PRSTAT0_HRPWM0RS_Msk,  /**< HRPWM0 reset. */
 352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU43  = (SCU_RESET_PRSTAT1_CCU43RS_Msk | 0x10000000UL),   /**< CCU43 re
 355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_LEDTS0 = (SCU_RESET_PRSTAT1_LEDTSCU0RS_Msk | 0x10000000UL), /**< LEDTS0 
 358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_MCAN   = (SCU_RESET_PRSTAT1_MCAN0RS_Msk | 0x10000000UL), /**< MCAN reset
 361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DAC    = (SCU_RESET_PRSTAT1_DACRS_Msk | 0x10000000UL),    /**< DAC reset
 364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_SDMMC  = (SCU_RESET_PRSTAT1_MMCIRS_Msk | 0x10000000UL),     /**< SDMMC r
 367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC1  = (SCU_RESET_PRSTAT1_USIC1RS_Msk | 0x10000000UL),    /**< USIC1 r
 370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC2  = (SCU_RESET_PRSTAT1_USIC2RS_Msk | 0x10000000UL),    /**< USIC2 r
 373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_PORTS  = (SCU_RESET_PRSTAT1_PPORTSRS_Msk | 0x10000000UL),   /**< PORTS r
 375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_WDT    = (SCU_RESET_PRSTAT2_WDTRS_Msk | 0x20000000UL),      /**< WDT res
 376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ETH0   = (SCU_RESET_PRSTAT2_ETH0RS_Msk | 0x20000000UL),     /**< ETH0 re
 378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA0 = (SCU_RESET_PRSTAT2_DMA0RS_Msk | 0x20000000UL),     /**< DMA0 re
 380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA1 = (SCU_RESET_PRSTAT2_DMA1RS_Msk | 0x20000000UL),     /**< DMA1 re
 382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_FCE    = (SCU_RESET_PRSTAT2_FCERS_Msk | 0x20000000UL),      /**< FCE res
 385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)  
 387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USB0   = (SCU_RESET_PRSTAT2_USBRS_Msk | 0x20000000UL),      /**< USB0 re
 388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)  
 390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ECAT0  = (SCU_RESET_PRSTAT2_ECAT0RS_Msk | 0x20000000UL),      /**< ECAT0
 391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_EBU    = (SCU_RESET_PRSTAT3_EBURS_Msk | 0x30000000UL)       /**< EBU res
 394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_RESET_t;
 396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for disabling the clocks sources of peripherals. Disabling of the peripher
 399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock is configured via the \a CLKCLR registers.
 400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK
 403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USB = SCU_CLK_CLKCLR_USBCDI_Msk, /**< USB module clock. */
 405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_MMC = SCU_CLK_CLKCLR_MMCCDI_Msk, /**< MMC module clock. */
 407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ETH = SCU_CLK_CLKCLR_ETH0CDI_Msk, /**< Ethernet module clock. */
 410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EBU = SCU_CLK_CLKCLR_EBUCDI_Msk, /**< EBU module clock. */
 413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_CCU = SCU_CLK_CLKCLR_CCUCDI_Msk, /**< CCU module clock. */
 415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDT = SCU_CLK_CLKCLR_WDTCDI_Msk  /**< WDT module clock. */
 416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_t;
 417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if(UC_SERIES != XMC45)
 419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines enumeration for peripherals that support clock gating. 
 421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The enumerations can be used for gating or ungating the peripheral clocks.
 422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * All the enum items are tabulated as per bits present in \a CGATSTAT0 register.
 423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_CLOCK
 426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_VADC   = SCU_CLK_CGATSTAT0_VADC_Msk,  /**< VADC peripheral gating. */
 428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DSD    = SCU_CLK_CGATSTAT0_DSD_Msk,   /**< DSD peripheral gating. */
 430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU40  = SCU_CLK_CGATSTAT0_CCU40_Msk,  /**< CCU40 peripheral gating. */
 432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU41  = SCU_CLK_CGATSTAT0_CCU41_Msk,  /**< CCU41 peripheral gating. */
 434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU42  = SCU_CLK_CGATSTAT0_CCU42_Msk,  /**< CCU42 peripheral gating. */
 437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU80  = SCU_CLK_CGATSTAT0_CCU80_Msk,  /**< CCU80 peripheral gating. */
 440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU81  = SCU_CLK_CGATSTAT0_CCU81_Msk,  /**< CCU81 peripheral gating. */
 443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF0 = SCU_CLK_CGATSTAT0_POSIF0_Msk,  /**< POSIF0 peripheral gating. *
 446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF1 = SCU_CLK_CGATSTAT0_POSIF1_Msk,   /**< POSIF1 peripheral gating. 
 449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC0  = SCU_CLK_CGATSTAT0_USIC0_Msk,   /**< USIC0 peripheral gating. */
 451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ERU1   = SCU_CLK_CGATSTAT0_ERU1_Msk,    /**< ERU1 peripheral gating. */
 452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_HRPWM0 = SCU_CLK_CGATSTAT0_HRPWM0_Msk,  /**< HRPWM0 peripheral gating. *
 454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU43  = (SCU_CLK_CGATSTAT1_CCU43_Msk | 0x10000000UL),   /**< CCU43 peri
 457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_LEDTS0 = (SCU_CLK_CGATSTAT1_LEDTSCU0_Msk | 0x10000000UL), /**< LEDTS0 pe
 460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_MCAN   = (SCU_CLK_CGATSTAT1_MCAN0_Msk | 0x10000000UL),   /**< MCAN perip
 463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DAC    = (SCU_CLK_CGATSTAT1_DAC_Msk | 0x10000000UL),     /**< DAC periph
 466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_SDMMC  = (SCU_CLK_CGATSTAT1_MMCI_Msk | 0x10000000UL),    /**< SDMMC peri
 469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC1  = (SCU_CLK_CGATSTAT1_USIC1_Msk | 0x10000000UL),   /**< USIC1 peri
 472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC2  = (SCU_CLK_CGATSTAT1_USIC2_Msk | 0x10000000UL),    /**< USIC2 per
 475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_PORTS  = (SCU_CLK_CGATSTAT1_PPORTS_Msk | 0x10000000UL),   /**< PORTS per
 477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_WDT    = (SCU_CLK_CGATSTAT2_WDT_Msk | 0x20000000UL),      /**< WDT perip
 478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ETH0   = (SCU_CLK_CGATSTAT2_ETH0_Msk | 0x20000000UL),     /**< ETH0 peri
 480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA0 = (SCU_CLK_CGATSTAT2_DMA0_Msk | 0x20000000UL),     /**< DMA0 peri
 482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA1 = (SCU_CLK_CGATSTAT2_DMA1_Msk | 0x20000000UL),     /**< DMA1 peri
 484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_FCE    = (SCU_CLK_CGATSTAT2_FCE_Msk | 0x20000000UL),      /**< FCE perip
 487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USB0   = (SCU_CLK_CGATSTAT2_USB_Msk | 0x20000000UL),      /**< USB0 peri
 490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ECAT0   = (SCU_CLK_CGATSTAT2_ECAT0_Msk | 0x20000000UL),      /**< ECAT0 
 493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_EBU    = (SCU_CLK_CGATSTAT3_EBU_Msk | 0x30000000UL)       /**< EBU perip
 496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_CLOCK_t;
 498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for system clock (fSYS) source. These enums are used to configure \a SYSSEL bit
 502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock Control Register. 
 503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_SYSCLKSRC_t for accessing these enum parameters.
 504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSCLKSRC
 506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_OFI = (0UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos), /**< Internal Fast Clock (fOF
 508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_PLL = (1UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos)  /**< PLL output (fPLL) as a
 510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSCLKSRC_t;
 512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the P-Divider input frequency. These enums are used to configure 
 515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. 
 516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_OSCCLKSRC_t for accessing these enum parameters.
 517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLLCLKSRC
 519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP = 0UL,  /**< External crystal oscillator
 521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                 (fOHP) as the source for P-Divider. */
 522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk /**< Ba
 523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                              as the source for P-Di
 524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLLCLKSRC_t;
 525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the USB clock source(fUSB/fSDMMC).
 528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * These enums are used to configure \a USBSEL bits of \a USBCLKCR
 529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. User can choose either fPLL or fUSBPLL clock as a source for USB clock. 
 530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_USBCLKSRC
 533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_USBPLL = (0UL << SCU_CLK_USBCLKCR_USBSEL_Pos), /**< USB PLL(fUSB PLL) as 
 535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_SYSPLL = (1UL << SCU_CLK_USBCLKCR_USBSEL_Pos)  /**< Main PLL output (fPLL
 537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_USBCLKSRC_t;
 539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
 541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the ECAT clock source.
 543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_ECATCLKSRC
 545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_USBPLL = (0UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos), /**< USB PLL (fUSBPLL) 
 547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL = (1UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos)  /**< Main PLL output (f
 548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_ECATCLKSRC_t;
 549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of WDT clock(fWDT). These enums are used to configure 
 553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOFI or fPLL or fSTDBY clock as a source for WDT clock. 
 554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_WDTCLKSRC
 557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_OFI = (0UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos),  /**< Internal Fast Clock 
 559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fOFI) as the source for
 560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_STDBY = (1UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos), /**< Standby clock 
 561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fSTDBY) as the source f
 562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_PLL = (2UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos)   /**< PLL output (fPLL) as th
 563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for WDT clock (fW
 564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_WDTCLKSRC_t;
 565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of external clock out (fEXT). These enums are used to 
 568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fSYS or fPLL or fUSBPLL clock as a source for external clock o
 569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_EXTOUTCLKSRC_t for accessing these enum parameters.
 570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_EXTOUTCLKSRC
 572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS = (0UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos),  /**< System clock (fSYS) 
 574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             the source for external
 575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_USB = (2UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< USB PLL output(fUSB P
 576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL = (3UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Main PLL output(fPLL)
 578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY = (4UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Standby clock(fSTDB
 581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_EXTOUTCLKSRC_t;
 584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of RTC Clock (fRTC). These enums are used to configure
 587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either fOSI or fULP clock as a source for RTC Clock (fRTC).
 588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_RTCCLKSRC_t for accessing these enum parameters.
 589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_RTCCLKSRC
 591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_RCS_Pos), /**< Internal Slow Clock
 593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                          (fOSI) as the source for R
 594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_ULP = (1UL << SCU_HIBERNATE_HDCR_RCS_Pos) /**< Ultra Low Power Clock (fULP)
 595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                         as the source for RTC Clock
 596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_RTCCLKSRC_t;
 597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of Standby Clock (fSTDBY). These enums are used to con
 600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOSI or fULP clock as a source for Standby Clock (fSTDBY).
 601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_STDBYCLKSRC_t for accessing these enum parameters.
 602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_STDBYCLKSRC
 604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos), /**< Internal Slow Clock 
 606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fOSI) as the source for 
 607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSCULP = (1UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos) /**< Ultra Low Power Cl
 609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fULP) as the source for 
 610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_STDBYCLKSRC_t;
 612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 614:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for backup clock trimming. These enums are used to configure \a AOTREN  \a FOTR
 615:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  PLLCON0 register. Use type \a XMC_SCU_CLOCK_BACKUP_TRIM_t for accessing these enum parameters.
 616:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 617:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE
 618:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 619:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY   = 0UL,  /**< Factory Oscillator Calibration: 
 620:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                         Force adjustment of the internal oscillator
 621:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC = 1UL   /**<  Automatic Oscillator Calibration adju
 622:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t;
 623:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 624:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 625:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 626:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting device boot mode. These enums are used to configure \a SWCON bits
 627:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose among various boot modes by configuring SWCON bits.
 628:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_BOOTMODE_t for accessing these enum parameters.
 629:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 630:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_BOOTMODE 
 631:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 632:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_NORMAL     = (0UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from start of flash
 633:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ASC_BSL    = (1UL << SCU_GENERAL_STCON_SWCON_Pos), /**< UART bootstrap. */
 634:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_BMI        = (2UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot Mode Index - Custom
 635:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            sequence. */
 636:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_CAN_BSL    = (3UL << SCU_GENERAL_STCON_SWCON_Pos), /**< CAN bootstrap. */
 637:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_PSRAM_BOOT = (4UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from PSRAM. */
 638:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM0       = (8UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed 
 639:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            address 0. */
 640:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM1       = (12UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed
 641:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             address 1. */
 642:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_FABM       = (14UL << SCU_GENERAL_STCON_SWCON_Pos), /**< fallback Alternate Boot
 643:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             Try ABM-0 then try ABM-
 644:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_BOOTMODE_t;
 645:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 646:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 647:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 648:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines various PLL modes of operation. These enums are used to configure \a VCOBYP bit of \a P
 649:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either normal or prescalar mode by configuring VCOBYP bit.
 650:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PLL_MODE_t for accessing these enum parameters.
 651:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 652:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLL_MODE
 653:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 654:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED, /**< fPLL derived from fOSC and PLL operating in prescalar mo
 655:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL,  /**< fPLL derived from fVCO and PLL operating in normal mode. 
 656:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR /**< fPLL derived from fOSC and PLL operating in prescalar mo
 657:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_MODE_t;
 658:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 659:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 660:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in SLEEP state.
 661:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetSleepConfig before going to SLEEP state.
 662:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 663:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is
 664:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 665:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. Peripherals are only clocked when configured to stay enabled. 
 666:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 667:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Peripherals can continue to operate unaffected and eventually generate an event to
 668:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The
 669:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP
 670:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  state.
 671:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  
 672:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 673:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SLEEP_MODE_CONFIG
 674:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 675:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in SLEEP 
 676:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_SLEEPCR_SYSSEL_Msk,  /**< fPLL used as syst
 677:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 678:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in SLEEP state */
 679:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_SLEEPCR_USBCR_Msk,  /**< USB clock enabled i
 680:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 681:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 682:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in SLEEP state */
 683:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_SLEEPCR_MMCCR_Msk,/**< SDMMC clock enabled
 684:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 685:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 686:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in SLEEP state */
 687:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_SLEEPCR_ETH0CR_Msk,  /**< ETH clock enabled 
 688:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 689:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 690:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in SLEEP state */
 691:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_SLEEPCR_EBUCR_Msk,  /**< EBU clock enabled i
 692:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 693:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_CCU = 0,  /**< CCU clock disabled in SLEEP state */
 694:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_SLEEPCR_CCUCR_Msk,  /**< CCU clock enabled i
 695:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_WDT = 0,  /**< WDT clock disabled in SLEEP state */
 696:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_SLEEPCR_WDTCR_Msk,  /**< WDT clock enabled i
 697:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t;
 698:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 699:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 700:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state.
 701:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state.
 702:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.
 703:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 704:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is
 705:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 706:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. 
 707:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 708:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC i
 709:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  by a free-running clock. Peripherals are only clocked when configured to stay enabled. 
 710:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Configuration of peripherals and any SRAM content is preserved.
 711:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The Flash module can be put into low-power mode to achieve a further power reduction.
 712:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  On wake-up Flash module will be restarted again before instructions or data access is possible.
 713:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Any interrupt will bring the system back to operation via the NVIC.The clock setup before
 714:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entering Deep Sleep state is restored upon wake-up.
 715:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 716:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG
 717:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 718:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in DE
 719:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_DSLEEPCR_SYSSEL_Msk,  /**< fPLL used as
 720:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN = SCU_CLK_DSLEEPCR_FPDN_Msk,/**< Flash power 
 721:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN = SCU_CLK_DSLEEPCR_PLLPDN_Msk,  /**<  Switch of
 722:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_VCO_POWERDOWN = SCU_CLK_DSLEEPCR_VCOPDN_Msk,  /**<  Switch of
 723:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 724:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in DEEPSLEEP state 
 725:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_DSLEEPCR_USBCR_Msk,  /**< USB clock enab
 726:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 727:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 728:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in DEEPSLEEP stat
 729:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_DSLEEPCR_MMCCR_Msk,/**< SDMMC clock en
 730:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 731:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 732:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in DEEPSLEEP state 
 733:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_DSLEEPCR_ETH0CR_Msk,  /**< ETH clock ena
 734:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 735:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 736:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in DEEPSLEEP state 
 737:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_DSLEEPCR_EBUCR_Msk,  /**< EBU clock enab
 738:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 739:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_CCU = 0,  /**< CCU clock disabled in DEEPSLEEP state 
 740:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_DSLEEPCR_CCUCR_Msk,  /**< CCU clock enab
 741:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_WDT = 0,  /**< WDT clock disabled in DEEPSLEEP state 
 742:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_DSLEEPCR_WDTCR_Msk,  /**< WDT clock enab
 743:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t;
 744:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 745:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 746:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines status of EVR13 regulator
 747:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 748:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_EVR_STATUS
 749:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 750:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_OK = 0, /**< EVR13 regulator No overvoltage condition */
 751:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_EVR13_OVERVOLTAGE = SCU_POWER_EVRSTAT_OV13_Msk /**< EVR13 regulator is i
 752:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_EVR_STATUS_t;
 753:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 754:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 755:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Define status of external hibernate control  
 756:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 757:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_CTRL_STATUS
 758:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 759:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_NO_ACTIVE = 0, /**< Hibernate not driven active to pads */
 760:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_ACTIVE = SCU_HIBERNATE_HDSTAT_HIBNOUT_Msk, /**< Hibernate driven active t
 761:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_CTRL_STATUS_t;
 762:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 763:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 764:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Hibernate domain event status
 765:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 766:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_EVENT
 767:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 768:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_POS_EDGE = SCU_HIBERNATE_HDCR_WKPEP_Msk, /**< Wake-up on positive edg
 769:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_NEG_EDGE = SCU_HIBERNATE_HDCR_WKPEN_Msk, /**< Wake-up on negative edg
 770:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_RTC = SCU_HIBERNATE_HDCR_RTCE_Msk, /**< Wake-up on RTC event */
 771:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_ULPWDG = SCU_HIBERNATE_HDCR_ULPWDGEN_Msk, /**< ULP watchdog alarm status */
 772:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 773:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE = SCU_HIBERNATE_HDSTAT_VBATPEV_Msk, /**< Wake-up on LPAC posi
 774:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE = SCU_HIBERNATE_HDSTAT_VBATNEV_Msk, /**< Wake-up on LPAC nega
 775:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0PEV_Msk, /**< Wake-up on LP
 776:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0NEV_Msk, /**< Wake-up on LP
 777:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))
 778:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Msk, /**< Wake-up on LP
 779:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Msk, /**< Wake-up on LP
 780:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 781:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 782:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_EVENT_t;
 783:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 784:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 785:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   * Hibernate domain dedicated pins
 786:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   */
 787:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO
 788:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 789:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_0 = 0, /**< HIB_IO_0 pin. 
 790:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                              At the first power-up and with every reset of the hibernate domain thi
 791:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 792:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_1 = 1 /**< HIB_IO_1 pin. 
 793:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                             At the first power-up and with every reset of the hibernate domain this
 794:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                             @note : Only available in certain packages*/
 795:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 796:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_t;
 797:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 798:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 799:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB_IOx pin I/O control
 800:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 801:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_PIN_MODE
 802:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 803:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_NONE = 0 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 804:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_DOWN = 1 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 805:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_UP = 2 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, in
 806:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_HIBCTRL = 8 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-
 807:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_WDTSRV = 9 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-p
 808:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_GPIO = 10 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-pu
 809:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_HIBCTRL = 12 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Ope
 810:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_WDTSRV = 13 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open
 811:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_GPIO = 14 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open d
 812:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_PIN_MODE_t;
 813:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 814:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 815:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the output polarity of the HIB_IOx
 816:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 817:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO_OUTPUT_LEVEL
 818:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 819:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_LOW = 0 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos, /**< Direct value */
 820:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_HIGH = 1 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos /**< Inverted value */
 821:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_OUTPUT_LEVEL_t;
 822:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 823:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 824:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects hibernate mode
 825:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 826:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_HIBERNATE_MODE
 827:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL = 0, /**< Request external hibernate mode */
 829:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 830:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_INTERNAL = 1, /**< Request internal hibernate mode. @note Only availab
 831:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 832:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_HIBERNATE_MODE_t;
 833:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 834:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 835:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR0 of ERU0
 836:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 837:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR0_INPUT
 838:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 839:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI0SEL_Msk, /**< Set HIB_SR0 to HIB_IO_0 dig
 840:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 841:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR0 to HIB_IO_1 digital input. @note Only availa
 842:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 843:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 844:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_ACMP0 = SCU_HIBERNATE_HDCR_ADIG0SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP0. @n
 845:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 846:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR0_INPUT_t;
 847:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 848:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 849:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 850:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100))
 851:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 852:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR1 of ERU0. @note Only available in XMC44 in certain packages.
 853:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 854:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR1_INPUT
 855:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 856:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI1SEL_Msk, /**< Set HIB_SR1 to HIB_IO_0 dig
 857:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR1 to HIB_IO_1 digital input.  */
 858:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_ACMP1 = SCU_HIBERNATE_HDCR_ADIG1SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP1. */
 859:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_XTAL_GPI = SCU_HIBERNATE_HDCR_XTALGPI1SEL_Msk,  /**< Set HIB_SR0 to RTC_XTA
 860:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR1_INPUT_t;
 861:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 862:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 863:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 864:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC input selection
 865:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 866:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_INPUT
 867:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 868:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_DISABLED = 0 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator permanen
 869:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_VBAT = 0x1 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activated 
 870:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_0 = 0x2 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 871:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))      
 872:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_1 = 0x4 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 873:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 874:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_INPUT_t;
 875:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 876:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 877:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC start trigger selection for selected inputs
 878:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 879:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_TRIGGER
 880:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SUBSECOND_INTERVAL_COUNTER = 0 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /*
 882:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_ALARM_EVENT = 0x1 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC al
 883:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_PERIODIC_EVENT = 0x2 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC
 884:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_POSITIVE_EDGE_EVENT = 0x3 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 885:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_NEGATIVE_EDGE_EVENT = 0x5 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 886:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_CONTINOUS = 0x6 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Continuous m
 887:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SINGLE_SHOT = 0x7 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Single sho
 888:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_TRIGGER_t;
 889:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 890:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 891:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC status
 892:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 893:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_STATUS
 894:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 895:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_COMPARE_DONE = SCU_HIBERNATE_LPACST_VBATSCMP_Msk, /**< VBAT compare 
 896:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO0SCMP_Msk, /**< HBI_IO
 897:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 898:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO1SCMP_Msk, /**< HBI_IO
 899:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 900:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_VBATVAL_Msk, /**< VBAT compar
 901:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO0VAL_Msk, /**< HBI_
 902:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 903:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO1VAL_Msk, /**< HBI_
 904:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 905:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_STATUS_t;
 906:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 907:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif /* (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41)
 908:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 909:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 910:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * DATA STRUCTURES
 911:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 912:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 913:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 914:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure for initializing the PLL functional block.
 915:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Structure holds divider values for N-DIV, P-DIV, K1-DIV, K2-DIV in order to generate desired 
 916:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  frequency using VCO. It holds the PLL mode of operation either normal or prescaler (VCO bypasse
 917:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_PLL_CONFIG_t for accessing these structure parameters.
 918:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 919:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_SYSPLL_CONFIG
 920:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 921:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t n_div;                       /**<  PLL N-Divider value. */
 922:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t p_div;                       /**<  PLL P-Divider value. */
 923:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t k_div;                       /**<  K1-Divider(Prescalar mode) or K2-Divider (Normal mode)
 924:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_t mode;    /**<  PLL mode of operation. */
 925:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_t clksrc; /**<  PLL divider input frequency. */
 926:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_CONFIG_t;
 927:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 928:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 929:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure used for initializing the clock functional block.
 930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock functional block configures clock source needed for various peripheral and its divider va
 931:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_CONFIG_t for accessing these structure parameters.
 932:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 933:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_CONFIG
 934:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 935:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_CONFIG_t         syspll_config;      /**< PLL configuration */
 936:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_oschp;       /**< Enable external high precision osc
 937:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fOHP has to
 938:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_osculp;      /**< Enable external ultra low power os
 939:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fULP has to
 940:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t calibration_mode;   /**< Backup clock trimming mode. */
 941:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_t             fstdby_clksrc;      /**< Standby clock source. */
 942:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_t             fsys_clksrc;        /**< Choice of system clock. */
 943:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fsys_clkdiv;        /**< Ratio of fPLL to fSYS. */
 944:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fcpu_clkdiv;        /**< Ratio of fSys to fCPU. */
 945:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fccu_clkdiv;        /**< Ratio of fSys to fCCU. */
 946:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fperipheral_clkdiv; /**< Ratio of fSYS to fPERI. */
 947:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } const XMC_SCU_CLOCK_CONFIG_t;
 948:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 949:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 950:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Low power modes
 951:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 952:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_MODE_t
 953:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 954:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_SLEEP = 0, /**< sleep mode stops the processor clock */
 955:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_DEEPSLEEP = SCB_SCR_SLEEPDEEP_Msk /**< deep sleep mode stops the system clock 
 956:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_MODE_t;
 957:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 958:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 959:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * API PROTOTYPES
 960:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 961:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 962:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #ifdef __cplusplus
 963:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** extern "C" {
 964:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 965:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 966:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 967:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 968:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 969:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 970:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 971:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 972:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 973:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 974:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 975:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 976:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables out of range comparator for the selected ADC group and channel. \n\n
 977:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The ADC channel input is compared by Out of Range Comparator (ORC) for overvoltage monitoring
 978:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * or for detection of out of range analog inputs. ORC must be turned on explicitly
 979:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * to leverage the auditing feature. ORC is enabled by setting the enable bit in the GORCEN registe
 980:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 981:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableOutOfRangeComparator()\n\n\n
 982:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 983:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 984:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 985:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 986:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 987:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 988:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 989:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 990:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 991:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 992:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 993:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 994:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 995:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the out of range comparator for the selected ADC group and the channel. \n\n
 996:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Out of range comparator is disabled by clearing the enable bit in the GORCEN register.
 997:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 998:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableOutOfRangeComparator()\n\n\n
 999:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1000:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
1001:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1002:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1003:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1004:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1005:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1006:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables die temperature measurement by powering the DTS module.\n\n
1007:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is enabled by setting the PWD bit of DTSCON register.
1008:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1009:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTempe
1010:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1011:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1012:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableTemperatureSensor(void);
1013:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1014:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1015:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1016:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1017:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1018:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables die temperature measurement by powering the DTS module off.\n\n
1019:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is disabled by clearing the PWD bit of DTSCON register.
1020:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1021:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTemper
1022:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1023:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1024:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableTemperatureSensor(void);
1025:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1026:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1027:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of die temperature sensor. \n
1028:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: true - if temperature sensor is enabled.\n
1029:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    false - if temperature sensor is disabled.
1030:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1031:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1032:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the die temperature sensor power status.\n\n
1033:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading the PWD bit of DTSCON register.
1034:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1035:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1036:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1037:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1038:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorEnabled(void);
1039:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1040:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1041:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1042:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param offset  Offset value for calibrating the DTS result.\n
1043:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 127.
1044:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param gain    Gain value for calibrating the DTS conversion result.\n
1045:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 63.
1046:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1047:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1048:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1049:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1050:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Calibrates the measurement of temperature by configuring the values of offset and gain of \a DTS
1051:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Allows to improve the accuracy of the temperature measurement with the adjustment of \a OFFSET a
1052:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a DTSCON register.
1053:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset adjustment is defined as a shift of the conversion result. The range of the offset adjust
1054:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * resolution that corresponds to +/- 12.5�C. The offset value gets added to the measure result. 
1055:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset is considered as a signed value.
1056:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Gain adjustment helps in minimizing gain error. When the \a gain value is 0, result is generated
1057:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the \a gain value is 63, result is generated with least gain, i.e, \a RESULT - 63 at the hi
1058:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1059:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1060:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CalibrateTempMonitor with desired offset and gain calibration values to the DT
1061:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1062:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1063:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1064:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1065:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1066:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1067:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(),
1068:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1069:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1070:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain);
1071:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1072:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1073:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_STATUS_t  Result of starting the temperature measurement.\n
1074:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                           \b Range: \n 
1075:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_OK if the measurement is started successfully.\n
1076:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_ERROR if temperature sensor is not enabled.\n
1077:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_BUSY if temperature sensor is busy measuring the tem
1078:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1079:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1080:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1081:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Starts die temperature measurement using internal temperature sensor.\n\n
1082:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks if the temperature sensor is enabled and is not busy in measurement.\n
1083:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1084:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1085:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1086:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1087:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1088:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1089:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1090:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1091:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1092:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1093:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1094:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void);
1095:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1096:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1097:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1098:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1099:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Measured temperature value.\n
1100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Valid temperature range is 0 to 1023. \n
1101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              If sensor is not enabled, 0x7FFFFFFFH is returned.
1102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads the measured value of die temperature.\n\n
1105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Temperature measurement result is read from \a RESULT bit field of \a DTSSTAT register.
1106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The temperature measured in �C is given by (RESULT - 605) / 2.05 [�C]
1107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetTemperatureMeasurement(void);
1111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the die temperature sensor is busy.\n
1114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \b Range: \a true if sensor is busy in temperature measurement.
1115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \a false if sensor is free and can accept a new request for measurement.
1116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks whether Die Temperature Sensor (DTS) is busy in temperature measurement.\n\n
1119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from the \a BUSY bit field of the \a DTSSTAT register.
1120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorBusy(void);
1124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool Status of die temperature sensor whether it is ready to start measurement. \n
1127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: \n \a true if temperature sensor is ready to start measurement. \n
1128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \a false if temperature sensor is not ready to start measurement.
1129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the die temperature sensor is ready to start a measurement\n\n
1132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading \a RDY bit of \a DTSSTAT register. It is recommended
1133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * to check the ready status of die temperature sensor before starting it.
1134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorReady(void);
1138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (UC_SERIES != XMC45)
1140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has exceeded the configured upper 
1142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has exceeded the configured upper limit.
1143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is less than the configured upper limit.
1144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has exceeded the configured upper limit of temperature.\n\n
1147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a OVERFL bit (Upper Limit Overflow Status bit) of \a DTEMPALARM register.
1148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a OVERFL bit will be set if the measured temperature has exceeded the limit configured in 
1149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a UPPER in the \a DTEMPLIM register.
1150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_LowTemperature() \n\n\n
1152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_HighTemperature(void);
1154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param lower_temp  Lower threshold of die temperature. If measured temperature falls below this 
1158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a UNDERFL bit field of \a DTEMPALARM register.
1159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param upper_temp  Upper threshold of die temperature. If measured temperature exceeds this valu
1160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a OVERFL bit field of \a DTEMPALARM register.
1161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the lower and upper threshold of die temperature.\n\n
1166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * API configures \a DTEMPLIM register for upper and lower die temperature threshold limits.
1167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the measured temperature is outside the range defined by the limits, alarm bits \a UNDERFL 
1168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * will be set in the register \a DTEMPALARM.\n
1169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Use \a XMC_SCU_HighTemperature() and XMC_SCU_LowTemperature() to monitor the temperature.\n
1174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HighTemperature(), XMC_SCU_LowTemperature() \n\n\n
1176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp);
1178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has dropped below the configured l
1181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has dropped below the configured lower l
1182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is higher than the configured lower limit.
1183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has dropped below the configured lower limit of temperature.\
1186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a UNDERFL bit (Lower LimitUnderflow Status bit) of \a DTEMPALARM register.
1187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a UNDERFL bit will be set if the measured temperature has dropped below the limit configure
1188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a LOWER in the \a DTEMPLIM register.
1189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_HighTemperature() \n\n\n
1191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_LowTemperature(void);
1193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
1194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t Configured boot mode for the device.\n
1197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for enumeration of different boot modes.
1198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the boot mode configured for the device.\n\n
1201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The boot mode is read from the \a STCON register bit field \a SWCON.
1202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetBootMode() \n\n\n
1205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetBootMode(void);
1207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param mode Boot mode to be configured for the device.\n
1211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for selecting the boot mode.
1212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the desired boot mode for the device.\n\n
1217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The XMC4 series devices support multiple boot modes. A running application can set a desired boo
1218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * launch it by means of software reset. Switching of boot modes should be handled carefully. User 
1219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the initial boot sequence is executed. A stable execution environment should be maintained when 
1220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * eventually handed over to the application program.\n
1221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to launch requested bootmode:\n
1222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetBootMode() with desired boot mode value.\n
1223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Trigger a software reset using system reset request by enabling a bit \a SYSRESETREQ of AIRCR 
1224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *   (PPB->AIRCR |= PPB_AIRCR_SYSRESETREQ_Msk).\n
1225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetBootMode() \n\n\n
1227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t mode);
1229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be read.\n
1233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Data read from the selected general purpose register.
1236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides stored data from general purpose SCU register.\n\n
1239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API reads from either GPR0 or GPR1 based on the \a index value.
1241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteGPR()\n\n\n
1243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadGPR(const uint32_t index);
1245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  
1246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be written.\n
1249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data  Data to be written to the selected general purpose register.
1251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Stores data in the selected general purpose SCU register.\n\n
1256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API writes data to either GPR0 or GPR1 based on the \a index value.
1258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadGPR()\n\n\n
1260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data);
1262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be written.\n
1266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data    32 bit data to be written into retention memory. The API writes
1270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data to the address specified.\n
1271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Writes input data to the selected address of Retention memory in hibernate domain.\n\n
1277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadFromRetentionMemory() \n\n\n
1283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data);
1285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be read.\n
1289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  32 bit data read from retention memory. The API reads
1294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data from the address specified.\n
1295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads data from selected address of retention memory in hibernate domain.\n\n
1299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteToRetentionMemory() \n\n\n
1305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address);
1307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be enabled.\n
1311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively enables interrupt sources to generate non maskable interrupt(NMI).\n\n
1318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually enabled by setting corresponding bit of an interrupt in the 
1319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \a NMIREQEN register.
1320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_DisableNmiRequest() \n\n\n
1322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request);
1324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be disabled.\n
1328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively disables interrupt sources from generating non maskable interrupt(NMI).\n\n
1335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually disabled by clearing corresponding bits in the \a NMIREQEN reg
1336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request);
1340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be enabled.\n
1344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables assertion of trap for the selected trap event.\n\n
1350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually enabled by clearing respective bit of the 
1351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * event in \a TRAPDIS register in order to get an exception.
1352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Disable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Enable(const uint32_t trap);
1356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be disabled.\n
1360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables assertion of trap for the selected trap event.\n\n
1366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually disabled by setting the respective event bit 
1367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a TRAPDIS register in order to suppress trap generation.
1368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Disable(const uint32_t trap);
1372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap status bit has to be cleared.\n
1376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the trap status of input event.\n\n
1382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Once a trap event is detected, it will have to be acknowledged and later serviced. 
1383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap status bit should be cleared to detect the occurence of trap next time. 
1384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * This is useful while polling for TRAPSTAT without enabling the NMI for trap.
1385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap status can be cleared by setting the event bit in the \a TRAPCLR register.
1386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap);
1390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of trap generating events.\n
1393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event. The returned
1394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * value indicates the status of multiple events at their respective bit positions.
1395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * User should mask the bits of the events of interest using the type specified.
1396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of trap generating events. \n\n
1399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from \a TRAPRAW register. Status of the specific events can be checked
1400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * using their respective bits in the \a TRAPRAW register. The bit masks can be obtained from
1401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the enumeration type @ref XMC_SCU_TRAP_t. Multiple events can be combined using \a OR operation.
1402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * A trap event is considered to be asserted if the respective bit of the event is set to 1.
1403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_ClearStatus() \n\n\n
1405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_TRAP_GetStatus(void);  
1407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap has to be triggered.\n
1411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Triggers trap generation for the event specified. \n\n
1417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap source has to be enabled before invocation of this API. 
1418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be triggered by setting its respective bit in the \a TRAPSET register.
1419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be configured to generate a non maskable interrupt by using the API XMC_SCU_INTER
1420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to manually assert a trap event:\n
1421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_EnableEvent with desired trap request source ID.\n
1422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_SetEvent with same trap request source ID to manually assert a trap event
1423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Trigger(const uint32_t trap);
1427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be reset.\n
1431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Puts the specified peripheral in to reset state. \n\n
1437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API achieves reset of peripherals by setting the respective bit in the \a PRSET0,  \a PRSET1
1438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset assertion automatically stored in the \a PRSTATn register and can be c
1439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * user software to determine the state of the system and for debug purpose.\n
1440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to assert a peripheral reset:\n
1441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_AssertPeripheralReset() with desired peripheral identifier.\n
1442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted with same peripheral identifier to verify whet
1443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * is in reset state.\n
1444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_IsPeripheralResetAsserted() \n\n\n
1446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be moved out of reset state.\n
1452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the specified peripheral by moving it out of reset state.  \n\n
1458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Any peripheral should be moved out of reset state for executing its functionality.
1459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API enables the peripheral by setting its respective bit in the \a PRCLR0,  \a PRCLR1 or  \a
1460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset deassertion is automatically stored in the \a PRSTATn register and can
1461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the user software to determine the state of the system and for debug purpose.\n
1462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to deassert a peripheral reset:\n
1463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_DeassertPeripheralReset() with desired peripheral identifier.\n
1464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted() with desired peripheral identifier to verify
1465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * has been enabled.\n
1466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral, whose reset status has to be checked.\n
1474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals.
1475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral reset. \n
1477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *               \b Range: \a true if peripheral is in reset state. \a false if peripheral is enabl
1478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the reset status of the selected peripheral.\n\n
1481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API reads the reset status from \a PRSTATn register. Returns true if the peripheral is in
1482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset state. On power up of the device, all the peripherals will be in reset state. 
1483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If the peripheral is enabled, \a false will be returned as the status.
1484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n 
1486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  
1489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error status has to be cleared.\n
1492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory status bits can be cleared by using the \a OR operation.
1494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the parity error status bit. \n\n
1499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * When a memory parity error is detected using the status bits in \a PEFLAG register. It has to 
1500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * be cleared by software to detect the parity error from the same memory next time.
1501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API clears the parity error status bit of the selected peripheral by setting the 
1502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * respective bit in the \a PEFLAG register. Status of multiple memory parity errors 
1503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * can be cleared by combining the enum values using \a OR operation.
1504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetStatus(), XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_EnableTrapGeneration() \n\n\
1506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory);
1508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error checking has to be enabled.\n
1512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables parity error checking for the selected on-chip RAM type.\n\n
1519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error checking can be enabled by setting respective bits in the \a PEEN register.
1520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Additionally parity error can be configured to generate trap when the error is detected,
1521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * using the API XMC_SCU_PARITY_EnableTrapGeneration(). Such a trap can be further configured
1522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * to generate non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration(), XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Enable(const uint32_t memory);
1527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory   The on-chip RAM type, for which the parity error checking has to be disabled.\n
1531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables parity error checking for the selected on-chip RAM type.\n\n
1538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection can be disabled by clearing the respective bit in the \a PEEN register.
1539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Disable(const uint32_t memory);
1543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be enable
1547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables trap assertion for the parity error source.\n\n
1554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection for different types of on-chip RAM can generate trap.
1555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion for parity error can be individually enabled by setting the respective bits
1556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a PETE register. The generated trap can be additionally configured to generate
1557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory);
1562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be disabl
1566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the assertion of trap for the parity error source.\n\n
1573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be disabled by clearing the respective bit of the RAM type in the \a PETE reg
1574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration() \n\n\n
1577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory);
1579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of parity error detection for the on-chip RAM modules.\n
1583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to get the bit mask of each RAM module type.
1584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of parity error detection for the on-chip RAM modules.\n\n
1587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error status information is obtained from the \a PEFLAG register.
1588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If a particular RAM module has parity error, its respective bit field will be set to 1 in the 
1589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * returned value. A check for the status of a particular RAM module can be done by
1590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * masking the returned value with the RAM module identifier from the type @ref XMC_SCU_PARITY_t.
1591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_ClearStatus() \n\n\n
1593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_PARITY_GetStatus(void);  
1595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity logic should be overriden.\n
1599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enable access to parity bits of SRAM modules for various types of peripherals.
1606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enable direct write to parity bits using value selected using XMC_SCU_PARITY_SetParityWriteValue
1607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_SetParityWriteValue() \n\n\n
1609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_PARITY_OverrideParityBitLogic(uint32_t memory)
1612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_PARITY->MCHKCON = memory;
1614:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1615:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1616:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1617:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity test has to be enabled.\n
1618:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. 
1619:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Only a single memory type should be specified.
1620:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1621:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1622:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1623:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1624:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects parity test output from a memory instance that can be inspected using XMC_SCU_PARITY_Get
1625:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1626:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetParityReadValue() \n\n\n
1627:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1628:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1629:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_PARITY_SelectMemoryTest(const XMC_SCU_PARITY_t memory)
1630:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1631:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_PARITY->PMTSR = memory;
1632:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1633:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1634:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1635:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param write_value parity bits value stored with next write access\n
1636:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1637:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1638:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1639:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1640:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * For each byte of a memory module the parity bits corresponding to the next write access are sele
1641:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1642:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1643:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_OverrideParityBitLogic() \n\n\n
1644:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1645:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1646:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_PARITY_SetParityWriteValue(uint8_t write_value)
1647:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1648:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_PARITY->PMTPR = ((write_value << SCU_PARITY_PMTPR_PWR_Pos) & SCU_PARITY_PMTPR_PWR_Msk);
1649:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1650:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1651:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1652:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return parity bits generated during last read access  
1653:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1654:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1655:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * For each byte of a memory module the parity bits generated during the most recent read access ca
1656:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1657:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1658:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_OverrideParityBitLogic() \n\n\n
1659:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1660:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1661:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint8_t XMC_SCU_PARITY_GetParityReadValue(void)
1662:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1663:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return ((SCU_PARITY->PMTPR & SCU_PARITY_PMTPR_PRD_Msk) >> SCU_PARITY_PMTPR_PRD_Pos);
1664:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1665:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1666:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1667:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1668:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be enabled. \n
1669:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1670:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1671:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1672:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1673:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1674:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the source clock for selected peripheral.\n\n
1675:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually enabled by setting the pe
1676:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bit in the \a CLKSET register.\n
1677:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether a source clock of peripheral is enabl
1678:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_EnableClock() with desired peripheral identifier.\n
1679:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled() with same peripheral identifier to verify whether the c
1680:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1681:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableClock(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n
1682:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1683:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock);
1684:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1685:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1686:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1687:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be disabled. \n
1688:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1689:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1690:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1691:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1692:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1693:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables source clock for the peripheral selected.\n\n
1694:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually disabled  by setting the 
1695:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bits in the \a CLKCLR register.\n
1696:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether clock source of the peripheral is ena
1697:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_DisableClock with desired peripheral identifier.\n
1698:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled with same peripheral identifier to verify whether periphe
1699:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1700:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1701:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1702:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock);
1703:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1704:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1705:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1706:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock   Peripheral for which the clock status has to be checked. \n
1707:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1708:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1709:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral clock.\n
1710:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: \a true if peripheral clock is enabled. \a false if peripheral clock is disable
1711:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1712:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1713:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the status of peripheral source clock.\n\n
1714:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status of peripheral source clock is read from the \a CLKSTATn register. 
1715:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Returns \a true if clock is enabled and returns \a false otherwise.
1716:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1717:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_CLOCK_DisableClock() \n\n\n
1718:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1719:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock);
1720:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1721:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1722:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1723:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for fSYS.\n
1724:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1725:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI for selecting internal fast clock as fSYS.\n
1726:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL for selecting the output of PLL fPLL as fSYS.
1727:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1728:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1729:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1730:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1731:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source for system clock (fSYS).\n\n
1732:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock is selected by setting \a SYSSEL bits in the \a SYSCLKCR register.
1733:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSCLKSRC_PLL is selected, then the dividers of the PLL have to be
1734:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * additionally configured to achieve the required system clock frequency. 
1735:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   * \par<b>Related APIs:</b><BR>
1736:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_StartSystemPll(), XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
1737:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1738:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source);
1739:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1740:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1741:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_SYSCLKSRC_t   Source of clock for fSYS.\n
1742:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1743:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI - internal fast clock selected as fSYS.\n
1744:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL - output of PLL fPLL selected as fSYS.
1745:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1746:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1747:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of system clock (fSYS). \n\n
1748:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selected source of fSYS is obtained by reading \a SYSSEL bits of \a SYSCLKCR register.
1749:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1750:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource(), XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
1751:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1752:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSCLKSRC_t XMC_SCU_CLOCK_GetSystemClockSource(void)
1753:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1754:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSCLKSRC_t)(SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk);
1755:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1756:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1757:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1758:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1759:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1760:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to select the source of clock.\n
1761:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL as source of USB clock(fUSB/
1762:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL as source of USB clock(fUSB
1763:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1764:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1765:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1766:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1767:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of USB/SDMMC clock (fUSB/SDMMC).\n\n
1768:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * USB and SDMMC use a common clock source. They can either use fUSB PLL or fPLL as the source of c
1769:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selection is done by configuring the \a USBSEL bits of \a USBCLKCR register.
1770:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1771:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1772:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1773:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source);
1774:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1775:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1776:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_USBCLKSRC_t   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1777:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to identify the source of clock.\n
1778:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL is selected as source of USB
1779:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL is selected as source of US
1780:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1781:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1782:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of USB and SDMMC clock frequency.\n\n
1783:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
1784:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1785:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1786:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1787:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
1788:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1789:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
1790:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1791:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1792:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1793:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1794:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Clock source for watchdog timer.\n
1795:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1796:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1797:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1798:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1799:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1800:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1801:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1802:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1803:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of WDT clock (fWDT).\n\n
1804:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selected value is configured to the \a WDTSEL bits of \a WDTCLKCR register.
1805:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The watchdog timer counts at the frequency selected using this API. So the time for
1806:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * timeout or pre-warning of watchdog has to be calculated based on this selection.
1807:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1808:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1809:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_GetWdtClockFrequency() \n\n\n
1810:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1811:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source);
1812:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1813:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1814:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_WDTCLKSRC_t   Clock source configured for watchdog timer.\n
1815:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1816:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1817:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1818:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1819:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1820:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1821:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of clock used for watchdog timer.\n\n
1822:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTSEL bits of \a WDTCLKCR register.
1823:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The time for timeout or pre-warning of watchdog has to be calculated based on 
1824:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the clock source selected.
1825:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1826:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
1827:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
1829:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1830:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
1831:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1832:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1833:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1834:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1835:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source for standby clock.\n
1836:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1837:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1838:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1839:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1840:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1841:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1842:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1843:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of Standby clock (fSTDBY).\n\n
1844:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clock source is configured by setting the \a STDBYSEL bits of \a HDCR register.
1845:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Hibernate domain should be enabled explicitly before using the API.
1846:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1847:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1848:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1849:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1850:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1851:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetStdbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1852:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1853:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source);
1854:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1855:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1856:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source clock of standby clock(fSTDBY).\n
1857:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1858:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1859:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1860:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1861:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1862:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of standby clock (fSTDBY).\n\n
1863:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a STDBYSEL bits of \a HDCR register.\n
1864:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1865:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetStandbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1866:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1867:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetStdbyClockSource(void)
1868:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1869:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_STDBYSEL_Msk);
1870:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1871:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1872:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1873:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1874:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of RTC clock.\n
1875:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1876:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1877:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1878:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1879:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1880:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1882:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of RTC clock (fRTC).\n\n
1883:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a RCS bit of \a HDCR register.
1884:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * fULP needs external input powered by VBAT or VDDP. fOSI is internal clock.
1885:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1886:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1887:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1888:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1889:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1890:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1891:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetRtcClockSource() \n\n\n
1892:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1893:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source);
1894:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1895:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1896:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source of RTC clock.\n
1897:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1898:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1899:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1900:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1901:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1902:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of RTC clock (fRTC).
1903:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a RCS bit of \a HDCR register.
1904:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1905:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1906:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1907:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1908:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetRtcClockSource(void)
1909:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1910:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_RCS_Msk);
1911:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1912:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1913:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1914:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1915:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Source of external clock output(fEXT).\n
1916:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1917:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1918:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1919:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1920:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1921:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1922:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1923:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1924:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1925:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1926:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1927:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1928:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1929:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1931:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of external clock out (fEXT).\n\n
1932:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKSEL bits of \a EXTCLKCR register.
1933:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1934:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1935:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1936:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t clock);
1937:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1938:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1939:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_EXTOUTCLKSRC_t   Source of external clock output(fEXT).\n
1940:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1941:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1942:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1943:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1944:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1945:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1946:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1947:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1948:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1949:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1950:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1951:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1952:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of external clock output(fEXT).\n\n
1953:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
1954:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1955:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1956:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1957:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
1958:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1959:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
1960:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1961:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1962:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1963:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1964:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for system PLL.\n
1965:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1966:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1967:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1968:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1969:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1970:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1971:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1972:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of system PLL.\n\n
1973:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a VCOBYP bit of \a PLLCON0 register.
1974:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP is selected, ensure that the high performance oscillator 
1975:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * enabled by using the API XMC_SCU_CLOCK_EnableHighPerformanceOscillator().
1976:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1977:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator()\n\n\n
1978:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1979:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source);
1980:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1981:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1982:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_OSCCLKSRC_t   Source of clock for system PLL.\n
1983:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1984:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1985:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1986:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1987:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1988:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of system PLL clock (fPLL). \n\n
1989:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a VCOBYP bit of \a PLLCON0 register.
1990:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1991:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator(), XMC_SCU_CLOCK_SetSystemPllClockSource()\n\n\n
1992:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1993:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSPLLCLKSRC_t XMC_SCU_CLOCK_GetSystemPllClockSource(void)
1994:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1995:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSPLLCLKSRC_t)(SCU_PLL->PLLCON0 & SCU_PLL_PLLCON0_VCOBYP_Msk);
1996:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1997:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1998:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
1999:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2000:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2001:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of ECAT clock.\n
2002:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
2003:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
2004:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
2005:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2006:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2007:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2008:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2009:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of ECAT clock (fECAT).\n\n
2010:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
2011:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2012:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
2013:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2014:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
2015:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2016:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
2017:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                       ((uint32_t)source);
2018:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2019:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2020:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2021:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_ECATCLKSRC_t   Source of ECAT clock.\n
2022:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
2023:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
2024:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
2025:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2026:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2027:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of ECAT clock (fECAT).
2028:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECATSEL bit of \a ECATCLKCR register.
2029:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2030:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
2031:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2032:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_ECATCLKSRC_t XMC_SCU_CLOCK_GetECATClockSource(void)
2033:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2034:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_ECATCLKSRC_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) >> SCU_C
2035:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2036:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2037:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2038:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2039:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2040:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param divider   Ratio of fSYS clock source to the value of fSYS.
2041:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 to 256.
2042:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2043:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2044:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2045:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2046:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ratio of system clock source to the value of system clock frequency.\n\n
2047:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured as \a SYSDIV bits of \a SYSCLKCR register. The divider value is 
2048:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * decremented by 1 before configuring.
2049:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2050:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2051:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2052:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider);
2053:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2054:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2055:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio of fSYS clock source to the value of fSYS.
2056:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 to 255.
2057:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2058:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2059:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of ratio between the source of system clock to the the value of system clock 
2060:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a SYSDIV bits of \a SYSCLKCR register.
2061:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2062:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2063:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2064:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockDivider(void)
2065:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2066:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) >> SCU_CLK_SYSCLKCR_SYSDIV_Po
2067:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2068:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2069:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2070:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2071:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of fCCU clock source to the value of fCCU.
2072:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 or 2.\n
2073:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS \n
2074:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  2-> fCCU= fSYS/2.
2075:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2076:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2077:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2078:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2079:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the divider for CCU clock source. \n\n
2080:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Capture compare unit(CCU) can take either fSYS or fSYS/2 as the source of clock.
2081:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The configuration is set to \a CCUDIV bit of \a CCUCLKCR register. The CCUDIV bit is 1 bit wide.
2082:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2083:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2084:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider() \n\n\n
2085:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2086:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t ratio);
2087:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2088:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2089:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of fCCU clock source to the value of fCCU.
2090:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 or 1.\n
2091:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0-> fCCU= fSYS \n
2092:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS/2.
2093:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2094:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2095:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CCU clock(fCCU) to system clock(fSYS).\n\n
2096:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CCUDIV bit of \a CCUCLKCR register.
2097:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2098:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2099:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCcuClockDivider() \n\n\n
2100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCcuClockDivider(void)
2102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >> SCU_CLK_CCUCLKCR_CCUDIV_Po
2104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between system clock(fSYS) and CPU clock(fCPU).
2109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS. \n
2111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            2-> fCPU= fSYS/2.
2112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the CPU clock by setting the divider value for the system clock. \n\n
2117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is set to the \a CPUDIV bit of \a CPUCLKCR register.
2118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockDivider() \n\n\n
2120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t ratio);
2122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio between system clock(fSYS) and CPU clock(fCPU).
2125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            0-> fCPU= fSYS. \n
2127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS/2.
2128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between system clock(fSYS) and CPU clock(fCPU). \n\n
2131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CPUDIV bit of \a CPUCLKCR register.
2132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCpuClockDivider() \n\n\n
2134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockDivider(void)
2136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Po
2138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of peripheral clock source to the value of peripheral clock.\n
2143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU.\n
2145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                2-> fPERIPH= fCPU/2.
2146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the peripheral clock by setting the divider for CPU clock(fCPU).\n\n
2151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The peripheral clock can be equal to either fCPU or fCPU/2. The value is configured to \a PBDIV 
2152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockDivider() \n\n\n
2155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t ratio);
2157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of peripheral clock source to the value of peripheral clock.\n
2160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                0-> fPERIPH= fCPU.\n
2162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU/2.
2163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CPU clock(fCPU) to peripheral clock(fPERIPH).\n\n
2166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a PBDIV bit of \a PBCLKCR register.
2167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetPeripheralClockDivider() \n\n\n
2169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetPeripheralClockDivider(void)
2171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos);
2173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 8.
2179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the USB clock(fUSB) by setting the USB clock divider. \n\n
2184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is decremented by 1 before setting it to \a USBDIV bits of \a USBCLKCR register.
2185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockDivider(), XMC_SCU_CLOCK_SetUsbClockSource() \n\n\n
2188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t ratio);
2190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 7.
2195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL output frequency(fPLL) and USB clock(fUSB).\n\n
2198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a USBDIV bit of \a USBCLKCR register.
2199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbClockSource() \n\n\n
2201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetUsbClockDivider(void)
2203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >> SCU_CLK_USBCLKCR_USBDIV_Po
2205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
2210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 64.
2214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the EBU clock(fEBU) by setting the divider value.\n\n
2219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock divider is configured to the \a EBUDIV bits of \a EBUCLKCR register.
2220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetEbuClockDivider() \n\n\n
2222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t ratio);
2224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 63.
2229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL clock(fPLL) and EBU clock(fEBU).\n\n
2232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EBUDIV bits of \a EBUCLKCR register.
2233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetEbuClockDivider() \n\n\n
2235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEbuClockDivider(void)
2237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >> SCU_CLK_EBUCLKCR_EBUDIV_Po
2239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between the source of WDT clock and the WDT clock.\n
2245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 256.
2246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the WDT clock by setting the clock divider for the WDT clock source.\n\n
2251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a WDTDIV bits of \a WDTCLKCR register. The value of divider
2252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring. Check the selected clock source for the WDT clock
2253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * before configuring the divider using the API XMC_SCU_CLOCK_SetWdtClockSource().
2254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_GetWdtClockDivider() \n\n\n
2256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t ratio);
2258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of WDT clock and the WDT clock.\n
2262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 255.
2263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the WDT parent clock and the WDT clock. \n\n
2266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTDIV bits of \a WDTCLKCR register.
2267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the WDT parent clock is considered before using the value of
2268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the divider value.
2269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_SetWdtClockDivider() \n\n\n
2271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetWdtClockDivider(void)
2273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >> SCU_CLK_WDTCLKCR_WDTDIV_Po
2275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the external output parent clock selected and the output clock.\n
2280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 512.
2281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the external output clock by setting the divider value for the parent clock. \n\n
2286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKDIV bits of \a EXTCLKCR register.
2287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The divider value is decremented by 1 before storing it to the bit fields.
2288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the source of external output clock is configured appropriately using the API
2289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource().
2290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_GetExternalOutputClockDivider() \n\n
2292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t ratio);
2294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the external output parent clock selected and the output clock.\
2298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 511.
2299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the divider value applied on parent clock before the generation of external output cloc
2302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EXTDIV bit of \a EXTCLKCR register.
2303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
2305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetExternalOutputClockDivider(void)
2307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >> SCU_CLK_EXTCLKCR_ECKDIV_Po
2309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
2312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the source of ECAT clock and the ECAT clock.\n
2315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 4.
2316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ECAT clock by setting the clock divider for the ECAT clock source.\n\n
2321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECADIV bits of \a ECATCLKCR register. The value of divider
2322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring.
2323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_GetECATClockDivider() \n\n\n
2325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider);
2327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of ECAT clock and the ECAT clock.\n
2331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 3.
2332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the ECAT parent clock and the ECAT clock. \n\n
2335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECADIV bits of \a ECATCLKCR register.
2336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_SetECATClockDivider() \n\n\n
2338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetECATClockDivider(void)
2340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECADIV_Msk) >> SCU_CLK_ECATCLKCR_ECADIV
2342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the high precision oscillator by configuring external crystal mode.\n\n
2351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 0, there by configuring the 
2352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * external clock input.
2353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The System Oscillator Watchdog is enabled. The user should check the status 
2354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable()
2355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void);
2359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the high precision oscillator by disabling the external oscillator.\n\n
2365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 1, there by disabling the 
2366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * external oscillator. 
2367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void);
2371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of high performance oscillator
2375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_HP oscillator is stable and usable
2378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void);
2382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus to monitor the status of
2390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableHighPerformanceOscillator
2391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void);
2395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void);
2406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_HP XTAL1 pin
2410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_HP XTAL1 pin.
2413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void);
2417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables ultra low power oscillator(ULP). \n\n
2424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It enables the hibernate domain, configures the ultra low power oscillator
2425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * uisng the \a MODE bits of the \a OSCULCTRL register. The \a Mode bits will be
2426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset to 0 to enable the low power oscillator. Mirror register update delays 
2427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * are handled internally.
2428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The OSC_ULP Oscillator Watchdog is enabled. The user should check the status 
2429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsLowPowerOscillatorStable()
2430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() 
2432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_IsLowPowerOscillatorStable() \n\n\n
2433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void);
2435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables ultra low power oscillator.\n\n
2442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is disabled by setting the \a MODE bits of \a OSCULCTRL register to value 2.
2443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * By default on power up, the ultra low power osciallator is disabled.
2444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void);
2448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of low power oscillator
2452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_ULP oscillator is stable and usable
2455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void);
2459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus to monitor the status of OSC_UL
2467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableLowPowerOscillator().
2468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() \n\n\n
2474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void);
2476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void);
2491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_ULP XTAL1 pin 
2495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_ULP XTAL1 pin.
2498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void);
2502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System frequency in Hertz.\n
2506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: clock frequency in Hertz. Range of the value depends on the source clock fr
2507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            and the configured values of dividers.
2508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of system PLL output clock frequency(fPLL).\n\n
2511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API uses \a N-DIV,  \a P-DIV,  \a K1-DIV,  \a K2-DIV bits information from \a PLLCON1 regist
2512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * VCOBYP bit information from \a PLLCON0 register. It calculates frequency of system pll clock usi
2513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If normal Mode : fPLL = (fOSC * N)/(P * K2).
2514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If prescaler mode: fPLL = fOSC/ K1.
2515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void);
2519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Source clock used for deriving system clock.\n
2523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: fOHP frequency if external high precision frequency is used. \n
2524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    fOFI fast internal clock frequency.
2525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of the input clock frequency for deriving the system clock.
2528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API retrieves frequency of system PLL input clock (fPLLin).
2529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on \a PINSEL bits information from \a PLLCON2 register, the parent clock source is obtaine
2530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * This bit field specifies if fOHP or fOFI is used for deriving system clock.
2531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock frequency is obtained by dividing the source clock frequency with different divider
2532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockFrequency() \n\n\n
2534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void);
2536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   USB PLL output clock frequency.
2540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of USB PLL output clock (fUSBPLL).\n\n
2543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It obtains the \a VCOBYP bits information from \a USBPLLCON register and decides if USB PLL mode
2544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If USB PLL mode is used, the USB clock frequency is obtained by dividing the source clock by USB
2545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency is obtained using following formula:\n
2546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Normal Mode : fUSBPLL = (fOSC * N)/(P * 2).\n
2547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Prescaler mode: fPLL = fOSC.
2548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
2550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void);
2552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System clock frequency in Hertz.
2556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of system clock (fSYS).\n\n
2559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value obtained by dividing \a CPUDIV bits information of \a CPUCLKCR register with SystemCor
2560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values, fSYS clock frequency is derived using the following formula:\n
2561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * fSYS = fCPU << CPUDIV.
2562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
2564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
2566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_
 1343              	 .loc 2 2567 0
 1344 0000 054B     	 ldr r3,.L136
 1345 0002 0649     	 ldr r1,.L136+4
 1346 0004 1A69     	 ldr r2,[r3,#16]
 1347              	.LVL89:
 1348 0006 0868     	 ldr r0,[r1]
 1349              	.LBE31:
 1350              	.LBE30:
 758:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 759:../Libraries/XMCLib/src/xmc4_scu.c ****   frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 760:../Libraries/XMCLib/src/xmc4_scu.c ****   
 761:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 1351              	 .loc 1 761 0
 1352 0008 1B6A     	 ldr r3,[r3,#32]
 1353              	.LBB33:
 1354              	.LBB32:
 1355              	 .loc 2 2567 0
 1356 000a 02F00102 	 and r2,r2,#1
 1357 000e 9040     	 lsls r0,r0,r2
 1358              	.LBE32:
 1359              	.LBE33:
 1360              	 .loc 1 761 0
 1361 0010 03F00103 	 and r3,r3,#1
 762:../Libraries/XMCLib/src/xmc4_scu.c ****                                               SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
 763:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1362              	 .loc 1 763 0
 1363 0014 D840     	 lsrs r0,r0,r3
 1364 0016 7047     	 bx lr
 1365              	.L137:
 1366              	 .align 2
 1367              	.L136:
 1368 0018 00460050 	 .word 1342195200
 1369 001c 00000000 	 .word SystemCoreClock
 1370              	 .cfi_endproc
 1371              	.LFE216:
 1373              	 .section .text.XMC_SCU_CLOCK_GetUsbClockFrequency,"ax",%progbits
 1374              	 .align 1
 1375              	 .global XMC_SCU_CLOCK_GetUsbClockFrequency
 1376              	 .thumb
 1377              	 .thumb_func
 1379              	XMC_SCU_CLOCK_GetUsbClockFrequency:
 1380              	.LFB217:
 764:../Libraries/XMCLib/src/xmc4_scu.c **** 
 765:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 766:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve USB and SDMMC clock frequency
 767:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 768:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
 769:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1381              	 .loc 1 769 0
 1382              	 .cfi_startproc
 1383              	 
 1384              	 
 1385              	.LVL90:
 1386              	.LBB34:
 1387              	.LBB35:
1789:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1388              	 .loc 2 1789 0
 1389 0000 0A4B     	 ldr r3,.L142
 1390 0002 9A69     	 ldr r2,[r3,#24]
 1391              	.LBE35:
 1392              	.LBE34:
 770:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 771:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_USBCLKSRC_t clksrc;
 772:../Libraries/XMCLib/src/xmc4_scu.c **** 
 773:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 774:../Libraries/XMCLib/src/xmc4_scu.c **** 
 775:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 1393              	 .loc 1 775 0
 1394 0004 12F48032 	 ands r2,r2,#65536
 769:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 1395              	 .loc 1 769 0
 1396 0008 10B5     	 push {r4,lr}
 1397              	.LCFI5:
 1398              	 .cfi_def_cfa_offset 8
 1399              	 .cfi_offset 4,-8
 1400              	 .cfi_offset 14,-4
 1401 000a 1C46     	 mov r4,r3
 1402              	 .loc 1 775 0
 1403 000c 02D0     	 beq .L139
 776:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 777:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 1404              	 .loc 1 777 0
 1405 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1406              	.LVL91:
 1407 0012 04E0     	 b .L140
 1408              	.LVL92:
 1409              	.L139:
 778:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 779:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 1410              	 .loc 1 779 0
 1411 0014 12B9     	 cbnz r2,.L141
 780:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 781:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 1412              	 .loc 1 781 0
 1413 0016 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbPllClockFrequency
 1414              	.LVL93:
 1415 001a 00E0     	 b .L140
 1416              	.LVL94:
 1417              	.L141:
 770:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_USBCLKSRC_t clksrc;
 1418              	 .loc 1 770 0
 1419 001c 0020     	 movs r0,#0
 1420              	.LVL95:
 1421              	.L140:
 782:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 783:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 784:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 785:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 786:../Libraries/XMCLib/src/xmc4_scu.c **** 
 787:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 1422              	 .loc 1 787 0
 1423 001e A369     	 ldr r3,[r4,#24]
 1424 0020 03F00703 	 and r3,r3,#7
 788:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 1425              	 .loc 1 788 0
 1426 0024 0133     	 adds r3,r3,#1
 789:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1427              	 .loc 1 789 0
 1428 0026 B0FBF3F0 	 udiv r0,r0,r3
 1429              	.LVL96:
 1430 002a 10BD     	 pop {r4,pc}
 1431              	.L143:
 1432              	 .align 2
 1433              	.L142:
 1434 002c 00460050 	 .word 1342195200
 1435              	 .cfi_endproc
 1436              	.LFE217:
 1438              	 .section .text.XMC_SCU_CLOCK_GetEbuClockFrequency,"ax",%progbits
 1439              	 .align 1
 1440              	 .global XMC_SCU_CLOCK_GetEbuClockFrequency
 1441              	 .thumb
 1442              	 .thumb_func
 1444              	XMC_SCU_CLOCK_GetEbuClockFrequency:
 1445              	.LFB218:
 790:../Libraries/XMCLib/src/xmc4_scu.c **** 
 791:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(EBU)
 792:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 793:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve EBU clock frequency
 794:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 795:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
 796:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1446              	 .loc 1 796 0
 1447              	 .cfi_startproc
 1448              	 
 1449              	 
 1450 0000 08B5     	 push {r3,lr}
 1451              	.LCFI6:
 1452              	 .cfi_def_cfa_offset 8
 1453              	 .cfi_offset 3,-8
 1454              	 .cfi_offset 14,-4
 797:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 1455              	 .loc 1 797 0
 1456 0002 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1457              	.LVL97:
 798:../Libraries/XMCLib/src/xmc4_scu.c ****   
 799:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 1458              	 .loc 1 799 0
 1459 0006 044B     	 ldr r3,.L145
 1460 0008 DB69     	 ldr r3,[r3,#28]
 1461 000a 03F03F03 	 and r3,r3,#63
 800:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 1462              	 .loc 1 800 0
 1463 000e 0133     	 adds r3,r3,#1
 801:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1464              	 .loc 1 801 0
 1465 0010 B0FBF3F0 	 udiv r0,r0,r3
 1466              	.LVL98:
 1467 0014 08BD     	 pop {r3,pc}
 1468              	.L146:
 1469 0016 00BF     	 .align 2
 1470              	.L145:
 1471 0018 00460050 	 .word 1342195200
 1472              	 .cfi_endproc
 1473              	.LFE218:
 1475              	 .section .text.XMC_SCU_CLOCK_GetWdtClockFrequency,"ax",%progbits
 1476              	 .align 1
 1477              	 .global XMC_SCU_CLOCK_GetWdtClockFrequency
 1478              	 .thumb
 1479              	 .thumb_func
 1481              	XMC_SCU_CLOCK_GetWdtClockFrequency:
 1482              	.LFB219:
 802:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 803:../Libraries/XMCLib/src/xmc4_scu.c **** 
 804:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(ECAT0)
 805:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 806:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve ECAT clock frequency
 807:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 808:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetECATClockFrequency(void)
 809:../Libraries/XMCLib/src/xmc4_scu.c **** {
 810:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency;
 811:../Libraries/XMCLib/src/xmc4_scu.c **** 
 812:../Libraries/XMCLib/src/xmc4_scu.c ****   if ((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) != 0U)
 813:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 814:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency =  XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 815:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 816:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 817:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 818:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency =  XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 819:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 820:../Libraries/XMCLib/src/xmc4_scu.c **** 
 821:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency / (XMC_SCU_CLOCK_GetECATClockDivider() + 1UL)));
 822:../Libraries/XMCLib/src/xmc4_scu.c **** }
 823:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 824:../Libraries/XMCLib/src/xmc4_scu.c **** 
 825:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 826:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve WDT clock frequency
 827:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 828:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
 829:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1483              	 .loc 1 829 0
 1484              	 .cfi_startproc
 1485              	 
 1486              	 
 1487              	.LVL99:
 1488              	.LBB36:
 1489              	.LBB37:
1830:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1490              	 .loc 2 1830 0
 1491 0000 0D4A     	 ldr r2,.L152
 1492 0002 536A     	 ldr r3,[r2,#36]
 1493 0004 03F44033 	 and r3,r3,#196608
 1494              	.LBE37:
 1495              	.LBE36:
 830:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 831:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;
 832:../Libraries/XMCLib/src/xmc4_scu.c **** 
 833:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 834:../Libraries/XMCLib/src/xmc4_scu.c **** 
 835:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 1496              	 .loc 1 835 0
 1497 0008 B3F5003F 	 cmp r3,#131072
 829:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 1498              	 .loc 1 829 0
 1499 000c 10B5     	 push {r4,lr}
 1500              	.LCFI7:
 1501              	 .cfi_def_cfa_offset 8
 1502              	 .cfi_offset 4,-8
 1503              	 .cfi_offset 14,-4
 1504 000e 1446     	 mov r4,r2
 1505              	 .loc 1 835 0
 1506 0010 02D1     	 bne .L148
 836:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 837:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 1507              	 .loc 1 837 0
 1508 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1509              	.LVL100:
 1510 0016 08E0     	 b .L149
 1511              	.LVL101:
 1512              	.L148:
 838:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 839:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 1513              	 .loc 1 839 0
 1514 0018 33B1     	 cbz r3,.L150
 840:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 841:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = OFI_FREQUENCY;
 842:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 843:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 844:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 845:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = OSI_FREQUENCY;
 1515              	 .loc 1 845 0
 1516 001a B3F5803F 	 cmp r3,#65536
 1517 001e 14BF     	 ite ne
 1518 0020 0020     	 movne r0,#0
 1519 0022 4FF40040 	 moveq r0,#32768
 1520 0026 00E0     	 b .L149
 1521              	.L150:
 841:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 1522              	 .loc 1 841 0
 1523 0028 0448     	 ldr r0,.L152+4
 1524              	.LVL102:
 1525              	.L149:
 846:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 847:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 848:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 849:../Libraries/XMCLib/src/xmc4_scu.c **** 
 850:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 851:../Libraries/XMCLib/src/xmc4_scu.c **** 
 852:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 1526              	 .loc 1 852 0
 1527 002a 636A     	 ldr r3,[r4,#36]
 1528 002c DBB2     	 uxtb r3,r3
 853:../Libraries/XMCLib/src/xmc4_scu.c ****                                     SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 1529              	 .loc 1 853 0
 1530 002e 0133     	 adds r3,r3,#1
 854:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1531              	 .loc 1 854 0
 1532 0030 B0FBF3F0 	 udiv r0,r0,r3
 1533              	.LVL103:
 1534 0034 10BD     	 pop {r4,pc}
 1535              	.L153:
 1536 0036 00BF     	 .align 2
 1537              	.L152:
 1538 0038 00460050 	 .word 1342195200
 1539 003c 00366E01 	 .word 24000000
 1540              	 .cfi_endproc
 1541              	.LFE219:
 1543              	 .section .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency,"ax",%progbits
 1544              	 .align 1
 1545              	 .global XMC_SCU_CLOCK_GetExternalOutputClockFrequency
 1546              	 .thumb
 1547              	 .thumb_func
 1549              	XMC_SCU_CLOCK_GetExternalOutputClockFrequency:
 1550              	.LFB220:
 855:../Libraries/XMCLib/src/xmc4_scu.c **** 
 856:../Libraries/XMCLib/src/xmc4_scu.c **** /**
 857:../Libraries/XMCLib/src/xmc4_scu.c ****  * @brief API to retrieve EXTERNAL-OUT clock frequency
 858:../Libraries/XMCLib/src/xmc4_scu.c ****  * @retval Clock frequency
 859:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 860:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
 861:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1551              	 .loc 1 861 0
 1552              	 .cfi_startproc
 1553              	 
 1554              	 
 1555              	.LVL104:
 1556 0000 10B5     	 push {r4,lr}
 1557              	.LCFI8:
 1558              	 .cfi_def_cfa_offset 8
 1559              	 .cfi_offset 4,-8
 1560              	 .cfi_offset 14,-4
 1561              	.LBB42:
 1562              	.LBB43:
1959:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1563              	 .loc 2 1959 0
 1564 0002 0F4C     	 ldr r4,.L160
 1565 0004 A36A     	 ldr r3,[r4,#40]
 1566 0006 03F00303 	 and r3,r3,#3
 1567              	.LBE43:
 1568              	.LBE42:
 862:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 863:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;
 864:../Libraries/XMCLib/src/xmc4_scu.c **** 
 865:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 866:../Libraries/XMCLib/src/xmc4_scu.c **** 
 867:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 1569              	 .loc 1 867 0
 1570 000a 032B     	 cmp r3,#3
 1571 000c 02D1     	 bne .L155
 868:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 869:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 1572              	 .loc 1 869 0
 1573 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 1574              	.LVL105:
 1575 0012 0BE0     	 b .L159
 1576              	.L155:
 870:../Libraries/XMCLib/src/xmc4_scu.c ****     
 871:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 872:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 873:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 874:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 1577              	 .loc 1 874 0
 1578 0014 33B9     	 cbnz r3,.L157
 1579              	.LBB44:
 1580              	.LBB45:
 1581              	 .loc 2 2567 0
 1582 0016 0B4A     	 ldr r2,.L160+4
 1583 0018 2369     	 ldr r3,[r4,#16]
 1584 001a 1068     	 ldr r0,[r2]
 1585 001c 03F00103 	 and r3,r3,#1
 1586 0020 9840     	 lsls r0,r0,r3
 1587              	.LVL106:
 1588              	.LBE45:
 1589              	.LBE44:
 1590 0022 10BD     	 pop {r4,pc}
 1591              	.LVL107:
 1592              	.L157:
 875:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 876:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 877:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 878:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 1593              	 .loc 1 878 0
 1594 0024 022B     	 cmp r3,#2
 1595 0026 08D1     	 bne .L158
 879:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 880:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 1596              	 .loc 1 880 0
 1597 0028 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbPllClockFrequency
 1598              	.LVL108:
 1599              	.L159:
 881:../Libraries/XMCLib/src/xmc4_scu.c ****     
 882:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 1600              	 .loc 1 882 0
 1601 002c A36A     	 ldr r3,[r4,#40]
 1602 002e C3F30843 	 ubfx r3,r3,#16,#9
 883:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 1603              	 .loc 1 883 0
 1604 0032 0133     	 adds r3,r3,#1
 882:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 1605              	 .loc 1 882 0
 1606 0034 B0FBF3F0 	 udiv r0,r0,r3
 1607              	.LVL109:
 1608 0038 10BD     	 pop {r4,pc}
 1609              	.LVL110:
 1610              	.L158:
 862:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;
 1611              	 .loc 1 862 0
 1612 003a 0020     	 movs r0,#0
 1613              	.LVL111:
 884:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 885:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 886:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 887:../Libraries/XMCLib/src/xmc4_scu.c **** 
 888:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 889:../Libraries/XMCLib/src/xmc4_scu.c **** 
 890:../Libraries/XMCLib/src/xmc4_scu.c ****   return (frequency);
 891:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1614              	 .loc 1 891 0
 1615 003c 10BD     	 pop {r4,pc}
 1616              	.L161:
 1617 003e 00BF     	 .align 2
 1618              	.L160:
 1619 0040 00460050 	 .word 1342195200
 1620 0044 00000000 	 .word SystemCoreClock
 1621              	 .cfi_endproc
 1622              	.LFE220:
 1624              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 1625              	 .align 1
 1626              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1627              	 .thumb
 1628              	 .thumb_func
 1630              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 1631              	.LFB221:
 892:../Libraries/XMCLib/src/xmc4_scu.c **** 
 893:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 894:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 895:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 896:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 897:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1632              	 .loc 1 897 0
 1633              	 .cfi_startproc
 1634              	 
 1635              	 
 1636              	 
 898:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 899:../Libraries/XMCLib/src/xmc4_scu.c ****          ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 1637              	 .loc 1 899 0
 1638 0000 034B     	 ldr r3,.L163
 898:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 1639              	 .loc 1 898 0
 1640 0002 044A     	 ldr r2,.L163+4
 1641              	 .loc 1 899 0
 1642 0004 5B69     	 ldr r3,[r3,#20]
 898:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 1643              	 .loc 1 898 0
 1644 0006 1068     	 ldr r0,[r2]
 1645 0008 03F00103 	 and r3,r3,#1
 900:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1646              	 .loc 1 900 0
 1647 000c D840     	 lsrs r0,r0,r3
 1648 000e 7047     	 bx lr
 1649              	.L164:
 1650              	 .align 2
 1651              	.L163:
 1652 0010 00460050 	 .word 1342195200
 1653 0014 00000000 	 .word SystemCoreClock
 1654              	 .cfi_endproc
 1655              	.LFE221:
 1657              	 .section .text.XMC_SCU_CLOCK_SetSystemClockSource,"ax",%progbits
 1658              	 .align 1
 1659              	 .global XMC_SCU_CLOCK_SetSystemClockSource
 1660              	 .thumb
 1661              	 .thumb_func
 1663              	XMC_SCU_CLOCK_SetSystemClockSource:
 1664              	.LFB222:
 901:../Libraries/XMCLib/src/xmc4_scu.c **** 
 902:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fSYS */
 903:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
 904:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1665              	 .loc 1 904 0
 1666              	 .cfi_startproc
 1667              	 
 1668              	 
 1669              	 
 1670              	.LVL112:
 905:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 1671              	 .loc 1 905 0
 1672 0000 034A     	 ldr r2,.L166
 1673 0002 D368     	 ldr r3,[r2,#12]
 1674 0004 23F48033 	 bic r3,r3,#65536
 1675 0008 1843     	 orrs r0,r0,r3
 1676              	.LVL113:
 1677 000a D060     	 str r0,[r2,#12]
 1678 000c 7047     	 bx lr
 1679              	.L167:
 1680 000e 00BF     	 .align 2
 1681              	.L166:
 1682 0010 00460050 	 .word 1342195200
 1683              	 .cfi_endproc
 1684              	.LFE222:
 1686              	 .section .text.XMC_SCU_CLOCK_SetUsbClockSource,"ax",%progbits
 1687              	 .align 1
 1688              	 .global XMC_SCU_CLOCK_SetUsbClockSource
 1689              	 .thumb
 1690              	 .thumb_func
 1692              	XMC_SCU_CLOCK_SetUsbClockSource:
 1693              	.LFB223:
 906:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 907:../Libraries/XMCLib/src/xmc4_scu.c **** }
 908:../Libraries/XMCLib/src/xmc4_scu.c **** 
 909:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fUSB */
 910:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
 911:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1694              	 .loc 1 911 0
 1695              	 .cfi_startproc
 1696              	 
 1697              	 
 1698              	 
 1699              	.LVL114:
 912:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 1700              	 .loc 1 912 0
 1701 0000 034A     	 ldr r2,.L169
 1702 0002 9369     	 ldr r3,[r2,#24]
 1703 0004 23F48033 	 bic r3,r3,#65536
 1704 0008 1843     	 orrs r0,r0,r3
 1705              	.LVL115:
 1706 000a 9061     	 str r0,[r2,#24]
 1707 000c 7047     	 bx lr
 1708              	.L170:
 1709 000e 00BF     	 .align 2
 1710              	.L169:
 1711 0010 00460050 	 .word 1342195200
 1712              	 .cfi_endproc
 1713              	.LFE223:
 1715              	 .section .text.XMC_SCU_CLOCK_SetWdtClockSource,"ax",%progbits
 1716              	 .align 1
 1717              	 .global XMC_SCU_CLOCK_SetWdtClockSource
 1718              	 .thumb
 1719              	 .thumb_func
 1721              	XMC_SCU_CLOCK_SetWdtClockSource:
 1722              	.LFB224:
 913:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 914:../Libraries/XMCLib/src/xmc4_scu.c **** }
 915:../Libraries/XMCLib/src/xmc4_scu.c **** 
 916:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fWDT */
 917:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
 918:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1723              	 .loc 1 918 0
 1724              	 .cfi_startproc
 1725              	 
 1726              	 
 1727              	 
 1728              	.LVL116:
 919:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 1729              	 .loc 1 919 0
 1730 0000 034A     	 ldr r2,.L172
 1731 0002 536A     	 ldr r3,[r2,#36]
 1732 0004 23F44033 	 bic r3,r3,#196608
 1733 0008 1843     	 orrs r0,r0,r3
 1734              	.LVL117:
 1735 000a 5062     	 str r0,[r2,#36]
 1736 000c 7047     	 bx lr
 1737              	.L173:
 1738 000e 00BF     	 .align 2
 1739              	.L172:
 1740 0010 00460050 	 .word 1342195200
 1741              	 .cfi_endproc
 1742              	.LFE224:
 1744              	 .section .text.XMC_SCU_CLOCK_SetExternalOutputClockSource,"ax",%progbits
 1745              	 .align 1
 1746              	 .global XMC_SCU_CLOCK_SetExternalOutputClockSource
 1747              	 .thumb
 1748              	 .thumb_func
 1750              	XMC_SCU_CLOCK_SetExternalOutputClockSource:
 1751              	.LFB225:
 920:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 921:../Libraries/XMCLib/src/xmc4_scu.c **** }
 922:../Libraries/XMCLib/src/xmc4_scu.c **** 
 923:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fEXT */
 924:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
 925:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1752              	 .loc 1 925 0
 1753              	 .cfi_startproc
 1754              	 
 1755              	 
 1756              	 
 1757              	.LVL118:
 926:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 1758              	 .loc 1 926 0
 1759 0000 034A     	 ldr r2,.L175
 1760 0002 936A     	 ldr r3,[r2,#40]
 1761 0004 23F00303 	 bic r3,r3,#3
 1762 0008 1843     	 orrs r0,r0,r3
 1763              	.LVL119:
 1764 000a 9062     	 str r0,[r2,#40]
 1765 000c 7047     	 bx lr
 1766              	.L176:
 1767 000e 00BF     	 .align 2
 1768              	.L175:
 1769 0010 00460050 	 .word 1342195200
 1770              	 .cfi_endproc
 1771              	.LFE225:
 1773              	 .section .text.XMC_SCU_CLOCK_SetSystemPllClockSource,"ax",%progbits
 1774              	 .align 1
 1775              	 .global XMC_SCU_CLOCK_SetSystemPllClockSource
 1776              	 .thumb
 1777              	 .thumb_func
 1779              	XMC_SCU_CLOCK_SetSystemPllClockSource:
 1780              	.LFB226:
 927:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 928:../Libraries/XMCLib/src/xmc4_scu.c **** }
 929:../Libraries/XMCLib/src/xmc4_scu.c **** 
 930:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fPLL */
 931:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
 932:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1781              	 .loc 1 932 0
 1782              	 .cfi_startproc
 1783              	 
 1784              	 
 1785              	 
 1786              	.LVL120:
 1787 0000 064A     	 ldr r2,.L181
 1788              	.LBB48:
 1789              	.LBB49:
 933:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Check input clock */
 934:../Libraries/XMCLib/src/xmc4_scu.c ****   if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 935:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 936:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 1790              	 .loc 1 936 0
 1791 0002 D368     	 ldr r3,[r2,#12]
 1792              	.LBE49:
 1793              	.LBE48:
 934:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 1794              	 .loc 1 934 0
 1795 0004 20B9     	 cbnz r0,.L178
 1796              	.LVL121:
 1797              	.LBB51:
 1798              	.LBB50:
 1799              	 .loc 1 936 0
 1800 0006 23F48073 	 bic r3,r3,#256
 1801 000a 23F00103 	 bic r3,r3,#1
 1802 000e 03E0     	 b .L180
 1803              	.LVL122:
 1804              	.L178:
 1805              	.LBE50:
 1806              	.LBE51:
 937:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 938:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 939:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 940:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 1807              	 .loc 1 940 0
 1808 0010 43F48073 	 orr r3,r3,#256
 1809 0014 43F00103 	 orr r3,r3,#1
 1810              	.L180:
 1811 0018 D360     	 str r3,[r2,#12]
 1812 001a 7047     	 bx lr
 1813              	.L182:
 1814              	 .align 2
 1815              	.L181:
 1816 001c 10470050 	 .word 1342195472
 1817              	 .cfi_endproc
 1818              	.LFE226:
 1820              	 .section .text.XMC_SCU_HIB_SetRtcClockSource,"ax",%progbits
 1821              	 .align 1
 1822              	 .global XMC_SCU_HIB_SetRtcClockSource
 1823              	 .thumb
 1824              	 .thumb_func
 1826              	XMC_SCU_HIB_SetRtcClockSource:
 1827              	.LFB227:
 941:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 942:../Libraries/XMCLib/src/xmc4_scu.c **** }
 943:../Libraries/XMCLib/src/xmc4_scu.c **** 
 944:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fRTC */
 945:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
 946:../Libraries/XMCLib/src/xmc4_scu.c **** { 
 1828              	 .loc 1 946 0
 1829              	 .cfi_startproc
 1830              	 
 1831              	 
 1832              	 
 1833              	.LVL123:
 1834              	.L184:
 947:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of HDCR register in hibernate domain is completed */
 948:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 1835              	 .loc 1 948 0 discriminator 1
 1836 0000 054B     	 ldr r3,.L186
 1837 0002 D3F8C430 	 ldr r3,[r3,#196]
 1838 0006 1B07     	 lsls r3,r3,#28
 1839 0008 FAD4     	 bmi .L184
 949:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 950:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 951:../Libraries/XMCLib/src/xmc4_scu.c **** 
 952:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 1840              	 .loc 1 952 0
 1841 000a 044A     	 ldr r2,.L186+4
 1842 000c D368     	 ldr r3,[r2,#12]
 1843 000e 23F04003 	 bic r3,r3,#64
 1844 0012 1843     	 orrs r0,r0,r3
 1845              	.LVL124:
 1846 0014 D060     	 str r0,[r2,#12]
 1847 0016 7047     	 bx lr
 1848              	.L187:
 1849              	 .align 2
 1850              	.L186:
 1851 0018 00400050 	 .word 1342193664
 1852 001c 00430050 	 .word 1342194432
 1853              	 .cfi_endproc
 1854              	.LFE227:
 1856              	 .section .text.XMC_SCU_HIB_SetStandbyClockSource,"ax",%progbits
 1857              	 .align 1
 1858              	 .global XMC_SCU_HIB_SetStandbyClockSource
 1859              	 .thumb
 1860              	 .thumb_func
 1862              	XMC_SCU_HIB_SetStandbyClockSource:
 1863              	.LFB228:
 953:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 954:../Libraries/XMCLib/src/xmc4_scu.c **** }
 955:../Libraries/XMCLib/src/xmc4_scu.c **** 
 956:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fSTDBY */
 957:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
 958:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1864              	 .loc 1 958 0
 1865              	 .cfi_startproc
 1866              	 
 1867              	 
 1868              	 
 1869              	.LVL125:
 1870              	.L189:
 959:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 1871              	 .loc 1 959 0 discriminator 1
 1872 0000 054B     	 ldr r3,.L191
 1873 0002 D3F8C430 	 ldr r3,[r3,#196]
 1874 0006 1B07     	 lsls r3,r3,#28
 1875 0008 FAD4     	 bmi .L189
 960:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 961:../Libraries/XMCLib/src/xmc4_scu.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 962:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 963:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 1876              	 .loc 1 963 0
 1877 000a 044A     	 ldr r2,.L191+4
 1878 000c D368     	 ldr r3,[r2,#12]
 1879 000e 23F08003 	 bic r3,r3,#128
 1880 0012 1843     	 orrs r0,r0,r3
 1881              	.LVL126:
 1882 0014 D060     	 str r0,[r2,#12]
 1883 0016 7047     	 bx lr
 1884              	.L192:
 1885              	 .align 2
 1886              	.L191:
 1887 0018 00400050 	 .word 1342193664
 1888 001c 00430050 	 .word 1342194432
 1889              	 .cfi_endproc
 1890              	.LFE228:
 1892              	 .section .text.XMC_SCU_CLOCK_SetSystemClockDivider,"ax",%progbits
 1893              	 .align 1
 1894              	 .global XMC_SCU_CLOCK_SetSystemClockDivider
 1895              	 .thumb
 1896              	 .thumb_func
 1898              	XMC_SCU_CLOCK_SetSystemClockDivider:
 1899              	.LFB229:
 964:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 965:../Libraries/XMCLib/src/xmc4_scu.c **** }
 966:../Libraries/XMCLib/src/xmc4_scu.c **** 
 967:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fsys and its parent */
 968:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
 969:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1900              	 .loc 1 969 0
 1901              	 .cfi_startproc
 1902              	 
 1903              	 
 1904              	 
 1905              	.LVL127:
 970:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
 971:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );
 972:../Libraries/XMCLib/src/xmc4_scu.c **** 
 973:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 1906              	 .loc 1 973 0
 1907 0000 034A     	 ldr r2,.L194
 1908 0002 D368     	 ldr r3,[r2,#12]
 974:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 1909              	 .loc 1 974 0
 1910 0004 0138     	 subs r0,r0,#1
 1911              	.LVL128:
 973:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 1912              	 .loc 1 973 0
 1913 0006 23F0FF03 	 bic r3,r3,#255
 1914 000a 0343     	 orrs r3,r3,r0
 1915 000c D360     	 str r3,[r2,#12]
 1916 000e 7047     	 bx lr
 1917              	.L195:
 1918              	 .align 2
 1919              	.L194:
 1920 0010 00460050 	 .word 1342195200
 1921              	 .cfi_endproc
 1922              	.LFE229:
 1924              	 .section .text.XMC_SCU_CLOCK_SetCcuClockDivider,"ax",%progbits
 1925              	 .align 1
 1926              	 .global XMC_SCU_CLOCK_SetCcuClockDivider
 1927              	 .thumb
 1928              	 .thumb_func
 1930              	XMC_SCU_CLOCK_SetCcuClockDivider:
 1931              	.LFB230:
 975:../Libraries/XMCLib/src/xmc4_scu.c **** }
 976:../Libraries/XMCLib/src/xmc4_scu.c **** 
 977:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fccu and its parent */
 978:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
 979:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1932              	 .loc 1 979 0
 1933              	 .cfi_startproc
 1934              	 
 1935              	 
 1936              	 
 1937              	.LVL129:
 980:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );
 981:../Libraries/XMCLib/src/xmc4_scu.c **** 
 982:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 1938              	 .loc 1 982 0
 1939 0000 034A     	 ldr r2,.L197
 1940 0002 136A     	 ldr r3,[r2,#32]
 983:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 1941              	 .loc 1 983 0
 1942 0004 0138     	 subs r0,r0,#1
 1943              	.LVL130:
 982:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 1944              	 .loc 1 982 0
 1945 0006 23F00103 	 bic r3,r3,#1
 1946 000a 0343     	 orrs r3,r3,r0
 1947 000c 1362     	 str r3,[r2,#32]
 1948 000e 7047     	 bx lr
 1949              	.L198:
 1950              	 .align 2
 1951              	.L197:
 1952 0010 00460050 	 .word 1342195200
 1953              	 .cfi_endproc
 1954              	.LFE230:
 1956              	 .section .text.XMC_SCU_CLOCK_SetCpuClockDivider,"ax",%progbits
 1957              	 .align 1
 1958              	 .global XMC_SCU_CLOCK_SetCpuClockDivider
 1959              	 .thumb
 1960              	 .thumb_func
 1962              	XMC_SCU_CLOCK_SetCpuClockDivider:
 1963              	.LFB231:
 984:../Libraries/XMCLib/src/xmc4_scu.c **** }
 985:../Libraries/XMCLib/src/xmc4_scu.c **** 
 986:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fcpu and its parent */
 987:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
 988:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1964              	 .loc 1 988 0
 1965              	 .cfi_startproc
 1966              	 
 1967              	 
 1968              	 
 1969              	.LVL131:
 989:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );
 990:../Libraries/XMCLib/src/xmc4_scu.c **** 
 991:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 1970              	 .loc 1 991 0
 1971 0000 034A     	 ldr r2,.L200
 1972 0002 1369     	 ldr r3,[r2,#16]
 992:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 1973              	 .loc 1 992 0
 1974 0004 0138     	 subs r0,r0,#1
 1975              	.LVL132:
 991:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 1976              	 .loc 1 991 0
 1977 0006 23F00103 	 bic r3,r3,#1
 1978 000a 0343     	 orrs r3,r3,r0
 1979 000c 1361     	 str r3,[r2,#16]
 1980 000e 7047     	 bx lr
 1981              	.L201:
 1982              	 .align 2
 1983              	.L200:
 1984 0010 00460050 	 .word 1342195200
 1985              	 .cfi_endproc
 1986              	.LFE231:
 1988              	 .section .text.XMC_SCU_CLOCK_SetPeripheralClockDivider,"ax",%progbits
 1989              	 .align 1
 1990              	 .global XMC_SCU_CLOCK_SetPeripheralClockDivider
 1991              	 .thumb
 1992              	 .thumb_func
 1994              	XMC_SCU_CLOCK_SetPeripheralClockDivider:
 1995              	.LFB232:
 993:../Libraries/XMCLib/src/xmc4_scu.c **** }
 994:../Libraries/XMCLib/src/xmc4_scu.c **** 
 995:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fperiph and its parent */
 996:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
 997:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1996              	 .loc 1 997 0
 1997              	 .cfi_startproc
 1998              	 
 1999              	 
 2000              	 
 2001              	.LVL133:
 998:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) 
 999:../Libraries/XMCLib/src/xmc4_scu.c **** 
1000:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 2002              	 .loc 1 1000 0
 2003 0000 034A     	 ldr r2,.L203
 2004 0002 5369     	 ldr r3,[r2,#20]
1001:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 2005              	 .loc 1 1001 0
 2006 0004 0138     	 subs r0,r0,#1
 2007              	.LVL134:
1000:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 2008              	 .loc 1 1000 0
 2009 0006 23F00103 	 bic r3,r3,#1
 2010 000a 0343     	 orrs r3,r3,r0
 2011 000c 5361     	 str r3,[r2,#20]
 2012 000e 7047     	 bx lr
 2013              	.L204:
 2014              	 .align 2
 2015              	.L203:
 2016 0010 00460050 	 .word 1342195200
 2017              	 .cfi_endproc
 2018              	.LFE232:
 2020              	 .section .text.XMC_SCU_CLOCK_SetUsbClockDivider,"ax",%progbits
 2021              	 .align 1
 2022              	 .global XMC_SCU_CLOCK_SetUsbClockDivider
 2023              	 .thumb
 2024              	 .thumb_func
 2026              	XMC_SCU_CLOCK_SetUsbClockDivider:
 2027              	.LFB233:
1002:../Libraries/XMCLib/src/xmc4_scu.c **** }
1003:../Libraries/XMCLib/src/xmc4_scu.c **** 
1004:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fsdmmc and its parent */
1005:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
1006:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2028              	 .loc 1 1006 0
 2029              	 .cfi_startproc
 2030              	 
 2031              	 
 2032              	 
 2033              	.LVL135:
1007:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
1008:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );
1009:../Libraries/XMCLib/src/xmc4_scu.c **** 
1010:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 2034              	 .loc 1 1010 0
 2035 0000 034A     	 ldr r2,.L206
 2036 0002 9369     	 ldr r3,[r2,#24]
1011:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 2037              	 .loc 1 1011 0
 2038 0004 0138     	 subs r0,r0,#1
 2039              	.LVL136:
1010:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 2040              	 .loc 1 1010 0
 2041 0006 23F00703 	 bic r3,r3,#7
 2042 000a 0343     	 orrs r3,r3,r0
 2043 000c 9361     	 str r3,[r2,#24]
 2044 000e 7047     	 bx lr
 2045              	.L207:
 2046              	 .align 2
 2047              	.L206:
 2048 0010 00460050 	 .word 1342195200
 2049              	 .cfi_endproc
 2050              	.LFE233:
 2052              	 .section .text.XMC_SCU_CLOCK_SetEbuClockDivider,"ax",%progbits
 2053              	 .align 1
 2054              	 .global XMC_SCU_CLOCK_SetEbuClockDivider
 2055              	 .thumb
 2056              	 .thumb_func
 2058              	XMC_SCU_CLOCK_SetEbuClockDivider:
 2059              	.LFB234:
1012:../Libraries/XMCLib/src/xmc4_scu.c **** }
1013:../Libraries/XMCLib/src/xmc4_scu.c **** 
1014:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(EBU)
1015:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between febu and its parent */
1016:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
1017:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2060              	 .loc 1 1017 0
 2061              	 .cfi_startproc
 2062              	 
 2063              	 
 2064              	 
 2065              	.LVL137:
1018:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
1019:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );
1020:../Libraries/XMCLib/src/xmc4_scu.c **** 
1021:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 2066              	 .loc 1 1021 0
 2067 0000 034A     	 ldr r2,.L209
 2068 0002 D369     	 ldr r3,[r2,#28]
1022:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 2069              	 .loc 1 1022 0
 2070 0004 0138     	 subs r0,r0,#1
 2071              	.LVL138:
1021:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 2072              	 .loc 1 1021 0
 2073 0006 23F03F03 	 bic r3,r3,#63
 2074 000a 0343     	 orrs r3,r3,r0
 2075 000c D361     	 str r3,[r2,#28]
 2076 000e 7047     	 bx lr
 2077              	.L210:
 2078              	 .align 2
 2079              	.L209:
 2080 0010 00460050 	 .word 1342195200
 2081              	 .cfi_endproc
 2082              	.LFE234:
 2084              	 .section .text.XMC_SCU_CLOCK_SetWdtClockDivider,"ax",%progbits
 2085              	 .align 1
 2086              	 .global XMC_SCU_CLOCK_SetWdtClockDivider
 2087              	 .thumb
 2088              	 .thumb_func
 2090              	XMC_SCU_CLOCK_SetWdtClockDivider:
 2091              	.LFB235:
1023:../Libraries/XMCLib/src/xmc4_scu.c **** }
1024:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1025:../Libraries/XMCLib/src/xmc4_scu.c **** 
1026:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fwdt and its parent */
1027:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
1028:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2092              	 .loc 1 1028 0
 2093              	 .cfi_startproc
 2094              	 
 2095              	 
 2096              	 
 2097              	.LVL139:
1029:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
1030:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );
1031:../Libraries/XMCLib/src/xmc4_scu.c **** 
1032:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 2098              	 .loc 1 1032 0
 2099 0000 034A     	 ldr r2,.L212
 2100 0002 536A     	 ldr r3,[r2,#36]
1033:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 2101              	 .loc 1 1033 0
 2102 0004 0138     	 subs r0,r0,#1
 2103              	.LVL140:
1032:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 2104              	 .loc 1 1032 0
 2105 0006 23F0FF03 	 bic r3,r3,#255
 2106 000a 0343     	 orrs r3,r3,r0
 2107 000c 5362     	 str r3,[r2,#36]
 2108 000e 7047     	 bx lr
 2109              	.L213:
 2110              	 .align 2
 2111              	.L212:
 2112 0010 00460050 	 .word 1342195200
 2113              	 .cfi_endproc
 2114              	.LFE235:
 2116              	 .section .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider,"ax",%progbits
 2117              	 .align 1
 2118              	 .global XMC_SCU_CLOCK_SetExternalOutputClockDivider
 2119              	 .thumb
 2120              	 .thumb_func
 2122              	XMC_SCU_CLOCK_SetExternalOutputClockDivider:
 2123              	.LFB236:
1034:../Libraries/XMCLib/src/xmc4_scu.c **** }
1035:../Libraries/XMCLib/src/xmc4_scu.c **** 
1036:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fext and its parent */
1037:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
1038:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2124              	 .loc 1 1038 0
 2125              	 .cfi_startproc
 2126              	 
 2127              	 
 2128              	 
 2129              	.LVL141:
1039:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
1040:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );
1041:../Libraries/XMCLib/src/xmc4_scu.c **** 
1042:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 2130              	 .loc 1 1042 0
 2131 0000 054A     	 ldr r2,.L215
 2132 0002 936A     	 ldr r3,[r2,#40]
 2133 0004 23F0FF73 	 bic r3,r3,#33423360
1043:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 2134              	 .loc 1 1043 0
 2135 0008 0138     	 subs r0,r0,#1
 2136              	.LVL142:
1042:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 2137              	 .loc 1 1042 0
 2138 000a 23F48033 	 bic r3,r3,#65536
 2139 000e 43EA0043 	 orr r3,r3,r0,lsl#16
 2140 0012 9362     	 str r3,[r2,#40]
 2141 0014 7047     	 bx lr
 2142              	.L216:
 2143 0016 00BF     	 .align 2
 2144              	.L215:
 2145 0018 00460050 	 .word 1342195200
 2146              	 .cfi_endproc
 2147              	.LFE236:
 2149              	 .section .text.XMC_SCU_CLOCK_EnableClock,"ax",%progbits
 2150              	 .align 1
 2151              	 .global XMC_SCU_CLOCK_EnableClock
 2152              	 .thumb
 2153              	 .thumb_func
 2155              	XMC_SCU_CLOCK_EnableClock:
 2156              	.LFB237:
1044:../Libraries/XMCLib/src/xmc4_scu.c **** }
1045:../Libraries/XMCLib/src/xmc4_scu.c **** 
1046:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(ECAT0)
1047:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
1048:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
1049:../Libraries/XMCLib/src/xmc4_scu.c **** {
1050:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
1051:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
1052:../Libraries/XMCLib/src/xmc4_scu.c **** }
1053:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1054:../Libraries/XMCLib/src/xmc4_scu.c **** 
1055:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable a given module clock */
1056:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
1057:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2157              	 .loc 1 1057 0
 2158              	 .cfi_startproc
 2159              	 
 2160              	 
 2161              	 
 2162              	.LVL143:
1058:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CLKSET = ((uint32_t)clock);
 2163              	 .loc 1 1058 0
 2164 0000 014B     	 ldr r3,.L218
 2165 0002 5860     	 str r0,[r3,#4]
 2166 0004 7047     	 bx lr
 2167              	.L219:
 2168 0006 00BF     	 .align 2
 2169              	.L218:
 2170 0008 00460050 	 .word 1342195200
 2171              	 .cfi_endproc
 2172              	.LFE237:
 2174              	 .section .text.XMC_SCU_CLOCK_DisableClock,"ax",%progbits
 2175              	 .align 1
 2176              	 .global XMC_SCU_CLOCK_DisableClock
 2177              	 .thumb
 2178              	 .thumb_func
 2180              	XMC_SCU_CLOCK_DisableClock:
 2181              	.LFB238:
1059:../Libraries/XMCLib/src/xmc4_scu.c **** }
1060:../Libraries/XMCLib/src/xmc4_scu.c **** 
1061:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable a given module clock */
1062:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
1063:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2182              	 .loc 1 1063 0
 2183              	 .cfi_startproc
 2184              	 
 2185              	 
 2186              	 
 2187              	.LVL144:
1064:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CLKCLR = ((uint32_t)clock);
 2188              	 .loc 1 1064 0
 2189 0000 014B     	 ldr r3,.L221
 2190 0002 9860     	 str r0,[r3,#8]
 2191 0004 7047     	 bx lr
 2192              	.L222:
 2193 0006 00BF     	 .align 2
 2194              	.L221:
 2195 0008 00460050 	 .word 1342195200
 2196              	 .cfi_endproc
 2197              	.LFE238:
 2199              	 .section .text.XMC_SCU_CLOCK_IsClockEnabled,"ax",%progbits
 2200              	 .align 1
 2201              	 .global XMC_SCU_CLOCK_IsClockEnabled
 2202              	 .thumb
 2203              	 .thumb_func
 2205              	XMC_SCU_CLOCK_IsClockEnabled:
 2206              	.LFB239:
1065:../Libraries/XMCLib/src/xmc4_scu.c **** }
1066:../Libraries/XMCLib/src/xmc4_scu.c **** 
1067:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if module clock of the given peripheral is enabled */
1068:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
1069:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2207              	 .loc 1 1069 0
 2208              	 .cfi_startproc
 2209              	 
 2210              	 
 2211              	 
 2212              	.LVL145:
1070:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 2213              	 .loc 1 1070 0
 2214 0000 034B     	 ldr r3,.L224
 2215 0002 1B68     	 ldr r3,[r3]
 2216 0004 1842     	 tst r0,r3
1071:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2217              	 .loc 1 1071 0
 2218 0006 14BF     	 ite ne
 2219 0008 0120     	 movne r0,#1
 2220              	.LVL146:
 2221 000a 0020     	 moveq r0,#0
 2222 000c 7047     	 bx lr
 2223              	.L225:
 2224 000e 00BF     	 .align 2
 2225              	.L224:
 2226 0010 00460050 	 .word 1342195200
 2227              	 .cfi_endproc
 2228              	.LFE239:
 2230              	 .section .text.XMC_SCU_POWER_GetEVR13Voltage,"ax",%progbits
 2231              	 .align 1
 2232              	 .global XMC_SCU_POWER_GetEVR13Voltage
 2233              	 .thumb
 2234              	 .thumb_func
 2236              	XMC_SCU_POWER_GetEVR13Voltage:
 2237              	.LFB240:
1072:../Libraries/XMCLib/src/xmc4_scu.c **** 
1073:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(CLOCK_GATING_SUPPORTED)
1074:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to gate a given module clock */
1075:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1076:../Libraries/XMCLib/src/xmc4_scu.c **** {
1077:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
1078:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
1079:../Libraries/XMCLib/src/xmc4_scu.c **** 
1080:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
1081:../Libraries/XMCLib/src/xmc4_scu.c **** }
1082:../Libraries/XMCLib/src/xmc4_scu.c **** 
1083:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to ungate a given module clock */
1084:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1085:../Libraries/XMCLib/src/xmc4_scu.c **** {
1086:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
1087:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
1088:../Libraries/XMCLib/src/xmc4_scu.c **** 
1089:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
1090:../Libraries/XMCLib/src/xmc4_scu.c **** }
1091:../Libraries/XMCLib/src/xmc4_scu.c **** 
1092:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to ungate a given module clock */
1093:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1094:../Libraries/XMCLib/src/xmc4_scu.c **** {
1095:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
1096:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
1097:../Libraries/XMCLib/src/xmc4_scu.c **** 
1098:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
1099:../Libraries/XMCLib/src/xmc4_scu.c **** }
1100:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1101:../Libraries/XMCLib/src/xmc4_scu.c **** 
1102:../Libraries/XMCLib/src/xmc4_scu.c **** float XMC_SCU_POWER_GetEVR13Voltage(void)
1103:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2238              	 .loc 1 1103 0
 2239              	 .cfi_startproc
 2240              	 
 2241              	 
 2242              	 
1104:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 2243              	 .loc 1 1104 0
 2244 0000 064B     	 ldr r3,.L227
1105:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2245              	 .loc 1 1105 0
 2246 0002 9FED077A 	 flds s14,.L227+4
1104:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 2247              	 .loc 1 1104 0
 2248 0006 5B69     	 ldr r3,[r3,#20]
 2249 0008 DBB2     	 uxtb r3,r3
 2250 000a 07EE903A 	 fmsr s15,r3
 2251 000e F8EEE77A 	 fsitos s15,s15
 2252              	 .loc 1 1105 0
 2253 0012 67EE877A 	 fmuls s15,s15,s14
 2254 0016 17EE900A 	 fmrs r0,s15
 2255 001a 7047     	 bx lr
 2256              	.L228:
 2257              	 .align 2
 2258              	.L227:
 2259 001c 00420050 	 .word 1342194176
 2260 0020 ED0DBE3B 	 .word 1002311149
 2261              	 .cfi_endproc
 2262              	.LFE240:
 2264              	 .section .text.XMC_SCU_POWER_GetEVR33Voltage,"ax",%progbits
 2265              	 .align 1
 2266              	 .global XMC_SCU_POWER_GetEVR33Voltage
 2267              	 .thumb
 2268              	 .thumb_func
 2270              	XMC_SCU_POWER_GetEVR33Voltage:
 2271              	.LFB241:
1106:../Libraries/XMCLib/src/xmc4_scu.c **** 
1107:../Libraries/XMCLib/src/xmc4_scu.c **** float XMC_SCU_POWER_GetEVR33Voltage(void)
1108:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2272              	 .loc 1 1108 0
 2273              	 .cfi_startproc
 2274              	 
 2275              	 
 2276              	 
1109:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VAD
 2277              	 .loc 1 1109 0
 2278 0000 074B     	 ldr r3,.L230
1110:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2279              	 .loc 1 1110 0
 2280 0002 9FED087A 	 flds s14,.L230+4
1109:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VAD
 2281              	 .loc 1 1109 0
 2282 0006 5B69     	 ldr r3,[r3,#20]
 2283 0008 C3F30723 	 ubfx r3,r3,#8,#8
 2284 000c 07EE903A 	 fmsr s15,r3
 2285 0010 F8EEE77A 	 fsitos s15,s15
 2286              	 .loc 1 1110 0
 2287 0014 67EE877A 	 fmuls s15,s15,s14
 2288 0018 17EE900A 	 fmrs r0,s15
 2289 001c 7047     	 bx lr
 2290              	.L231:
 2291 001e 00BF     	 .align 2
 2292              	.L230:
 2293 0020 00420050 	 .word 1342194176
 2294 0024 EC51B83C 	 .word 1018712556
 2295              	 .cfi_endproc
 2296              	.LFE241:
 2298              	 .section .text.XMC_SCU_CLOCK_EnableUsbPll,"ax",%progbits
 2299              	 .align 1
 2300              	 .global XMC_SCU_CLOCK_EnableUsbPll
 2301              	 .thumb
 2302              	 .thumb_func
 2304              	XMC_SCU_CLOCK_EnableUsbPll:
 2305              	.LFB242:
1111:../Libraries/XMCLib/src/xmc4_scu.c **** 
1112:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable USB PLL for USB clock */
1113:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableUsbPll(void)
1114:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2306              	 .loc 1 1114 0
 2307              	 .cfi_startproc
 2308              	 
 2309              	 
 2310              	 
1115:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 2311              	 .loc 1 1115 0
 2312 0000 034A     	 ldr r2,.L233
 2313 0002 5369     	 ldr r3,[r2,#20]
 2314 0004 23F48033 	 bic r3,r3,#65536
 2315 0008 23F00203 	 bic r3,r3,#2
 2316 000c 5361     	 str r3,[r2,#20]
 2317 000e 7047     	 bx lr
 2318              	.L234:
 2319              	 .align 2
 2320              	.L233:
 2321 0010 10470050 	 .word 1342195472
 2322              	 .cfi_endproc
 2323              	.LFE242:
 2325              	 .section .text.XMC_SCU_CLOCK_DisableUsbPll,"ax",%progbits
 2326              	 .align 1
 2327              	 .global XMC_SCU_CLOCK_DisableUsbPll
 2328              	 .thumb
 2329              	 .thumb_func
 2331              	XMC_SCU_CLOCK_DisableUsbPll:
 2332              	.LFB243:
1116:../Libraries/XMCLib/src/xmc4_scu.c **** }
1117:../Libraries/XMCLib/src/xmc4_scu.c **** 
1118:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable USB PLL for USB clock */
1119:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableUsbPll(void)
1120:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2333              	 .loc 1 1120 0
 2334              	 .cfi_startproc
 2335              	 
 2336              	 
 2337              	 
1121:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 2338              	 .loc 1 1121 0
 2339 0000 034A     	 ldr r2,.L236
 2340 0002 5369     	 ldr r3,[r2,#20]
 2341 0004 43F48033 	 orr r3,r3,#65536
 2342 0008 43F00203 	 orr r3,r3,#2
 2343 000c 5361     	 str r3,[r2,#20]
 2344 000e 7047     	 bx lr
 2345              	.L237:
 2346              	 .align 2
 2347              	.L236:
 2348 0010 10470050 	 .word 1342195472
 2349              	 .cfi_endproc
 2350              	.LFE243:
 2352              	 .section .text.XMC_SCU_CLOCK_StartUsbPll,"ax",%progbits
 2353              	 .align 1
 2354              	 .global XMC_SCU_CLOCK_StartUsbPll
 2355              	 .thumb
 2356              	 .thumb_func
 2358              	XMC_SCU_CLOCK_StartUsbPll:
 2359              	.LFB244:
1122:../Libraries/XMCLib/src/xmc4_scu.c **** }
1123:../Libraries/XMCLib/src/xmc4_scu.c **** 
1124:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure USB PLL */
1125:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
1126:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2360              	 .loc 1 1126 0
 2361              	 .cfi_startproc
 2362              	 
 2363              	 
 2364              	 
 2365              	.LVL147:
1127:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Go to bypass the USB PLL */
1128:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 2366              	 .loc 1 1128 0
 2367 0000 0F4B     	 ldr r3,.L242
 2368 0002 5A69     	 ldr r2,[r3,#20]
 2369 0004 42F00102 	 orr r2,r2,#1
 2370 0008 5A61     	 str r2,[r3,#20]
1129:../Libraries/XMCLib/src/xmc4_scu.c **** 
1130:../Libraries/XMCLib/src/xmc4_scu.c ****   /* disconnect Oscillator from USB PLL */
1131:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 2371              	 .loc 1 1131 0
 2372 000a 5A69     	 ldr r2,[r3,#20]
1132:../Libraries/XMCLib/src/xmc4_scu.c **** 
1133:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Setup Divider settings for USB PLL */
1134:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
1135:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 2373              	 .loc 1 1135 0
 2374 000c 0138     	 subs r0,r0,#1
 2375              	.LVL148:
1134:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 2376              	 .loc 1 1134 0
 2377 000e 0139     	 subs r1,r1,#1
 2378              	.LVL149:
 2379              	 .loc 1 1135 0
 2380 0010 0006     	 lsls r0,r0,#24
 2381              	.LVL150:
1131:../Libraries/XMCLib/src/xmc4_scu.c **** 
 2382              	 .loc 1 1131 0
 2383 0012 42F01002 	 orr r2,r2,#16
1134:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 2384              	 .loc 1 1134 0
 2385 0016 40EA0121 	 orr r1,r0,r1,lsl#8
 2386              	.LVL151:
1131:../Libraries/XMCLib/src/xmc4_scu.c **** 
 2387              	 .loc 1 1131 0
 2388 001a 5A61     	 str r2,[r3,#20]
1134:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 2389              	 .loc 1 1134 0
 2390 001c 5961     	 str r1,[r3,#20]
1136:../Libraries/XMCLib/src/xmc4_scu.c **** 
1137:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Set OSCDISCDIS */
1138:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 2391              	 .loc 1 1138 0
 2392 001e 5A69     	 ldr r2,[r3,#20]
 2393 0020 42F04002 	 orr r2,r2,#64
 2394 0024 5A61     	 str r2,[r3,#20]
1139:../Libraries/XMCLib/src/xmc4_scu.c **** 
1140:../Libraries/XMCLib/src/xmc4_scu.c ****   /* connect Oscillator to USB PLL */
1141:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 2395              	 .loc 1 1141 0
 2396 0026 5A69     	 ldr r2,[r3,#20]
 2397 0028 22F01002 	 bic r2,r2,#16
 2398 002c 5A61     	 str r2,[r3,#20]
1142:../Libraries/XMCLib/src/xmc4_scu.c **** 
1143:../Libraries/XMCLib/src/xmc4_scu.c ****   /* restart PLL Lock detection */
1144:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 2399              	 .loc 1 1144 0
 2400 002e 5A69     	 ldr r2,[r3,#20]
 2401 0030 42F48022 	 orr r2,r2,#262144
 2402 0034 5A61     	 str r2,[r3,#20]
 2403              	.L239:
1145:../Libraries/XMCLib/src/xmc4_scu.c **** 
1146:../Libraries/XMCLib/src/xmc4_scu.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 2404              	 .loc 1 1146 0 discriminator 1
 2405 0036 1A69     	 ldr r2,[r3,#16]
 2406 0038 5207     	 lsls r2,r2,#29
 2407 003a FCD5     	 bpl .L239
1147:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1148:../Libraries/XMCLib/src/xmc4_scu.c ****     /* wait for PLL Lock */
1149:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1150:../Libraries/XMCLib/src/xmc4_scu.c **** 
1151:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2408              	 .loc 1 1151 0
 2409 003c 7047     	 bx lr
 2410              	.L243:
 2411 003e 00BF     	 .align 2
 2412              	.L242:
 2413 0040 10470050 	 .word 1342195472
 2414              	 .cfi_endproc
 2415              	.LFE244:
 2417              	 .section .text.XMC_SCU_CLOCK_StopUsbPll,"ax",%progbits
 2418              	 .align 1
 2419              	 .global XMC_SCU_CLOCK_StopUsbPll
 2420              	 .thumb
 2421              	 .thumb_func
 2423              	XMC_SCU_CLOCK_StopUsbPll:
 2424              	.LFB245:
1152:../Libraries/XMCLib/src/xmc4_scu.c **** 
1153:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable USB PLL operation */
1154:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StopUsbPll(void)
1155:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2425              	 .loc 1 1155 0
 2426              	 .cfi_startproc
 2427              	 
 2428              	 
 2429              	 
1156:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 2430              	 .loc 1 1156 0
 2431 0000 014B     	 ldr r3,.L245
 2432 0002 024A     	 ldr r2,.L245+4
 2433 0004 5A61     	 str r2,[r3,#20]
 2434 0006 7047     	 bx lr
 2435              	.L246:
 2436              	 .align 2
 2437              	.L245:
 2438 0008 10470050 	 .word 1342195472
 2439 000c 03000100 	 .word 65539
 2440              	 .cfi_endproc
 2441              	.LFE245:
 2443              	 .section .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode,"ax",%progbits
 2444              	 .align 1
 2445              	 .global XMC_SCU_CLOCK_SetBackupClockCalibrationMode
 2446              	 .thumb
 2447              	 .thumb_func
 2449              	XMC_SCU_CLOCK_SetBackupClockCalibrationMode:
 2450              	.LFB246:
1157:../Libraries/XMCLib/src/xmc4_scu.c ****                                   SCU_PLL_USBPLLCON_VCOBYP_Msk);
1158:../Libraries/XMCLib/src/xmc4_scu.c **** }
1159:../Libraries/XMCLib/src/xmc4_scu.c **** 
1160:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to onfigure the calibration mode for internal oscillator */
1161:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
1162:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2451              	 .loc 1 1162 0
 2452              	 .cfi_startproc
 2453              	 
 2454              	 
 2455              	.LVL152:
 2456 0000 10B5     	 push {r4,lr}
 2457              	.LCFI9:
 2458              	 .cfi_def_cfa_offset 8
 2459              	 .cfi_offset 4,-8
 2460              	 .cfi_offset 14,-4
1163:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Enable factory calibration based trimming */
1164:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 2461              	 .loc 1 1164 0
 2462 0002 0B4C     	 ldr r4,.L249
 2463 0004 6368     	 ldr r3,[r4,#4]
1165:../Libraries/XMCLib/src/xmc4_scu.c **** 
1166:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 2464              	 .loc 1 1166 0
 2465 0006 0128     	 cmp r0,#1
1164:../Libraries/XMCLib/src/xmc4_scu.c **** 
 2466              	 .loc 1 1164 0
 2467 0008 43F48013 	 orr r3,r3,#1048576
 2468 000c 6360     	 str r3,[r4,#4]
 2469              	 .loc 1 1166 0
 2470 000e 0AD1     	 bne .L248
1167:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1168:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Disable factory calibration based trimming */
1169:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 2471              	 .loc 1 1169 0
 2472 0010 6368     	 ldr r3,[r4,#4]
 2473 0012 23F48013 	 bic r3,r3,#1048576
 2474 0016 6360     	 str r3,[r4,#4]
1170:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_lDelay(100UL);
 2475              	 .loc 1 1170 0
 2476 0018 6420     	 movs r0,#100
 2477              	.LVL153:
 2478 001a FFF7FEFF 	 bl XMC_SCU_lDelay
 2479              	.LVL154:
1171:../Libraries/XMCLib/src/xmc4_scu.c **** 
1172:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Enable automatic calibration */
1173:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 2480              	 .loc 1 1173 0
 2481 001e 6368     	 ldr r3,[r4,#4]
 2482 0020 43F40023 	 orr r3,r3,#524288
 2483 0024 6360     	 str r3,[r4,#4]
 2484              	.L248:
1174:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1175:../Libraries/XMCLib/src/xmc4_scu.c **** 
1176:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_lDelay(100UL);
 2485              	 .loc 1 1176 0
 2486 0026 6420     	 movs r0,#100
1177:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2487              	 .loc 1 1177 0
 2488 0028 BDE81040 	 pop {r4,lr}
 2489              	.LCFI10:
 2490              	 .cfi_restore 14
 2491              	 .cfi_restore 4
 2492              	 .cfi_def_cfa_offset 0
1176:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2493              	 .loc 1 1176 0
 2494 002c FFF7FEBF 	 b XMC_SCU_lDelay
 2495              	.LVL155:
 2496              	.L250:
 2497              	 .align 2
 2498              	.L249:
 2499 0030 10470050 	 .word 1342195472
 2500              	 .cfi_endproc
 2501              	.LFE246:
 2503              	 .section .text.XMC_SCU_POWER_EnableUsb,"ax",%progbits
 2504              	 .align 1
 2505              	 .global XMC_SCU_POWER_EnableUsb
 2506              	 .thumb
 2507              	 .thumb_func
 2509              	XMC_SCU_POWER_EnableUsb:
 2510              	.LFB247:
1178:../Libraries/XMCLib/src/xmc4_scu.c **** 
1179:../Libraries/XMCLib/src/xmc4_scu.c **** 
1180:../Libraries/XMCLib/src/xmc4_scu.c **** 
1181:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable USB Phy and comparator */
1182:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_POWER_EnableUsb(void)
1183:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2511              	 .loc 1 1183 0
 2512              	 .cfi_startproc
 2513              	 
 2514              	 
 2515              	 
1184:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(USB_OTG_SUPPORTED)
1185:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 2516              	 .loc 1 1185 0
 2517 0000 024B     	 ldr r3,.L252
 2518 0002 4FF44032 	 mov r2,#196608
 2519 0006 5A60     	 str r2,[r3,#4]
 2520 0008 7047     	 bx lr
 2521              	.L253:
 2522 000a 00BF     	 .align 2
 2523              	.L252:
 2524 000c 00420050 	 .word 1342194176
 2525              	 .cfi_endproc
 2526              	.LFE247:
 2528              	 .section .text.XMC_SCU_POWER_DisableUsb,"ax",%progbits
 2529              	 .align 1
 2530              	 .global XMC_SCU_POWER_DisableUsb
 2531              	 .thumb
 2532              	 .thumb_func
 2534              	XMC_SCU_POWER_DisableUsb:
 2535              	.LFB248:
1186:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1187:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
1188:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1189:../Libraries/XMCLib/src/xmc4_scu.c **** }
1190:../Libraries/XMCLib/src/xmc4_scu.c **** 
1191:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power down USB Phy and comparator */
1192:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_POWER_DisableUsb(void)
1193:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2536              	 .loc 1 1193 0
 2537              	 .cfi_startproc
 2538              	 
 2539              	 
 2540              	 
1194:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(USB_OTG_SUPPORTED)
1195:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 2541              	 .loc 1 1195 0
 2542 0000 024B     	 ldr r3,.L255
 2543 0002 4FF44032 	 mov r2,#196608
 2544 0006 9A60     	 str r2,[r3,#8]
 2545 0008 7047     	 bx lr
 2546              	.L256:
 2547 000a 00BF     	 .align 2
 2548              	.L255:
 2549 000c 00420050 	 .word 1342194176
 2550              	 .cfi_endproc
 2551              	.LFE248:
 2553              	 .section .text.XMC_SCU_CLOCK_IsUsbPllLocked,"ax",%progbits
 2554              	 .align 1
 2555              	 .global XMC_SCU_CLOCK_IsUsbPllLocked
 2556              	 .thumb
 2557              	 .thumb_func
 2559              	XMC_SCU_CLOCK_IsUsbPllLocked:
 2560              	.LFB249:
1196:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1197:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
1198:../Libraries/XMCLib/src/xmc4_scu.c **** #endif    
1199:../Libraries/XMCLib/src/xmc4_scu.c **** }
1200:../Libraries/XMCLib/src/xmc4_scu.c **** 
1201:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check USB PLL is locked or not */
1202:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
1203:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2561              	 .loc 1 1203 0
 2562              	 .cfi_startproc
 2563              	 
 2564              	 
 2565              	 
1204:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 2566              	 .loc 1 1204 0
 2567 0000 024B     	 ldr r3,.L258
 2568 0002 1869     	 ldr r0,[r3,#16]
1205:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2569              	 .loc 1 1205 0
 2570 0004 C0F38000 	 ubfx r0,r0,#2,#1
 2571 0008 7047     	 bx lr
 2572              	.L259:
 2573 000a 00BF     	 .align 2
 2574              	.L258:
 2575 000c 10470050 	 .word 1342195472
 2576              	 .cfi_endproc
 2577              	.LFE249:
 2579              	 .section .text.XMC_SCU_HIB_EnableHibernateDomain,"ax",%progbits
 2580              	 .align 1
 2581              	 .global XMC_SCU_HIB_EnableHibernateDomain
 2582              	 .thumb
 2583              	 .thumb_func
 2585              	XMC_SCU_HIB_EnableHibernateDomain:
 2586              	.LFB250:
1206:../Libraries/XMCLib/src/xmc4_scu.c **** 
1207:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power up the hibernation domain */
1208:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableHibernateDomain(void)
1209:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2587              	 .loc 1 1209 0
 2588              	 .cfi_startproc
 2589              	 
 2590              	 
 2591              	 
1210:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Power up HIB domain if and only if it is currently powered down */
1211:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 2592              	 .loc 1 1211 0
 2593 0000 0A4B     	 ldr r3,.L270
 2594 0002 1A68     	 ldr r2,[r3]
 2595 0004 D207     	 lsls r2,r2,#31
 2596 0006 04D5     	 bpl .L261
 2597              	.L265:
1212:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1213:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
1214:../Libraries/XMCLib/src/xmc4_scu.c ****     
1215:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
1216:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1217:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait until HIB domain is enabled */
1218:../Libraries/XMCLib/src/xmc4_scu.c ****     }    
1219:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1220:../Libraries/XMCLib/src/xmc4_scu.c ****   
1221:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Remove the reset only if HIB domain were in a state of reset */
1222:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 2598              	 .loc 1 1222 0
 2599 0008 094B     	 ldr r3,.L270+4
 2600 000a 1A68     	 ldr r2,[r3]
 2601 000c 9005     	 lsls r0,r2,#22
 2602 000e 06D4     	 bmi .L262
 2603 0010 7047     	 bx lr
 2604              	.L261:
1213:../Libraries/XMCLib/src/xmc4_scu.c ****     
 2605              	 .loc 1 1213 0
 2606 0012 0122     	 movs r2,#1
 2607 0014 5A60     	 str r2,[r3,#4]
 2608              	.L264:
1215:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 2609              	 .loc 1 1215 0 discriminator 1
 2610 0016 1A68     	 ldr r2,[r3]
 2611 0018 D107     	 lsls r1,r2,#31
 2612 001a FCD5     	 bpl .L264
 2613 001c F4E7     	 b .L265
 2614              	.L262:
 2615              	.LBB54:
 2616              	.LBB55:
1223:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1224:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 2617              	 .loc 1 1224 0
 2618 001e 4FF40072 	 mov r2,#512
 2619 0022 9A60     	 str r2,[r3,#8]
 2620              	.L266:
1225:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 2621              	 .loc 1 1225 0
 2622 0024 1A68     	 ldr r2,[r3]
 2623 0026 9205     	 lsls r2,r2,#22
 2624 0028 FCD4     	 bmi .L266
 2625 002a 7047     	 bx lr
 2626              	.L271:
 2627              	 .align 2
 2628              	.L270:
 2629 002c 00420050 	 .word 1342194176
 2630 0030 00440050 	 .word 1342194688
 2631              	.LBE55:
 2632              	.LBE54:
 2633              	 .cfi_endproc
 2634              	.LFE250:
 2636              	 .section .text.XMC_SCU_HIB_DisableHibernateDomain,"ax",%progbits
 2637              	 .align 1
 2638              	 .global XMC_SCU_HIB_DisableHibernateDomain
 2639              	 .thumb
 2640              	 .thumb_func
 2642              	XMC_SCU_HIB_DisableHibernateDomain:
 2643              	.LFB251:
1226:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1227:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait until HIB domain is enabled */
1228:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1229:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1230:../Libraries/XMCLib/src/xmc4_scu.c **** }
1231:../Libraries/XMCLib/src/xmc4_scu.c **** 
1232:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power down the hibernation domain */
1233:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableHibernateDomain(void)
1234:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2644              	 .loc 1 1234 0
 2645              	 .cfi_startproc
 2646              	 
 2647              	 
 2648              	 
1235:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Disable hibernate domain */   
1236:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 2649              	 .loc 1 1236 0
 2650 0000 034B     	 ldr r3,.L273
 2651 0002 0122     	 movs r2,#1
 2652 0004 9A60     	 str r2,[r3,#8]
1237:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Reset of hibernate domain reset */  
1238:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 2653              	 .loc 1 1238 0
 2654 0006 4FF40072 	 mov r2,#512
 2655 000a C3F80422 	 str r2,[r3,#516]
 2656 000e 7047     	 bx lr
 2657              	.L274:
 2658              	 .align 2
 2659              	.L273:
 2660 0010 00420050 	 .word 1342194176
 2661              	 .cfi_endproc
 2662              	.LFE251:
 2664              	 .section .text.XMC_SCU_HIB_IsHibernateDomainEnabled,"ax",%progbits
 2665              	 .align 1
 2666              	 .global XMC_SCU_HIB_IsHibernateDomainEnabled
 2667              	 .thumb
 2668              	 .thumb_func
 2670              	XMC_SCU_HIB_IsHibernateDomainEnabled:
 2671              	.LFB252:
1239:../Libraries/XMCLib/src/xmc4_scu.c **** }
1240:../Libraries/XMCLib/src/xmc4_scu.c **** 
1241:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check the hibernation domain is enabled or not */
1242:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
1243:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2672              	 .loc 1 1243 0
 2673              	 .cfi_startproc
 2674              	 
 2675              	 
 2676              	 
1244:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 2677              	 .loc 1 1244 0
 2678 0000 054B     	 ldr r3,.L278
 2679 0002 1868     	 ldr r0,[r3]
 2680 0004 10F00100 	 ands r0,r0,#1
1245:../Libraries/XMCLib/src/xmc4_scu.c ****           !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 2681              	 .loc 1 1245 0
 2682 0008 1EBF     	 ittt ne
 2683 000a D3F80002 	 ldrne r0,[r3,#512]
1244:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 2684              	 .loc 1 1244 0
 2685 000e 80F40070 	 eorne r0,r0,#512
 2686 0012 C0F34020 	 ubfxne r0,r0,#9,#1
1246:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2687              	 .loc 1 1246 0
 2688 0016 7047     	 bx lr
 2689              	.L279:
 2690              	 .align 2
 2691              	.L278:
 2692 0018 00420050 	 .word 1342194176
 2693              	 .cfi_endproc
 2694              	.LFE252:
 2696              	 .section .text.XMC_SCU_HIB_EnableInternalSlowClock,"ax",%progbits
 2697              	 .align 1
 2698              	 .global XMC_SCU_HIB_EnableInternalSlowClock
 2699              	 .thumb
 2700              	 .thumb_func
 2702              	XMC_SCU_HIB_EnableInternalSlowClock:
 2703              	.LFB253:
1247:../Libraries/XMCLib/src/xmc4_scu.c **** 
1248:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
1249:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableInternalSlowClock(void)
1250:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2704              	 .loc 1 1250 0
 2705              	 .cfi_startproc
 2706              	 
 2707              	 
 2708              	 
 2709              	.L281:
1251:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 2710              	 .loc 1 1251 0 discriminator 1
 2711 0000 054B     	 ldr r3,.L283
 2712 0002 D3F8C430 	 ldr r3,[r3,#196]
 2713 0006 9B06     	 lsls r3,r3,#26
 2714 0008 FAD4     	 bmi .L281
1252:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1253:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
1254:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1255:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 2715              	 .loc 1 1255 0
 2716 000a 044A     	 ldr r2,.L283+4
 2717 000c 5369     	 ldr r3,[r2,#20]
 2718 000e 23F00103 	 bic r3,r3,#1
 2719 0012 5361     	 str r3,[r2,#20]
 2720 0014 7047     	 bx lr
 2721              	.L284:
 2722 0016 00BF     	 .align 2
 2723              	.L283:
 2724 0018 00400050 	 .word 1342193664
 2725 001c 00430050 	 .word 1342194432
 2726              	 .cfi_endproc
 2727              	.LFE253:
 2729              	 .section .text.XMC_SCU_HIB_DisableInternalSlowClock,"ax",%progbits
 2730              	 .align 1
 2731              	 .global XMC_SCU_HIB_DisableInternalSlowClock
 2732              	 .thumb
 2733              	 .thumb_func
 2735              	XMC_SCU_HIB_DisableInternalSlowClock:
 2736              	.LFB254:
1256:../Libraries/XMCLib/src/xmc4_scu.c **** }
1257:../Libraries/XMCLib/src/xmc4_scu.c **** 
1258:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
1259:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableInternalSlowClock(void)
1260:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2737              	 .loc 1 1260 0
 2738              	 .cfi_startproc
 2739              	 
 2740              	 
 2741              	 
 2742              	.L286:
1261:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 2743              	 .loc 1 1261 0 discriminator 1
 2744 0000 054B     	 ldr r3,.L288
 2745 0002 D3F8C430 	 ldr r3,[r3,#196]
 2746 0006 9B06     	 lsls r3,r3,#26
 2747 0008 FAD4     	 bmi .L286
1262:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1263:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
1264:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1265:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 2748              	 .loc 1 1265 0
 2749 000a 044A     	 ldr r2,.L288+4
 2750 000c 5369     	 ldr r3,[r2,#20]
 2751 000e 43F00103 	 orr r3,r3,#1
 2752 0012 5361     	 str r3,[r2,#20]
 2753 0014 7047     	 bx lr
 2754              	.L289:
 2755 0016 00BF     	 .align 2
 2756              	.L288:
 2757 0018 00400050 	 .word 1342193664
 2758 001c 00430050 	 .word 1342194432
 2759              	 .cfi_endproc
 2760              	.LFE254:
 2762              	 .section .text.XMC_SCU_HIB_ClearEventStatus,"ax",%progbits
 2763              	 .align 1
 2764              	 .global XMC_SCU_HIB_ClearEventStatus
 2765              	 .thumb
 2766              	 .thumb_func
 2768              	XMC_SCU_HIB_ClearEventStatus:
 2769              	.LFB255:
1266:../Libraries/XMCLib/src/xmc4_scu.c **** }
1267:../Libraries/XMCLib/src/xmc4_scu.c **** 
1268:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_ClearEventStatus(int32_t event)
1269:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2770              	 .loc 1 1269 0
 2771              	 .cfi_startproc
 2772              	 
 2773              	 
 2774              	 
 2775              	.LVL156:
 2776              	.L291:
1270:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 2777              	 .loc 1 1270 0 discriminator 1
 2778 0000 034B     	 ldr r3,.L293
 2779 0002 D3F8C430 	 ldr r3,[r3,#196]
 2780 0006 9B07     	 lsls r3,r3,#30
 2781 0008 FAD4     	 bmi .L291
1271:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1272:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
1273:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1274:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCLR = event;
 2782              	 .loc 1 1274 0
 2783 000a 024B     	 ldr r3,.L293+4
 2784 000c 5860     	 str r0,[r3,#4]
 2785 000e 7047     	 bx lr
 2786              	.L294:
 2787              	 .align 2
 2788              	.L293:
 2789 0010 00400050 	 .word 1342193664
 2790 0014 00430050 	 .word 1342194432
 2791              	 .cfi_endproc
 2792              	.LFE255:
 2794              	 .section .text.XMC_SCU_HIB_TriggerEvent,"ax",%progbits
 2795              	 .align 1
 2796              	 .global XMC_SCU_HIB_TriggerEvent
 2797              	 .thumb
 2798              	 .thumb_func
 2800              	XMC_SCU_HIB_TriggerEvent:
 2801              	.LFB256:
1275:../Libraries/XMCLib/src/xmc4_scu.c **** }
1276:../Libraries/XMCLib/src/xmc4_scu.c **** 
1277:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_TriggerEvent(int32_t event)
1278:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2802              	 .loc 1 1278 0
 2803              	 .cfi_startproc
 2804              	 
 2805              	 
 2806              	 
 2807              	.LVL157:
 2808              	.L296:
1279:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 2809              	 .loc 1 1279 0 discriminator 1
 2810 0000 034B     	 ldr r3,.L298
 2811 0002 D3F8C430 	 ldr r3,[r3,#196]
 2812 0006 5B07     	 lsls r3,r3,#29
 2813 0008 FAD4     	 bmi .L296
1280:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1281:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDSET register in hibernate domain is ready to accept a write */    
1282:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1283:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDSET = event;
 2814              	 .loc 1 1283 0
 2815 000a 024B     	 ldr r3,.L298+4
 2816 000c 9860     	 str r0,[r3,#8]
 2817 000e 7047     	 bx lr
 2818              	.L299:
 2819              	 .align 2
 2820              	.L298:
 2821 0010 00400050 	 .word 1342193664
 2822 0014 00430050 	 .word 1342194432
 2823              	 .cfi_endproc
 2824              	.LFE256:
 2826              	 .section .text.XMC_SCU_HIB_EnableEvent,"ax",%progbits
 2827              	 .align 1
 2828              	 .global XMC_SCU_HIB_EnableEvent
 2829              	 .thumb
 2830              	 .thumb_func
 2832              	XMC_SCU_HIB_EnableEvent:
 2833              	.LFB257:
1284:../Libraries/XMCLib/src/xmc4_scu.c **** }
1285:../Libraries/XMCLib/src/xmc4_scu.c **** 
1286:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableEvent(int32_t event)
1287:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2834              	 .loc 1 1287 0
 2835              	 .cfi_startproc
 2836              	 
 2837              	 
 2838              	 
 2839              	.LVL158:
 2840              	.L301:
1288:../Libraries/XMCLib/src/xmc4_scu.c **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1289:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE) << (SCU_HIBERNATE_HDCR_VBATHI_Pos - SCU_HI
1290:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE) << (SCU_HIBERNATE_HDCR_VBATLO_Pos - SCU_HI
1291:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO0HI_Pos -
1292:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO0LO_Pos -
1293:../Libraries/XMCLib/src/xmc4_scu.c **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))
1294:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos -
1295:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos -
1296:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1297:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1298:../Libraries/XMCLib/src/xmc4_scu.c **** 
1299:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 2841              	 .loc 1 1299 0 discriminator 1
 2842 0000 044B     	 ldr r3,.L303
 2843 0002 D3F8C430 	 ldr r3,[r3,#196]
 2844 0006 1B07     	 lsls r3,r3,#28
 2845 0008 FAD4     	 bmi .L301
1300:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1301:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1302:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1303:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= event;
 2846              	 .loc 1 1303 0
 2847 000a 034A     	 ldr r2,.L303+4
 2848 000c D368     	 ldr r3,[r2,#12]
 2849 000e 1843     	 orrs r0,r0,r3
 2850              	.LVL159:
 2851 0010 D060     	 str r0,[r2,#12]
 2852 0012 7047     	 bx lr
 2853              	.L304:
 2854              	 .align 2
 2855              	.L303:
 2856 0014 00400050 	 .word 1342193664
 2857 0018 00430050 	 .word 1342194432
 2858              	 .cfi_endproc
 2859              	.LFE257:
 2861              	 .section .text.XMC_SCU_HIB_DisableEvent,"ax",%progbits
 2862              	 .align 1
 2863              	 .global XMC_SCU_HIB_DisableEvent
 2864              	 .thumb
 2865              	 .thumb_func
 2867              	XMC_SCU_HIB_DisableEvent:
 2868              	.LFB258:
1304:../Libraries/XMCLib/src/xmc4_scu.c **** }
1305:../Libraries/XMCLib/src/xmc4_scu.c **** 
1306:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableEvent(int32_t event)
1307:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2869              	 .loc 1 1307 0
 2870              	 .cfi_startproc
 2871              	 
 2872              	 
 2873              	 
 2874              	.LVL160:
 2875              	.L306:
1308:../Libraries/XMCLib/src/xmc4_scu.c **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1309:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE) << (SCU_HIBERNATE_HDCR_VBATHI_Pos - SCU_HI
1310:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE) << (SCU_HIBERNATE_HDCR_VBATLO_Pos - SCU_HI
1311:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO0HI_Pos -
1312:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO0LO_Pos -
1313:../Libraries/XMCLib/src/xmc4_scu.c **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))
1314:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos -
1315:../Libraries/XMCLib/src/xmc4_scu.c ****   event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos -
1316:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1317:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1318:../Libraries/XMCLib/src/xmc4_scu.c **** 
1319:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 2876              	 .loc 1 1319 0 discriminator 1
 2877 0000 054B     	 ldr r3,.L308
 2878 0002 D3F8C430 	 ldr r3,[r3,#196]
 2879 0006 1B07     	 lsls r3,r3,#28
 2880 0008 FAD4     	 bmi .L306
1320:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1321:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1322:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1323:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR &= ~event;
 2881              	 .loc 1 1323 0
 2882 000a 044A     	 ldr r2,.L308+4
 2883 000c D368     	 ldr r3,[r2,#12]
 2884 000e 23EA0000 	 bic r0,r3,r0
 2885              	.LVL161:
 2886 0012 D060     	 str r0,[r2,#12]
 2887 0014 7047     	 bx lr
 2888              	.L309:
 2889 0016 00BF     	 .align 2
 2890              	.L308:
 2891 0018 00400050 	 .word 1342193664
 2892 001c 00430050 	 .word 1342194432
 2893              	 .cfi_endproc
 2894              	.LFE258:
 2896              	 .section .text.XMC_SCU_HIB_EnterHibernateState,"ax",%progbits
 2897              	 .align 1
 2898              	 .global XMC_SCU_HIB_EnterHibernateState
 2899              	 .thumb
 2900              	 .thumb_func
 2902              	XMC_SCU_HIB_EnterHibernateState:
 2903              	.LFB259:
1324:../Libraries/XMCLib/src/xmc4_scu.c **** }
1325:../Libraries/XMCLib/src/xmc4_scu.c **** 
1326:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnterHibernateState(void) 
1327:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2904              	 .loc 1 1327 0
 2905              	 .cfi_startproc
 2906              	 
 2907              	 
 2908              	 
 2909              	.L311:
1328:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 2910              	 .loc 1 1328 0 discriminator 1
 2911 0000 054B     	 ldr r3,.L313
 2912 0002 D3F8C430 	 ldr r3,[r3,#196]
 2913 0006 1B07     	 lsls r3,r3,#28
 2914 0008 FAD4     	 bmi .L311
1329:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1330:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1331:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1332:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 2915              	 .loc 1 1332 0
 2916 000a 044A     	 ldr r2,.L313+4
 2917 000c D368     	 ldr r3,[r2,#12]
 2918 000e 43F01003 	 orr r3,r3,#16
 2919 0012 D360     	 str r3,[r2,#12]
 2920 0014 7047     	 bx lr
 2921              	.L314:
 2922 0016 00BF     	 .align 2
 2923              	.L313:
 2924 0018 00400050 	 .word 1342193664
 2925 001c 00430050 	 .word 1342194432
 2926              	 .cfi_endproc
 2927              	.LFE259:
 2929              	 .section .text.XMC_SCU_HIB_EnterHibernateStateEx,"ax",%progbits
 2930              	 .align 1
 2931              	 .global XMC_SCU_HIB_EnterHibernateStateEx
 2932              	 .thumb
 2933              	 .thumb_func
 2935              	XMC_SCU_HIB_EnterHibernateStateEx:
 2936              	.LFB260:
1333:../Libraries/XMCLib/src/xmc4_scu.c **** }
1334:../Libraries/XMCLib/src/xmc4_scu.c **** 
1335:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
1336:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2937              	 .loc 1 1336 0
 2938              	 .cfi_startproc
 2939              	 
 2940              	 
 2941              	 
 2942              	.LVL162:
1337:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 2943              	 .loc 1 1337 0
 2944 0000 08B9     	 cbnz r0,.L315
1338:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1339:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_HIB_EnterHibernateState();
 2945              	 .loc 1 1339 0
 2946 0002 FFF7FEBF 	 b XMC_SCU_HIB_EnterHibernateState
 2947              	.LVL163:
 2948              	.L315:
 2949 0006 7047     	 bx lr
 2950              	 .cfi_endproc
 2951              	.LFE260:
 2953              	 .section .text.XMC_SCU_HIB_SetWakeupTriggerInput,"ax",%progbits
 2954              	 .align 1
 2955              	 .global XMC_SCU_HIB_SetWakeupTriggerInput
 2956              	 .thumb
 2957              	 .thumb_func
 2959              	XMC_SCU_HIB_SetWakeupTriggerInput:
 2960              	.LFB261:
1340:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1341:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1342:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_HIB_HIBERNATE_MODE_INTERNAL)
1343:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1344:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HINTSET_Msk)
1345:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1346:../Libraries/XMCLib/src/xmc4_scu.c ****       /* Wait until HDCR register in hibernate domain is ready to accept a write */
1347:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1348:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
1349:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1350:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1351:../Libraries/XMCLib/src/xmc4_scu.c **** }
1352:../Libraries/XMCLib/src/xmc4_scu.c **** 
1353:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
1354:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2961              	 .loc 1 1354 0
 2962              	 .cfi_startproc
 2963              	 
 2964              	 
 2965              	 
 2966              	.LVL164:
 2967              	.L318:
1355:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 2968              	 .loc 1 1355 0 discriminator 1
 2969 0000 074B     	 ldr r3,.L323
 2970 0002 D3F8C430 	 ldr r3,[r3,#196]
 2971 0006 1B07     	 lsls r3,r3,#28
 2972 0008 FAD4     	 bmi .L318
 2973 000a 064B     	 ldr r3,.L323+4
1356:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1357:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1358:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1359:../Libraries/XMCLib/src/xmc4_scu.c **** 
1360:../Libraries/XMCLib/src/xmc4_scu.c ****   if (pin == XMC_SCU_HIB_IO_0)
1361:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1362:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 2974              	 .loc 1 1362 0
 2975 000c DA68     	 ldr r2,[r3,#12]
1360:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 2976              	 .loc 1 1360 0
 2977 000e 10B9     	 cbnz r0,.L319
 2978              	 .loc 1 1362 0
 2979 0010 42F48072 	 orr r2,r2,#256
 2980 0014 01E0     	 b .L322
 2981              	.L319:
1363:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1364:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1365:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1366:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 2982              	 .loc 1 1366 0
 2983 0016 22F48072 	 bic r2,r2,#256
 2984              	.L322:
 2985 001a DA60     	 str r2,[r3,#12]
 2986 001c 7047     	 bx lr
 2987              	.L324:
 2988 001e 00BF     	 .align 2
 2989              	.L323:
 2990 0020 00400050 	 .word 1342193664
 2991 0024 00430050 	 .word 1342194432
 2992              	 .cfi_endproc
 2993              	.LFE261:
 2995              	 .section .text.XMC_SCU_HIB_SetPinMode,"ax",%progbits
 2996              	 .align 1
 2997              	 .global XMC_SCU_HIB_SetPinMode
 2998              	 .thumb
 2999              	 .thumb_func
 3001              	XMC_SCU_HIB_SetPinMode:
 3002              	.LFB262:
1367:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1368:../Libraries/XMCLib/src/xmc4_scu.c **** }
1369:../Libraries/XMCLib/src/xmc4_scu.c **** 
1370:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
1371:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3003              	 .loc 1 1371 0
 3004              	 .cfi_startproc
 3005              	 
 3006              	 
 3007              	.LVL165:
 3008 0000 10B5     	 push {r4,lr}
 3009              	.LCFI11:
 3010              	 .cfi_def_cfa_offset 8
 3011              	 .cfi_offset 4,-8
 3012              	 .cfi_offset 14,-4
 3013              	.L326:
1372:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3014              	 .loc 1 1372 0 discriminator 1
 3015 0002 084B     	 ldr r3,.L328
 3016 0004 D3F8C430 	 ldr r3,[r3,#196]
 3017 0008 1B07     	 lsls r3,r3,#28
 3018 000a FAD4     	 bmi .L326
1373:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1374:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1375:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1376:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE
 3019              	 .loc 1 1376 0
 3020 000c 064C     	 ldr r4,.L328+4
 3021 000e 8000     	 lsls r0,r0,#2
 3022              	.LVL166:
 3023 0010 E268     	 ldr r2,[r4,#12]
 3024 0012 4FF47023 	 mov r3,#983040
 3025 0016 8340     	 lsls r3,r3,r0
 3026 0018 22EA0303 	 bic r3,r2,r3
1377:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 3027              	 .loc 1 1377 0
 3028 001c 8140     	 lsls r1,r1,r0
 3029              	.LVL167:
1376:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 3030              	 .loc 1 1376 0
 3031 001e 1943     	 orrs r1,r1,r3
 3032 0020 E160     	 str r1,[r4,#12]
 3033 0022 10BD     	 pop {r4,pc}
 3034              	.L329:
 3035              	 .align 2
 3036              	.L328:
 3037 0024 00400050 	 .word 1342193664
 3038 0028 00430050 	 .word 1342194432
 3039              	 .cfi_endproc
 3040              	.LFE262:
 3042              	 .section .text.XMC_SCU_HIB_SetPinOutputLevel,"ax",%progbits
 3043              	 .align 1
 3044              	 .global XMC_SCU_HIB_SetPinOutputLevel
 3045              	 .thumb
 3046              	 .thumb_func
 3048              	XMC_SCU_HIB_SetPinOutputLevel:
 3049              	.LFB263:
1378:../Libraries/XMCLib/src/xmc4_scu.c **** }
1379:../Libraries/XMCLib/src/xmc4_scu.c **** 
1380:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
1381:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3050              	 .loc 1 1381 0
 3051              	 .cfi_startproc
 3052              	 
 3053              	 
 3054              	.LVL168:
 3055 0000 10B5     	 push {r4,lr}
 3056              	.LCFI12:
 3057              	 .cfi_def_cfa_offset 8
 3058              	 .cfi_offset 4,-8
 3059              	 .cfi_offset 14,-4
 3060              	.L331:
1382:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3061              	 .loc 1 1382 0 discriminator 1
 3062 0002 084B     	 ldr r3,.L333
 3063 0004 D3F8C430 	 ldr r3,[r3,#196]
 3064 0008 1B07     	 lsls r3,r3,#28
 3065 000a FAD4     	 bmi .L331
1383:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1384:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1385:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1386:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 3066              	 .loc 1 1386 0
 3067 000c 064C     	 ldr r4,.L333+4
 3068 000e 4FF48053 	 mov r3,#4096
 3069 0012 E268     	 ldr r2,[r4,#12]
 3070 0014 8340     	 lsls r3,r3,r0
 3071 0016 22EA0303 	 bic r3,r2,r3
1387:../Libraries/XMCLib/src/xmc4_scu.c ****                         (level << pin);
 3072              	 .loc 1 1387 0
 3073 001a 8140     	 lsls r1,r1,r0
 3074              	.LVL169:
1386:../Libraries/XMCLib/src/xmc4_scu.c ****                         (level << pin);
 3075              	 .loc 1 1386 0
 3076 001c 1943     	 orrs r1,r1,r3
 3077 001e E160     	 str r1,[r4,#12]
 3078 0020 10BD     	 pop {r4,pc}
 3079              	.L334:
 3080 0022 00BF     	 .align 2
 3081              	.L333:
 3082 0024 00400050 	 .word 1342193664
 3083 0028 00430050 	 .word 1342194432
 3084              	 .cfi_endproc
 3085              	.LFE263:
 3087              	 .section .text.XMC_SCU_HIB_SetInput0,"ax",%progbits
 3088              	 .align 1
 3089              	 .global XMC_SCU_HIB_SetInput0
 3090              	 .thumb
 3091              	 .thumb_func
 3093              	XMC_SCU_HIB_SetInput0:
 3094              	.LFB264:
1388:../Libraries/XMCLib/src/xmc4_scu.c **** }
1389:../Libraries/XMCLib/src/xmc4_scu.c **** 
1390:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
1391:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3095              	 .loc 1 1391 0
 3096              	 .cfi_startproc
 3097              	 
 3098              	 
 3099              	 
 3100              	.LVL170:
 3101              	.L336:
1392:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3102              	 .loc 1 1392 0 discriminator 1
 3103 0000 074B     	 ldr r3,.L341
 3104 0002 D3F8C430 	 ldr r3,[r3,#196]
 3105 0006 1B07     	 lsls r3,r3,#28
 3106 0008 FAD4     	 bmi .L336
 3107 000a 064B     	 ldr r3,.L341+4
1393:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1394:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1395:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1396:../Libraries/XMCLib/src/xmc4_scu.c **** 
1397:../Libraries/XMCLib/src/xmc4_scu.c ****   if (pin == XMC_SCU_HIB_IO_0)
1398:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1399:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 3108              	 .loc 1 1399 0
 3109 000c DA68     	 ldr r2,[r3,#12]
1397:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3110              	 .loc 1 1397 0
 3111 000e 10B9     	 cbnz r0,.L337
 3112              	 .loc 1 1399 0
 3113 0010 42F48062 	 orr r2,r2,#1024
 3114 0014 01E0     	 b .L340
 3115              	.L337:
1400:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1401:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1402:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1403:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 3116              	 .loc 1 1403 0
 3117 0016 22F48062 	 bic r2,r2,#1024
 3118              	.L340:
 3119 001a DA60     	 str r2,[r3,#12]
 3120 001c 7047     	 bx lr
 3121              	.L342:
 3122 001e 00BF     	 .align 2
 3123              	.L341:
 3124 0020 00400050 	 .word 1342193664
 3125 0024 00430050 	 .word 1342194432
 3126              	 .cfi_endproc
 3127              	.LFE264:
 3129              	 .section .text.XMC_SCU_HIB_SetSR0Input,"ax",%progbits
 3130              	 .align 1
 3131              	 .global XMC_SCU_HIB_SetSR0Input
 3132              	 .thumb
 3133              	 .thumb_func
 3135              	XMC_SCU_HIB_SetSR0Input:
 3136              	.LFB265:
1404:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1405:../Libraries/XMCLib/src/xmc4_scu.c **** }
1406:../Libraries/XMCLib/src/xmc4_scu.c **** 
1407:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
1408:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3137              	 .loc 1 1408 0
 3138              	 .cfi_startproc
 3139              	 
 3140              	 
 3141              	 
 3142              	.LVL171:
 3143              	.L344:
1409:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3144              	 .loc 1 1409 0 discriminator 1
 3145 0000 054B     	 ldr r3,.L346
 3146 0002 D3F8C430 	 ldr r3,[r3,#196]
 3147 0006 1B07     	 lsls r3,r3,#28
 3148 0008 FAD4     	 bmi .L344
1410:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1411:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1412:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1413:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1414:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIB
1415:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1416:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 3149              	 .loc 1 1416 0
 3150 000a 044A     	 ldr r2,.L346+4
 3151 000c D368     	 ldr r3,[r2,#12]
 3152 000e 23F48063 	 bic r3,r3,#1024
 3153 0012 1843     	 orrs r0,r0,r3
 3154              	.LVL172:
 3155 0014 D060     	 str r0,[r2,#12]
 3156 0016 7047     	 bx lr
 3157              	.L347:
 3158              	 .align 2
 3159              	.L346:
 3160 0018 00400050 	 .word 1342193664
 3161 001c 00430050 	 .word 1342194432
 3162              	 .cfi_endproc
 3163              	.LFE265:
 3165              	 .section .text.XMC_SCU_CLOCK_IsLowPowerOscillatorStable,"ax",%progbits
 3166              	 .align 1
 3167              	 .global XMC_SCU_CLOCK_IsLowPowerOscillatorStable
 3168              	 .thumb
 3169              	 .thumb_func
 3171              	XMC_SCU_CLOCK_IsLowPowerOscillatorStable:
 3172              	.LFB266:
1417:../Libraries/XMCLib/src/xmc4_scu.c **** #endif  
1418:../Libraries/XMCLib/src/xmc4_scu.c ****                         input;
1419:../Libraries/XMCLib/src/xmc4_scu.c **** }
1420:../Libraries/XMCLib/src/xmc4_scu.c **** 
1421:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
1422:../Libraries/XMCLib/src/xmc4_scu.c **** 
1423:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100))
1424:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetSR1Input(XMC_SCU_HIB_SR1_INPUT_t input)
1425:../Libraries/XMCLib/src/xmc4_scu.c **** {
1426:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
1427:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1428:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1429:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1430:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI1SEL_Msk | SCU_HIB
1431:../Libraries/XMCLib/src/xmc4_scu.c ****                         input;
1432:../Libraries/XMCLib/src/xmc4_scu.c **** }
1433:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1434:../Libraries/XMCLib/src/xmc4_scu.c **** 
1435:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetInput(XMC_SCU_HIB_LPAC_INPUT_t input)
1436:../Libraries/XMCLib/src/xmc4_scu.c **** {
1437:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACCONF_Msk)
1438:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1439:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1440:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1441:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACCONF = (SCU_HIBERNATE->LPACCONF &  (uint32_t)~SCU_HIBERNATE_LPACCONF_CMPEN_Msk
1442:../Libraries/XMCLib/src/xmc4_scu.c ****                             input;
1443:../Libraries/XMCLib/src/xmc4_scu.c **** }
1444:../Libraries/XMCLib/src/xmc4_scu.c **** 
1445:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetTrigger(XMC_SCU_HIB_LPAC_TRIGGER_t trigger)
1446:../Libraries/XMCLib/src/xmc4_scu.c **** {
1447:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACCONF_Msk)
1448:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1449:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1450:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1451:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACCONF = (SCU_HIBERNATE->LPACCONF &  (uint32_t)~SCU_HIBERNATE_LPACCONF_TRIGSEL_M
1452:../Libraries/XMCLib/src/xmc4_scu.c ****                             trigger;
1453:../Libraries/XMCLib/src/xmc4_scu.c **** }
1454:../Libraries/XMCLib/src/xmc4_scu.c **** 
1455:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetTiming(bool enable_delay, uint16_t interval_count, uint8_t settle_count)
1456:../Libraries/XMCLib/src/xmc4_scu.c **** {
1457:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t config = 0;
1458:../Libraries/XMCLib/src/xmc4_scu.c **** 
1459:../Libraries/XMCLib/src/xmc4_scu.c ****   if (enable_delay)
1460:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1461:../Libraries/XMCLib/src/xmc4_scu.c ****     config = SCU_HIBERNATE_LPACCONF_CONVDEL_Msk;
1462:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1463:../Libraries/XMCLib/src/xmc4_scu.c **** 
1464:../Libraries/XMCLib/src/xmc4_scu.c ****   config |= interval_count << SCU_HIBERNATE_LPACCONF_INTERVCNT_Pos;
1465:../Libraries/XMCLib/src/xmc4_scu.c ****   config |= settle_count << SCU_HIBERNATE_LPACCONF_SETTLECNT_Pos;
1466:../Libraries/XMCLib/src/xmc4_scu.c **** 
1467:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACCONF_Msk)
1468:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1469:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1470:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1471:../Libraries/XMCLib/src/xmc4_scu.c **** 
1472:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACCONF = (SCU_HIBERNATE->LPACCONF &  (uint32_t)~(SCU_HIBERNATE_LPACCONF_CONVDEL_
1473:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                     SCU_HIBERNATE_LPACCONF_INTERVCN
1474:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                     SCU_HIBERNATE_LPACCONF_SETTLECN
1475:../Libraries/XMCLib/src/xmc4_scu.c ****                             config;
1476:../Libraries/XMCLib/src/xmc4_scu.c **** 
1477:../Libraries/XMCLib/src/xmc4_scu.c **** }
1478:../Libraries/XMCLib/src/xmc4_scu.c **** 
1479:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetVBATThresholds(uint8_t lower, uint8_t upper)
1480:../Libraries/XMCLib/src/xmc4_scu.c **** {
1481:../Libraries/XMCLib/src/xmc4_scu.c **** 
1482:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACTH0_Msk)
1483:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1484:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1485:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1486:../Libraries/XMCLib/src/xmc4_scu.c **** 
1487:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACTH0 = (lower << SCU_HIBERNATE_LPACTH0_VBATLO_Pos) | (upper << SCU_HIBERNATE_LP
1488:../Libraries/XMCLib/src/xmc4_scu.c **** 
1489:../Libraries/XMCLib/src/xmc4_scu.c **** 
1490:../Libraries/XMCLib/src/xmc4_scu.c **** 
1491:../Libraries/XMCLib/src/xmc4_scu.c **** }
1492:../Libraries/XMCLib/src/xmc4_scu.c **** 
1493:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetHIBIO0Thresholds(uint8_t lower, uint8_t upper)
1494:../Libraries/XMCLib/src/xmc4_scu.c **** {
1495:../Libraries/XMCLib/src/xmc4_scu.c **** 
1496:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACTH1_Msk)
1497:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1498:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1499:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1500:../Libraries/XMCLib/src/xmc4_scu.c **** 
1501:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACTH1 = (SCU_HIBERNATE->LPACTH1 & (uint32_t)~(SCU_HIBERNATE_LPACTH1_AHIBIO0LO_Ms
1502:../Libraries/XMCLib/src/xmc4_scu.c ****                            (lower << SCU_HIBERNATE_LPACTH1_AHIBIO0LO_Pos) |
1503:../Libraries/XMCLib/src/xmc4_scu.c ****                            (upper << SCU_HIBERNATE_LPACTH1_AHIBIO0HI_Pos);
1504:../Libraries/XMCLib/src/xmc4_scu.c **** 
1505:../Libraries/XMCLib/src/xmc4_scu.c **** }
1506:../Libraries/XMCLib/src/xmc4_scu.c **** #if ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100))
1507:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_SetHIBIO1Thresholds(uint8_t lower, uint8_t upper)
1508:../Libraries/XMCLib/src/xmc4_scu.c **** {
1509:../Libraries/XMCLib/src/xmc4_scu.c **** 
1510:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACTH1_Msk)
1511:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1512:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */
1513:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1514:../Libraries/XMCLib/src/xmc4_scu.c **** 
1515:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACTH1 = (SCU_HIBERNATE->LPACTH1 & (uint32_t)~(SCU_HIBERNATE_LPACTH1_AHIBIO1LO_Ms
1516:../Libraries/XMCLib/src/xmc4_scu.c ****                            (lower << SCU_HIBERNATE_LPACTH1_AHIBIO1LO_Pos) |
1517:../Libraries/XMCLib/src/xmc4_scu.c ****                            (upper << SCU_HIBERNATE_LPACTH1_AHIBIO1HI_Pos);
1518:../Libraries/XMCLib/src/xmc4_scu.c **** 
1519:../Libraries/XMCLib/src/xmc4_scu.c **** }
1520:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1521:../Libraries/XMCLib/src/xmc4_scu.c **** int32_t XMC_SCU_HIB_LPAC_GetStatus(void)
1522:../Libraries/XMCLib/src/xmc4_scu.c **** {
1523:../Libraries/XMCLib/src/xmc4_scu.c ****   return SCU_HIBERNATE->LPACST;
1524:../Libraries/XMCLib/src/xmc4_scu.c **** }
1525:../Libraries/XMCLib/src/xmc4_scu.c **** 
1526:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_ClearStatus(int32_t status)
1527:../Libraries/XMCLib/src/xmc4_scu.c **** {
1528:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACCLR_Msk)
1529:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1530:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until LPACCLR register in hibernate domain is ready to accept a write */
1531:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1532:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACCLR = status;;
1533:../Libraries/XMCLib/src/xmc4_scu.c **** }
1534:../Libraries/XMCLib/src/xmc4_scu.c **** 
1535:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_LPAC_TriggerCompare(XMC_SCU_HIB_LPAC_INPUT_t input)
1536:../Libraries/XMCLib/src/xmc4_scu.c **** {
1537:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_LPACSET_Msk)
1538:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1539:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until LPACSET register in hibernate domain is ready to accept a write */
1540:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1541:../Libraries/XMCLib/src/xmc4_scu.c **** 
1542:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->LPACSET = input;
1543:../Libraries/XMCLib/src/xmc4_scu.c **** }
1544:../Libraries/XMCLib/src/xmc4_scu.c **** 
1545:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1546:../Libraries/XMCLib/src/xmc4_scu.c **** 
1547:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
1548:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3173              	 .loc 1 1548 0
 3174              	 .cfi_startproc
 3175              	 
 3176              	 
 3177              	 
1549:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 3178              	 .loc 1 1549 0
 3179 0000 034B     	 ldr r3,.L349
 3180 0002 1868     	 ldr r0,[r3]
 3181 0004 80F00800 	 eor r0,r0,#8
1550:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3182              	 .loc 1 1550 0
 3183 0008 C0F3C000 	 ubfx r0,r0,#3,#1
 3184 000c 7047     	 bx lr
 3185              	.L350:
 3186 000e 00BF     	 .align 2
 3187              	.L349:
 3188 0010 00430050 	 .word 1342194432
 3189              	 .cfi_endproc
 3190              	.LFE266:
 3192              	 .section .text.XMC_SCU_CLOCK_EnableLowPowerOscillator,"ax",%progbits
 3193              	 .align 1
 3194              	 .global XMC_SCU_CLOCK_EnableLowPowerOscillator
 3195              	 .thumb
 3196              	 .thumb_func
 3198              	XMC_SCU_CLOCK_EnableLowPowerOscillator:
 3199              	.LFB267:
1551:../Libraries/XMCLib/src/xmc4_scu.c **** 
1552:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the 32khz Ultra Low Power oscillator */
1553:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
1554:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3200              	 .loc 1 1554 0
 3201              	 .cfi_startproc
 3202              	 
 3203              	 
 3204              	 
 3205              	.LVL173:
 3206              	.LBB56:
 3207              	.LBB57:
 252:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3208              	 .loc 1 252 0
 3209 0000 104B     	 ldr r3,.L361
 3210 0002 4FF40002 	 mov r2,#8388608
 3211 0006 DA60     	 str r2,[r3,#12]
 3212              	.LBE57:
 3213              	.LBE56:
1555:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Enable OSC_ULP */
1556:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
1557:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 3214              	 .loc 1 1557 0
 3215 0008 0F4A     	 ldr r2,.L361+4
 3216 000a D169     	 ldr r1,[r2,#28]
 3217 000c 21F03001 	 bic r1,r1,#48
 3218 0010 D161     	 str r1,[r2,#28]
 3219              	.L352:
 3220              	.LBB58:
 3221              	.LBB59:
 246:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3222              	 .loc 1 246 0 discriminator 1
 3223 0012 5968     	 ldr r1,[r3,#4]
 3224              	.LBE59:
 3225              	.LBE58:
1558:../Libraries/XMCLib/src/xmc4_scu.c ****   while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 3226              	 .loc 1 1558 0 discriminator 1
 3227 0014 0802     	 lsls r0,r1,#8
 3228 0016 FCD5     	 bpl .L352
 3229              	.LVL174:
 3230              	.LBB60:
 3231              	.LBB61:
 252:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3232              	 .loc 1 252 0
 3233 0018 0A49     	 ldr r1,.L361
 3234 001a 4FF40030 	 mov r0,#131072
 3235 001e C860     	 str r0,[r1,#12]
 3236              	.LBE61:
 3237              	.LBE60:
1559:../Libraries/XMCLib/src/xmc4_scu.c **** 
1560:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Clear ULP WDG status */
1561:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
1562:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 3238              	 .loc 1 1562 0
 3239 0020 0821     	 movs r1,#8
 3240 0022 5160     	 str r1,[r2,#4]
 3241              	.L353:
 3242              	.LBB62:
 3243              	.LBB63:
 246:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3244              	 .loc 1 246 0 discriminator 1
 3245 0024 5A68     	 ldr r2,[r3,#4]
 3246              	.LBE63:
 3247              	.LBE62:
1563:../Libraries/XMCLib/src/xmc4_scu.c ****   while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 3248              	 .loc 1 1563 0 discriminator 1
 3249 0026 9103     	 lsls r1,r2,#14
 3250 0028 FCD5     	 bpl .L353
 3251              	.LVL175:
 3252              	.LBB64:
 3253              	.LBB65:
 252:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3254              	 .loc 1 252 0
 3255 002a 064A     	 ldr r2,.L361
 3256 002c 4FF40021 	 mov r1,#524288
 3257 0030 D160     	 str r1,[r2,#12]
 3258              	.LBE65:
 3259              	.LBE64:
1564:../Libraries/XMCLib/src/xmc4_scu.c **** 
1565:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Enable ULP WDG */
1566:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
1567:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 3260              	 .loc 1 1567 0
 3261 0032 0549     	 ldr r1,.L361+4
 3262 0034 CA68     	 ldr r2,[r1,#12]
 3263 0036 42F00802 	 orr r2,r2,#8
 3264 003a CA60     	 str r2,[r1,#12]
 3265              	.L354:
 3266              	.LBB66:
 3267              	.LBB67:
 246:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3268              	 .loc 1 246 0 discriminator 1
 3269 003c 5A68     	 ldr r2,[r3,#4]
 3270              	.LBE67:
 3271              	.LBE66:
1568:../Libraries/XMCLib/src/xmc4_scu.c ****   while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 3272              	 .loc 1 1568 0 discriminator 1
 3273 003e 1203     	 lsls r2,r2,#12
 3274 0040 FCD5     	 bpl .L354
1569:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3275              	 .loc 1 1569 0
 3276 0042 7047     	 bx lr
 3277              	.L362:
 3278              	 .align 2
 3279              	.L361:
 3280 0044 74400050 	 .word 1342193780
 3281 0048 00430050 	 .word 1342194432
 3282              	 .cfi_endproc
 3283              	.LFE267:
 3285              	 .section .text.XMC_SCU_CLOCK_DisableLowPowerOscillator,"ax",%progbits
 3286              	 .align 1
 3287              	 .global XMC_SCU_CLOCK_DisableLowPowerOscillator
 3288              	 .thumb
 3289              	 .thumb_func
 3291              	XMC_SCU_CLOCK_DisableLowPowerOscillator:
 3292              	.LFB268:
1570:../Libraries/XMCLib/src/xmc4_scu.c **** 
1571:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the 32khz Ultra Low Power oscillator */
1572:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
1573:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3293              	 .loc 1 1573 0
 3294              	 .cfi_startproc
 3295              	 
 3296              	 
 3297              	 
 3298              	.L364:
1574:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 3299              	 .loc 1 1574 0 discriminator 1
 3300 0000 054B     	 ldr r3,.L366
 3301 0002 D3F8C430 	 ldr r3,[r3,#196]
 3302 0006 1B06     	 lsls r3,r3,#24
 3303 0008 FAD4     	 bmi .L364
1575:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1576:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
1577:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1578:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 3304              	 .loc 1 1578 0
 3305 000a 044A     	 ldr r2,.L366+4
 3306 000c D369     	 ldr r3,[r2,#28]
 3307 000e 43F03003 	 orr r3,r3,#48
 3308 0012 D361     	 str r3,[r2,#28]
 3309 0014 7047     	 bx lr
 3310              	.L367:
 3311 0016 00BF     	 .align 2
 3312              	.L366:
 3313 0018 00400050 	 .word 1342193664
 3314 001c 00430050 	 .word 1342194432
 3315              	 .cfi_endproc
 3316              	.LFE268:
 3318              	 .section .text.XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput,"ax",%progbits
 3319              	 .align 1
 3320              	 .global XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput
 3321              	 .thumb
 3322              	 .thumb_func
 3324              	XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput:
 3325              	.LFB269:
1579:../Libraries/XMCLib/src/xmc4_scu.c **** }
1580:../Libraries/XMCLib/src/xmc4_scu.c **** 
1581:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
1582:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3326              	 .loc 1 1582 0
 3327              	 .cfi_startproc
 3328              	 
 3329              	 
 3330              	 
 3331              	.L369:
1583:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 3332              	 .loc 1 1583 0 discriminator 1
 3333 0000 054B     	 ldr r3,.L371
 3334 0002 D3F8C430 	 ldr r3,[r3,#196]
 3335 0006 1B06     	 lsls r3,r3,#24
 3336 0008 FAD4     	 bmi .L369
1584:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1585:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
1586:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1587:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 3337              	 .loc 1 1587 0
 3338 000a 044A     	 ldr r2,.L371+4
 3339 000c D369     	 ldr r3,[r2,#28]
 3340 000e 43F03103 	 orr r3,r3,#49
 3341 0012 D361     	 str r3,[r2,#28]
 3342 0014 7047     	 bx lr
 3343              	.L372:
 3344 0016 00BF     	 .align 2
 3345              	.L371:
 3346 0018 00400050 	 .word 1342193664
 3347 001c 00430050 	 .word 1342194432
 3348              	 .cfi_endproc
 3349              	.LFE269:
 3351              	 .section .text.XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput,"ax",%progbits
 3352              	 .align 1
 3353              	 .global XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput
 3354              	 .thumb
 3355              	 .thumb_func
 3357              	XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput:
 3358              	.LFB270:
1588:../Libraries/XMCLib/src/xmc4_scu.c **** }
1589:../Libraries/XMCLib/src/xmc4_scu.c **** 
1590:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
1591:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3359              	 .loc 1 1591 0
 3360              	 .cfi_startproc
 3361              	 
 3362              	 
 3363              	 
 3364              	.L374:
1592:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 3365              	 .loc 1 1592 0 discriminator 1
 3366 0000 064B     	 ldr r3,.L376
 3367 0002 D3F8C430 	 ldr r3,[r3,#196]
 3368 0006 1B06     	 lsls r3,r3,#24
 3369 0008 FAD4     	 bmi .L374
1593:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1594:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
1595:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1596:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_
 3370              	 .loc 1 1596 0
 3371 000a 054A     	 ldr r2,.L376+4
 3372 000c D369     	 ldr r3,[r2,#28]
 3373 000e 23F03103 	 bic r3,r3,#49
 3374 0012 43F02003 	 orr r3,r3,#32
 3375 0016 D361     	 str r3,[r2,#28]
 3376 0018 7047     	 bx lr
 3377              	.L377:
 3378 001a 00BF     	 .align 2
 3379              	.L376:
 3380 001c 00400050 	 .word 1342193664
 3381 0020 00430050 	 .word 1342194432
 3382              	 .cfi_endproc
 3383              	.LFE270:
 3385              	 .section .text.XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus,"ax",%progbits
 3386              	 .align 1
 3387              	 .global XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus
 3388              	 .thumb
 3389              	 .thumb_func
 3391              	XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus:
 3392              	.LFB271:
1597:../Libraries/XMCLib/src/xmc4_scu.c ****                              (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTR
1598:../Libraries/XMCLib/src/xmc4_scu.c **** }
1599:../Libraries/XMCLib/src/xmc4_scu.c **** 
1600:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
1601:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3393              	 .loc 1 1601 0
 3394              	 .cfi_startproc
 3395              	 
 3396              	 
 3397              	 
1602:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 3398              	 .loc 1 1602 0
 3399 0000 024B     	 ldr r3,.L379
 3400 0002 9869     	 ldr r0,[r3,#24]
1603:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3401              	 .loc 1 1603 0
 3402 0004 00F00100 	 and r0,r0,#1
 3403 0008 7047     	 bx lr
 3404              	.L380:
 3405 000a 00BF     	 .align 2
 3406              	.L379:
 3407 000c 00430050 	 .word 1342194432
 3408              	 .cfi_endproc
 3409              	.LFE271:
 3411              	 .section .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator,"ax",%progbits
 3412              	 .align 1
 3413              	 .global XMC_SCU_CLOCK_EnableHighPerformanceOscillator
 3414              	 .thumb
 3415              	 .thumb_func
 3417              	XMC_SCU_CLOCK_EnableHighPerformanceOscillator:
 3418              	.LFB272:
1604:../Libraries/XMCLib/src/xmc4_scu.c **** 
1605:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable High Precision High Speed oscillator */
1606:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
1607:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3419              	 .loc 1 1607 0
 3420              	 .cfi_startproc
 3421              	 
 3422              	 
 3423 0000 70B5     	 push {r4,r5,r6,lr}
 3424              	.LCFI13:
 3425              	 .cfi_def_cfa_offset 16
 3426              	 .cfi_offset 4,-16
 3427              	 .cfi_offset 5,-12
 3428              	 .cfi_offset 6,-8
 3429              	 .cfi_offset 14,-4
1608:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 3430              	 .loc 1 1608 0
 3431 0002 0C4D     	 ldr r5,.L382
1609:../Libraries/XMCLib/src/xmc4_scu.c **** 
1610:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCH
 3432              	 .loc 1 1610 0
 3433 0004 0C4E     	 ldr r6,.L382+4
1608:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 3434              	 .loc 1 1608 0
 3435 0006 6B68     	 ldr r3,[r5,#4]
 3436 0008 23F48033 	 bic r3,r3,#65536
 3437 000c 6B60     	 str r3,[r5,#4]
 3438              	 .loc 1 1610 0
 3439 000e 7468     	 ldr r4,[r6,#4]
1611:../Libraries/XMCLib/src/xmc4_scu.c ****                                   (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OS
 3440              	 .loc 1 1611 0
 3441 0010 FFF7FEFF 	 bl OSCHP_GetFrequency
 3442              	.LVL176:
 3443 0014 094B     	 ldr r3,.L382+8
 3444 0016 B0FBF3F0 	 udiv r0,r0,r3
1610:../Libraries/XMCLib/src/xmc4_scu.c ****                                   (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OS
 3445              	 .loc 1 1610 0
 3446 001a 24F47023 	 bic r3,r4,#983040
 3447              	 .loc 1 1611 0
 3448 001e 0138     	 subs r0,r0,#1
1610:../Libraries/XMCLib/src/xmc4_scu.c ****                                   (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OS
 3449              	 .loc 1 1610 0
 3450 0020 23F03003 	 bic r3,r3,#48
 3451 0024 43EA0043 	 orr r3,r3,r0,lsl#16
 3452 0028 7360     	 str r3,[r6,#4]
1612:../Libraries/XMCLib/src/xmc4_scu.c **** 
1613:../Libraries/XMCLib/src/xmc4_scu.c ****   /* restart OSC Watchdog */
1614:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 3453              	 .loc 1 1614 0
 3454 002a 6B68     	 ldr r3,[r5,#4]
 3455 002c 23F40033 	 bic r3,r3,#131072
 3456 0030 6B60     	 str r3,[r5,#4]
 3457 0032 70BD     	 pop {r4,r5,r6,pc}
 3458              	.L383:
 3459              	 .align 2
 3460              	.L382:
 3461 0034 10470050 	 .word 1342195472
 3462 0038 00470050 	 .word 1342195456
 3463 003c A0252600 	 .word 2500000
 3464              	 .cfi_endproc
 3465              	.LFE272:
 3467              	 .section .text.XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable,"ax",%progbits
 3468              	 .align 1
 3469              	 .global XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable
 3470              	 .thumb
 3471              	 .thumb_func
 3473              	XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable:
 3474              	.LFB273:
1615:../Libraries/XMCLib/src/xmc4_scu.c **** }
1616:../Libraries/XMCLib/src/xmc4_scu.c **** 
1617:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
1618:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3475              	 .loc 1 1618 0
 3476              	 .cfi_startproc
 3477              	 
 3478              	 
 3479              	 
1619:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 3480              	 .loc 1 1619 0
 3481 0000 044B     	 ldr r3,.L385
 3482 0002 1868     	 ldr r0,[r3]
 3483 0004 00F46070 	 and r0,r0,#896
1620:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3484              	 .loc 1 1620 0
 3485 0008 A0F56073 	 sub r3,r0,#896
 3486 000c 5842     	 rsbs r0,r3,#0
 3487 000e 5841     	 adcs r0,r0,r3
 3488 0010 7047     	 bx lr
 3489              	.L386:
 3490 0012 00BF     	 .align 2
 3491              	.L385:
 3492 0014 10470050 	 .word 1342195472
 3493              	 .cfi_endproc
 3494              	.LFE273:
 3496              	 .section .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator,"ax",%progbits
 3497              	 .align 1
 3498              	 .global XMC_SCU_CLOCK_DisableHighPerformanceOscillator
 3499              	 .thumb
 3500              	 .thumb_func
 3502              	XMC_SCU_CLOCK_DisableHighPerformanceOscillator:
 3503              	.LFB274:
1621:../Libraries/XMCLib/src/xmc4_scu.c **** 
1622:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable High Precision High Speed oscillator */
1623:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
1624:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3504              	 .loc 1 1624 0
 3505              	 .cfi_startproc
 3506              	 
 3507              	 
 3508              	 
1625:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 3509              	 .loc 1 1625 0
 3510 0000 024A     	 ldr r2,.L388
 3511 0002 5368     	 ldr r3,[r2,#4]
 3512 0004 43F03003 	 orr r3,r3,#48
 3513 0008 5360     	 str r3,[r2,#4]
 3514 000a 7047     	 bx lr
 3515              	.L389:
 3516              	 .align 2
 3517              	.L388:
 3518 000c 00470050 	 .word 1342195456
 3519              	 .cfi_endproc
 3520              	.LFE274:
 3522              	 .section .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput,"ax",%progbits
 3523              	 .align 1
 3524              	 .global XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput
 3525              	 .thumb
 3526              	 .thumb_func
 3528              	XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput:
 3529              	.LFB275:
1626:../Libraries/XMCLib/src/xmc4_scu.c **** }
1627:../Libraries/XMCLib/src/xmc4_scu.c **** 
1628:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
1629:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3530              	 .loc 1 1629 0
 3531              	 .cfi_startproc
 3532              	 
 3533              	 
 3534              	 
1630:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 3535              	 .loc 1 1630 0
 3536 0000 024A     	 ldr r2,.L391
 3537 0002 5368     	 ldr r3,[r2,#4]
 3538 0004 43F00103 	 orr r3,r3,#1
 3539 0008 5360     	 str r3,[r2,#4]
 3540 000a 7047     	 bx lr
 3541              	.L392:
 3542              	 .align 2
 3543              	.L391:
 3544 000c 00470050 	 .word 1342195456
 3545              	 .cfi_endproc
 3546              	.LFE275:
 3548              	 .section .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput,"ax",%progbits
 3549              	 .align 1
 3550              	 .global XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput
 3551              	 .thumb
 3552              	 .thumb_func
 3554              	XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput:
 3555              	.LFB276:
1631:../Libraries/XMCLib/src/xmc4_scu.c **** }
1632:../Libraries/XMCLib/src/xmc4_scu.c **** 
1633:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
1634:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3556              	 .loc 1 1634 0
 3557              	 .cfi_startproc
 3558              	 
 3559              	 
 3560              	 
1635:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 3561              	 .loc 1 1635 0
 3562 0000 024A     	 ldr r2,.L394
 3563 0002 5368     	 ldr r3,[r2,#4]
 3564 0004 23F00103 	 bic r3,r3,#1
 3565 0008 5360     	 str r3,[r2,#4]
 3566 000a 7047     	 bx lr
 3567              	.L395:
 3568              	 .align 2
 3569              	.L394:
 3570 000c 00470050 	 .word 1342195456
 3571              	 .cfi_endproc
 3572              	.LFE276:
 3574              	 .section .text.XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus,"ax",%progbits
 3575              	 .align 1
 3576              	 .global XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus
 3577              	 .thumb
 3578              	 .thumb_func
 3580              	XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus:
 3581              	.LFB277:
1636:../Libraries/XMCLib/src/xmc4_scu.c **** }
1637:../Libraries/XMCLib/src/xmc4_scu.c **** 
1638:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
1639:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3582              	 .loc 1 1639 0
 3583              	 .cfi_startproc
 3584              	 
 3585              	 
 3586              	 
1640:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 3587              	 .loc 1 1640 0
 3588 0000 024B     	 ldr r3,.L397
 3589 0002 1868     	 ldr r0,[r3]
1641:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3590              	 .loc 1 1641 0
 3591 0004 00F00100 	 and r0,r0,#1
 3592 0008 7047     	 bx lr
 3593              	.L398:
 3594 000a 00BF     	 .align 2
 3595              	.L397:
 3596 000c 00470050 	 .word 1342195456
 3597              	 .cfi_endproc
 3598              	.LFE277:
 3600              	 .section .text.XMC_SCU_CLOCK_EnableSystemPll,"ax",%progbits
 3601              	 .align 1
 3602              	 .global XMC_SCU_CLOCK_EnableSystemPll
 3603              	 .thumb
 3604              	 .thumb_func
 3606              	XMC_SCU_CLOCK_EnableSystemPll:
 3607              	.LFB278:
1642:../Libraries/XMCLib/src/xmc4_scu.c **** 
1643:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable main PLL */
1644:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableSystemPll(void)
1645:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3608              	 .loc 1 1645 0
 3609              	 .cfi_startproc
 3610              	 
 3611              	 
 3612              	 
1646:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 3613              	 .loc 1 1646 0
 3614 0000 034A     	 ldr r2,.L400
 3615 0002 5368     	 ldr r3,[r2,#4]
 3616 0004 23F48033 	 bic r3,r3,#65536
 3617 0008 23F00203 	 bic r3,r3,#2
 3618 000c 5360     	 str r3,[r2,#4]
 3619 000e 7047     	 bx lr
 3620              	.L401:
 3621              	 .align 2
 3622              	.L400:
 3623 0010 10470050 	 .word 1342195472
 3624              	 .cfi_endproc
 3625              	.LFE278:
 3627              	 .section .text.XMC_SCU_CLOCK_DisableSystemPll,"ax",%progbits
 3628              	 .align 1
 3629              	 .global XMC_SCU_CLOCK_DisableSystemPll
 3630              	 .thumb
 3631              	 .thumb_func
 3633              	XMC_SCU_CLOCK_DisableSystemPll:
 3634              	.LFB279:
1647:../Libraries/XMCLib/src/xmc4_scu.c **** }
1648:../Libraries/XMCLib/src/xmc4_scu.c **** 
1649:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable main PLL */
1650:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableSystemPll(void)
1651:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3635              	 .loc 1 1651 0
 3636              	 .cfi_startproc
 3637              	 
 3638              	 
 3639              	 
1652:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 3640              	 .loc 1 1652 0
 3641 0000 034A     	 ldr r2,.L403
 3642 0002 5368     	 ldr r3,[r2,#4]
 3643 0004 43F48033 	 orr r3,r3,#65536
 3644 0008 43F00203 	 orr r3,r3,#2
 3645 000c 5360     	 str r3,[r2,#4]
 3646 000e 7047     	 bx lr
 3647              	.L404:
 3648              	 .align 2
 3649              	.L403:
 3650 0010 10470050 	 .word 1342195472
 3651              	 .cfi_endproc
 3652              	.LFE279:
 3654              	 .section .text.XMC_SCU_CLOCK_StopSystemPll,"ax",%progbits
 3655              	 .align 1
 3656              	 .global XMC_SCU_CLOCK_StopSystemPll
 3657              	 .thumb
 3658              	 .thumb_func
 3660              	XMC_SCU_CLOCK_StopSystemPll:
 3661              	.LFB281:
1653:../Libraries/XMCLib/src/xmc4_scu.c **** }
1654:../Libraries/XMCLib/src/xmc4_scu.c **** 
1655:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure main PLL */
1656:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
1657:../Libraries/XMCLib/src/xmc4_scu.c ****                                   XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
1658:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t pdiv,
1659:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t ndiv,
1660:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t kdiv)
1661:../Libraries/XMCLib/src/xmc4_scu.c **** {
1662:../Libraries/XMCLib/src/xmc4_scu.c **** 
1663:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
1664:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t kdiv_temp;
1665:../Libraries/XMCLib/src/xmc4_scu.c **** 
1666:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemPllClockSource(source);
1667:../Libraries/XMCLib/src/xmc4_scu.c **** 
1668:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
1669:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1670:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Calculate initial step to be close to fOFI */
1671:../Libraries/XMCLib/src/xmc4_scu.c ****     if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
1672:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1673:../Libraries/XMCLib/src/xmc4_scu.c ****       vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
1674:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1675:../Libraries/XMCLib/src/xmc4_scu.c ****     else
1676:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1677:../Libraries/XMCLib/src/xmc4_scu.c ****       vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
1678:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1679:../Libraries/XMCLib/src/xmc4_scu.c ****     vco_frequency = ((vco_frequency * ndiv) / pdiv);
1680:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
1681:../Libraries/XMCLib/src/xmc4_scu.c **** 
1682:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to prescaler mode */
1683:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
1684:../Libraries/XMCLib/src/xmc4_scu.c **** 
1685:../Libraries/XMCLib/src/xmc4_scu.c ****     /* disconnect Oscillator from PLL */
1686:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
1687:../Libraries/XMCLib/src/xmc4_scu.c **** 
1688:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Setup divider settings for main PLL */
1689:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_
1690:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
1691:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
1692:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
1693:../Libraries/XMCLib/src/xmc4_scu.c **** 
1694:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
1695:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
1696:../Libraries/XMCLib/src/xmc4_scu.c **** 
1697:../Libraries/XMCLib/src/xmc4_scu.c ****     /* connect Oscillator to PLL */
1698:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
1699:../Libraries/XMCLib/src/xmc4_scu.c **** 
1700:../Libraries/XMCLib/src/xmc4_scu.c ****     /* restart PLL Lock detection */
1701:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
1702:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
1703:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1704:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for PLL Lock */
1705:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1706:../Libraries/XMCLib/src/xmc4_scu.c **** 
1707:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to normal mode */
1708:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
1709:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
1710:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1711:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for normal mode */
1712:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1713:../Libraries/XMCLib/src/xmc4_scu.c **** 
1714:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Ramp up PLL frequency in steps */
1715:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (vco_frequency / 60UL) >> 22;
1716:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
1717:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1718:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
1719:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1720:../Libraries/XMCLib/src/xmc4_scu.c **** 
1721:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (vco_frequency / 90UL) >> 22;
1722:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
1723:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1724:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
1725:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1726:../Libraries/XMCLib/src/xmc4_scu.c **** 
1727:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
1728:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1729:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1730:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1731:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
1732:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
1733:../Libraries/XMCLib/src/xmc4_scu.c **** 
1734:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to prescaler mode */
1735:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
1736:../Libraries/XMCLib/src/xmc4_scu.c **** 
1737:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
1738:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1739:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for prescaler mode */
1740:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1741:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1742:../Libraries/XMCLib/src/xmc4_scu.c **** }
1743:../Libraries/XMCLib/src/xmc4_scu.c **** 
1744:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to stop main PLL operation */
1745:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StopSystemPll(void)
1746:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3662              	 .loc 1 1746 0
 3663              	 .cfi_startproc
 3664              	 
 3665              	 
 3666              	 
1747:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 3667              	 .loc 1 1747 0
 3668 0000 024A     	 ldr r2,.L406
 3669 0002 5368     	 ldr r3,[r2,#4]
 3670 0004 43F48033 	 orr r3,r3,#65536
 3671 0008 5360     	 str r3,[r2,#4]
 3672 000a 7047     	 bx lr
 3673              	.L407:
 3674              	 .align 2
 3675              	.L406:
 3676 000c 10470050 	 .word 1342195472
 3677              	 .cfi_endproc
 3678              	.LFE281:
 3680              	 .section .text.XMC_SCU_CLOCK_StepSystemPllFrequency,"ax",%progbits
 3681              	 .align 1
 3682              	 .global XMC_SCU_CLOCK_StepSystemPllFrequency
 3683              	 .thumb
 3684              	 .thumb_func
 3686              	XMC_SCU_CLOCK_StepSystemPllFrequency:
 3687              	.LFB282:
1748:../Libraries/XMCLib/src/xmc4_scu.c **** }
1749:../Libraries/XMCLib/src/xmc4_scu.c **** 
1750:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to step up/down the main PLL frequency */
1751:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
1752:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3688              	 .loc 1 1752 0
 3689              	 .cfi_startproc
 3690              	 
 3691              	 
 3692              	 
 3693              	.LVL177:
1753:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 3694              	 .loc 1 1753 0
 3695 0000 054A     	 ldr r2,.L409
 3696 0002 9368     	 ldr r3,[r2,#8]
1754:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 3697              	 .loc 1 1754 0
 3698 0004 0138     	 subs r0,r0,#1
 3699              	.LVL178:
1753:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 3700              	 .loc 1 1753 0
 3701 0006 23F4FE03 	 bic r3,r3,#8323072
 3702 000a 43EA0043 	 orr r3,r3,r0,lsl#16
 3703 000e 9360     	 str r3,[r2,#8]
1755:../Libraries/XMCLib/src/xmc4_scu.c **** 
1756:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_lDelay(50U);
 3704              	 .loc 1 1756 0
 3705 0010 3220     	 movs r0,#50
 3706              	.LVL179:
 3707 0012 FFF7FEBF 	 b XMC_SCU_lDelay
 3708              	.LVL180:
 3709              	.L410:
 3710 0016 00BF     	 .align 2
 3711              	.L409:
 3712 0018 10470050 	 .word 1342195472
 3713              	 .cfi_endproc
 3714              	.LFE282:
 3716              	 .section .text.XMC_SCU_CLOCK_StartSystemPll,"ax",%progbits
 3717              	 .align 1
 3718              	 .global XMC_SCU_CLOCK_StartSystemPll
 3719              	 .thumb
 3720              	 .thumb_func
 3722              	XMC_SCU_CLOCK_StartSystemPll:
 3723              	.LFB280:
1661:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3724              	 .loc 1 1661 0
 3725              	 .cfi_startproc
 3726              	 
 3727              	 
 3728              	.LVL181:
 3729 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 3730              	.LCFI14:
 3731              	 .cfi_def_cfa_offset 24
 3732              	 .cfi_offset 4,-24
 3733              	 .cfi_offset 5,-20
 3734              	 .cfi_offset 6,-16
 3735              	 .cfi_offset 7,-12
 3736              	 .cfi_offset 8,-8
 3737              	 .cfi_offset 14,-4
1661:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3738              	 .loc 1 1661 0
 3739 0004 0C46     	 mov r4,r1
 3740 0006 0546     	 mov r5,r0
 3741 0008 9046     	 mov r8,r2
 3742 000a 1F46     	 mov r7,r3
 3743 000c 069E     	 ldr r6,[sp,#24]
1666:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3744              	 .loc 1 1666 0
 3745 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemPllClockSource
 3746              	.LVL182:
1668:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3747              	 .loc 1 1668 0
 3748 0012 012C     	 cmp r4,#1
 3749 0014 314C     	 ldr r4,.L425
 3750 0016 52D1     	 bne .L412
 3751              	.LVL183:
 3752              	.LBB70:
 3753              	.LBB71:
1671:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3754              	 .loc 1 1671 0
 3755 0018 35B9     	 cbnz r5,.L419
1673:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 3756              	 .loc 1 1673 0
 3757 001a FFF7FEFF 	 bl OSCHP_GetFrequency
 3758              	.LVL184:
 3759 001e 304D     	 ldr r5,.L425+4
 3760              	.LVL185:
 3761 0020 B0FBF5F0 	 udiv r0,r0,r5
 3762 0024 8005     	 lsls r0,r0,#22
 3763              	.LVL186:
 3764 0026 01E0     	 b .L413
 3765              	.LVL187:
 3766              	.L419:
1677:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 3767              	 .loc 1 1677 0
 3768 0028 4FF0C060 	 mov r0,#100663296
 3769              	.LVL188:
 3770              	.L413:
1683:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3771              	 .loc 1 1683 0
 3772 002c 6368     	 ldr r3,[r4,#4]
 3773 002e 43F00103 	 orr r3,r3,#1
 3774 0032 6360     	 str r3,[r4,#4]
1686:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3775              	 .loc 1 1686 0
 3776 0034 6368     	 ldr r3,[r4,#4]
 3777 0036 43F01003 	 orr r3,r3,#16
 3778 003a 6360     	 str r3,[r4,#4]
1689:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 3779              	 .loc 1 1689 0
 3780 003c A168     	 ldr r1,[r4,#8]
 3781 003e 294B     	 ldr r3,.L425+8
1692:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3782              	 .loc 1 1692 0
 3783 0040 08F1FF32 	 add r2,r8,#-1
1689:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 3784              	 .loc 1 1689 0
 3785 0044 0B40     	 ands r3,r3,r1
 3786 0046 43EA0263 	 orr r3,r3,r2,lsl#24
1690:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 3787              	 .loc 1 1690 0
 3788 004a 7A1E     	 subs r2,r7,#1
 3789 004c 43EA0222 	 orr r2,r3,r2,lsl#8
1679:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 3790              	 .loc 1 1679 0
 3791 0050 7843     	 muls r0,r7,r0
 3792              	.LVL189:
1680:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3793              	 .loc 1 1680 0
 3794 0052 1823     	 movs r3,#24
1679:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 3795              	 .loc 1 1679 0
 3796 0054 B0FBF8F5 	 udiv r5,r0,r8
 3797              	.LVL190:
1680:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3798              	 .loc 1 1680 0
 3799 0058 B5FBF3F3 	 udiv r3,r5,r3
 3800 005c 9B0D     	 lsrs r3,r3,#22
 3801              	.LVL191:
1691:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 3802              	 .loc 1 1691 0
 3803 005e 013B     	 subs r3,r3,#1
 3804              	.LVL192:
1689:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 3805              	 .loc 1 1689 0
 3806 0060 42EA0343 	 orr r3,r2,r3,lsl#16
 3807              	.LVL193:
 3808 0064 A360     	 str r3,[r4,#8]
1695:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3809              	 .loc 1 1695 0
 3810 0066 6368     	 ldr r3,[r4,#4]
 3811 0068 43F04003 	 orr r3,r3,#64
 3812 006c 6360     	 str r3,[r4,#4]
1698:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3813              	 .loc 1 1698 0
 3814 006e 6368     	 ldr r3,[r4,#4]
 3815 0070 23F01003 	 bic r3,r3,#16
 3816 0074 6360     	 str r3,[r4,#4]
1701:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 3817              	 .loc 1 1701 0
 3818 0076 6368     	 ldr r3,[r4,#4]
 3819 0078 43F48023 	 orr r3,r3,#262144
 3820 007c 6360     	 str r3,[r4,#4]
 3821              	.L414:
1702:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3822              	 .loc 1 1702 0
 3823 007e 2368     	 ldr r3,[r4]
 3824 0080 164A     	 ldr r2,.L425
 3825 0082 5907     	 lsls r1,r3,#29
 3826 0084 FBD5     	 bpl .L414
1708:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 3827              	 .loc 1 1708 0
 3828 0086 5368     	 ldr r3,[r2,#4]
 3829 0088 23F00103 	 bic r3,r3,#1
 3830 008c 5360     	 str r3,[r2,#4]
 3831              	.L415:
1709:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3832              	 .loc 1 1709 0
 3833 008e 2368     	 ldr r3,[r4]
 3834 0090 DA07     	 lsls r2,r3,#31
 3835 0092 FCD4     	 bmi .L415
1715:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
 3836              	 .loc 1 1715 0
 3837 0094 3C20     	 movs r0,#60
 3838 0096 B5FBF0F0 	 udiv r0,r5,r0
 3839 009a 800D     	 lsrs r0,r0,#22
 3840              	.LVL194:
1716:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3841              	 .loc 1 1716 0
 3842 009c 8642     	 cmp r6,r0
 3843 009e 01D2     	 bcs .L416
1718:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 3844              	 .loc 1 1718 0
 3845 00a0 FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 3846              	.LVL195:
 3847              	.L416:
1721:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
 3848              	 .loc 1 1721 0
 3849 00a4 5A20     	 movs r0,#90
 3850 00a6 B5FBF0F0 	 udiv r0,r5,r0
 3851 00aa 800D     	 lsrs r0,r0,#22
 3852              	.LVL196:
1722:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3853              	 .loc 1 1722 0
 3854 00ac 8642     	 cmp r6,r0
 3855 00ae 01D2     	 bcs .L417
1724:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 3856              	 .loc 1 1724 0
 3857 00b0 FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 3858              	.LVL197:
 3859              	.L417:
1727:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 3860              	 .loc 1 1727 0
 3861 00b4 3046     	 mov r0,r6
 3862              	.LBE71:
 3863              	.LBE70:
1742:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3864              	 .loc 1 1742 0
 3865 00b6 BDE8F041 	 pop {r4,r5,r6,r7,r8,lr}
 3866              	.LCFI15:
 3867              	 .cfi_remember_state
 3868              	 .cfi_restore 14
 3869              	 .cfi_restore 8
 3870              	 .cfi_restore 7
 3871              	 .cfi_restore 6
 3872              	 .cfi_restore 5
 3873              	 .cfi_restore 4
 3874              	 .cfi_def_cfa_offset 0
 3875              	.LVL198:
 3876              	.LBB73:
 3877              	.LBB72:
1727:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 3878              	 .loc 1 1727 0
 3879 00ba FFF7FEBF 	 b XMC_SCU_CLOCK_StepSystemPllFrequency
 3880              	.LVL199:
 3881              	.L412:
 3882              	.LCFI16:
 3883              	 .cfi_restore_state
 3884              	.LBE72:
 3885              	.LBE73:
1731:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 3886              	 .loc 1 1731 0
 3887 00be A368     	 ldr r3,[r4,#8]
1732:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3888              	 .loc 1 1732 0
 3889 00c0 013E     	 subs r6,r6,#1
1731:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 3890              	 .loc 1 1731 0
 3891 00c2 23F07F03 	 bic r3,r3,#127
 3892 00c6 1E43     	 orrs r6,r6,r3
 3893 00c8 A660     	 str r6,[r4,#8]
1735:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3894              	 .loc 1 1735 0
 3895 00ca 6368     	 ldr r3,[r4,#4]
 3896 00cc 43F00103 	 orr r3,r3,#1
 3897 00d0 6360     	 str r3,[r4,#4]
 3898              	.L418:
1737:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 3899              	 .loc 1 1737 0 discriminator 1
 3900 00d2 2368     	 ldr r3,[r4]
 3901 00d4 DB07     	 lsls r3,r3,#31
 3902 00d6 FCD5     	 bpl .L418
1742:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3903              	 .loc 1 1742 0
 3904 00d8 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 3905              	.LVL200:
 3906              	.L426:
 3907              	 .align 2
 3908              	.L425:
 3909 00dc 10470050 	 .word 1342195472
 3910 00e0 40420F00 	 .word 1000000
 3911 00e4 FF8080F0 	 .word -260013825
 3912              	 .cfi_endproc
 3913              	.LFE280:
 3915              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 3916              	 .align 1
 3917              	 .global XMC_SCU_CLOCK_Init
 3918              	 .thumb
 3919              	 .thumb_func
 3921              	XMC_SCU_CLOCK_Init:
 3922              	.LFB196:
 504:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fsys_clkdiv != 0);
 3923              	 .loc 1 504 0
 3924              	 .cfi_startproc
 3925              	 
 3926              	 
 3927              	.LVL201:
 3928 0000 37B5     	 push {r0,r1,r2,r4,r5,lr}
 3929              	.LCFI17:
 3930              	 .cfi_def_cfa_offset 24
 3931              	 .cfi_offset 4,-12
 3932              	 .cfi_offset 5,-8
 3933              	 .cfi_offset 14,-4
 504:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fsys_clkdiv != 0);
 3934              	 .loc 1 504 0
 3935 0002 0446     	 mov r4,r0
 527:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3936              	 .loc 1 527 0
 3937 0004 0020     	 movs r0,#0
 3938              	.LVL202:
 3939 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockSource
 3940              	.LVL203:
 529:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3941              	 .loc 1 529 0
 3942 000a FFF7FEFF 	 bl XMC_SCU_HIB_EnableHibernateDomain
 3943              	.LVL204:
 531:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3944              	 .loc 1 531 0
 3945 000e E379     	 ldrb r3,[r4,#7]
 3946 0010 1BB9     	 cbnz r3,.L428
 3947              	.L430:
 537:../Libraries/XMCLib/src/xmc4_scu.c ****   while (XMC_SCU_GetMirrorStatus() != 0)
 3948              	 .loc 1 537 0
 3949 0012 607A     	 ldrb r0,[r4,#9]
 3950 0014 FFF7FEFF 	 bl XMC_SCU_HIB_SetStandbyClockSource
 3951              	.LVL205:
 538:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3952              	 .loc 1 538 0
 3953 0018 06E0     	 b .L429
 3954              	.L428:
 533:../Libraries/XMCLib/src/xmc4_scu.c ****     while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 3955              	 .loc 1 533 0
 3956 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableLowPowerOscillator
 3957              	.LVL206:
 3958              	.L431:
 534:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 3959              	 .loc 1 534 0 discriminator 1
 3960 001e FFF7FEFF 	 bl XMC_SCU_CLOCK_IsLowPowerOscillatorStable
 3961              	.LVL207:
 3962 0022 0028     	 cmp r0,#0
 3963 0024 FBD0     	 beq .L431
 3964 0026 F4E7     	 b .L430
 3965              	.L429:
 3966              	.LBB74:
 3967              	.LBB75:
 3968              	 .file 3 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_scu.h"
   1:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
   2:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @file xmc_scu.h
   3:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @date 2016-03-09
   4:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
   5:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @cond
   6:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
   7:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
   9:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * All rights reserved.                        
  11:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                                             
  12:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * following conditions are met:   
  14:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  15:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * disclaimer.                        
  17:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * 
  18:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * 
  21:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  24:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  32:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
  35:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  36:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Change History
  37:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * --------------
  38:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  39:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-02-20:
  40:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Initial <br>
  41:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  42:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-05-20:
  43:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Documentation improved <br>
  44:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - XMC_ASSERT() hanging issues have fixed for XMC4 devices. <br>
  45:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  46:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-06-20:
  47:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Removed STATIC_INLINE property for the below APIs and declared as void
  49:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_EnableEvent, XMC_SCU_INTERRUPT_DisableEvent,
  50:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_TriggerEvent, XMC_SCU_INTERUPT_GetEventStatus,
  51:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERUPT_ClearEventStatus
  52:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  53:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-11-30:
  54:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Documentation improved <br>
  55:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *      
  56:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2016-03-09:
  57:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Optimization of write only registers
  58:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *      
  59:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @endcond 
  60:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  61:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
  62:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #ifndef XMC_SCU_H
  63:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #define XMC_SCU_H
  64:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  
  65:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
  66:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * HEADER FILES
  67:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
  68:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc_common.h>
  69:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
  70:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
  71:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  72:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @{
  73:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
  74:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  
  75:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
  76:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @addtogroup SCU
  77:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @brief System Control Unit(SCU) driver for XMC microcontroller family.
  78:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  79:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * System control unit is the SoC power, reset and a clock manager with additional responsibility o
  80:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * providing system stability protection and other auxiliary functions.<br>
  81:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU provides the following features,
  82:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Power control
  83:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4 
  84:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Hibernate control 
  85:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
  86:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Reset control
  87:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Clock control
  88:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Miscellaneous control(boot mode, system interrupts etc.)<br><br>
  89:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  90:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The SCU driver is divided in to clock control logic, reset control logic, system interrupt contr
  91:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
  92:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * , hibernate control logic, trap control logic, parity control logic 
  93:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
  94:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * and miscellaneous control logic.<br>
  95:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  96:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Clock driver features:
  97:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows clock configuration using the structure XMC_SCU_CLOCK_CONFIG_t and API XMC_SCU_CLOCK_I
  98:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
  99:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides structure XMC_SCU_CLOCK_SYSPLL_CONFIG_t for configuring the system PLL
 100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of clock source for system PLL, XMC_SCU_CLOCK_GetSystemPllClockSource()
 101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for configuring different module clock frequencies XMC_SCU_CLOCK_SetWdtClockDiv
 102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of clock source for external output, XMC_SCU_CLOCK_SetExternalOutputClockSou
 103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for enabling external high power oscillator and ultra low power oscillator, XMC
 104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for getting various clock frequencies XMC_SCU_CLOCK_GetPeripheralClockFrequency
 105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  XMC_SCU_CLOCK_GetCpuClockFrequency(), XMC_SCU_CLOCK_GetSystemClockFrequency()<br>
 106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of peripheral clock frequency, XMC_SCU_CLOCK_SetFastPeripheralClockSource()
 109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API to get the peripheral clock frequency, XMC_SCU_CLOCK_GetFastPeripheralClockFrequ
 110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Reset driver features:
 113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to handle peripheral reset XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_Deasse
 115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of NMI generation for selected events, XMC_SCU_INTERRUPT_EnableNmiReques
 116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to trigger device reset XMC_SCU_RESET_AssertMasterReset()
 119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to configure multiple sources for reset, XMC_SCU_RESET_EnableResetRequest()
 120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif <br>
 121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Interrupt driver features:
 123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for enabling/ disabling interrupt event generation XMC_SCU_INTERRUPT_EnableEven
 124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  XMC_SCU_INTERRUPT_DisableEvent()
 125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API for registering callback function for events XMC_SCU_INTERRUPT_SetEventHandler()
 126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Hibernate driver features:
 129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of hibernate domain XMC_SCU_HIB_EnableHibernateDomain(), XMC_SCU_HIB_Dis
 130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of standby clock source, XMC_SCU_HIB_SetStandbyClockSource()
 131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of RTC clock source, XMC_SCU_HIB_SetRtcClockSource()
 132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API for enabling slow internal clock used for backup clock, XMC_SCU_HIB_EnableIntern
 133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Trap driver features:
 135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows handling of trap XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_GetStatus(), XMC_SCU_TRAP_Trigger
 136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Parity driver features:
 138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Parity error generated by on-chip RAM can be monitored, XMC_SCU_PARITY_Enable(), XMC_SCU_PARI
 139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of trap generation on detection of parity error, XMC_SCU_PARITY_EnableTr
 140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Power driver features:
 142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to power the USB module XMC_SCU_POWER_EnableUsb(), XMC_SCU_POWER_DisableUsb()
 143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Miscellaneous features:
 146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to trigger multiple capture compare unit(CCU) channels to be started together XMC_SCU_
 147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of out of range comparator (ORC) XMC_SCU_EnableOutOfRangeComparator()
 149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_EnableTemperatureSensor(), XMC_SCU_Ca
 150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of device boot mode XMC_SCU_SetBootMode()<br>
 151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_StartTempMeasurement(), XMC_SCU_SetRa
 154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuring supply monitor unit using the structure XMC_SCU_SUPPLYMONITOR_t and API XM
 155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows handling of protected bits XMC_SCU_LockProtectedBits(), XMC_SCU_UnlockProtectedBits()<
 156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @{
 158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  
 160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * MACROS
 162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * ENUMS
 166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *  Defines the status of SCU API execution, used to verify the SCU related API calls.
 169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** typedef enum XMC_SCU_STATUS 
 171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** {
 172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_OK   = 0UL, /**< SCU related operation successfully completed.*/
 173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_ERROR,      /**< SCU related operation failed. When API cannot fulfill request, th
 174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_BUSY,       /**< Cannot execute the SCU related operation request because
 175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****                                   another operation is in progress. \a XMC_SCU_STATUS_BUSY is retur
 176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****                                   processing another request. */
 177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** } XMC_SCU_STATUS_t;
 178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * DATA TYPES
 182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Function pointer type used for registering callback functions on SCU event occurrence.
 186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** typedef void (*XMC_SCU_INTERRUPT_EVENT_HANDLER_t)(void);
 188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * DEVICE EXTENSIONS
 191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #if (UC_FAMILY == XMC1)
 194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc1_scu.h>
 195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #elif (UC_FAMILY == XMC4)
 196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc4_scu.h>
 197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #else
 198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #error "Unspecified chipset"
 199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * API Prototypes
 203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #ifdef __cplusplus
 206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** extern "C" {
 207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param trigger    CCU slices to be triggered synchronously via software. The value is a bitmask 
 213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    combined using \a OR operation.
 216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Generates active edge(low to high) trigger for multiple CCU units at the same time.\n\n
 221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The edge of the start signal should be selected as active edge.
 223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * the timer using this API.<BR>
 227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
 231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** {
 232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** }
 234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param trigger  CCU slices to be triggered synchronously via software. The value is a bitmask of
 238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    combined using \a OR operation.
 241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Generates passive edge(high to low) trigger for multiple CCU units at the same time.\n\n
 246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The edge of the start signal should be selected as passive edge.
 248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * the timer using this API.<BR>
 252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
 256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** {
 257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** }
 259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param config Pointer to structure holding the clock prescaler values and divider values for 
 263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                configuring clock generators and clock tree.\n
 264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                \b Range: Configure the members of structure @ref XMC_SCU_CLOCK_CONFIG_t for vari
 265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                parameters of clock setup.
 266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Initializes clock generators and clock tree.\n\n
 271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Peripheral clock and system clock are configured based on the input configuration \a config.
 273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The system clock frequency is tuned by configuring the FDIV and IDIV values of CLKCR register.
 274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The values of FDIV and IDIV can be provided as part of input configuration.
 275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The PCLK divider determines the ratio of peripheral clock to the system clock. 
 276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The source of RTC clock is set based on the input configuration. 
 277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \a SystemCoreClock variable will be updated with the value of
 278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * system clock frequency. Access to protected bit fields are handled internally.
 279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the high precision oscillator(fOHP) input and configures the system and peripheral clock
 282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Based on the system clock source selected in \a config, either fPLL or fOFI will be chosen as sy
 283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Based on PLL mode(normal or prescaler mode) used, PLL ramps up in steps to achieve target freque
 284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The clock dividers for CPU, CCU and peripheral clocks will be set based on the input configurati
 285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The \a SystemCoreClock variable is set with the value of system clock frequency.
 286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GetCpuClockFrequency() \n\n\n
 289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config);
 291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the event to enable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the generation of interrupt for the input events.\n\n
 301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are enabled by setting the respective bit fields in the SRMSK register. \n
 302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: User should separately enable the NVIC node responsible for handling the SCU interrupt.
 303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The interrupt will be generated when the respective event occurs.
 304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERRUPT_DisableEvent()\n\n\n
 306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the event to disable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_
 313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Disables generation of interrupt on occurrence of the input event.\n\n
 319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are disabled by resetting the respective bit fields in the SRMSK register. \n
 320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_DisableIRQ(), XMC_SCU_INTERRUPT_EnableEvent()\n\n\n
 322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event Bit mask of the event to be triggered. \b Range: Use type @ref XMC_SCU_INTERRUPT_EV
 328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Triggers the event as if the hardware raised it.\n\n
 334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Event will be triggered by setting the respective bitfield in the SRSET register.\n
 335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: User should enable the NVIC node that handles the respective event for interrupt generatio
 336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_ClearEventStatus() \n\n\n
 338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t  event);
 340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Status of the SCU events.
 343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the status of all SCU events.\n\n
 346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The status is read from the SRRAW register. To check the status of a particular 
 347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * event, the returned value should be masked with the bit mask of the event. The bitmask
 348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * of events can be obtained using the type @ref XMC_SCU_INTERRUPT_EVENT_t. Multiple events'
 349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * status can be checked by combining the bit masks using \a OR operation. 
 350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * After detecting the event, the event status should be cleared using software to detect the event
 351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_INTERRUPT_ClearEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent(), XMC_SCU_INTERRUPT_SetEve
 353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void);
 355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the events to clear. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Clears the event status bit in SRRAW register.\n\n
 365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are cleared by writing value 1 to their bit positions in the SRCLR register.
 366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The API can be used when polling method is used. After detecting the event, the event status
 367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * should be cleared using software to detect the event again.
 368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent() \n\n\n
 371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event);
 373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Status representing the reason for device reset.
 377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the value representing the reason for device reset.\n\n
 380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The return value is an encoded word, which can indicate multiple reasons for the last reset. Eac
 381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * returned word is representative of a last reset cause. The returned value should be appropriatel
 382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * the cause of reset. 
 383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The cause of the last reset gets automatically stored in 
 384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * the \a SCU_RSTSTAT register. The reset status shall be reset after each
 385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * startup in order to ensure consistent source indication after the next reset.
 386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \b Range: The type @ref XMC_SCU_RESET_REASON_t can be used to get the bit masks of the reset cau
 387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_RESET_ClearDeviceResetReason() \n\n\n
 390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_RESET_GetDeviceResetReason(void)
 392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** {
 393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   return ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_RSTSTAT_Msk);
 394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** }
 395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None 
 397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Clears the reset reason bits in the reset status register. \n\n
 400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Clearing of the reset status information in the \a SCU_RSTSTAT register via register bit \a RSTC
 401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * recommended to ensure a clear indication of the cause of next reset.
 402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_RESET_GetDeviceResetReason() \n\n\n
 405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_RESET_ClearDeviceResetReason(void)
 407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** {
 408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   /* Clear RSTSTAT.RSTSTAT bitfield */
 409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_RSCLR_Msk;
 410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** }
 411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  
 412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Value of CPU clock frequency.
 414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the vlaue of CPU clock frequency.\n\n
 417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The value is stored in a global variable \a \b SystemCoreClock.
 418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * It is updated when the clock configuration is done using the SCU LLD APIs.
 419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The value represents the frequency of clock used for CPU operation.
 420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \b Range: Value is of type uint32_t, and gives the value of frequency in Hertz.
 421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
 426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** {
 427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   return SystemCoreClock;
 428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** }
 429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Value of peripheral clock frequency in Hertz.
 432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the vlaue of clock frequency at which the peripherals are working.\n\n
 435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The value is derived from the CPU frequency. \b Range: Value is of type uint32_t. It is represen
 436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockFrequency(),XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void); 
 440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #if(UC_SERIES != XMC45)
 442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  
 443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param  peripheral The peripheral for which the clock has to be gated. \b Range: Use type @ref X
 446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    to identify the peripheral clock to be gated.
 447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Blocks the supply of clock to the selected peripheral.\n\n
 452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Clock gating helps in reducing the power consumption. User can selectively gate the clocks of un
 453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * fPCLK is the source of clock to various peripherals. Some peripherals support clock gate. Such a
 455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * the clock supply for the selected peripheral.
 456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual gating of such peripheral clocks by enabling the \a SCU_CGAT
 457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * register bit field. Every bit in \a SCU_CGATSET0 register is protected by the bit protection sch
 458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * bit fields are handled internally.
 459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * fPERI is the source of clock to various peripherals. Some peripherals support clock gate. Such a
 462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * the clock supply for the selected peripheral.
 463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual gating of such peripheral clocks by enabling one of the \a
 464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU_CGATSET0, \a SCU_CGATSET1 or \a SCU_CGATSET2 register bitfields.
 465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * 
 466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: Clock gating shall not be activated unless the module is in reset state. So use \a
 468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated() API before enabling the gating of any peripheral.
 469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated(), XMC_SCU_CLOCK_UngatePeripheralClock() \n\n\n
 471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  
 474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param  peripheral  The peripheral for which the clock has to be ungated. \b Range: Use type @re
 477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    to identify the peripheral.
 478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the supply of clock to the selected peripheral.\n\n
 483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * By default when the device powers on, the peripheral clock will be gated for the 
 484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * peripherals that support clock gating.
 485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The peripheral clock should be enabled before using it for any functionality.
 486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * fPCLK is the source of clock to various peripherals. Some peripherals support clock gate.
 488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual ungating of such peripheral clocks by setting respective bit
 489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * in the \a SCU_CGATCLR0 register.
 490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * fPERI is the source of clock to various peripherals. Some peripherals support clock gate.
 493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual ungating of such peripheral clocks by setting the respective
 494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU_CGATCLR0, \a SCU_CGATCLR1 or \a SCU_CGATCLR2 registers.
 495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param  peripheral  The peripheral for which the check for clock gating has to be done. 
 505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_PERIPHERAL_CLOCK_t to identify the peripheral
 506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return bool Status of the peripheral clock gating. \b Range: true if the peripheral clock is ga
 508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *              false if the peripheral clock ungated(gate de-asserted).
 509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Gives the status of peripheral clock gating.\n\n
 512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Checks the status of peripheral clock gating using the register CGATSTAT0.
 514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Checks the status of peripheral clock gating using one of CGATSTAT0, CGATSTAT1 or CGATSTAT2 regi
 517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * It is recommended to use this API before
 519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * enabling the gating of any peripherals through \a XMC_SCU_CLOCK_GatePeripheralClock() API.
 520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_UngatePeripheralClock(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** 
 528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return  uint32_t  Status of the register mirror update.\n
 530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use the bit mask of the SCU_GENERAL_MIRRSTS register for the mirror
 531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    interest. e.g.: SCU_GENERAL_MIRRSTS_RTC_CTR_Msk. Multiple update events can b
 532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    using \a OR operation.
 533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the status of hibernate domain register update, when the respective mirror registers ar
 536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * The hibernate domain is connected to the core domain via SPI serial communication. MIRRSTS is a 
 537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * representing the communication of changed value of a mirror register to its corresponding regist
 538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * hibernate domain. The bit fields of the register indicate
 539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * that a corresponding register of the hibernate domain is ready to accept a write or that the com
 540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * is busy with executing the previous operation.\n
 541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpos
 542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
 544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h **** {
 545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_scu.h ****   return(SCU_GENERAL->MIRRSTS);
 3969              	 .loc 3 545 0 discriminator 1
 3970 0028 1B4B     	 ldr r3,.L442
 3971 002a D3F8C430 	 ldr r3,[r3,#196]
 3972              	.LBE75:
 3973              	.LBE74:
 538:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3974              	 .loc 1 538 0 discriminator 1
 3975 002e 002B     	 cmp r3,#0
 3976 0030 FAD1     	 bne .L429
 543:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3977              	 .loc 1 543 0
 3978 0032 207A     	 ldrb r0,[r4,#8]
 3979 0034 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetBackupClockCalibrationMode
 3980              	.LVL208:
 545:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 3981              	 .loc 1 545 0
 3982 0038 207C     	 ldrb r0,[r4,#16]
 3983 003a FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockDivider
 3984              	.LVL209:
 546:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 3985              	 .loc 1 546 0
 3986 003e 607C     	 ldrb r0,[r4,#17]
 3987 0040 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetCpuClockDivider
 3988              	.LVL210:
 547:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 3989              	 .loc 1 547 0
 3990 0044 A07C     	 ldrb r0,[r4,#18]
 3991 0046 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetCcuClockDivider
 3992              	.LVL211:
 548:../Libraries/XMCLib/src/xmc4_scu.c **** 
 3993              	 .loc 1 548 0
 3994 004a E07C     	 ldrb r0,[r4,#19]
 3995 004c FFF7FEFF 	 bl XMC_SCU_CLOCK_SetPeripheralClockDivider
 3996              	.LVL212:
 550:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 3997              	 .loc 1 550 0
 3998 0050 A379     	 ldrb r3,[r4,#6]
 3999 0052 23B9     	 cbnz r3,.L432
 4000              	.L435:
 556:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 4001              	 .loc 1 556 0
 4002 0054 E378     	 ldrb r3,[r4,#3]
 4003 0056 4BB9     	 cbnz r3,.L441
 558:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 4004              	 .loc 1 558 0
 4005 0058 FFF7FEFF 	 bl XMC_SCU_CLOCK_DisableSystemPll
 4006              	.LVL213:
 4007 005c 10E0     	 b .L437
 4008              	.L432:
 552:../Libraries/XMCLib/src/xmc4_scu.c ****     while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 4009              	 .loc 1 552 0
 4010 005e FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableHighPerformanceOscillator
 4011              	.LVL214:
 4012              	.L436:
 553:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 4013              	 .loc 1 553 0 discriminator 1
 4014 0062 FFF7FEFF 	 bl XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable
 4015              	.LVL215:
 4016 0066 0028     	 cmp r0,#0
 4017 0068 FBD0     	 beq .L436
 4018 006a F3E7     	 b .L435
 4019              	.L441:
 563:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 4020              	 .loc 1 563 0
 4021 006c FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableSystemPll
 4022              	.LVL216:
 564:../Libraries/XMCLib/src/xmc4_scu.c ****                                  config->syspll_config.mode,
 4023              	 .loc 1 564 0
 4024 0070 A578     	 ldrb r5,[r4,#2]
 4025 0072 A088     	 ldrh r0,[r4,#4]
 4026 0074 E178     	 ldrb r1,[r4,#3]
 4027 0076 6278     	 ldrb r2,[r4,#1]
 4028 0078 2378     	 ldrb r3,[r4]
 4029 007a 0095     	 str r5,[sp]
 4030 007c FFF7FEFF 	 bl XMC_SCU_CLOCK_StartSystemPll
 4031              	.LVL217:
 4032              	.L437:
 572:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 4033              	 .loc 1 572 0
 4034 0080 E068     	 ldr r0,[r4,#12]
 4035 0082 B0F5803F 	 cmp r0,#65536
 4036 0086 01D1     	 bne .L438
 574:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 4037              	 .loc 1 574 0
 4038 0088 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockSource
 4039              	.LVL218:
 4040              	.L438:
 577:../Libraries/XMCLib/src/xmc4_scu.c **** 
 4041              	 .loc 1 577 0
 4042 008c 03B0     	 add sp,sp,#12
 4043              	.LCFI18:
 4044              	 .cfi_def_cfa_offset 12
 4045              	 
 4046 008e BDE83040 	 pop {r4,r5,lr}
 4047              	.LCFI19:
 4048              	 .cfi_restore 14
 4049              	 .cfi_restore 5
 4050              	 .cfi_restore 4
 4051              	 .cfi_def_cfa_offset 0
 4052              	.LVL219:
 576:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4053              	 .loc 1 576 0
 4054 0092 FFF7FEBF 	 b SystemCoreClockUpdate
 4055              	.LVL220:
 4056              	.L443:
 4057 0096 00BF     	 .align 2
 4058              	.L442:
 4059 0098 00400050 	 .word 1342193664
 4060              	 .cfi_endproc
 4061              	.LFE196:
 4063              	 .section .text.XMC_SCU_CLOCK_IsSystemPllLocked,"ax",%progbits
 4064              	 .align 1
 4065              	 .global XMC_SCU_CLOCK_IsSystemPllLocked
 4066              	 .thumb
 4067              	 .thumb_func
 4069              	XMC_SCU_CLOCK_IsSystemPllLocked:
 4070              	.LFB283:
1757:../Libraries/XMCLib/src/xmc4_scu.c **** }
1758:../Libraries/XMCLib/src/xmc4_scu.c **** 
1759:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check main PLL is locked or not */
1760:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
1761:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4071              	 .loc 1 1761 0
 4072              	 .cfi_startproc
 4073              	 
 4074              	 
 4075              	 
1762:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 4076              	 .loc 1 1762 0
 4077 0000 024B     	 ldr r3,.L445
 4078 0002 1868     	 ldr r0,[r3]
1763:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4079              	 .loc 1 1763 0
 4080 0004 C0F38000 	 ubfx r0,r0,#2,#1
 4081 0008 7047     	 bx lr
 4082              	.L446:
 4083 000a 00BF     	 .align 2
 4084              	.L445:
 4085 000c 10470050 	 .word 1342195472
 4086              	 .cfi_endproc
 4087              	.LFE283:
 4089              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 4090              	 .align 1
 4091              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 4092              	 .thumb
 4093              	 .thumb_func
 4095              	XMC_SCU_INTERRUPT_SetEventHandler:
 4096              	.LFB284:
1764:../Libraries/XMCLib/src/xmc4_scu.c **** 
1765:../Libraries/XMCLib/src/xmc4_scu.c **** /*
1766:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event.
1767:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1768:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
1769:../Libraries/XMCLib/src/xmc4_scu.c ****                                                    const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
1770:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4097              	 .loc 1 1770 0
 4098              	 .cfi_startproc
 4099              	 
 4100              	 
 4101              	 
 4102              	.LVL221:
1771:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index;
1772:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status;
1773:../Libraries/XMCLib/src/xmc4_scu.c ****   
1774:../Libraries/XMCLib/src/xmc4_scu.c ****   index = 0U;
 4103              	 .loc 1 1774 0
 4104 0000 0023     	 movs r3,#0
 4105              	.LVL222:
 4106              	.L448:
1775:../Libraries/XMCLib/src/xmc4_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 4107              	 .loc 1 1775 0
 4108 0002 20FA03F2 	 lsr r2,r0,r3
 4109 0006 D207     	 lsls r2,r2,#31
 4110 0008 03D4     	 bmi .L449
 4111              	 .loc 1 1775 0 is_stmt 0 discriminator 1
 4112 000a 202B     	 cmp r3,#32
 4113 000c 08D0     	 beq .L452
1776:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1777:../Libraries/XMCLib/src/xmc4_scu.c ****     index++;
 4114              	 .loc 1 1777 0 is_stmt 1
 4115 000e 0133     	 adds r3,r3,#1
 4116              	.LVL223:
 4117 0010 F7E7     	 b .L448
 4118              	.L449:
1778:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1779:../Libraries/XMCLib/src/xmc4_scu.c ****   
1780:../Libraries/XMCLib/src/xmc4_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 4119              	 .loc 1 1780 0
 4120 0012 202B     	 cmp r3,#32
 4121 0014 04D0     	 beq .L452
1781:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1782:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_ERROR;
1783:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1784:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1785:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1786:../Libraries/XMCLib/src/xmc4_scu.c ****     event_handler_list[index] = handler;
 4122              	 .loc 1 1786 0
 4123 0016 034A     	 ldr r2,.L453
1787:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_OK;      
 4124              	 .loc 1 1787 0
 4125 0018 0020     	 movs r0,#0
 4126              	.LVL224:
1786:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_OK;      
 4127              	 .loc 1 1786 0
 4128 001a 42F82310 	 str r1,[r2,r3,lsl#2]
 4129              	.LVL225:
 4130 001e 7047     	 bx lr
 4131              	.LVL226:
 4132              	.L452:
1782:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 4133              	 .loc 1 1782 0
 4134 0020 0120     	 movs r0,#1
 4135              	.LVL227:
1788:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1789:../Libraries/XMCLib/src/xmc4_scu.c ****   
1790:../Libraries/XMCLib/src/xmc4_scu.c ****   return (status);
1791:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4136              	 .loc 1 1791 0
 4137 0022 7047     	 bx lr
 4138              	.L454:
 4139              	 .align 2
 4140              	.L453:
 4141 0024 00000000 	 .word event_handler_list
 4142              	 .cfi_endproc
 4143              	.LFE284:
 4145              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 4146              	 .align 1
 4147              	 .global XMC_SCU_IRQHandler
 4148              	 .thumb
 4149              	 .thumb_func
 4151              	XMC_SCU_IRQHandler:
 4152              	.LFB285:
1792:../Libraries/XMCLib/src/xmc4_scu.c **** 
1793:../Libraries/XMCLib/src/xmc4_scu.c **** /*
1794:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to execute callback functions for multiple events.
1795:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1796:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
1797:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4153              	 .loc 1 1797 0
 4154              	 .cfi_startproc
 4155              	 
 4156              	 
 4157              	.LVL228:
 4158 0000 38B5     	 push {r3,r4,r5,lr}
 4159              	.LCFI20:
 4160              	 .cfi_def_cfa_offset 16
 4161              	 .cfi_offset 3,-16
 4162              	 .cfi_offset 4,-12
 4163              	 .cfi_offset 5,-8
 4164              	 .cfi_offset 14,-4
 4165              	.LBB76:
 4166              	.LBB77:
 246:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4167              	 .loc 1 246 0
 4168 0002 0A4B     	 ldr r3,.L464
 4169 0004 5A68     	 ldr r2,[r3,#4]
 4170              	.LBE77:
 4171              	.LBE76:
1798:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index;
1799:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
1800:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
1801:../Libraries/XMCLib/src/xmc4_scu.c ****   
1802:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_UNUSED_ARG(sr_num);
1803:../Libraries/XMCLib/src/xmc4_scu.c ****   
1804:../Libraries/XMCLib/src/xmc4_scu.c ****   index = 0U;
 4172              	 .loc 1 1804 0
 4173 0006 0024     	 movs r4,#0
 4174 0008 1D46     	 mov r5,r3
 4175              	.LVL229:
 4176              	.L459:
1805:../Libraries/XMCLib/src/xmc4_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus();
1806:../Libraries/XMCLib/src/xmc4_scu.c ****   while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
1807:../Libraries/XMCLib/src/xmc4_scu.c ****   {    
1808:../Libraries/XMCLib/src/xmc4_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 4177              	 .loc 1 1808 0
 4178 000a 22FA04F3 	 lsr r3,r2,r4
 4179 000e DB07     	 lsls r3,r3,#31
 4180 0010 08D5     	 bpl .L456
1809:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1810:../Libraries/XMCLib/src/xmc4_scu.c ****       event_handler = event_handler_list[index];
 4181              	 .loc 1 1810 0
 4182 0012 074B     	 ldr r3,.L464+4
 4183 0014 53F82430 	 ldr r3,[r3,r4,lsl#2]
 4184              	.LVL230:
1811:../Libraries/XMCLib/src/xmc4_scu.c ****       if (event_handler != NULL)
 4185              	 .loc 1 1811 0
 4186 0018 03B1     	 cbz r3,.L457
1812:../Libraries/XMCLib/src/xmc4_scu.c ****       {
1813:../Libraries/XMCLib/src/xmc4_scu.c ****           (event_handler)();
 4187              	 .loc 1 1813 0
 4188 001a 9847     	 blx r3
 4189              	.LVL231:
 4190              	.L457:
1814:../Libraries/XMCLib/src/xmc4_scu.c ****       }
1815:../Libraries/XMCLib/src/xmc4_scu.c ****       
1816:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 4191              	 .loc 1 1816 0
 4192 001c 0123     	 movs r3,#1
 4193 001e A340     	 lsls r3,r3,r4
 4194              	.LVL232:
 4195              	.LBB78:
 4196              	.LBB79:
 252:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4197              	 .loc 1 252 0
 4198 0020 EB60     	 str r3,[r5,#12]
 4199 0022 38BD     	 pop {r3,r4,r5,pc}
 4200              	.LVL233:
 4201              	.L456:
 4202              	.LBE79:
 4203              	.LBE78:
1817:../Libraries/XMCLib/src/xmc4_scu.c ****       
1818:../Libraries/XMCLib/src/xmc4_scu.c ****       break;
1819:../Libraries/XMCLib/src/xmc4_scu.c ****     }   
1820:../Libraries/XMCLib/src/xmc4_scu.c ****     index++;    
 4204              	 .loc 1 1820 0
 4205 0024 0134     	 adds r4,r4,#1
 4206              	.LVL234:
1806:../Libraries/XMCLib/src/xmc4_scu.c ****   {    
 4207              	 .loc 1 1806 0
 4208 0026 202C     	 cmp r4,#32
 4209 0028 EFD1     	 bne .L459
 4210 002a 38BD     	 pop {r3,r4,r5,pc}
 4211              	.LVL235:
 4212              	.L465:
 4213              	 .align 2
 4214              	.L464:
 4215 002c 74400050 	 .word 1342193780
 4216 0030 00000000 	 .word event_handler_list
 4217              	 .cfi_endproc
 4218              	.LFE285:
 4220              	 .comm event_handler_list,128,4
 4221              	 .text
 4222              	.Letext0:
 4223              	 .file 4 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4224              	 .file 5 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4225              	 .file 6 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 4226              	 .file 7 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Include/core_cm4.h"
 4227              	 .file 8 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc4_scu.c
    {standard input}:20     .text.XMC_SCU_lDelay:00000000 $t
    {standard input}:24     .text.XMC_SCU_lDelay:00000000 XMC_SCU_lDelay
    {standard input}:71     .text.XMC_SCU_lDelay:00000024 $d
    {standard input}:77     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:82     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:100    .text.XMC_SCU_INTERRUPT_EnableEvent:0000000c $d
    {standard input}:105    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:110    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:128    .text.XMC_SCU_INTERRUPT_DisableEvent:0000000c $d
    {standard input}:133    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:138    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:156    .text.XMC_SCU_INTERRUPT_TriggerEvent:0000000c $d
    {standard input}:161    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:166    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:181    .text.XMC_SCU_INTERUPT_GetEventStatus:00000008 $d
    {standard input}:186    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:191    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:206    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000008 $d
    {standard input}:211    .text.XMC_SCU_GetBootMode:00000000 $t
    {standard input}:216    .text.XMC_SCU_GetBootMode:00000000 XMC_SCU_GetBootMode
    {standard input}:232    .text.XMC_SCU_GetBootMode:0000000c $d
    {standard input}:237    .text.XMC_SCU_SetBootMode:00000000 $t
    {standard input}:242    .text.XMC_SCU_SetBootMode:00000000 XMC_SCU_SetBootMode
    {standard input}:257    .text.XMC_SCU_SetBootMode:00000008 $d
    {standard input}:262    .text.XMC_SCU_ReadGPR:00000000 $t
    {standard input}:267    .text.XMC_SCU_ReadGPR:00000000 XMC_SCU_ReadGPR
    {standard input}:285    .text.XMC_SCU_ReadGPR:00000008 $d
    {standard input}:290    .text.XMC_SCU_WriteGPR:00000000 $t
    {standard input}:295    .text.XMC_SCU_WriteGPR:00000000 XMC_SCU_WriteGPR
    {standard input}:312    .text.XMC_SCU_WriteGPR:00000008 $d
    {standard input}:317    .text.XMC_SCU_EnableOutOfRangeComparator:00000000 $t
    {standard input}:322    .text.XMC_SCU_EnableOutOfRangeComparator:00000000 XMC_SCU_EnableOutOfRangeComparator
    {standard input}:345    .text.XMC_SCU_DisableOutOfRangeComparator:00000000 $t
    {standard input}:350    .text.XMC_SCU_DisableOutOfRangeComparator:00000000 XMC_SCU_DisableOutOfRangeComparator
    {standard input}:373    .text.XMC_SCU_CalibrateTemperatureSensor:00000000 $t
    {standard input}:378    .text.XMC_SCU_CalibrateTemperatureSensor:00000000 XMC_SCU_CalibrateTemperatureSensor
    {standard input}:401    .text.XMC_SCU_CalibrateTemperatureSensor:00000014 $d
    {standard input}:406    .text.XMC_SCU_EnableTemperatureSensor:00000000 $t
    {standard input}:411    .text.XMC_SCU_EnableTemperatureSensor:00000000 XMC_SCU_EnableTemperatureSensor
    {standard input}:427    .text.XMC_SCU_EnableTemperatureSensor:00000010 $d
    {standard input}:432    .text.XMC_SCU_DisableTemperatureSensor:00000000 $t
    {standard input}:437    .text.XMC_SCU_DisableTemperatureSensor:00000000 XMC_SCU_DisableTemperatureSensor
    {standard input}:453    .text.XMC_SCU_DisableTemperatureSensor:00000010 $d
    {standard input}:458    .text.XMC_SCU_IsTemperatureSensorEnabled:00000000 $t
    {standard input}:463    .text.XMC_SCU_IsTemperatureSensorEnabled:00000000 XMC_SCU_IsTemperatureSensorEnabled
    {standard input}:480    .text.XMC_SCU_IsTemperatureSensorEnabled:00000010 $d
    {standard input}:485    .text.XMC_SCU_IsTemperatureSensorReady:00000000 $t
    {standard input}:490    .text.XMC_SCU_IsTemperatureSensorReady:00000000 XMC_SCU_IsTemperatureSensorReady
    {standard input}:506    .text.XMC_SCU_IsTemperatureSensorReady:0000000c $d
    {standard input}:511    .text.XMC_SCU_GetTemperatureMeasurement:00000000 $t
    {standard input}:516    .text.XMC_SCU_GetTemperatureMeasurement:00000000 XMC_SCU_GetTemperatureMeasurement
    {standard input}:547    .text.XMC_SCU_GetTemperatureMeasurement:0000001c $d
    {standard input}:552    .text.XMC_SCU_IsTemperatureSensorBusy:00000000 $t
    {standard input}:557    .text.XMC_SCU_IsTemperatureSensorBusy:00000000 XMC_SCU_IsTemperatureSensorBusy
    {standard input}:573    .text.XMC_SCU_IsTemperatureSensorBusy:0000000c $d
    {standard input}:578    .text.XMC_SCU_StartTemperatureMeasurement:00000000 $t
    {standard input}:583    .text.XMC_SCU_StartTemperatureMeasurement:00000000 XMC_SCU_StartTemperatureMeasurement
    {standard input}:624    .text.XMC_SCU_StartTemperatureMeasurement:00000028 $d
    {standard input}:629    .text.XMC_SCU_WriteToRetentionMemory:00000000 $t
    {standard input}:634    .text.XMC_SCU_WriteToRetentionMemory:00000000 XMC_SCU_WriteToRetentionMemory
    {standard input}:667    .text.XMC_SCU_WriteToRetentionMemory:00000020 $d
    {standard input}:672    .text.XMC_SCU_ReadFromRetentionMemory:00000000 $t
    {standard input}:677    .text.XMC_SCU_ReadFromRetentionMemory:00000000 XMC_SCU_ReadFromRetentionMemory
    {standard input}:709    .text.XMC_SCU_ReadFromRetentionMemory:0000001c $d
    {standard input}:714    .text.XMC_SCU_TRAP_Enable:00000000 $t
    {standard input}:719    .text.XMC_SCU_TRAP_Enable:00000000 XMC_SCU_TRAP_Enable
    {standard input}:737    .text.XMC_SCU_TRAP_Enable:0000000c $d
    {standard input}:742    .text.XMC_SCU_TRAP_Disable:00000000 $t
    {standard input}:747    .text.XMC_SCU_TRAP_Disable:00000000 XMC_SCU_TRAP_Disable
    {standard input}:765    .text.XMC_SCU_TRAP_Disable:0000000c $d
    {standard input}:770    .text.XMC_SCU_TRAP_GetStatus:00000000 $t
    {standard input}:775    .text.XMC_SCU_TRAP_GetStatus:00000000 XMC_SCU_TRAP_GetStatus
    {standard input}:790    .text.XMC_SCU_TRAP_GetStatus:00000008 $d
    {standard input}:795    .text.XMC_SCU_TRAP_Trigger:00000000 $t
    {standard input}:800    .text.XMC_SCU_TRAP_Trigger:00000000 XMC_SCU_TRAP_Trigger
    {standard input}:815    .text.XMC_SCU_TRAP_Trigger:00000008 $d
    {standard input}:820    .text.XMC_SCU_TRAP_ClearStatus:00000000 $t
    {standard input}:825    .text.XMC_SCU_TRAP_ClearStatus:00000000 XMC_SCU_TRAP_ClearStatus
    {standard input}:840    .text.XMC_SCU_TRAP_ClearStatus:00000008 $d
    {standard input}:845    .text.XMC_SCU_PARITY_ClearStatus:00000000 $t
    {standard input}:850    .text.XMC_SCU_PARITY_ClearStatus:00000000 XMC_SCU_PARITY_ClearStatus
    {standard input}:868    .text.XMC_SCU_PARITY_ClearStatus:0000000c $d
    {standard input}:873    .text.XMC_SCU_PARITY_GetStatus:00000000 $t
    {standard input}:878    .text.XMC_SCU_PARITY_GetStatus:00000000 XMC_SCU_PARITY_GetStatus
    {standard input}:893    .text.XMC_SCU_PARITY_GetStatus:00000008 $d
    {standard input}:898    .text.XMC_SCU_PARITY_Enable:00000000 $t
    {standard input}:903    .text.XMC_SCU_PARITY_Enable:00000000 XMC_SCU_PARITY_Enable
    {standard input}:921    .text.XMC_SCU_PARITY_Enable:0000000c $d
    {standard input}:926    .text.XMC_SCU_PARITY_Disable:00000000 $t
    {standard input}:931    .text.XMC_SCU_PARITY_Disable:00000000 XMC_SCU_PARITY_Disable
    {standard input}:949    .text.XMC_SCU_PARITY_Disable:0000000c $d
    {standard input}:954    .text.XMC_SCU_PARITY_EnableTrapGeneration:00000000 $t
    {standard input}:959    .text.XMC_SCU_PARITY_EnableTrapGeneration:00000000 XMC_SCU_PARITY_EnableTrapGeneration
    {standard input}:977    .text.XMC_SCU_PARITY_EnableTrapGeneration:0000000c $d
    {standard input}:982    .text.XMC_SCU_PARITY_DisableTrapGeneration:00000000 $t
    {standard input}:987    .text.XMC_SCU_PARITY_DisableTrapGeneration:00000000 XMC_SCU_PARITY_DisableTrapGeneration
    {standard input}:1005   .text.XMC_SCU_PARITY_DisableTrapGeneration:0000000c $d
    {standard input}:1010   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000000 $t
    {standard input}:1015   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000000 XMC_SCU_INTERRUPT_EnableNmiRequest
    {standard input}:1033   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:0000000c $d
    {standard input}:1038   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000000 $t
    {standard input}:1043   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000000 XMC_SCU_INTERRUPT_DisableNmiRequest
    {standard input}:1061   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:0000000c $d
    {standard input}:1066   .text.XMC_SCU_RESET_AssertPeripheralReset:00000000 $t
    {standard input}:1071   .text.XMC_SCU_RESET_AssertPeripheralReset:00000000 XMC_SCU_RESET_AssertPeripheralReset
    {standard input}:1096   .text.XMC_SCU_RESET_AssertPeripheralReset:00000010 $d
    {standard input}:1101   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000000 $t
    {standard input}:1106   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000000 XMC_SCU_RESET_DeassertPeripheralReset
    {standard input}:1131   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000010 $d
    {standard input}:1136   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000000 $t
    {standard input}:1141   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000000 XMC_SCU_RESET_IsPeripheralResetAsserted
    {standard input}:1173   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000000 $t
    {standard input}:1178   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000000 XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
    {standard input}:1200   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000010 $d
    {standard input}:1206   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000000 $t
    {standard input}:1211   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000000 XMC_SCU_CLOCK_GetSystemPllClockFrequency
    {standard input}:1268   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:0000003c $d
    {standard input}:1273   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000000 $t
    {standard input}:1278   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000000 XMC_SCU_CLOCK_GetUsbPllClockFrequency
    {standard input}:1322   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000028 $d
    {standard input}:1327   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000000 $t
    {standard input}:1332   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000000 XMC_SCU_CLOCK_GetCcuClockFrequency
    {standard input}:1368   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000018 $d
    {standard input}:1374   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000000 $t
    {standard input}:1379   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000000 XMC_SCU_CLOCK_GetUsbClockFrequency
    {standard input}:1434   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:0000002c $d
    {standard input}:1439   .text.XMC_SCU_CLOCK_GetEbuClockFrequency:00000000 $t
    {standard input}:1444   .text.XMC_SCU_CLOCK_GetEbuClockFrequency:00000000 XMC_SCU_CLOCK_GetEbuClockFrequency
    {standard input}:1471   .text.XMC_SCU_CLOCK_GetEbuClockFrequency:00000018 $d
    {standard input}:1476   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000000 $t
    {standard input}:1481   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000000 XMC_SCU_CLOCK_GetWdtClockFrequency
    {standard input}:1538   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000038 $d
    {standard input}:1544   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000000 $t
    {standard input}:1549   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000000 XMC_SCU_CLOCK_GetExternalOutputClockFrequency
    {standard input}:1619   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000040 $d
    {standard input}:1625   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:1630   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:1652   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000010 $d
    {standard input}:1658   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000000 $t
    {standard input}:1663   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000000 XMC_SCU_CLOCK_SetSystemClockSource
    {standard input}:1682   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000010 $d
    {standard input}:1687   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000000 $t
    {standard input}:1692   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000000 XMC_SCU_CLOCK_SetUsbClockSource
    {standard input}:1711   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000010 $d
    {standard input}:1716   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000000 $t
    {standard input}:1721   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000000 XMC_SCU_CLOCK_SetWdtClockSource
    {standard input}:1740   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000010 $d
    {standard input}:1745   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000000 $t
    {standard input}:1750   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000000 XMC_SCU_CLOCK_SetExternalOutputClockSource
    {standard input}:1769   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000010 $d
    {standard input}:1774   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:00000000 $t
    {standard input}:1779   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:00000000 XMC_SCU_CLOCK_SetSystemPllClockSource
    {standard input}:1816   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:0000001c $d
    {standard input}:1821   .text.XMC_SCU_HIB_SetRtcClockSource:00000000 $t
    {standard input}:1826   .text.XMC_SCU_HIB_SetRtcClockSource:00000000 XMC_SCU_HIB_SetRtcClockSource
    {standard input}:1851   .text.XMC_SCU_HIB_SetRtcClockSource:00000018 $d
    {standard input}:1857   .text.XMC_SCU_HIB_SetStandbyClockSource:00000000 $t
    {standard input}:1862   .text.XMC_SCU_HIB_SetStandbyClockSource:00000000 XMC_SCU_HIB_SetStandbyClockSource
    {standard input}:1887   .text.XMC_SCU_HIB_SetStandbyClockSource:00000018 $d
    {standard input}:1893   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000000 $t
    {standard input}:1898   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000000 XMC_SCU_CLOCK_SetSystemClockDivider
    {standard input}:1920   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000010 $d
    {standard input}:1925   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000000 $t
    {standard input}:1930   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000000 XMC_SCU_CLOCK_SetCcuClockDivider
    {standard input}:1952   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000010 $d
    {standard input}:1957   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000000 $t
    {standard input}:1962   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000000 XMC_SCU_CLOCK_SetCpuClockDivider
    {standard input}:1984   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000010 $d
    {standard input}:1989   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000000 $t
    {standard input}:1994   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000000 XMC_SCU_CLOCK_SetPeripheralClockDivider
    {standard input}:2016   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000010 $d
    {standard input}:2021   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000000 $t
    {standard input}:2026   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000000 XMC_SCU_CLOCK_SetUsbClockDivider
    {standard input}:2048   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000010 $d
    {standard input}:2053   .text.XMC_SCU_CLOCK_SetEbuClockDivider:00000000 $t
    {standard input}:2058   .text.XMC_SCU_CLOCK_SetEbuClockDivider:00000000 XMC_SCU_CLOCK_SetEbuClockDivider
    {standard input}:2080   .text.XMC_SCU_CLOCK_SetEbuClockDivider:00000010 $d
    {standard input}:2085   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000000 $t
    {standard input}:2090   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000000 XMC_SCU_CLOCK_SetWdtClockDivider
    {standard input}:2112   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000010 $d
    {standard input}:2117   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000000 $t
    {standard input}:2122   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000000 XMC_SCU_CLOCK_SetExternalOutputClockDivider
    {standard input}:2145   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000018 $d
    {standard input}:2150   .text.XMC_SCU_CLOCK_EnableClock:00000000 $t
    {standard input}:2155   .text.XMC_SCU_CLOCK_EnableClock:00000000 XMC_SCU_CLOCK_EnableClock
    {standard input}:2170   .text.XMC_SCU_CLOCK_EnableClock:00000008 $d
    {standard input}:2175   .text.XMC_SCU_CLOCK_DisableClock:00000000 $t
    {standard input}:2180   .text.XMC_SCU_CLOCK_DisableClock:00000000 XMC_SCU_CLOCK_DisableClock
    {standard input}:2195   .text.XMC_SCU_CLOCK_DisableClock:00000008 $d
    {standard input}:2200   .text.XMC_SCU_CLOCK_IsClockEnabled:00000000 $t
    {standard input}:2205   .text.XMC_SCU_CLOCK_IsClockEnabled:00000000 XMC_SCU_CLOCK_IsClockEnabled
    {standard input}:2226   .text.XMC_SCU_CLOCK_IsClockEnabled:00000010 $d
    {standard input}:2231   .text.XMC_SCU_POWER_GetEVR13Voltage:00000000 $t
    {standard input}:2236   .text.XMC_SCU_POWER_GetEVR13Voltage:00000000 XMC_SCU_POWER_GetEVR13Voltage
    {standard input}:2259   .text.XMC_SCU_POWER_GetEVR13Voltage:0000001c $d
    {standard input}:2265   .text.XMC_SCU_POWER_GetEVR33Voltage:00000000 $t
    {standard input}:2270   .text.XMC_SCU_POWER_GetEVR33Voltage:00000000 XMC_SCU_POWER_GetEVR33Voltage
    {standard input}:2293   .text.XMC_SCU_POWER_GetEVR33Voltage:00000020 $d
    {standard input}:2299   .text.XMC_SCU_CLOCK_EnableUsbPll:00000000 $t
    {standard input}:2304   .text.XMC_SCU_CLOCK_EnableUsbPll:00000000 XMC_SCU_CLOCK_EnableUsbPll
    {standard input}:2321   .text.XMC_SCU_CLOCK_EnableUsbPll:00000010 $d
    {standard input}:2326   .text.XMC_SCU_CLOCK_DisableUsbPll:00000000 $t
    {standard input}:2331   .text.XMC_SCU_CLOCK_DisableUsbPll:00000000 XMC_SCU_CLOCK_DisableUsbPll
    {standard input}:2348   .text.XMC_SCU_CLOCK_DisableUsbPll:00000010 $d
    {standard input}:2353   .text.XMC_SCU_CLOCK_StartUsbPll:00000000 $t
    {standard input}:2358   .text.XMC_SCU_CLOCK_StartUsbPll:00000000 XMC_SCU_CLOCK_StartUsbPll
    {standard input}:2413   .text.XMC_SCU_CLOCK_StartUsbPll:00000040 $d
    {standard input}:2418   .text.XMC_SCU_CLOCK_StopUsbPll:00000000 $t
    {standard input}:2423   .text.XMC_SCU_CLOCK_StopUsbPll:00000000 XMC_SCU_CLOCK_StopUsbPll
    {standard input}:2438   .text.XMC_SCU_CLOCK_StopUsbPll:00000008 $d
    {standard input}:2444   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000000 $t
    {standard input}:2449   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000000 XMC_SCU_CLOCK_SetBackupClockCalibrationMode
    {standard input}:2499   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000030 $d
    {standard input}:2504   .text.XMC_SCU_POWER_EnableUsb:00000000 $t
    {standard input}:2509   .text.XMC_SCU_POWER_EnableUsb:00000000 XMC_SCU_POWER_EnableUsb
    {standard input}:2524   .text.XMC_SCU_POWER_EnableUsb:0000000c $d
    {standard input}:2529   .text.XMC_SCU_POWER_DisableUsb:00000000 $t
    {standard input}:2534   .text.XMC_SCU_POWER_DisableUsb:00000000 XMC_SCU_POWER_DisableUsb
    {standard input}:2549   .text.XMC_SCU_POWER_DisableUsb:0000000c $d
    {standard input}:2554   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000000 $t
    {standard input}:2559   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000000 XMC_SCU_CLOCK_IsUsbPllLocked
    {standard input}:2575   .text.XMC_SCU_CLOCK_IsUsbPllLocked:0000000c $d
    {standard input}:2580   .text.XMC_SCU_HIB_EnableHibernateDomain:00000000 $t
    {standard input}:2585   .text.XMC_SCU_HIB_EnableHibernateDomain:00000000 XMC_SCU_HIB_EnableHibernateDomain
    {standard input}:2629   .text.XMC_SCU_HIB_EnableHibernateDomain:0000002c $d
    {standard input}:2637   .text.XMC_SCU_HIB_DisableHibernateDomain:00000000 $t
    {standard input}:2642   .text.XMC_SCU_HIB_DisableHibernateDomain:00000000 XMC_SCU_HIB_DisableHibernateDomain
    {standard input}:2660   .text.XMC_SCU_HIB_DisableHibernateDomain:00000010 $d
    {standard input}:2665   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000000 $t
    {standard input}:2670   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000000 XMC_SCU_HIB_IsHibernateDomainEnabled
    {standard input}:2692   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000018 $d
    {standard input}:2697   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000000 $t
    {standard input}:2702   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000000 XMC_SCU_HIB_EnableInternalSlowClock
    {standard input}:2724   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000018 $d
    {standard input}:2730   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000000 $t
    {standard input}:2735   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000000 XMC_SCU_HIB_DisableInternalSlowClock
    {standard input}:2757   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000018 $d
    {standard input}:2763   .text.XMC_SCU_HIB_ClearEventStatus:00000000 $t
    {standard input}:2768   .text.XMC_SCU_HIB_ClearEventStatus:00000000 XMC_SCU_HIB_ClearEventStatus
    {standard input}:2789   .text.XMC_SCU_HIB_ClearEventStatus:00000010 $d
    {standard input}:2795   .text.XMC_SCU_HIB_TriggerEvent:00000000 $t
    {standard input}:2800   .text.XMC_SCU_HIB_TriggerEvent:00000000 XMC_SCU_HIB_TriggerEvent
    {standard input}:2821   .text.XMC_SCU_HIB_TriggerEvent:00000010 $d
    {standard input}:2827   .text.XMC_SCU_HIB_EnableEvent:00000000 $t
    {standard input}:2832   .text.XMC_SCU_HIB_EnableEvent:00000000 XMC_SCU_HIB_EnableEvent
    {standard input}:2856   .text.XMC_SCU_HIB_EnableEvent:00000014 $d
    {standard input}:2862   .text.XMC_SCU_HIB_DisableEvent:00000000 $t
    {standard input}:2867   .text.XMC_SCU_HIB_DisableEvent:00000000 XMC_SCU_HIB_DisableEvent
    {standard input}:2891   .text.XMC_SCU_HIB_DisableEvent:00000018 $d
    {standard input}:2897   .text.XMC_SCU_HIB_EnterHibernateState:00000000 $t
    {standard input}:2902   .text.XMC_SCU_HIB_EnterHibernateState:00000000 XMC_SCU_HIB_EnterHibernateState
    {standard input}:2924   .text.XMC_SCU_HIB_EnterHibernateState:00000018 $d
    {standard input}:2930   .text.XMC_SCU_HIB_EnterHibernateStateEx:00000000 $t
    {standard input}:2935   .text.XMC_SCU_HIB_EnterHibernateStateEx:00000000 XMC_SCU_HIB_EnterHibernateStateEx
    {standard input}:2954   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000000 $t
    {standard input}:2959   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000000 XMC_SCU_HIB_SetWakeupTriggerInput
    {standard input}:2990   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000020 $d
    {standard input}:2996   .text.XMC_SCU_HIB_SetPinMode:00000000 $t
    {standard input}:3001   .text.XMC_SCU_HIB_SetPinMode:00000000 XMC_SCU_HIB_SetPinMode
    {standard input}:3037   .text.XMC_SCU_HIB_SetPinMode:00000024 $d
    {standard input}:3043   .text.XMC_SCU_HIB_SetPinOutputLevel:00000000 $t
    {standard input}:3048   .text.XMC_SCU_HIB_SetPinOutputLevel:00000000 XMC_SCU_HIB_SetPinOutputLevel
    {standard input}:3082   .text.XMC_SCU_HIB_SetPinOutputLevel:00000024 $d
    {standard input}:3088   .text.XMC_SCU_HIB_SetInput0:00000000 $t
    {standard input}:3093   .text.XMC_SCU_HIB_SetInput0:00000000 XMC_SCU_HIB_SetInput0
    {standard input}:3124   .text.XMC_SCU_HIB_SetInput0:00000020 $d
    {standard input}:3130   .text.XMC_SCU_HIB_SetSR0Input:00000000 $t
    {standard input}:3135   .text.XMC_SCU_HIB_SetSR0Input:00000000 XMC_SCU_HIB_SetSR0Input
    {standard input}:3160   .text.XMC_SCU_HIB_SetSR0Input:00000018 $d
    {standard input}:3166   .text.XMC_SCU_CLOCK_IsLowPowerOscillatorStable:00000000 $t
    {standard input}:3171   .text.XMC_SCU_CLOCK_IsLowPowerOscillatorStable:00000000 XMC_SCU_CLOCK_IsLowPowerOscillatorStable
    {standard input}:3188   .text.XMC_SCU_CLOCK_IsLowPowerOscillatorStable:00000010 $d
    {standard input}:3193   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000000 $t
    {standard input}:3198   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000000 XMC_SCU_CLOCK_EnableLowPowerOscillator
    {standard input}:3280   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000044 $d
    {standard input}:3286   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000000 $t
    {standard input}:3291   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000000 XMC_SCU_CLOCK_DisableLowPowerOscillator
    {standard input}:3313   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000018 $d
    {standard input}:3319   .text.XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput:00000000 $t
    {standard input}:3324   .text.XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput:00000000 XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput
    {standard input}:3346   .text.XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput:00000018 $d
    {standard input}:3352   .text.XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput:00000000 $t
    {standard input}:3357   .text.XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput:00000000 XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput
    {standard input}:3380   .text.XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput:0000001c $d
    {standard input}:3386   .text.XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus:00000000 $t
    {standard input}:3391   .text.XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus:00000000 XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus
    {standard input}:3407   .text.XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus:0000000c $d
    {standard input}:3412   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000000 $t
    {standard input}:3417   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000000 XMC_SCU_CLOCK_EnableHighPerformanceOscillator
    {standard input}:3461   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000034 $d
    {standard input}:3468   .text.XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable:00000000 $t
    {standard input}:3473   .text.XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable:00000000 XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable
    {standard input}:3492   .text.XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable:00000014 $d
    {standard input}:3497   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000000 $t
    {standard input}:3502   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000000 XMC_SCU_CLOCK_DisableHighPerformanceOscillator
    {standard input}:3518   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:0000000c $d
    {standard input}:3523   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput:00000000 $t
    {standard input}:3528   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput:00000000 XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput
    {standard input}:3544   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput:0000000c $d
    {standard input}:3549   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput:00000000 $t
    {standard input}:3554   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput:00000000 XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput
    {standard input}:3570   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput:0000000c $d
    {standard input}:3575   .text.XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus:00000000 $t
    {standard input}:3580   .text.XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus:00000000 XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus
    {standard input}:3596   .text.XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus:0000000c $d
    {standard input}:3601   .text.XMC_SCU_CLOCK_EnableSystemPll:00000000 $t
    {standard input}:3606   .text.XMC_SCU_CLOCK_EnableSystemPll:00000000 XMC_SCU_CLOCK_EnableSystemPll
    {standard input}:3623   .text.XMC_SCU_CLOCK_EnableSystemPll:00000010 $d
    {standard input}:3628   .text.XMC_SCU_CLOCK_DisableSystemPll:00000000 $t
    {standard input}:3633   .text.XMC_SCU_CLOCK_DisableSystemPll:00000000 XMC_SCU_CLOCK_DisableSystemPll
    {standard input}:3650   .text.XMC_SCU_CLOCK_DisableSystemPll:00000010 $d
    {standard input}:3655   .text.XMC_SCU_CLOCK_StopSystemPll:00000000 $t
    {standard input}:3660   .text.XMC_SCU_CLOCK_StopSystemPll:00000000 XMC_SCU_CLOCK_StopSystemPll
    {standard input}:3676   .text.XMC_SCU_CLOCK_StopSystemPll:0000000c $d
    {standard input}:3681   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000000 $t
    {standard input}:3686   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000000 XMC_SCU_CLOCK_StepSystemPllFrequency
    {standard input}:3712   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000018 $d
    {standard input}:3717   .text.XMC_SCU_CLOCK_StartSystemPll:00000000 $t
    {standard input}:3722   .text.XMC_SCU_CLOCK_StartSystemPll:00000000 XMC_SCU_CLOCK_StartSystemPll
    {standard input}:3909   .text.XMC_SCU_CLOCK_StartSystemPll:000000dc $d
    {standard input}:3916   .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:3921   .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:4059   .text.XMC_SCU_CLOCK_Init:00000098 $d
    {standard input}:4064   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000000 $t
    {standard input}:4069   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000000 XMC_SCU_CLOCK_IsSystemPllLocked
    {standard input}:4085   .text.XMC_SCU_CLOCK_IsSystemPllLocked:0000000c $d
    {standard input}:4090   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:4095   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:4141   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000024 $d
                            *COM*:00000080 event_handler_list
    {standard input}:4146   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:4151   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:4215   .text.XMC_SCU_IRQHandler:0000002c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.ca5ae67a873a4952d630d8e4120b9e3e
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4e89a3f145accdcb1100c37260c088e6
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.65.5c0d35eb1a6853ff8300ab2ec1b944b0
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.57f124f9262f3dbf77da6a6506ffb430
                           .group:00000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:00000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1500.3eca65ed9ba7f90e09c1ffcb0b3f5724
                           .group:00000000 wm4.xmc_common.h.98.806f17e888fd51d0e4be2ad115163551
                           .group:00000000 wm4.xmc4_scu.h.113.70a903f8782696023ba1d8628d8ac2d6

UNDEFINED SYMBOLS
SystemCoreClockUpdate
SystemCoreClock
OSCHP_GetFrequency
