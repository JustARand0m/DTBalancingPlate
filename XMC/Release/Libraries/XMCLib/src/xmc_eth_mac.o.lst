   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_eth_mac.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_ETH_MAC_InitRxDescriptors,"ax",%progbits
  20              	 .align 1
  21              	 .global XMC_ETH_MAC_InitRxDescriptors
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_ETH_MAC_InitRxDescriptors:
  26              	.LFB234:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_eth_mac.c"
   1:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
   2:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
   3:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @file xmc_eth_mac.c
   4:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @date 2018-08-08
   5:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
   6:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_eth_mac.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library
   9:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  10:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 
  19:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  21:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 
  22:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_eth_mac.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  37:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  40:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-06-20:
  41:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Initial
  42:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  43:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-09-01:
  44:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Add clock gating control in enable/disable APIs
  45:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Add transmit polling if run out of buffers
  46:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  47:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-11-30:
  48:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fix XMC_ETH_MAC_GetRxFrameSize return value in case of errors
  49:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  50:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-03-16:
  51:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fix XMC_ETH_MAC_DisableEvent
  52:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  53:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-05-19:
  54:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_ReturnTxDescriptor and XMC_ETH_MAC_ReturnRxDescriptor
  55:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  56:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-08-30:
  57:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to disable MMC interrupt events
  58:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  59:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-11-22:
  60:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to optimize access to bus
  61:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  62:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-02-25:
  63:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - XMC_ETH_MAC_Enable() and XMC_ETH_MAC_Disable(), fixed compilation warnings
  64:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  65:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-03-27:
  66:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to disable PMT and timestamp interrupt events
  67:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  68:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-02:
  69:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_InitPTPEx()
  70:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_SetPTPTime()
  71:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_UpdateAddend() 
  72:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_InitPTP(), XMC_ETH_MAC_UpdatePTPTime(), XMC_ETH_MAC_SetPTPAlarm()
  73:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *       - nanoseconds initializazion
  74:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *       - added polling to wait for setup
  75:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  76:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-04:
  77:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to disable MMC IPC receive interrupt events
  78:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  79:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-11:
  80:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_SetPTPAlarm() nanoseconds conversion
  81:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  82:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-17:
  83:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_GetTxTimeStamp() and XMC_ETH_MAC_GetRxTimeStamp() return the timestamp
  84:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  85:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-27:
  86:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_GetRxTimeStamp() and XMC_ETH_MAC_GetTxTimeStamp() fixed returned nanosec
  87:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  88:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-08-03:
  89:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_InitPTP(), XMC_ETH_MAC_InitPTPEx(), XMC_ETH_MAC_GetPTPTime(), XMC_ETH_
  90:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *       rollover mode of nanosecond counter from binary to digital mode, i.e 1ns resolution
  91:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  92:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-09-27:
  93:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_InitEx()
  94:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - XMC_ETH_MAC_SetAddressEx(), XMC_ETH_MAC_GetAddressEx() and XMC_ETH_MAC_SetAddressPerfectFi
  95:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  96:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2018-06-21:
  97:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_SetAddressPerfectFilterEx()
  98:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  99:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2018-08-08:
 100:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *      - Fixed XMC_ETH_MAC_SetVLANTag() which now accepts a 32bit tag parameter that allows settin
 101:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
 102:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @endcond
 103:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 104:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 105:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 106:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * HEADER FILES
 107:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 108:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <xmc_eth_mac.h>
 109:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 110:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if defined (ETH0)
 111:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 112:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <stdlib.h>
 113:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <xmc_scu.h>
 114:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 115:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 116:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * MACROS
 117:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 118:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 119:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 120:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * ETH MAC clock speed
 121:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 122:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_35MHZ  (35000000U)  /**< ETH MAC clock speed 35 MHZ */
 123:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_60MHZ  (60000000U)  /**< ETH MAC clock speed 60 MHZ */
 124:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_100MHZ (100000000U) /**< ETH MAC clock speed 100 MHZ */
 125:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_150MHZ (150000000U) /**< ETH MAC clock speed 150 MHZ */
 126:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_200MHZ (200000000U) /**< ETH MAC clock speed 200 MHZ */
 127:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_250MHZ (250000000U) /**< ETH MAC clock speed 250 MHZ */
 128:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 129:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 130:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * ETH MAC MDC divider
 131:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 132:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_16  (2U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/16 */
 133:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_26  (3U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/26 */
 134:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_42  (0U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/42 */
 135:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_62  (1U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/62 */
 136:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_102 (4U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/102 *
 137:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_124 (5U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/124 *
 138:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 139:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 140:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 141:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * RDES1 Descriptor RX Packet Control
 142:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 143:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RBS2 (0x1FFF0000U) /**< Receive buffer 2 size */
 144:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RER  (0x00008000U) /**< Receive end of ring */
 145:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RCH  (0x00004000U) /**< Second address chained */
 146:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RBS1 (0x00001FFFU) /**< Receive buffer 1 size */
 147:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 148:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 149:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Interrupt masking
 150:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 151:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DISABLE_MMC_INTERRUPT_MSK              (0x03ffffffU) /**< Bit mask to disable MMMC 
 152:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK  (0x3fff3fffU) /**< Bit mask to disable MMC I
 153:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 154:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 155:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Normal MAC events
 156:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 157:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_EVENT_NORMAL (XMC_ETH_MAC_EVENT_TRANSMIT |\
 158:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |\
 159:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_RECEIVE |\
 160:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_EARLY_RECEIVE)
 161:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 162:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 163:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Abnormal MAC events
 164:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 165:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_EVENT_ABNORMAL (XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |\
 166:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT |\
 167:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW |\
 168:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW |\
 169:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |\
 170:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |\
 171:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |\
 172:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |\
 173:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_BUS_ERROR)
 174:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 175:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Definition needed in case of device header file previous to v1.5.1*/
 176:../Libraries/XMCLib/src/xmc_eth_mac.c **** #ifndef ETH_BUS_MODE_ATDS_Msk
 177:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_BUS_MODE_ATDS_Msk  (0x00000080UL)
 178:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 179:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 180:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Resolution of sub second counter ~ 20ns */
 181:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_SUB_SECOND_UPDATE_FREQ (50000000)
 182:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 183:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 184:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * API IMPLEMENTATION
 185:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 186:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 187:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the event passed is a normal event */
 188:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
 189:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 190:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 191:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
 192:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
 193:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
 194:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 195:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 196:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the event passed is an abnormal event */
 197:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
 198:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 199:../Libraries/XMCLib/src/xmc_eth_mac.c ****    return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 200:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT |
 201:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW |
 202:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW |
 203:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
 204:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
 205:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
 206:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
 207:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
 208:../Libraries/XMCLib/src/xmc_eth_mac.c ****  }
 209:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 210:../Libraries/XMCLib/src/xmc_eth_mac.c **** #ifdef XMC_ASSERT_ENABLE 
 211:../Libraries/XMCLib/src/xmc_eth_mac.c ****  
 212:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the passed argument is a valid ETH module */ 
 213:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XMC_ETH_MAC_IsValidModule(ETH_GLOBAL_TypeDef *const eth)
 214:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 215:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (eth == ETH0);
 216:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 217:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 218:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 219:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 220:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac)
 221:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 222:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitEx: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 223:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 224:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_Reset(eth_mac);
 225:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 226:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize MAC configuration */
 227:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 228:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 229:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize Filter registers */
 230:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 231:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 232:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 233:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                              (uint32_t)ETH_OPERATION_MODE_TSF_Msk |
 234:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                              (uint32_t)ETH_OPERATION_MODE_OSF_Msk;
 235:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 236:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full
 237:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->BUS_MODE = (uint32_t)ETH_BUS_MODE_ATDS_Msk |
 238:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)ETH_BUS_MODE_AAL_Msk | /* the AHB interface generates all bursts
 239:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)ETH_BUS_MODE_FB_Msk | /* DMA attempts to execute fixed-length Bu
 240:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)(0x20 << ETH_BUS_MODE_PBL_Pos); /* maximum Burst length */
 241:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 242:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize DMA Descriptors */
 243:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 244:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 245:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 246:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Clear interrupts */
 247:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 248:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 249:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Disable MMC interrupt events */
 250:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 251:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 252:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_IPC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK;
 253:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 254:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Disable PMT and timestamp interrupt events */
 255:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK = ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRUPT_MASK_TSIM_Msk;
 256:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 257:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->frame_end = NULL;
 258:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 259:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 260:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC initialize */
 261:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac)
 262:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 263:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 264:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 265:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_Init: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 266:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 267:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_Enable(eth_mac);
 268:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 269:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 270:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitEx(eth_mac);
 271:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 272:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_SetAddress(eth_mac, eth_mac->address);
 273:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 274:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 275:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 276:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 277:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize RX descriptors */
 278:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
 279:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
  28              	 .loc 1 279 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 30B5     	 push {r4,r5,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 12
  36              	 .cfi_offset 4,-12
  37              	 .cfi_offset 5,-8
  38              	 .cfi_offset 14,-4
 280:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i;
 281:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t next;
 282:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 283:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitRxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac
 284:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 285:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /*
 286:../Libraries/XMCLib/src/xmc_eth_mac.c ****    * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
 287:../Libraries/XMCLib/src/xmc_eth_mac.c ****    * (buffer2) is the next descriptor address
 288:../Libraries/XMCLib/src/xmc_eth_mac.c ****    */
 289:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < eth_mac->num_rx_buf; ++i)
  39              	 .loc 1 289 0
  40 0002 0023     	 movs r3,#0
  41              	.LVL1:
  42              	.L2:
  43              	 .loc 1 289 0 is_stmt 0 discriminator 1
  44 0004 90F82420 	 ldrb r2,[r0,#36]
  45 0008 9342     	 cmp r3,r2
  46 000a 0269     	 ldr r2,[r0,#16]
  47 000c 18D2     	 bcs .L7
  48 000e 5C01     	 lsls r4,r3,#5
 290:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 291:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
  49              	 .loc 1 291 0 is_stmt 1
  50 0010 1119     	 adds r1,r2,r4
  51 0012 4FF00045 	 mov r5,#-2147483648
  52 0016 1551     	 str r5,[r2,r4]
 292:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 293:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].buffer1 = (uint32_t)&(eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
  53              	 .loc 1 293 0
  54 0018 8569     	 ldr r5,[r0,#24]
 292:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
  55              	 .loc 1 292 0
  56 001a 44F2F454 	 movw r4,#17908
  57 001e 4C60     	 str r4,[r1,#4]
  58              	 .loc 1 293 0
  59 0020 40F2F454 	 movw r4,#1524
  60 0024 04FB0354 	 mla r4,r4,r3,r5
  61 0028 8C60     	 str r4,[r1,#8]
 294:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
 295:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (next == eth_mac->num_rx_buf)
  62              	 .loc 1 295 0
  63 002a 90F82440 	 ldrb r4,[r0,#36]
 294:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
  64              	 .loc 1 294 0
  65 002e 0133     	 adds r3,r3,#1
  66              	.LVL2:
 296:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 297:../Libraries/XMCLib/src/xmc_eth_mac.c ****       next = 0U;
  67              	 .loc 1 297 0
  68 0030 A342     	 cmp r3,r4
  69 0032 14BF     	 ite ne
  70 0034 1C46     	 movne r4,r3
  71 0036 0024     	 moveq r4,#0
  72              	.LVL3:
 298:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 299:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
  73              	 .loc 1 299 0
  74 0038 02EB4412 	 add r2,r2,r4,lsl#5
  75 003c CA60     	 str r2,[r1,#12]
  76              	.LVL4:
  77 003e E1E7     	 b .L2
  78              	.LVL5:
  79              	.L7:
 300:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 301:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->rx_desc[0]);
  80              	 .loc 1 301 0
  81 0040 41F20C03 	 movw r3,#4108
  82              	.LVL6:
  83 0044 0168     	 ldr r1,[r0]
  84 0046 CA50     	 str r2,[r1,r3]
 302:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index = 0U;
  85              	 .loc 1 302 0
  86 0048 0023     	 movs r3,#0
  87 004a 80F82730 	 strb r3,[r0,#39]
  88 004e 30BD     	 pop {r4,r5,pc}
  89              	 .cfi_endproc
  90              	.LFE234:
  92              	 .section .text.XMC_ETH_MAC_InitTxDescriptors,"ax",%progbits
  93              	 .align 1
  94              	 .global XMC_ETH_MAC_InitTxDescriptors
  95              	 .thumb
  96              	 .thumb_func
  98              	XMC_ETH_MAC_InitTxDescriptors:
  99              	.LFB235:
 303:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 304:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 305:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize TX descriptors */
 306:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
 307:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 100              	 .loc 1 307 0
 101              	 .cfi_startproc
 102              	 
 103              	 
 104              	.LVL7:
 105 0000 30B5     	 push {r4,r5,lr}
 106              	.LCFI1:
 107              	 .cfi_def_cfa_offset 12
 108              	 .cfi_offset 4,-12
 109              	 .cfi_offset 5,-8
 110              	 .cfi_offset 14,-4
 308:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i;
 309:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t next;
 310:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 311:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac
 312:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 313:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the n
 314:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 111              	 .loc 1 314 0
 112 0002 0023     	 movs r3,#0
 113              	.LVL8:
 114              	.L9:
 115              	 .loc 1 314 0 is_stmt 0 discriminator 1
 116 0004 90F82520 	 ldrb r2,[r0,#37]
 117 0008 9342     	 cmp r3,r2
 118 000a 4269     	 ldr r2,[r0,#20]
 119 000c 14D2     	 bcs .L13
 120 000e 5901     	 lsls r1,r3,#5
 315:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 316:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS;
 121              	 .loc 1 316 0 is_stmt 1
 122 0010 0D4D     	 ldr r5,.L14
 123 0012 5550     	 str r5,[r2,r1]
 317:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[i].buffer1 = (uint32_t)&(eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 124              	 .loc 1 317 0
 125 0014 C569     	 ldr r5,[r0,#28]
 316:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[i].buffer1 = (uint32_t)&(eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 126              	 .loc 1 316 0
 127 0016 5418     	 adds r4,r2,r1
 128              	 .loc 1 317 0
 129 0018 40F2F451 	 movw r1,#1524
 130 001c 01FB0351 	 mla r1,r1,r3,r5
 131 0020 A160     	 str r1,[r4,#8]
 318:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
 319:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (next == eth_mac->num_tx_buf)
 132              	 .loc 1 319 0
 133 0022 90F82510 	 ldrb r1,[r0,#37]
 318:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
 134              	 .loc 1 318 0
 135 0026 0133     	 adds r3,r3,#1
 136              	.LVL9:
 320:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 321:../Libraries/XMCLib/src/xmc_eth_mac.c ****         next = 0U;
 137              	 .loc 1 321 0
 138 0028 8B42     	 cmp r3,r1
 139 002a 14BF     	 ite ne
 140 002c 1946     	 movne r1,r3
 141 002e 0021     	 moveq r1,#0
 142              	.LVL10:
 322:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 323:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
 143              	 .loc 1 323 0
 144 0030 02EB4112 	 add r2,r2,r1,lsl#5
 145 0034 E260     	 str r2,[r4,#12]
 146              	.LVL11:
 147 0036 E5E7     	 b .L9
 148              	.LVL12:
 149              	.L13:
 324:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 325:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->tx_desc[0]);
 150              	 .loc 1 325 0
 151 0038 41F21003 	 movw r3,#4112
 152              	.LVL13:
 153 003c 0168     	 ldr r1,[r0]
 154 003e CA50     	 str r2,[r1,r3]
 326:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_index = 0U;
 155              	 .loc 1 326 0
 156 0040 0023     	 movs r3,#0
 157 0042 80F82630 	 strb r3,[r0,#38]
 158 0046 30BD     	 pop {r4,r5,pc}
 159              	.L15:
 160              	 .align 2
 161              	.L14:
 162 0048 00001030 	 .word 806354944
 163              	 .cfi_endproc
 164              	.LFE235:
 166              	 .section .text.XMC_ETH_MAC_InitEx,"ax",%progbits
 167              	 .align 1
 168              	 .global XMC_ETH_MAC_InitEx
 169              	 .thumb
 170              	 .thumb_func
 172              	XMC_ETH_MAC_InitEx:
 173              	.LFB232:
 221:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitEx: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 174              	 .loc 1 221 0
 175              	 .cfi_startproc
 176              	 
 177              	 
 178              	.LVL14:
 179 0000 0268     	 ldr r2,[r0]
 180              	.LVL15:
 181 0002 38B5     	 push {r3,r4,r5,lr}
 182              	.LCFI2:
 183              	 .cfi_def_cfa_offset 16
 184              	 .cfi_offset 3,-16
 185              	 .cfi_offset 4,-12
 186              	 .cfi_offset 5,-8
 187              	 .cfi_offset 14,-4
 188              	.LBB10:
 189              	.LBB11:
 190              	 .file 2 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_eth_mac.h"
   1:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
   2:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
   3:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @file xmc_eth_mac.h
   4:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @date 2018-08-08
   5:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
   6:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @cond
   7:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
   8:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   9:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  10:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * All rights reserved.                        
  12:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                             
  13:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * following conditions are met:   
  15:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  16:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * disclaimer.                        
  18:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  19:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  22:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * products derived from this software without specific prior written permission.                  
  24:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  25:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  33:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
  36:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  37:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Change History
  38:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * --------------
  39:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  40:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2015-06-20:
  41:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Initial
  42:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  43:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-04-25:
  44:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Change XMC_ETH_MAC_BUF_SIZE to 1524 to allow for Tagged MAC frame format
  45:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *  
  46:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-05-19:
  47:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_GetTxBuffer() and XMC_ETH_MAC_GetRxBuffer()
  48:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_SetTxBufferSize()
  49:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  50:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-06-08:
  51:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_IsRxDescriptorOwnedByDma()
  52:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  53:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-02-25:
  54:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - XMC_ETH_MAC_SetPortControl() fixed compilation warning
  55:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  56:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-02:
  57:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_InitPTPEx()
  58:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_SetPTPTime()
  59:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_UpdateAddend()
  60:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  61:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-11:
  62:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_EnablePTPAlarm() and XMC_ETH_MAC_DisablePTPAlarm
  63:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  64:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-17:
  65:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Fixed ordering of PTP nanoseconds and seconds in XMC_ETH_MAC_DMA_DESC_t
  66:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  67:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-08-07:
  68:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_TIMESTAMP_STATUS_t
  69:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  70:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-09-27:
  71:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_InitEx()
  72:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - XMC_ETH_MAC_SetAddressEx(), XMC_ETH_MAC_GetAddressEx() and XMC_ETH_MAC_SetAddressPerfectFi
  73:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  74:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2018-06-21:
  75:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Changed definition of XMC_ETH_MAC_DMA_DESC_t declaring its fields volatile
  76:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  77:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2018-08-08:
  78:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Fixed XMC_ETH_MAC_SetVLANTag() which now accepts a 32bit tag parameter that allows setting
  79:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  80:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @endcond
  81:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  82:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  83:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
  84:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @addtogroup XMClib XMC Peripheral Library
  85:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @{
  86:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  87:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  88:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
  89:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @addtogroup ETH_MAC
  90:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @brief Ethernet Low level driver for XMC4000 microcontroller family.
  91:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  92:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The Ethernet MAC (ETH) is a major communication peripheral that supports 10/100
  93:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MBit/s data transfer rates in compliance with the IEEE 802.3-2002 standard. The ETH
  94:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * may be used to implement internet connected applications using IPv4 and IPv6. The
  95:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH also includes support for IEEE1588 time synchronisation to allow implementation
  96:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * of Real Time Ethernet protocols.
  97:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  98:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The XMC_ETH_MAC low level driver provides functions to configure and initialize
  99:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the ETH_MAC hardware peripheral.
 100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @{
 101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #ifndef XMC_ETH_MAC_H
 104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_H
 105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * HEADER FILES
 108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #include "xmc_common.h"
 111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (ETH0)
 113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #include "xmc_eth_mac_map.h"
 115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MACROS
 118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_BUF_SIZE           (1524)     /**< ETH MAC buffer size */
 121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_PHY_MAX_RETRIES    (0xffffUL) /**< Maximum retries */
 122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_WAKEUP_REGISTER_LENGTH (8U)       /**< Remote wakeup frame reg length */
 123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * TDES0 Descriptor TX Packet Control/Status
 126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
 128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IC   (0x40000000U) /**< Interrupt on competition */
 129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LS   (0x20000000U) /**< Last segment */
 130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_FS   (0x10000000U) /**< First segment */
 131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DC   (0x08000000U) /**< Disable CRC */
 132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DP   (0x04000000U) /**< Disable pad */
 133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TTSE (0x02000000U) /**< Transmit time stamp enable */
 134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_CIC  (0x00C00000U) /**< Checksum insertion control */
 135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TER  (0x00200000U) /**< Transmit end of ring */
 136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TCH  (0x00100000U) /**< Second address chained */
 137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TTSS (0x00020000U) /**< Transmit time stamp status */
 138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IHE  (0x00010000U) /**< IP header error */
 139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_ES   (0x00008000U) /**< Error summary */
 140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_JT   (0x00004000U) /**< Jabber timeout */
 141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_FF   (0x00002000U) /**< Frame flushed */
 142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IPE  (0x00001000U) /**< IP payload error */
 143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LOC  (0x00000800U) /**< Loss of carrier */
 144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_NC   (0x00000400U) /**< No carrier */
 145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LC   (0x00000200U) /**< Late collision */
 146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_EC   (0x00000100U) /**< Excessive collision */
 147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_VF   (0x00000080U) /**< VLAN frame */
 148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_CC   (0x00000078U) /**< Collision count */
 149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_ED   (0x00000004U) /**< Excessive deferral */
 150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_UF   (0x00000002U) /**< Underflow error */
 151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DB   (0x00000001U) /**< Deferred bit */
 152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * RDES0 Descriptor RX Packet Status
 155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
 157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_AFM  (0x40000000U) /**< Destination address filter fail */
 158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FL   (0x3FFF0000U) /**< Frame length mask */
 159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_ES   (0x00008000U) /**< Error summary */
 160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_DE   (0x00004000U) /**< Descriptor error */
 161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_SAF  (0x00002000U) /**< Source address filter fail */
 162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LE   (0x00001000U) /**< Length error */
 163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_OE   (0x00000800U) /**< Overflow error */
 164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_VLAN (0x00000400U) /**< VLAN tag */
 165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FS   (0x00000200U) /**< First descriptor */
 166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LS   (0x00000100U) /**< Last descriptor */
 167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_TSA  (0x00000080U) /**< Timestamp available */
 168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LC   (0x00000040U) /**< Late collision */
 169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FT   (0x00000020U) /**< Frame type */
 170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_RWT  (0x00000010U) /**< Receive watchdog timeout */
 171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_RE   (0x00000008U) /**< Receive error */
 172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_DBE  (0x00000004U) /**< Dribble bit error */
 173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_CE   (0x00000002U) /**< CRC error */
 174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_ESA  (0x00000001U) /**< Extended Status/Rx MAC address */
 175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ENUMS
 178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Ethernet MAC status return values
 182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_STATUS
 184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_OK    = 0U, /**< Driver accepted application request */
 186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_BUSY  = 1U, /**< Driver is busy and cannot handle request */
 187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_ERROR = 2U  /**< Driver could not fulfil application request */
 188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_STATUS_t;
 189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Transmission frame
 192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TX_FRAME
 194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_FRAGMENT  = 0x1U, /**< Indicate frame fragment */
 196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_EVENT     = 0x2U, /**< Generate event when frame is transmitted */
 197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_TIMESTAMP = 0x4U  /**< Capture frame time stamp */
 198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TX_FRAME_t;
 199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC event
 202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_EVENT
 204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_PMT = ETH_INTERRUPT_MASK_PMTIM_Msk << 16,        /**< Power management event */
 206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TIMESTAMP = ETH_INTERRUPT_MASK_TSIM_Msk << 16,   /**< Time stamp event */
 207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_RECEIVE = ETH_STATUS_ERI_Msk,              /**< Early receive */
 208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_BUS_ERROR = ETH_STATUS_FBI_Msk,                  /**< Bus error */
 209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_TRANSMIT = ETH_STATUS_ETI_Msk,             /**< Early transmit */
 210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT = ETH_STATUS_RWT_Msk,   /**< Receive watchdog time-out
 211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED = ETH_STATUS_RPS_Msk,    /**< Receive process stopped *
 212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE = ETH_STATUS_RU_Msk,  /**< Receive buffer unavailabl
 213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE = ETH_STATUS_RI_Msk,                     /**< Receive event */
 214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW = ETH_STATUS_UNF_Msk,         /**< Transmit underflow */
 215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW = ETH_STATUS_OVF_Msk,           /**< Receive overflow */
 216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT = ETH_STATUS_TJT_Msk,    /**< Transmit jabber time-out 
 217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE = ETH_STATUS_TU_Msk, /**< Transmit buffer unavailab
 218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED = ETH_STATUS_TPS_Msk,   /**< Transmit process stopped 
 219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT = ETH_STATUS_TI_Msk                     /**< Transmit event */
 220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_EVENT_t;
 221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Link interface
 224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_INTERFACE
 226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_MII, /**< Link interface: Media independent interface */
 228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_RMII /**< Link interface: Reduced media independent interface */
 229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_INTERFACE_t;
 230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH link status
 233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_STATUS
 235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_DOWN, /**< Link status down */
 237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_UP    /**< Link status up */
 238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_STATUS_t;
 239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH link speed
 242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_SPEED
 244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_10M  = 0UL << ETH_MAC_CONFIGURATION_FES_Pos, /**< Link speed: 10M */
 246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_100M = 1UL << ETH_MAC_CONFIGURATION_FES_Pos  /**< Link speed: 100M */
 247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_SPEED_t;
 248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH duplex settings (full/half?)
 251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_DUPLEX
 253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_HALF = 0UL << ETH_MAC_CONFIGURATION_DM_Pos, /**< Half duplex */
 255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_FULL = 1UL << ETH_MAC_CONFIGURATION_DM_Pos  /**< Full duplex */
 256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_DUPLEX_t;
 257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC address filter
 260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_ADDR_FILTER
 262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE0 = 0x01000000UL, /**< Address filter mask: byte 0 */
 264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE1 = 0x02000000UL, /**< Address filter mask: byte 1 */
 265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE2 = 0x04000000UL, /**< Address filter mask: byte 2 */
 266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE3 = 0x08000000UL, /**< Address filter mask: byte 3 */
 267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE4 = 0x10000000UL, /**< Address filter mask: byte 4 */
 268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE5 = 0x20000000UL, /**< Address filter mask: byte 5 */
 269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_SA         = 0x40000000UL  /**< Address filter SA */
 270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_ADDR_FILTER_t;
 271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Power management events that triggers a PMT interrupt
 274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_PMT_EVENT
 276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_WAKEUP_FRAME         = ETH_PMT_CONTROL_STATUS_RWKPKTEN_Msk,  /**< Wakeup
 278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_MAGIC_PACKET         = ETH_PMT_CONTROL_STATUS_MGKPKTEN_Msk,  /**< Magic 
 279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_UNICAST_FRAME_FILTER = ETH_PMT_CONTROL_STATUS_GLBLUCAST_Msk  /**< Unicas
 280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PMT_EVENT_t;
 281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time-stamp configuration enable
 285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TIMESTAMP_CONFIG
 287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE = ETH_TIMESTAMP_CONTROL_TSCFUPDT_Msk,             /**< F
 289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_TS_INTERRUPT = ETH_TIMESTAMP_CONTROL_TSTRIG_Msk,       /**< T
 290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_ALL_FRAMES = ETH_TIMESTAMP_CONTROL_TSENALL_Msk,        /**< E
 291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTPV2 = ETH_TIMESTAMP_CONTROL_TSVER2ENA_Msk,           /**< P
 292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_ETHERNET = ETH_TIMESTAMP_CONTROL_TSIPENA_Msk, /**< P
 293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV6 = ETH_TIMESTAMP_CONTROL_TSIPV6ENA_Msk,   /**< P
 294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV4 = ETH_TIMESTAMP_CONTROL_TSIPV4ENA_Msk,   /**< P
 295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_MAC_ADDRESS_FILTER = ETH_TIMESTAMP_CONTROL_TSENMACADDR_Msk /*
 296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIMESTAMP_CONFIG_t;
 297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time-stamp status
 300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TIMESTAMP_STATUS
 302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_SECONDS_OVERFLOW = ETH_TIMESTAMP_STATUS_TSSOVF_Msk,           /**< I
 304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_TARGET_TIME_REACHED = ETH_TIMESTAMP_STATUS_TSTARGT_Msk,       /**< I
 305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_TARGET_TIMER_ERROR = ETH_TIMESTAMP_STATUS_TSTRGTERR_Msk,      /**< S
 306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIMESTAMP_STATUS_t;
 307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * DATA STRUCTURES
 311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /* Anonymous structure/union guard start */
 314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma push
 316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma anon_unions
 317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma warning 586
 319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC port control
 323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef union XMC_ETH_MAC_PORT_CTRL
 325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   struct
 327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   {
 328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd0: 2;     /**< Receive data bit 0 (::XMC_ETH_MAC_PORT_CTRL_RXD0_t) */
 329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd1: 2;     /**< Receive data bit 1 (::XMC_ETH_MAC_PORT_CTRL_RXD1_t) */
 330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd2: 2;     /**< Receive data bit 2 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD2_t) */
 331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd3: 2;     /**< Receive data bit 3 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD3_t) */
 332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t clk_rmii: 2; /**< RMII: Continuous 50 MHz reference clock.
 333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                MII: Receive clock, 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/s
 334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                (::XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t) */
 335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t crs_dv: 2;   /**< RMII: carrier sense/RX_Data valid. MII: RX_Data valid (::XMC_ETH_MAC
 336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t crs: 2;      /**< Carrier sense for only MII (::XMC_ETH_MAC_PORT_CTRL_CRS_t) */
 337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxer: 2;     /**< Receive error (::XMC_ETH_MAC_PORT_CTRL_RXER_t) */
 338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t col: 2;      /**< Collision Detect for only MII (::XMC_ETH_MAC_PORT_CTRL_COL_t) */
 339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t clk_tx: 2;   /**< Transmit clock (only MII), 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/
 340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t mdio: 2;     /**< Bidirectional, push-pull management data I/O line (::XMC_ETH_MAC_POR
 342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t mode: 1;     /**< RMII or MII (::XMC_ETH_MAC_PORT_CTRL_MODE_t) */
 344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   };
 345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t raw;
 347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PORT_CTRL_t;
 348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC DMA descriptor
 351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_DMA_DESC
 353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t status;                 /**< DMA descriptor status */
 355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t length;                 /**< Descriptor length */
 356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t buffer1;                /**< Buffer 1 */
 357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t buffer2;                /**< Buffer 2 */
 358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t extended_status;        /**< Extended status */
 359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t reserved;               /**< Reserved */
 360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t time_stamp_nanoseconds; /**< Time stamp low */
 361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t time_stamp_seconds;     /**< Time stamp high */
 362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_DMA_DESC_t;
 363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time
 366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_TIME
 368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t seconds;                 /**< Seconds */
 370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   int32_t nanoseconds;              /**< Nanoseconds */
 371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIME_t;
 372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH driver structure
 375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC
 377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   ETH_GLOBAL_TypeDef *regs;        /**< ETH module 0 (now, we have a single ETH module) */
 379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint64_t address;              /**< MAC address */
 380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *rx_desc; /**< DMA descriptor: RX */
 381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *tx_desc; /**< DMA descriptor: TX */
 382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *rx_buf;                /**< RX buffer */
 383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *tx_buf;                /**< TX buffer */
 384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *frame_end;              /**< End of assembled frame fragments */
 385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t num_rx_buf;              /**< How many RX descriptors? */
 386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t num_tx_buf;              /**< How many TX descriptors? */
 387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t tx_index;                /**< Transmit descriptor index */
 388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t rx_index;                /**< Receive descriptor index */
 389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t tx_ts_index;             /**< Transmit time-stamp descriptor index */
 390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_t;
 391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /* Anonymous structure/union guard end */
 393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma pop
 395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma warning restore
 397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * API PROTOTYPES
 401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #ifdef __cplusplus
 404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** extern "C" {
 405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t Initialization status
 410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the Ethernet MAC peripheral <br>
 413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * and loop-back settings.
 417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac);
 419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the Ethernet MAC peripheral. <br>
 426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Required when initializing the PHY, to deliver the clocks to the MAC, before MAC is reseted.
 427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \note The module needs to be enabled before using XMC_ETH_MAC_Enable() <br>
 428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * and loop-back settings.
 432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac);
 434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the RX DMA descriptors <br>
 441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the RX descriptors in a chained configuration. It sets
 444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the TX DMA descriptors <br>
 454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the TX descriptors in a chained configuration. It sets
 457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  
 461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable the Ethernet MAC peripheral <br>
 467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function de-asserts the peripheral reset.
 470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac);
 472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable the Ethernet MAC peripheral <br>
 479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function asserts the peripheral reset.
 482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac);
 484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return bool
 488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Check if the ETH MAC is enabled <br>
 491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function checks if the ETH MAC is enabled or not. It returns "true" if the
 494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * peripheral is enabled, "false" otherwise.
 495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** bool XMC_ETH_MAC_IsEnabled(const XMC_ETH_MAC_t *const eth_mac);
 497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Reset the ETH MAC peripheral <br>
 504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function resets the ETH MAC peripheral. It blocks until reset.
 507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
 509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 191              	 .loc 2 510 0
 192 0004 02F58053 	 add r3,r2,#4096
 193              	.LBE11:
 194              	.LBE10:
 221:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitEx: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 195              	 .loc 1 221 0
 196 0008 0446     	 mov r4,r0
 197              	.LBB13:
 198              	.LBB12:
 199              	 .loc 2 510 0
 200 000a 1968     	 ldr r1,[r3]
 201 000c 41F00101 	 orr r1,r1,#1
 202 0010 1960     	 str r1,[r3]
 203              	.L17:
 511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 204              	 .loc 2 511 0
 205 0012 1968     	 ldr r1,[r3]
 206 0014 11F00105 	 ands r5,r1,#1
 207 0018 FBD1     	 bne .L17
 208              	.LBE12:
 209              	.LBE13:
 227:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 210              	 .loc 1 227 0
 211 001a 4FF48061 	 mov r1,#1024
 212 001e 1160     	 str r1,[r2]
 230:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 213              	 .loc 1 230 0
 214 0020 8021     	 movs r1,#128
 215 0022 9161     	 str r1,[r2,#24]
 232:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                              (uint32_t)ETH_OPERATION_MODE_TSF_Msk |
 216              	 .loc 1 232 0
 217 0024 41F21801 	 movw r1,#4120
 218 0028 0F48     	 ldr r0,.L19
 219              	.LVL16:
 220 002a 5050     	 str r0,[r2,r1]
 237:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)ETH_BUS_MODE_AAL_Msk | /* the AHB interface generates all bursts
 221              	 .loc 1 237 0
 222 002c 0F4A     	 ldr r2,.L19+4
 223 002e 1A60     	 str r2,[r3]
 243:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 224              	 .loc 1 243 0
 225 0030 2046     	 mov r0,r4
 226 0032 FFF7FEFF 	 bl XMC_ETH_MAC_InitRxDescriptors
 227              	.LVL17:
 244:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 228              	 .loc 1 244 0
 229 0036 2046     	 mov r0,r4
 230 0038 FFF7FEFF 	 bl XMC_ETH_MAC_InitTxDescriptors
 231              	.LVL18:
 247:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 232              	 .loc 1 247 0
 233 003c 2368     	 ldr r3,[r4]
 234 003e 41F21402 	 movw r2,#4116
 235 0042 4FF0FF31 	 mov r1,#-1
 236 0046 9950     	 str r1,[r3,r2]
 250:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 237              	 .loc 1 250 0
 238 0048 6FF07C42 	 mvn r2,#-67108864
 239 004c C3F81021 	 str r2,[r3,#272]
 251:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_IPC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK;
 240              	 .loc 1 251 0
 241 0050 C3F80C21 	 str r2,[r3,#268]
 252:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 242              	 .loc 1 252 0
 243 0054 6FF0C022 	 mvn r2,#-1073692672
 244 0058 C3F80022 	 str r2,[r3,#512]
 255:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 245              	 .loc 1 255 0
 246 005c 4FF40272 	 mov r2,#520
 247 0060 DA63     	 str r2,[r3,#60]
 257:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 248              	 .loc 1 257 0
 249 0062 2562     	 str r5,[r4,#32]
 250 0064 38BD     	 pop {r3,r4,r5,pc}
 251              	.LVL19:
 252              	.L20:
 253 0066 00BF     	 .align 2
 254              	.L19:
 255 0068 04002002 	 .word 35651588
 256 006c 80200102 	 .word 33628288
 257              	 .cfi_endproc
 258              	.LFE232:
 260              	 .section .text.XMC_ETH_MAC_SetAddressEx,"ax",%progbits
 261              	 .align 1
 262              	 .global XMC_ETH_MAC_SetAddressEx
 263              	 .thumb
 264              	 .thumb_func
 266              	XMC_ETH_MAC_SetAddressEx:
 267              	.LFB236:
 327:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 328:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 329:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressEx(XMC_ETH_MAC_t *const eth_mac, uint8_t *const addr)
 330:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 268              	 .loc 1 330 0
 269              	 .cfi_startproc
 270              	 
 271              	 
 272              	 
 273              	.LVL20:
 331:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_ADDRESS0_HIGH = addr[4] | (addr[5] << 8); 
 274              	 .loc 1 331 0
 275 0000 4A79     	 ldrb r2,[r1,#5]
 276 0002 0B79     	 ldrb r3,[r1,#4]
 277 0004 0068     	 ldr r0,[r0]
 278              	.LVL21:
 279 0006 43EA0223 	 orr r3,r3,r2,lsl#8
 280 000a 0364     	 str r3,[r0,#64]
 332:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_ADDRESS0_LOW = addr[0] | (addr[1] << 8) | (addr[2] << 16) | (addr[3] << 24); 
 281              	 .loc 1 332 0
 282 000c 8B78     	 ldrb r3,[r1,#2]
 283 000e 4A78     	 ldrb r2,[r1,#1]
 284 0010 1B04     	 lsls r3,r3,#16
 285 0012 43EA0223 	 orr r3,r3,r2,lsl#8
 286 0016 0A78     	 ldrb r2,[r1]
 287 0018 1343     	 orrs r3,r3,r2
 288 001a CA78     	 ldrb r2,[r1,#3]
 289 001c 43EA0263 	 orr r3,r3,r2,lsl#24
 290 0020 4364     	 str r3,[r0,#68]
 291 0022 7047     	 bx lr
 292              	 .cfi_endproc
 293              	.LFE236:
 295              	 .section .text.XMC_ETH_MAC_GetAddressEx,"ax",%progbits
 296              	 .align 1
 297              	 .global XMC_ETH_MAC_GetAddressEx
 298              	 .thumb
 299              	 .thumb_func
 301              	XMC_ETH_MAC_GetAddressEx:
 302              	.LFB237:
 333:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 334:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 335:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_GetAddressEx(XMC_ETH_MAC_t *const eth_mac, uint8_t *const addr)
 336:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 303              	 .loc 1 336 0
 304              	 .cfi_startproc
 305              	 
 306              	 
 307              	 
 308              	.LVL22:
 337:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t low_addr = eth_mac->regs->MAC_ADDRESS0_LOW;
 309              	 .loc 1 337 0
 310 0000 0268     	 ldr r2,[r0]
 311 0002 536C     	 ldr r3,[r2,#68]
 312              	.LVL23:
 338:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t high_addr = eth_mac->regs->MAC_ADDRESS0_HIGH;
 313              	 .loc 1 338 0
 314 0004 126C     	 ldr r2,[r2,#64]
 315              	.LVL24:
 339:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 340:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[0] = low_addr & 0xff;
 341:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[1] = (low_addr >> 8) & 0xff;
 342:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[2] = (low_addr >> 16) & 0xff;
 343:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[3] = (low_addr >> 24) & 0xff;
 344:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[4] = high_addr & 0xff;
 316              	 .loc 1 344 0
 317 0006 0A71     	 strb r2,[r1,#4]
 341:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[2] = (low_addr >> 16) & 0xff;
 318              	 .loc 1 341 0
 319 0008 180A     	 lsrs r0,r3,#8
 320              	.LVL25:
 340:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[1] = (low_addr >> 8) & 0xff;
 321              	 .loc 1 340 0
 322 000a 0B70     	 strb r3,[r1]
 341:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[2] = (low_addr >> 16) & 0xff;
 323              	 .loc 1 341 0
 324 000c 4870     	 strb r0,[r1,#1]
 345:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[5] = (high_addr >> 8) & 0xff;
 325              	 .loc 1 345 0
 326 000e 120A     	 lsrs r2,r2,#8
 327              	.LVL26:
 342:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[3] = (low_addr >> 24) & 0xff;
 328              	 .loc 1 342 0
 329 0010 180C     	 lsrs r0,r3,#16
 343:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[4] = high_addr & 0xff;
 330              	 .loc 1 343 0
 331 0012 1B0E     	 lsrs r3,r3,#24
 332              	.LVL27:
 342:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[3] = (low_addr >> 24) & 0xff;
 333              	 .loc 1 342 0
 334 0014 8870     	 strb r0,[r1,#2]
 343:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[4] = high_addr & 0xff;
 335              	 .loc 1 343 0
 336 0016 CB70     	 strb r3,[r1,#3]
 337              	 .loc 1 345 0
 338 0018 4A71     	 strb r2,[r1,#5]
 339 001a 7047     	 bx lr
 340              	 .cfi_endproc
 341              	.LFE237:
 343              	 .section .text.XMC_ETH_MAC_SetAddressPerfectFilter,"ax",%progbits
 344              	 .align 1
 345              	 .global XMC_ETH_MAC_SetAddressPerfectFilter
 346              	 .thumb
 347              	 .thumb_func
 349              	XMC_ETH_MAC_SetAddressPerfectFilter:
 350              	.LFB238:
 346:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 347:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 348:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set address perfect filter */
 349:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressPerfectFilter(XMC_ETH_MAC_t *const eth_mac,
 350:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                          uint8_t index,
 351:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                          const uint64_t addr,
 352:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                          uint32_t flags)
 353:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 351              	 .loc 1 353 0
 352              	 .cfi_startproc
 353              	 
 354              	 
 355              	.LVL28:
 356 0000 30B5     	 push {r4,r5,lr}
 357              	.LCFI3:
 358              	 .cfi_def_cfa_offset 12
 359              	 .cfi_offset 4,-12
 360              	 .cfi_offset 5,-8
 361              	 .cfi_offset 14,-4
 354:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 355:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 356:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressPerfectFilter: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(e
 357:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressFilter: index is out of range", ((index > 0) && (index < 4)));
 358:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 359:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->MAC_ADDRESS0_HIGH);
 362              	 .loc 1 359 0
 363 0002 0068     	 ldr r0,[r0]
 364              	.LVL29:
 360:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = (uint32_t)(addr >> 32U) | flags;
 365              	 .loc 1 360 0
 366 0004 039D     	 ldr r5,[sp,#12]
 367 0006 8C00     	 lsls r4,r1,#2
 359:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = (uint32_t)(addr >> 32U) | flags;
 368              	 .loc 1 359 0
 369 0008 4030     	 adds r0,r0,#64
 370              	.LVL30:
 361:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index + 1U] = (uint32_t)addr;
 371              	 .loc 1 361 0
 372 000a 0434     	 adds r4,r4,#4
 360:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = (uint32_t)(addr >> 32U) | flags;
 373              	 .loc 1 360 0
 374 000c 2B43     	 orrs r3,r3,r5
 375 000e 40F82130 	 str r3,[r0,r1,lsl#2]
 376              	 .loc 1 361 0
 377 0012 0251     	 str r2,[r0,r4]
 378 0014 30BD     	 pop {r4,r5,pc}
 379              	 .cfi_endproc
 380              	.LFE238:
 382              	 .section .text.XMC_ETH_MAC_SetAddressPerfectFilterEx,"ax",%progbits
 383              	 .align 1
 384              	 .global XMC_ETH_MAC_SetAddressPerfectFilterEx
 385              	 .thumb
 386              	 .thumb_func
 388              	XMC_ETH_MAC_SetAddressPerfectFilterEx:
 389              	.LFB239:
 362:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 363:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 364:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressPerfectFilterEx(XMC_ETH_MAC_t *const eth_mac,
 365:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            uint8_t index,
 366:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            uint8_t *const addr,
 367:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            uint32_t flags)
 368:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 390              	 .loc 1 368 0
 391              	 .cfi_startproc
 392              	 
 393              	 
 394              	.LVL31:
 395 0000 70B5     	 push {r4,r5,r6,lr}
 396              	.LCFI4:
 397              	 .cfi_def_cfa_offset 16
 398              	 .cfi_offset 4,-16
 399              	 .cfi_offset 5,-12
 400              	 .cfi_offset 6,-8
 401              	 .cfi_offset 14,-4
 369:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 370:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 371:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressPerfectFilter: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(e
 372:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressFilter: index is out of range", ((index > 0) && (index < 4)));
 373:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 374:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->MAC_ADDRESS0_HIGH);
 402              	 .loc 1 374 0
 403 0002 0468     	 ldr r4,[r0]
 375:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = addr[4] | (addr[5] << 8) | flags; 
 404              	 .loc 1 375 0
 405 0004 5679     	 ldrb r6,[r2,#5]
 406 0006 1079     	 ldrb r0,[r2,#4]
 407              	.LVL32:
 374:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = addr[4] | (addr[5] << 8) | flags; 
 408              	 .loc 1 374 0
 409 0008 4034     	 adds r4,r4,#64
 410              	.LVL33:
 411              	 .loc 1 375 0
 412 000a 40EA0620 	 orr r0,r0,r6,lsl#8
 413 000e 0343     	 orrs r3,r3,r0
 414              	.LVL34:
 415 0010 44F82130 	 str r3,[r4,r1,lsl#2]
 376:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index + 1U] = addr[0] | (addr[1] << 8) | (addr[2] << 16) | (addr[3] << 24); 
 416              	 .loc 1 376 0
 417 0014 9378     	 ldrb r3,[r2,#2]
 375:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = addr[4] | (addr[5] << 8) | flags; 
 418              	 .loc 1 375 0
 419 0016 8D00     	 lsls r5,r1,#2
 420              	 .loc 1 376 0
 421 0018 5178     	 ldrb r1,[r2,#1]
 422              	.LVL35:
 423 001a 1B04     	 lsls r3,r3,#16
 424 001c 43EA0123 	 orr r3,r3,r1,lsl#8
 425 0020 1178     	 ldrb r1,[r2]
 426 0022 D278     	 ldrb r2,[r2,#3]
 427              	.LVL36:
 428 0024 0435     	 adds r5,r5,#4
 429 0026 0B43     	 orrs r3,r3,r1
 430 0028 43EA0263 	 orr r3,r3,r2,lsl#24
 431 002c 6351     	 str r3,[r4,r5]
 432 002e 70BD     	 pop {r4,r5,r6,pc}
 433              	 .cfi_endproc
 434              	.LFE239:
 436              	 .section .text.XMC_ETH_MAC_SetAddressHashFilter,"ax",%progbits
 437              	 .align 1
 438              	 .global XMC_ETH_MAC_SetAddressHashFilter
 439              	 .thumb
 440              	 .thumb_func
 442              	XMC_ETH_MAC_SetAddressHashFilter:
 443              	.LFB240:
 377:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 378:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 379:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set address hash filter */
 380:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressHashFilter(XMC_ETH_MAC_t *const eth_mac, const uint64_t hash)
 381:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 444              	 .loc 1 381 0
 445              	 .cfi_startproc
 446              	 
 447              	 
 448              	 
 449              	.LVL37:
 382:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->HASH_TABLE_HIGH = (uint32_t)(hash >> 32);
 450              	 .loc 1 382 0
 451 0000 0168     	 ldr r1,[r0]
 452 0002 8B60     	 str r3,[r1,#8]
 383:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->HASH_TABLE_LOW = (uint32_t)hash;
 453              	 .loc 1 383 0
 454 0004 CA60     	 str r2,[r1,#12]
 455 0006 7047     	 bx lr
 456              	 .cfi_endproc
 457              	.LFE240:
 459              	 .section .text.XMC_ETH_MAC_SendFrame,"ax",%progbits
 460              	 .align 1
 461              	 .global XMC_ETH_MAC_SendFrame
 462              	 .thumb
 463              	 .thumb_func
 465              	XMC_ETH_MAC_SendFrame:
 466              	.LFB241:
 384:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 385:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 386:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Send frame */
 387:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SendFrame(XMC_ETH_MAC_t *const eth_mac, const uint8_t *frame, uint
 388:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 467              	 .loc 1 388 0
 468              	 .cfi_startproc
 469              	 
 470              	 
 471              	.LVL38:
 472 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 473              	.LCFI5:
 474              	 .cfi_def_cfa_offset 24
 475              	 .cfi_offset 3,-24
 476              	 .cfi_offset 4,-20
 477              	 .cfi_offset 5,-16
 478              	 .cfi_offset 6,-12
 479              	 .cfi_offset 7,-8
 480              	 .cfi_offset 14,-4
 389:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 390:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint8_t *dst;
 391:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t ctrl;
 392:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 393:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac != NULL);
 394:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac->regs == ETH0);
 395:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", (frame != NULL) && (len > 0));
 396:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 397:../Libraries/XMCLib/src/xmc_eth_mac.c ****   dst = eth_mac->frame_end;
 398:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 399:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN)
 481              	 .loc 1 399 0
 482 0002 90F82660 	 ldrb r6,[r0,#38]
 397:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 483              	 .loc 1 397 0
 484 0006 056A     	 ldr r5,[r0,#32]
 485              	.LVL39:
 486              	 .loc 1 399 0
 487 0008 7601     	 lsls r6,r6,#5
 388:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 488              	 .loc 1 388 0
 489 000a 1F46     	 mov r7,r3
 490              	 .loc 1 399 0
 491 000c 4369     	 ldr r3,[r0,#20]
 492              	.LVL40:
 388:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 493              	 .loc 1 388 0
 494 000e 0446     	 mov r4,r0
 495              	 .loc 1 399 0
 496 0010 9819     	 adds r0,r3,r6
 497              	.LVL41:
 498 0012 9B59     	 ldr r3,[r3,r6]
 499 0014 002B     	 cmp r3,#0
 500 0016 0CDA     	 bge .L27
 501              	.LVL42:
 400:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 401:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Transmitter is busy, wait */
 402:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 403:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (eth_mac->regs->STATUS & ETH_STATUS_TU_Msk)
 502              	 .loc 1 403 0
 503 0018 2368     	 ldr r3,[r4]
 504 001a 41F21402 	 movw r2,#4116
 505              	.LVL43:
 506 001e 9958     	 ldr r1,[r3,r2]
 507              	.LVL44:
 508 0020 4907     	 lsls r1,r1,#29
 509 0022 46D5     	 bpl .L36
 404:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 405:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Receive buffer unavailable, resume DMA */
 406:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TU_Msk;
 510              	 .loc 1 406 0
 511 0024 0421     	 movs r1,#4
 512 0026 9950     	 str r1,[r3,r2]
 407:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 513              	 .loc 1 407 0
 514 0028 41F20402 	 movw r2,#4100
 515 002c 0021     	 movs r1,#0
 516 002e 9950     	 str r1,[r3,r2]
 517 0030 3FE0     	 b .L36
 518              	.LVL45:
 519              	.L27:
 408:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 409:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 410:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 411:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 412:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 413:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (dst == NULL)
 520              	 .loc 1 413 0
 521 0032 15B9     	 cbnz r5,.L29
 414:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 415:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Start of a new transmit frame */
 416:../Libraries/XMCLib/src/xmc_eth_mac.c ****       dst = (uint8_t *)eth_mac->tx_desc[eth_mac->tx_index].buffer1;
 522              	 .loc 1 416 0
 523 0034 8568     	 ldr r5,[r0,#8]
 524              	.LVL46:
 417:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].length = len;
 525              	 .loc 1 417 0
 526 0036 4260     	 str r2,[r0,#4]
 527 0038 02E0     	 b .L30
 528              	.L29:
 418:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 419:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 420:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 421:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Sending data fragments in progress */
 422:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].length += len;
 529              	 .loc 1 422 0
 530 003a 4368     	 ldr r3,[r0,#4]
 531 003c 1344     	 add r3,r3,r2
 532 003e 4360     	 str r3,[r0,#4]
 533              	.L30:
 423:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 424:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 425:../Libraries/XMCLib/src/xmc_eth_mac.c ****     memcpy(dst, frame, len);
 534              	 .loc 1 425 0
 535 0040 2846     	 mov r0,r5
 536 0042 FFF7FEFF 	 bl memcpy
 537              	.LVL47:
 426:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 427:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_FRAGMENT)
 538              	 .loc 1 427 0
 539 0046 FB07     	 lsls r3,r7,#31
 540 0048 01D5     	 bpl .L31
 428:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 429:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* More data to come, remember current write position */
 430:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->frame_end = dst;
 541              	 .loc 1 430 0
 542 004a 2562     	 str r5,[r4,#32]
 543 004c 2FE0     	 b .L40
 544              	.L31:
 431:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 432:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 433:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 434:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Frame is now ready, send it to DMA */
 435:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl = eth_mac->tx_desc[eth_mac->tx_index].status | ETH_MAC_DMA_TDES0_CIC;
 545              	 .loc 1 435 0
 546 004e 94F82600 	 ldrb r0,[r4,#38]
 547 0052 6169     	 ldr r1,[r4,#20]
 548 0054 4301     	 lsls r3,r0,#5
 436:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl &= ~(ETH_MAC_DMA_TDES0_IC | ETH_MAC_DMA_TDES0_TTSE);
 437:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 438:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_EVENT)
 549              	 .loc 1 438 0
 550 0056 BE07     	 lsls r6,r7,#30
 435:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl &= ~(ETH_MAC_DMA_TDES0_IC | ETH_MAC_DMA_TDES0_TTSE);
 551              	 .loc 1 435 0
 552 0058 CA58     	 ldr r2,[r1,r3]
 553              	.LVL48:
 439:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 440:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl |= ETH_MAC_DMA_TDES0_IC;
 441:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 442:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 443:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_TIMESTAMP)
 444:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 445:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl |= ETH_MAC_DMA_TDES0_TTSE;
 446:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 447:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_ts_index = eth_mac->tx_index;
 554              	 .loc 1 447 0
 555 005a 84F82800 	 strb r0,[r4,#40]
 436:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 556              	 .loc 1 436 0
 557 005e 22F08442 	 bic r2,r2,#1107296256
 558              	.LVL49:
 440:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 559              	 .loc 1 440 0
 560 0062 46BF     	 itte mi
 561 0064 42F08142 	 orrmi r2,r2,#1082130432
 562              	.LVL50:
 563 0068 42F48002 	 orrmi r2,r2,#4194304
 436:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 564              	 .loc 1 436 0
 565 006c 42F44002 	 orrpl r2,r2,#12582912
 566              	.LVL51:
 443:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 567              	 .loc 1 443 0
 568 0070 7D07     	 lsls r5,r7,#29
 569              	.LVL52:
 445:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 570              	 .loc 1 445 0
 571 0072 48BF     	 it mi
 572 0074 42F00072 	 orrmi r2,r2,#33554432
 573              	.LVL53:
 448:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 449:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].status = ctrl | ETH_MAC_DMA_TDES0_OWN;
 574              	 .loc 1 449 0
 575 0078 42F00042 	 orr r2,r2,#-2147483648
 576              	.LVL54:
 577 007c CA50     	 str r2,[r1,r3]
 450:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 451:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_index++;
 578              	 .loc 1 451 0
 579 007e 94F82630 	 ldrb r3,[r4,#38]
 452:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (eth_mac->tx_index == eth_mac->num_tx_buf)
 580              	 .loc 1 452 0
 581 0082 94F82520 	 ldrb r2,[r4,#37]
 451:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (eth_mac->tx_index == eth_mac->num_tx_buf)
 582              	 .loc 1 451 0
 583 0086 0133     	 adds r3,r3,#1
 584 0088 DBB2     	 uxtb r3,r3
 585              	 .loc 1 452 0
 586 008a 9A42     	 cmp r2,r3
 453:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 454:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_index = 0U;
 455:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 456:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->frame_end = NULL;
 457:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 458:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Start frame transmission */
 459:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 587              	 .loc 1 459 0
 588 008c 41F21401 	 movw r1,#4116
 589 0090 2268     	 ldr r2,[r4]
 451:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (eth_mac->tx_index == eth_mac->num_tx_buf)
 590              	 .loc 1 451 0
 591 0092 84F82630 	 strb r3,[r4,#38]
 592              	 .loc 1 459 0
 593 0096 4FF00200 	 mov r0,#2
 594 009a 4FF00003 	 mov r3,#0
 454:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 595              	 .loc 1 454 0
 596 009e 08BF     	 it eq
 597 00a0 84F82630 	 strbeq r3,[r4,#38]
 456:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 598              	 .loc 1 456 0
 599 00a4 2362     	 str r3,[r4,#32]
 600              	 .loc 1 459 0
 601 00a6 5050     	 str r0,[r2,r1]
 460:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 602              	 .loc 1 460 0
 603 00a8 41F20401 	 movw r1,#4100
 604 00ac 5350     	 str r3,[r2,r1]
 605              	.L40:
 461:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 462:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_OK;
 606              	 .loc 1 462 0
 607 00ae 0020     	 movs r0,#0
 608 00b0 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 609              	.LVL55:
 610              	.L36:
 402:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (eth_mac->regs->STATUS & ETH_STATUS_TU_Msk)
 611              	 .loc 1 402 0
 612 00b2 0120     	 movs r0,#1
 613              	.LVL56:
 463:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 464:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 465:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 466:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 614              	 .loc 1 466 0
 615 00b4 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 616              	 .cfi_endproc
 617              	.LFE241:
 619              	 .section .text.XMC_ETH_MAC_ReadFrame,"ax",%progbits
 620              	 .align 1
 621              	 .global XMC_ETH_MAC_ReadFrame
 622              	 .thumb
 623              	 .thumb_func
 625              	XMC_ETH_MAC_ReadFrame:
 626              	.LFB242:
 467:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 468:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Read frame */
 469:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_ReadFrame(XMC_ETH_MAC_t *const eth_mac, uint8_t *frame, uint32_t len)
 470:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 627              	 .loc 1 470 0
 628              	 .cfi_startproc
 629              	 
 630              	 
 631              	.LVL57:
 632 0000 38B5     	 push {r3,r4,r5,lr}
 633              	.LCFI6:
 634              	 .cfi_def_cfa_offset 16
 635              	 .cfi_offset 3,-16
 636              	 .cfi_offset 4,-12
 637              	 .cfi_offset 5,-8
 638              	 .cfi_offset 14,-4
 639              	 .loc 1 470 0
 640 0002 0446     	 mov r4,r0
 471:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint8_t const *src;
 472:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 473:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac != NULL);
 474:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac->regs == ETH0);
 475:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", (frame != NULL) && (len > 0));
 476:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 477:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Fast-copy data to packet buffer */
 478:../Libraries/XMCLib/src/xmc_eth_mac.c ****   src = (uint8_t const *)eth_mac->rx_desc[eth_mac->rx_index].buffer1;
 641              	 .loc 1 478 0
 642 0004 90F82700 	 ldrb r0,[r0,#39]
 643              	.LVL58:
 644 0008 2369     	 ldr r3,[r4,#16]
 645 000a 03EB4013 	 add r3,r3,r0,lsl#5
 479:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 480:../Libraries/XMCLib/src/xmc_eth_mac.c ****   memcpy(frame, src, len);
 646              	 .loc 1 480 0
 647 000e 0846     	 mov r0,r1
 478:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 648              	 .loc 1 478 0
 649 0010 9B68     	 ldr r3,[r3,#8]
 650              	.LVL59:
 651              	 .loc 1 480 0
 652 0012 1946     	 mov r1,r3
 653              	.LVL60:
 470:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint8_t const *src;
 654              	 .loc 1 470 0
 655 0014 1546     	 mov r5,r2
 656              	 .loc 1 480 0
 657 0016 FFF7FEFF 	 bl memcpy
 658              	.LVL61:
 481:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 482:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Return this block back to DMA */
 483:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[eth_mac->rx_index].status = ETH_MAC_DMA_RDES0_OWN;
 659              	 .loc 1 483 0
 660 001a 94F82730 	 ldrb r3,[r4,#39]
 661 001e 2269     	 ldr r2,[r4,#16]
 662 0020 5B01     	 lsls r3,r3,#5
 663 0022 4FF00041 	 mov r1,#-2147483648
 664 0026 D150     	 str r1,[r2,r3]
 484:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 485:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index++;
 665              	 .loc 1 485 0
 666 0028 94F82730 	 ldrb r3,[r4,#39]
 486:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->rx_index == eth_mac->num_rx_buf)
 667              	 .loc 1 486 0
 668 002c 94F82420 	 ldrb r2,[r4,#36]
 485:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->rx_index == eth_mac->num_rx_buf)
 669              	 .loc 1 485 0
 670 0030 0133     	 adds r3,r3,#1
 671 0032 DBB2     	 uxtb r3,r3
 672              	 .loc 1 486 0
 673 0034 9A42     	 cmp r2,r3
 485:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->rx_index == eth_mac->num_rx_buf)
 674              	 .loc 1 485 0
 675 0036 84F82730 	 strb r3,[r4,#39]
 487:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 488:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_index = 0U;
 676              	 .loc 1 488 0
 677 003a 04BF     	 itt eq
 678 003c 0023     	 moveq r3,#0
 679 003e 84F82730 	 strbeq r3,[r4,#39]
 489:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 490:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 491:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->regs->STATUS & ETH_STATUS_RU_Msk)
 680              	 .loc 1 491 0
 681 0042 41F21402 	 movw r2,#4116
 682 0046 2368     	 ldr r3,[r4]
 683 0048 9958     	 ldr r1,[r3,r2]
 684 004a 0906     	 lsls r1,r1,#24
 492:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 493:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Receive buffer unavailable, resume DMA */
 494:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 685              	 .loc 1 494 0
 686 004c 41BF     	 itttt mi
 687 004e 8021     	 movmi r1,#128
 688 0050 9950     	 strmi r1,[r3,r2]
 495:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 689              	 .loc 1 495 0
 690 0052 41F20802 	 movwmi r2,#4104
 691 0056 0021     	 movmi r1,#0
 692 0058 48BF     	 it mi
 693 005a 9950     	 strmi r1,[r3,r2]
 496:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 497:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 498:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (len);
 499:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 694              	 .loc 1 499 0
 695 005c 2846     	 mov r0,r5
 696 005e 38BD     	 pop {r3,r4,r5,pc}
 697              	 .cfi_endproc
 698              	.LFE242:
 700              	 .section .text.XMC_ETH_MAC_GetRxFrameSize,"ax",%progbits
 701              	 .align 1
 702              	 .global XMC_ETH_MAC_GetRxFrameSize
 703              	 .thumb
 704              	 .thumb_func
 706              	XMC_ETH_MAC_GetRxFrameSize:
 707              	.LFB243:
 500:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 501:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get RX frame size */
 502:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
 503:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 708              	 .loc 1 503 0
 709              	 .cfi_startproc
 710              	 
 711              	 
 712              	 
 713              	.LVL62:
 504:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t status;
 505:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t len = 0U;
 506:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 507:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = eth_mac->rx_desc[eth_mac->rx_index].status;
 714              	 .loc 1 507 0
 715 0000 90F82730 	 ldrb r3,[r0,#39]
 716 0004 0269     	 ldr r2,[r0,#16]
 717 0006 5B01     	 lsls r3,r3,#5
 718 0008 D058     	 ldr r0,[r2,r3]
 719              	.LVL63:
 508:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 509:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (status & ETH_MAC_DMA_RDES0_OWN)
 720              	 .loc 1 509 0
 721 000a 0028     	 cmp r0,#0
 722 000c 08DB     	 blt .L49
 510:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 511:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Owned by DMA */
 512:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = 0U;
 513:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 514:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 515:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 723              	 .loc 1 515 0
 724 000e 00F40343 	 and r3,r0,#33536
 514:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 725              	 .loc 1 514 0
 726 0012 B3F5407F 	 cmp r3,#768
 727 0016 05D1     	 bne .L50
 516:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
 517:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 518:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Error, this block is invalid */
 519:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = 0xFFFFFFFFU;
 520:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 521:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else 
 522:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 523:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Subtract CRC */
 524:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 728              	 .loc 1 524 0
 729 0018 C0F30D40 	 ubfx r0,r0,#16,#14
 730              	.LVL64:
 731 001c 0438     	 subs r0,r0,#4
 732              	.LVL65:
 733 001e 7047     	 bx lr
 734              	.LVL66:
 735              	.L49:
 512:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 736              	 .loc 1 512 0
 737 0020 0020     	 movs r0,#0
 738              	.LVL67:
 739 0022 7047     	 bx lr
 740              	.LVL68:
 741              	.L50:
 519:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 742              	 .loc 1 519 0
 743 0024 4FF0FF30 	 mov r0,#-1
 744              	.LVL69:
 525:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 526:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 527:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return len;
 528:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 745              	 .loc 1 528 0
 746 0028 7047     	 bx lr
 747              	 .cfi_endproc
 748              	.LFE243:
 750              	 .section .text.XMC_ETH_MAC_SetManagmentClockDivider,"ax",%progbits
 751              	 .align 1
 752              	 .global XMC_ETH_MAC_SetManagmentClockDivider
 753              	 .thumb
 754              	 .thumb_func
 756              	XMC_ETH_MAC_SetManagmentClockDivider:
 757              	.LFB244:
 529:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 530:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set management clock divider */
 531:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
 532:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 758              	 .loc 1 532 0
 759              	 .cfi_startproc
 760              	 
 761              	 
 762              	 
 763              	.LVL70:
 764              	.LBB18:
 765              	.LBB19:
 766              	.LBB20:
 767              	.LBB21:
 768              	 .file 3 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc4_scu.h"
   1:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
   2:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @file xmc4_scu.h
   3:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @date 2019-02-18
   4:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   5:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @cond
   6:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
   7:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   9:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * All rights reserved.                        
  11:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                             
  12:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * following conditions are met:   
  14:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  15:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer.                        
  17:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  18:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  21:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  24:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  32:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  35:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  36:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Change History
  37:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * --------------
  38:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  39:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-06-20:
  40:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Initial version
  41:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  42:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  43:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-11-30:
  44:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  45:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *      
  46:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-03-09:
  47:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_EnableMonitor/XMC_SCU_POWER_DisableMonitor
  48:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_POWER_GetEVRStatus, XMC_SCU_POWER_GetEVR13Voltage, XMC_SCU_POWER_GetEVR33Vol
  49:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  50:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  51:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  52:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  53:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  54:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  55:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-04-15:
  56:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Fixed naming of XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG peripheral clock.
  57:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *       Added enable and disable for peripheral clocks       
  58:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  59:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-05-19:
  60:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_IsLowPowerOscillatorStable() and XMC_SCU_CLOCK_IsHighPerformanceOscill
  61:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_WaitForInterrupt() and XMC_SCU_POWER_WaitForEvent()
  62:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(), 
  63:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(),
  64:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus()
  65:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(), 
  66:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(),
  67:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus()
  68:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Removed XMC_SCU_INTERRUPT_EVENT_OSCULSTAT_UPDATED, XMC_SCU_INTERRUPT_EVENT_HDSTAT_UPDATED
  69:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  70:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-14:
  71:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_IsWakeupEventDetected() and XMC_SCU_HIB_ClearWakeupEventDetectionStatus(
  72:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  73:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-15:
  74:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_EnterHibernateStateEx() which allows to select between external or inter
  75:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Extended wakeup hibernate events using LPAC wakeup on events. Only available in XMC44, XMC
  76:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added LPAC APIs. Only available in XMC44, XMC42 and XMC41 series.
  77:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  78:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2019-02-18:
  79:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Fix conditional definition of XMC_SCU_PARITY_t elements
  80:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_PARITY_OverrideParityBitLogic(uint32_t memory)
  81:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_PARITY_SelectMemoryTest(const XMC_SCU_PARITY_t memory)
  82:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_PARITY_SetParityWriteValue(uint8_t val)
  83:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_PARITY_GetParityReadValue(void)
  84:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  85:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @endcond 
  86:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  87:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  88:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  89:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #ifndef XMC4_SCU_H
  90:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC4_SCU_H
  91:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  92:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
  93:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HEADER FILES
  94:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  95:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  96:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #include "xmc_common.h"
  97:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  98:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if UC_FAMILY == XMC4
  99:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
 102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
 103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  
 105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup SCU
 107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
 108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * MACROS
 112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_8MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MH
 114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_8MHZ (89U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8M
 115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_8MHZ (2U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 8
 116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_12MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12
 118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_12MHZ (79U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_12MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_16MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16
 122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_16MHZ (59U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_16MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_WDT_WARN           SCU_INTERRUPT_SRSTAT_PRWARN_Msk /**< Watchdog pr
 126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC       SCU_INTERRUPT_SRSTAT_PI_Msk     /**< RTC periodi
 127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_ALARM          SCU_INTERRUPT_SRSTAT_AI_Msk     /**< RTC alarm e
 128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_DLR_OVERRUN        SCU_INTERRUPT_SRSTAT_DLROVR_Msk /**< DLR overrun
 129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCR_Msk)
 130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCR_UPDATED     SCU_INTERRUPT_SRSTAT_LPACCR_Msk /**< LPAC Contro
 131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH0_Msk)
 133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH0_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH0_Msk /**< LPAC Thres
 134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH1_Msk)
 136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH1_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH1_Msk  /**< LPAC Thre
 137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACST_Msk)
 139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACST_UPDATED     SCU_INTERRUPT_SRSTAT_LPACST_Msk  /**< LPAC Statu
 140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCLR_Msk)
 142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCLR_UPDATED    SCU_INTERRUPT_SRSTAT_LPACCLR_Msk /**< LPAC event
 143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACSET_Msk)
 145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACSET_UPDATED    SCU_INTERRUPT_SRSTAT_LPACSET_Msk /**< LPAC event
 146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTST_Msk)
 148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTST_UPDATED     SCU_INTERRUPT_SRSTAT_HINTST_Msk /**< HIB HINTST 
 149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTCLR_Msk)
 151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTCLR_UPDATED    SCU_INTERRUPT_SRSTAT_HINTCLR_Msk /**< HIB HINTCL
 152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTSET_Msk)
 154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTSET_UPDATED    SCU_INTERRUPT_SRSTAT_HINTSET_Msk /**< HIB HINTSE
 155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED      SCU_INTERRUPT_SRSTAT_HDCLR_Msk /**< HIB HDCLR re
 157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSET_UPDATED      SCU_INTERRUPT_SRSTAT_HDSET_Msk /**< HIB HDSET re
 158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED       SCU_INTERRUPT_SRSTAT_HDCR_Msk /**< HIB HDCR regi
 159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCSICTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCSICTRL_Msk /**< HIB OSCS
 160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULCTRL_Msk /**< HIB OSCU
 161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED     SCU_INTERRUPT_SRSTAT_RTC_CTR_Msk /**< HIB RTCCTR
 162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM0_Msk /**< HIB RTCA
 163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM1_Msk /**< HIB RTCA
 164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM0_Msk /**< HIB TIM0 
 165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM1_Msk /**< HIB TIM1 
 166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RMX_UPDATED        SCU_INTERRUPT_SRSTAT_RMX_Msk /**< HIB RMX regist
 167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * ENUMS
 170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines Capture/Compare unit timer slice trigger, that enables synchronous start function avail
 173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  CCUCON register. Use type \a XMC_SCU_CCU_TRIGGER_t for accessing these enum parameters.
 174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CCU_TRIGGER
 176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU40)
 178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU40 = SCU_GENERAL_CCUCON_GSC40_Msk, /**< Trigger mask used for Global Start
 179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU40 peripheral. */
 180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU41 = SCU_GENERAL_CCUCON_GSC41_Msk, /**< Trigger mask used for Global Start
 183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU42 = SCU_GENERAL_CCUCON_GSC42_Msk, /**< Trigger mask used for Global Start
 187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU42 peripheral. */
 188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU43 = SCU_GENERAL_CCUCON_GSC43_Msk, /**< Trigger mask used for Global Start
 191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU43 peripheral. */
 192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU80 = SCU_GENERAL_CCUCON_GSC80_Msk, /**< Trigger mask used for Global Start
 195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU80 peripheral. */
 196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU81 = SCU_GENERAL_CCUCON_GSC81_Msk /**< Trigger mask used for Global Start 
 199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU81 peripheral. */
 200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CCU_TRIGGER_t;
 202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations representing the status of trap cause. The cause of the trap gets automati
 205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a TRAPSTAT register and can be checked by user software to determine the state of the syst
 206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. 
 207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_TRAP_t for accessing these enum parameters.
 208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_TRAP 
 210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_OSC_WDG      = SCU_TRAP_TRAPSTAT_SOSCWDGT_Msk, /**< OSC_HP Oscillator Watchdog trap.
 212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_VCO_LOCK     = SCU_TRAP_TRAPSTAT_SVCOLCKT_Msk, /**< PLL loss of lock trap. */
 213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_USB_VCO_LOCK = SCU_TRAP_TRAPSTAT_UVCOLCKT_Msk, /**< USB PLL loss of lock trap. */ 
 214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PARITY_ERROR = SCU_TRAP_TRAPSTAT_PET_Msk,      /**< Memory Parity error trap. */  
 215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_BROWNOUT     = SCU_TRAP_TRAPSTAT_BRWNT_Msk,    /**< Brownout trap. */ 
 216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ULP_WDG      = SCU_TRAP_TRAPSTAT_ULPWDGT_Msk,  /**< Unstable 32KHz clock trap. */ 
 217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE0  = SCU_TRAP_TRAPSTAT_BWERR0T_Msk,  /**< Bad memory access of peripherals
 218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE1  = SCU_TRAP_TRAPSTAT_BWERR1T_Msk,  /**< Bad memory access of peripherals
 219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPHIT_Msk)
 220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_HIGH = SCU_TRAP_TRAPSTAT_TEMPHIT_Msk,  /**< Die temperature higher than expe
 221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPLOT_Msk)
 223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_LOW  = SCU_TRAP_TRAPSTAT_TEMPLOT_Msk,  /**< Die temperature lower than expec
 224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ECAT_RESET = SCU_TRAP_TRAPSTAT_ECAT0RST_Msk, /**< EtherCat Reset */ 
 227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_TRAP_t;
 229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for different parity event generating modules that in turn generate a trap
 232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Parity can be enabled with \a PETE register in order to get the trap flag reflected in \a TRAPR
 233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  configure parity error trap generation mechanism bits of \a PETE register.
 234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PETE register.
 235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PARITY_t for accessing these enum parameters.
 236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PARITY
 238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PSRAM_MEM  = SCU_PARITY_PEEN_PEENPS_Msk,   /**< Program SRAM parity error trap. */
 240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM1_MEM = SCU_PARITY_PEEN_PEENDS1_Msk,  /**< Data SRAM-1 parity error trap. */ 
 241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENDS2_Msk)
 242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM2_MEM = SCU_PARITY_PEEN_PEENDS2_Msk,  /**< Data SRAM-2 parity error trap. */ 
 243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC0_MEM  = SCU_PARITY_PEEN_PEENU0_Msk,   /**< USIC0 memory parity error trap. */
 245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENU1_Msk)
 246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC1_MEM  = SCU_PARITY_PEEN_PEENU1_Msk,   /**< USIC1 memory parity error trap. */
 247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENU2_Msk)
 249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC2_MEM  = SCU_PARITY_PEEN_PEENU2_Msk,   /**< USIC2 memory parity error trap. */
 250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_MCAN_MEM   = SCU_PARITY_PEEN_PEENMC_Msk,   /**< CAN memory parity error trap. */
 252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PMU_MEM    = SCU_PARITY_PEEN_PEENPPRF_Msk, /**< PMU Prefetch memory parity error t
 253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USB_MEM    = SCU_PARITY_PEEN_PEENUSB_Msk,  /**< USB memory parity error trap. */ 
 254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0TX_Msk)
 255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_TXMEM  = SCU_PARITY_PEEN_PEENETH0TX_Msk, /**< Ethernet transmit memory parity 
 256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0RX_Msk)
 258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_RXMEM  = SCU_PARITY_PEEN_PEENETH0RX_Msk, /**< Ethernet receive memory parity e
 259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD0_Msk)
 261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM0 = SCU_PARITY_PEEN_PEENSD0_Msk, /**< SDMMC Memory-0 parity error trap. *
 262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD1_Msk)
 264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM1 = SCU_PARITY_PEEN_PEENSD1_Msk, /**< SDMMC Memory-1 parity error trap. *
 265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENECAT0_Msk)
 267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ECAT_MEM = SCU_PARITY_PEEN_PEENECAT0_Msk, /**< ECAT0 SRAM parity error trap. */ 
 268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PARITY_t;
 270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the different causes for last reset. The cause of the last reset gets automatically sto
 273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a SCU_RSTSTAT register and can be checked by user software to determine the state of the s
 274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. All the enum items are tabulated as per bits present in \a SCU_RSTSTAT register.
 275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_RESET_REASON_t for accessing these enum parameters.
 276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_RESET_REASON
 278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PORST        = (1UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SWD          = (2UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sup
 281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PV           = (4UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SW           = (8UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sof
 283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_LOCKUP       = (16UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to re
 284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_WATCHDOG     = (32UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Wa
 285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PARITY_ERROR = (128UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to r
 286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_RESET_REASON_t;
 287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for events which can lead to interrupt. These enumeration values represent
 290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * status of one of the bits in \a SRSTAT register. 
 291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_INTERRUPT_EVENT_t for accessing these enum parameters.
 292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef uint32_t XMC_SCU_INTERRUPT_EVENT_t;
 294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  
 296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration for the events that can generate non maskable interrupt(NMI).
 298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The NMI generation can be enabled with \a NMIREQEN register. The event will be reflected in \a 
 299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  mirrored in the TRAPSTAT register. These enums can be used to configure NMI request generation 
 300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  NMIREQEN register.  Once configured, these events can generate non maskable interrupt.
 301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a NMIREQEN register.
 302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_NMIREQ_t for accessing these enum parameters.
 303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_NMIREQ
 305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_WDT_WARN = SCU_INTERRUPT_NMIREQEN_PRWARN_Msk, /**< Watchdog timer Pre-Warning even
 307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_PI   = SCU_INTERRUPT_NMIREQEN_PI_Msk,     /**< RTC Periodic event */ 
 308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_AI   = SCU_INTERRUPT_NMIREQEN_AI_Msk,     /**< RTC Alarm event */ 
 309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_0   = SCU_INTERRUPT_NMIREQEN_ERU00_Msk,  /**< Channel 0 event of ERU0 */  
 310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_1   = SCU_INTERRUPT_NMIREQEN_ERU01_Msk,  /**< Channel 1 event of ERU0 */ 
 311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_2   = SCU_INTERRUPT_NMIREQEN_ERU02_Msk,  /**< Channel 2 event of ERU0 */ 
 312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_3   = SCU_INTERRUPT_NMIREQEN_ERU03_Msk   /**< Channel 3 event of ERU0 */ 
 313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_NMIREQ_t;
 314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   
 315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration representing different peripheral reset bits in the \a PRSTAT registers.
 318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PRSTAT0,  \a PRSTAT1,  \a PRSTAT2,
 319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  \a PRSTAT3 registers. Use type \a XMC_SCU_PERIPHERAL_RESET_t for accessing these enum parameter
 320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Note: Release of reset should be prevented when the peripheral clock is gated in cases where ke
 321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock and bus interface clocks are shared, in order to avoid system hang-up.
 322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_RESET
 324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_VADC   = SCU_RESET_PRSTAT0_VADCRS_Msk,   /**< VADC reset. */ 
 326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DSD    = SCU_RESET_PRSTAT0_DSDRS_Msk,    /**< DSD reset. */
 328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU40  = SCU_RESET_PRSTAT0_CCU40RS_Msk,  /**< CCU40 reset. */
 330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU41  = SCU_RESET_PRSTAT0_CCU41RS_Msk,  /**< CCU41 reset. */
 332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU42  = SCU_RESET_PRSTAT0_CCU42RS_Msk,  /**< CCU42 reset. */
 335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU80  = SCU_RESET_PRSTAT0_CCU80RS_Msk,  /**< CCU80 reset. */
 338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU81  = SCU_RESET_PRSTAT0_CCU81RS_Msk,  /**< CCU81 reset. */
 341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF0 = SCU_RESET_PRSTAT0_POSIF0RS_Msk, /**< POSIF0 reset. */
 344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF1 = SCU_RESET_PRSTAT0_POSIF1RS_Msk, /**< POSIF1 reset.*/
 347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC0  = SCU_RESET_PRSTAT0_USIC0RS_Msk,  /**< USIC0 reset. */
 349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ERU1   = SCU_RESET_PRSTAT0_ERU1RS_Msk,   /**< ERU1 reset. */
 350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_HRPWM0 = SCU_RESET_PRSTAT0_HRPWM0RS_Msk,  /**< HRPWM0 reset. */
 352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU43  = (SCU_RESET_PRSTAT1_CCU43RS_Msk | 0x10000000UL),   /**< CCU43 re
 355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_LEDTS0 = (SCU_RESET_PRSTAT1_LEDTSCU0RS_Msk | 0x10000000UL), /**< LEDTS0 
 358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_MCAN   = (SCU_RESET_PRSTAT1_MCAN0RS_Msk | 0x10000000UL), /**< MCAN reset
 361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DAC    = (SCU_RESET_PRSTAT1_DACRS_Msk | 0x10000000UL),    /**< DAC reset
 364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_SDMMC  = (SCU_RESET_PRSTAT1_MMCIRS_Msk | 0x10000000UL),     /**< SDMMC r
 367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC1  = (SCU_RESET_PRSTAT1_USIC1RS_Msk | 0x10000000UL),    /**< USIC1 r
 370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC2  = (SCU_RESET_PRSTAT1_USIC2RS_Msk | 0x10000000UL),    /**< USIC2 r
 373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_PORTS  = (SCU_RESET_PRSTAT1_PPORTSRS_Msk | 0x10000000UL),   /**< PORTS r
 375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_WDT    = (SCU_RESET_PRSTAT2_WDTRS_Msk | 0x20000000UL),      /**< WDT res
 376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ETH0   = (SCU_RESET_PRSTAT2_ETH0RS_Msk | 0x20000000UL),     /**< ETH0 re
 378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA0 = (SCU_RESET_PRSTAT2_DMA0RS_Msk | 0x20000000UL),     /**< DMA0 re
 380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA1 = (SCU_RESET_PRSTAT2_DMA1RS_Msk | 0x20000000UL),     /**< DMA1 re
 382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_FCE    = (SCU_RESET_PRSTAT2_FCERS_Msk | 0x20000000UL),      /**< FCE res
 385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)  
 387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USB0   = (SCU_RESET_PRSTAT2_USBRS_Msk | 0x20000000UL),      /**< USB0 re
 388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)  
 390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ECAT0  = (SCU_RESET_PRSTAT2_ECAT0RS_Msk | 0x20000000UL),      /**< ECAT0
 391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_EBU    = (SCU_RESET_PRSTAT3_EBURS_Msk | 0x30000000UL)       /**< EBU res
 394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_RESET_t;
 396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for disabling the clocks sources of peripherals. Disabling of the peripher
 399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock is configured via the \a CLKCLR registers.
 400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK
 403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USB = SCU_CLK_CLKCLR_USBCDI_Msk, /**< USB module clock. */
 405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_MMC = SCU_CLK_CLKCLR_MMCCDI_Msk, /**< MMC module clock. */
 407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ETH = SCU_CLK_CLKCLR_ETH0CDI_Msk, /**< Ethernet module clock. */
 410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EBU = SCU_CLK_CLKCLR_EBUCDI_Msk, /**< EBU module clock. */
 413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_CCU = SCU_CLK_CLKCLR_CCUCDI_Msk, /**< CCU module clock. */
 415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDT = SCU_CLK_CLKCLR_WDTCDI_Msk  /**< WDT module clock. */
 416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_t;
 417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if(UC_SERIES != XMC45)
 419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines enumeration for peripherals that support clock gating. 
 421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The enumerations can be used for gating or ungating the peripheral clocks.
 422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * All the enum items are tabulated as per bits present in \a CGATSTAT0 register.
 423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_CLOCK
 426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_VADC   = SCU_CLK_CGATSTAT0_VADC_Msk,  /**< VADC peripheral gating. */
 428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DSD    = SCU_CLK_CGATSTAT0_DSD_Msk,   /**< DSD peripheral gating. */
 430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU40  = SCU_CLK_CGATSTAT0_CCU40_Msk,  /**< CCU40 peripheral gating. */
 432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU41  = SCU_CLK_CGATSTAT0_CCU41_Msk,  /**< CCU41 peripheral gating. */
 434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU42  = SCU_CLK_CGATSTAT0_CCU42_Msk,  /**< CCU42 peripheral gating. */
 437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU80  = SCU_CLK_CGATSTAT0_CCU80_Msk,  /**< CCU80 peripheral gating. */
 440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU81  = SCU_CLK_CGATSTAT0_CCU81_Msk,  /**< CCU81 peripheral gating. */
 443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF0 = SCU_CLK_CGATSTAT0_POSIF0_Msk,  /**< POSIF0 peripheral gating. *
 446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF1 = SCU_CLK_CGATSTAT0_POSIF1_Msk,   /**< POSIF1 peripheral gating. 
 449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC0  = SCU_CLK_CGATSTAT0_USIC0_Msk,   /**< USIC0 peripheral gating. */
 451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ERU1   = SCU_CLK_CGATSTAT0_ERU1_Msk,    /**< ERU1 peripheral gating. */
 452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_HRPWM0 = SCU_CLK_CGATSTAT0_HRPWM0_Msk,  /**< HRPWM0 peripheral gating. *
 454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU43  = (SCU_CLK_CGATSTAT1_CCU43_Msk | 0x10000000UL),   /**< CCU43 peri
 457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_LEDTS0 = (SCU_CLK_CGATSTAT1_LEDTSCU0_Msk | 0x10000000UL), /**< LEDTS0 pe
 460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_MCAN   = (SCU_CLK_CGATSTAT1_MCAN0_Msk | 0x10000000UL),   /**< MCAN perip
 463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DAC    = (SCU_CLK_CGATSTAT1_DAC_Msk | 0x10000000UL),     /**< DAC periph
 466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_SDMMC  = (SCU_CLK_CGATSTAT1_MMCI_Msk | 0x10000000UL),    /**< SDMMC peri
 469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC1  = (SCU_CLK_CGATSTAT1_USIC1_Msk | 0x10000000UL),   /**< USIC1 peri
 472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC2  = (SCU_CLK_CGATSTAT1_USIC2_Msk | 0x10000000UL),    /**< USIC2 per
 475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_PORTS  = (SCU_CLK_CGATSTAT1_PPORTS_Msk | 0x10000000UL),   /**< PORTS per
 477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_WDT    = (SCU_CLK_CGATSTAT2_WDT_Msk | 0x20000000UL),      /**< WDT perip
 478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ETH0   = (SCU_CLK_CGATSTAT2_ETH0_Msk | 0x20000000UL),     /**< ETH0 peri
 480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA0 = (SCU_CLK_CGATSTAT2_DMA0_Msk | 0x20000000UL),     /**< DMA0 peri
 482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA1 = (SCU_CLK_CGATSTAT2_DMA1_Msk | 0x20000000UL),     /**< DMA1 peri
 484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_FCE    = (SCU_CLK_CGATSTAT2_FCE_Msk | 0x20000000UL),      /**< FCE perip
 487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USB0   = (SCU_CLK_CGATSTAT2_USB_Msk | 0x20000000UL),      /**< USB0 peri
 490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ECAT0   = (SCU_CLK_CGATSTAT2_ECAT0_Msk | 0x20000000UL),      /**< ECAT0 
 493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_EBU    = (SCU_CLK_CGATSTAT3_EBU_Msk | 0x30000000UL)       /**< EBU perip
 496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_CLOCK_t;
 498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for system clock (fSYS) source. These enums are used to configure \a SYSSEL bit
 502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock Control Register. 
 503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_SYSCLKSRC_t for accessing these enum parameters.
 504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSCLKSRC
 506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_OFI = (0UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos), /**< Internal Fast Clock (fOF
 508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_PLL = (1UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos)  /**< PLL output (fPLL) as a
 510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSCLKSRC_t;
 512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the P-Divider input frequency. These enums are used to configure 
 515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. 
 516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_OSCCLKSRC_t for accessing these enum parameters.
 517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLLCLKSRC
 519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP = 0UL,  /**< External crystal oscillator
 521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                 (fOHP) as the source for P-Divider. */
 522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk /**< Ba
 523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                              as the source for P-Di
 524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLLCLKSRC_t;
 525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the USB clock source(fUSB/fSDMMC).
 528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * These enums are used to configure \a USBSEL bits of \a USBCLKCR
 529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. User can choose either fPLL or fUSBPLL clock as a source for USB clock. 
 530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_USBCLKSRC
 533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_USBPLL = (0UL << SCU_CLK_USBCLKCR_USBSEL_Pos), /**< USB PLL(fUSB PLL) as 
 535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_SYSPLL = (1UL << SCU_CLK_USBCLKCR_USBSEL_Pos)  /**< Main PLL output (fPLL
 537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_USBCLKSRC_t;
 539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
 541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the ECAT clock source.
 543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_ECATCLKSRC
 545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_USBPLL = (0UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos), /**< USB PLL (fUSBPLL) 
 547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL = (1UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos)  /**< Main PLL output (f
 548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_ECATCLKSRC_t;
 549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of WDT clock(fWDT). These enums are used to configure 
 553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOFI or fPLL or fSTDBY clock as a source for WDT clock. 
 554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_WDTCLKSRC
 557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_OFI = (0UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos),  /**< Internal Fast Clock 
 559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fOFI) as the source for
 560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_STDBY = (1UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos), /**< Standby clock 
 561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fSTDBY) as the source f
 562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_PLL = (2UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos)   /**< PLL output (fPLL) as th
 563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for WDT clock (fW
 564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_WDTCLKSRC_t;
 565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of external clock out (fEXT). These enums are used to 
 568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fSYS or fPLL or fUSBPLL clock as a source for external clock o
 569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_EXTOUTCLKSRC_t for accessing these enum parameters.
 570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_EXTOUTCLKSRC
 572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS = (0UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos),  /**< System clock (fSYS) 
 574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             the source for external
 575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_USB = (2UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< USB PLL output(fUSB P
 576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL = (3UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Main PLL output(fPLL)
 578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY = (4UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Standby clock(fSTDB
 581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_EXTOUTCLKSRC_t;
 584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of RTC Clock (fRTC). These enums are used to configure
 587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either fOSI or fULP clock as a source for RTC Clock (fRTC).
 588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_RTCCLKSRC_t for accessing these enum parameters.
 589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_RTCCLKSRC
 591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_RCS_Pos), /**< Internal Slow Clock
 593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                          (fOSI) as the source for R
 594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_ULP = (1UL << SCU_HIBERNATE_HDCR_RCS_Pos) /**< Ultra Low Power Clock (fULP)
 595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                         as the source for RTC Clock
 596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_RTCCLKSRC_t;
 597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of Standby Clock (fSTDBY). These enums are used to con
 600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOSI or fULP clock as a source for Standby Clock (fSTDBY).
 601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_STDBYCLKSRC_t for accessing these enum parameters.
 602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_STDBYCLKSRC
 604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos), /**< Internal Slow Clock 
 606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fOSI) as the source for 
 607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSCULP = (1UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos) /**< Ultra Low Power Cl
 609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fULP) as the source for 
 610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_STDBYCLKSRC_t;
 612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 614:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for backup clock trimming. These enums are used to configure \a AOTREN  \a FOTR
 615:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  PLLCON0 register. Use type \a XMC_SCU_CLOCK_BACKUP_TRIM_t for accessing these enum parameters.
 616:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 617:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE
 618:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 619:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY   = 0UL,  /**< Factory Oscillator Calibration: 
 620:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                         Force adjustment of the internal oscillator
 621:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC = 1UL   /**<  Automatic Oscillator Calibration adju
 622:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t;
 623:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 624:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 625:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 626:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting device boot mode. These enums are used to configure \a SWCON bits
 627:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose among various boot modes by configuring SWCON bits.
 628:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_BOOTMODE_t for accessing these enum parameters.
 629:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 630:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_BOOTMODE 
 631:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 632:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_NORMAL     = (0UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from start of flash
 633:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ASC_BSL    = (1UL << SCU_GENERAL_STCON_SWCON_Pos), /**< UART bootstrap. */
 634:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_BMI        = (2UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot Mode Index - Custom
 635:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            sequence. */
 636:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_CAN_BSL    = (3UL << SCU_GENERAL_STCON_SWCON_Pos), /**< CAN bootstrap. */
 637:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_PSRAM_BOOT = (4UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from PSRAM. */
 638:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM0       = (8UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed 
 639:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            address 0. */
 640:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM1       = (12UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed
 641:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             address 1. */
 642:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_FABM       = (14UL << SCU_GENERAL_STCON_SWCON_Pos), /**< fallback Alternate Boot
 643:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             Try ABM-0 then try ABM-
 644:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_BOOTMODE_t;
 645:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 646:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 647:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 648:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines various PLL modes of operation. These enums are used to configure \a VCOBYP bit of \a P
 649:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either normal or prescalar mode by configuring VCOBYP bit.
 650:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PLL_MODE_t for accessing these enum parameters.
 651:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 652:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLL_MODE
 653:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 654:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED, /**< fPLL derived from fOSC and PLL operating in prescalar mo
 655:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL,  /**< fPLL derived from fVCO and PLL operating in normal mode. 
 656:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR /**< fPLL derived from fOSC and PLL operating in prescalar mo
 657:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_MODE_t;
 658:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 659:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 660:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in SLEEP state.
 661:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetSleepConfig before going to SLEEP state.
 662:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 663:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is
 664:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 665:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. Peripherals are only clocked when configured to stay enabled. 
 666:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 667:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Peripherals can continue to operate unaffected and eventually generate an event to
 668:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The
 669:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP
 670:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  state.
 671:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  
 672:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 673:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SLEEP_MODE_CONFIG
 674:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 675:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in SLEEP 
 676:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_SLEEPCR_SYSSEL_Msk,  /**< fPLL used as syst
 677:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 678:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in SLEEP state */
 679:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_SLEEPCR_USBCR_Msk,  /**< USB clock enabled i
 680:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 681:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 682:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in SLEEP state */
 683:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_SLEEPCR_MMCCR_Msk,/**< SDMMC clock enabled
 684:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 685:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 686:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in SLEEP state */
 687:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_SLEEPCR_ETH0CR_Msk,  /**< ETH clock enabled 
 688:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 689:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 690:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in SLEEP state */
 691:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_SLEEPCR_EBUCR_Msk,  /**< EBU clock enabled i
 692:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 693:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_CCU = 0,  /**< CCU clock disabled in SLEEP state */
 694:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_SLEEPCR_CCUCR_Msk,  /**< CCU clock enabled i
 695:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_WDT = 0,  /**< WDT clock disabled in SLEEP state */
 696:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_SLEEPCR_WDTCR_Msk,  /**< WDT clock enabled i
 697:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t;
 698:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 699:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 700:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state.
 701:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state.
 702:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.
 703:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 704:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is
 705:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 706:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. 
 707:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 708:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC i
 709:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  by a free-running clock. Peripherals are only clocked when configured to stay enabled. 
 710:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Configuration of peripherals and any SRAM content is preserved.
 711:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The Flash module can be put into low-power mode to achieve a further power reduction.
 712:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  On wake-up Flash module will be restarted again before instructions or data access is possible.
 713:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Any interrupt will bring the system back to operation via the NVIC.The clock setup before
 714:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entering Deep Sleep state is restored upon wake-up.
 715:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 716:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG
 717:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 718:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in DE
 719:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_DSLEEPCR_SYSSEL_Msk,  /**< fPLL used as
 720:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN = SCU_CLK_DSLEEPCR_FPDN_Msk,/**< Flash power 
 721:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN = SCU_CLK_DSLEEPCR_PLLPDN_Msk,  /**<  Switch of
 722:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_VCO_POWERDOWN = SCU_CLK_DSLEEPCR_VCOPDN_Msk,  /**<  Switch of
 723:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 724:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in DEEPSLEEP state 
 725:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_DSLEEPCR_USBCR_Msk,  /**< USB clock enab
 726:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 727:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 728:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in DEEPSLEEP stat
 729:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_DSLEEPCR_MMCCR_Msk,/**< SDMMC clock en
 730:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 731:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 732:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in DEEPSLEEP state 
 733:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_DSLEEPCR_ETH0CR_Msk,  /**< ETH clock ena
 734:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 735:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 736:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in DEEPSLEEP state 
 737:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_DSLEEPCR_EBUCR_Msk,  /**< EBU clock enab
 738:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 739:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_CCU = 0,  /**< CCU clock disabled in DEEPSLEEP state 
 740:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_DSLEEPCR_CCUCR_Msk,  /**< CCU clock enab
 741:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_WDT = 0,  /**< WDT clock disabled in DEEPSLEEP state 
 742:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_DSLEEPCR_WDTCR_Msk,  /**< WDT clock enab
 743:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t;
 744:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 745:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 746:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines status of EVR13 regulator
 747:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 748:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_EVR_STATUS
 749:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 750:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_OK = 0, /**< EVR13 regulator No overvoltage condition */
 751:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_EVR13_OVERVOLTAGE = SCU_POWER_EVRSTAT_OV13_Msk /**< EVR13 regulator is i
 752:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_EVR_STATUS_t;
 753:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 754:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 755:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Define status of external hibernate control  
 756:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 757:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_CTRL_STATUS
 758:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 759:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_NO_ACTIVE = 0, /**< Hibernate not driven active to pads */
 760:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_ACTIVE = SCU_HIBERNATE_HDSTAT_HIBNOUT_Msk, /**< Hibernate driven active t
 761:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_CTRL_STATUS_t;
 762:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 763:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 764:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Hibernate domain event status
 765:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 766:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_EVENT
 767:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 768:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_POS_EDGE = SCU_HIBERNATE_HDCR_WKPEP_Msk, /**< Wake-up on positive edg
 769:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_NEG_EDGE = SCU_HIBERNATE_HDCR_WKPEN_Msk, /**< Wake-up on negative edg
 770:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_RTC = SCU_HIBERNATE_HDCR_RTCE_Msk, /**< Wake-up on RTC event */
 771:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_ULPWDG = SCU_HIBERNATE_HDCR_ULPWDGEN_Msk, /**< ULP watchdog alarm status */
 772:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 773:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE = SCU_HIBERNATE_HDSTAT_VBATPEV_Msk, /**< Wake-up on LPAC posi
 774:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE = SCU_HIBERNATE_HDSTAT_VBATNEV_Msk, /**< Wake-up on LPAC nega
 775:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0PEV_Msk, /**< Wake-up on LP
 776:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0NEV_Msk, /**< Wake-up on LP
 777:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))
 778:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Msk, /**< Wake-up on LP
 779:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Msk, /**< Wake-up on LP
 780:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 781:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 782:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_EVENT_t;
 783:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 784:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 785:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   * Hibernate domain dedicated pins
 786:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   */
 787:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO
 788:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 789:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_0 = 0, /**< HIB_IO_0 pin. 
 790:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                              At the first power-up and with every reset of the hibernate domain thi
 791:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 792:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_1 = 1 /**< HIB_IO_1 pin. 
 793:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                             At the first power-up and with every reset of the hibernate domain this
 794:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                             @note : Only available in certain packages*/
 795:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 796:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_t;
 797:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 798:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 799:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB_IOx pin I/O control
 800:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 801:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_PIN_MODE
 802:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 803:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_NONE = 0 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 804:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_DOWN = 1 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 805:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_UP = 2 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, in
 806:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_HIBCTRL = 8 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-
 807:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_WDTSRV = 9 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-p
 808:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_GPIO = 10 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-pu
 809:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_HIBCTRL = 12 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Ope
 810:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_WDTSRV = 13 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open
 811:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_GPIO = 14 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open d
 812:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_PIN_MODE_t;
 813:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 814:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 815:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the output polarity of the HIB_IOx
 816:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 817:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO_OUTPUT_LEVEL
 818:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 819:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_LOW = 0 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos, /**< Direct value */
 820:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_HIGH = 1 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos /**< Inverted value */
 821:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_OUTPUT_LEVEL_t;
 822:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 823:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 824:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects hibernate mode
 825:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 826:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_HIBERNATE_MODE
 827:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL = 0, /**< Request external hibernate mode */
 829:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 830:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_INTERNAL = 1, /**< Request internal hibernate mode. @note Only availab
 831:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 832:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_HIBERNATE_MODE_t;
 833:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 834:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 835:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR0 of ERU0
 836:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 837:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR0_INPUT
 838:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 839:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI0SEL_Msk, /**< Set HIB_SR0 to HIB_IO_0 dig
 840:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 841:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR0 to HIB_IO_1 digital input. @note Only availa
 842:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 843:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 844:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_ACMP0 = SCU_HIBERNATE_HDCR_ADIG0SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP0. @n
 845:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 846:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR0_INPUT_t;
 847:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 848:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 849:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 850:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100))
 851:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 852:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR1 of ERU0. @note Only available in XMC44 in certain packages.
 853:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 854:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR1_INPUT
 855:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 856:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI1SEL_Msk, /**< Set HIB_SR1 to HIB_IO_0 dig
 857:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR1 to HIB_IO_1 digital input.  */
 858:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_ACMP1 = SCU_HIBERNATE_HDCR_ADIG1SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP1. */
 859:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_XTAL_GPI = SCU_HIBERNATE_HDCR_XTALGPI1SEL_Msk,  /**< Set HIB_SR0 to RTC_XTA
 860:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR1_INPUT_t;
 861:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 862:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 863:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 864:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC input selection
 865:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 866:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_INPUT
 867:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 868:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_DISABLED = 0 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator permanen
 869:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_VBAT = 0x1 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activated 
 870:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_0 = 0x2 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 871:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))      
 872:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_1 = 0x4 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 873:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 874:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_INPUT_t;
 875:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 876:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 877:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC start trigger selection for selected inputs
 878:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 879:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_TRIGGER
 880:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SUBSECOND_INTERVAL_COUNTER = 0 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /*
 882:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_ALARM_EVENT = 0x1 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC al
 883:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_PERIODIC_EVENT = 0x2 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC
 884:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_POSITIVE_EDGE_EVENT = 0x3 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 885:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_NEGATIVE_EDGE_EVENT = 0x5 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 886:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_CONTINOUS = 0x6 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Continuous m
 887:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SINGLE_SHOT = 0x7 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Single sho
 888:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_TRIGGER_t;
 889:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 890:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 891:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC status
 892:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 893:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_STATUS
 894:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 895:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_COMPARE_DONE = SCU_HIBERNATE_LPACST_VBATSCMP_Msk, /**< VBAT compare 
 896:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO0SCMP_Msk, /**< HBI_IO
 897:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 898:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO1SCMP_Msk, /**< HBI_IO
 899:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 900:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_VBATVAL_Msk, /**< VBAT compar
 901:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO0VAL_Msk, /**< HBI_
 902:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 903:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO1VAL_Msk, /**< HBI_
 904:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 905:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_STATUS_t;
 906:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 907:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif /* (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41)
 908:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 909:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 910:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * DATA STRUCTURES
 911:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 912:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 913:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 914:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure for initializing the PLL functional block.
 915:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Structure holds divider values for N-DIV, P-DIV, K1-DIV, K2-DIV in order to generate desired 
 916:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  frequency using VCO. It holds the PLL mode of operation either normal or prescaler (VCO bypasse
 917:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_PLL_CONFIG_t for accessing these structure parameters.
 918:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 919:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_SYSPLL_CONFIG
 920:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 921:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t n_div;                       /**<  PLL N-Divider value. */
 922:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t p_div;                       /**<  PLL P-Divider value. */
 923:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t k_div;                       /**<  K1-Divider(Prescalar mode) or K2-Divider (Normal mode)
 924:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_t mode;    /**<  PLL mode of operation. */
 925:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_t clksrc; /**<  PLL divider input frequency. */
 926:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_CONFIG_t;
 927:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 928:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 929:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure used for initializing the clock functional block.
 930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock functional block configures clock source needed for various peripheral and its divider va
 931:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_CONFIG_t for accessing these structure parameters.
 932:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 933:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_CONFIG
 934:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 935:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_CONFIG_t         syspll_config;      /**< PLL configuration */
 936:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_oschp;       /**< Enable external high precision osc
 937:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fOHP has to
 938:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_osculp;      /**< Enable external ultra low power os
 939:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fULP has to
 940:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t calibration_mode;   /**< Backup clock trimming mode. */
 941:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_t             fstdby_clksrc;      /**< Standby clock source. */
 942:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_t             fsys_clksrc;        /**< Choice of system clock. */
 943:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fsys_clkdiv;        /**< Ratio of fPLL to fSYS. */
 944:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fcpu_clkdiv;        /**< Ratio of fSys to fCPU. */
 945:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fccu_clkdiv;        /**< Ratio of fSys to fCCU. */
 946:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fperipheral_clkdiv; /**< Ratio of fSYS to fPERI. */
 947:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } const XMC_SCU_CLOCK_CONFIG_t;
 948:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 949:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 950:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Low power modes
 951:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 952:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_MODE_t
 953:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 954:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_SLEEP = 0, /**< sleep mode stops the processor clock */
 955:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_DEEPSLEEP = SCB_SCR_SLEEPDEEP_Msk /**< deep sleep mode stops the system clock 
 956:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_MODE_t;
 957:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 958:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 959:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * API PROTOTYPES
 960:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 961:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 962:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #ifdef __cplusplus
 963:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** extern "C" {
 964:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 965:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 966:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 967:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 968:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 969:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 970:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 971:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 972:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 973:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 974:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 975:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 976:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables out of range comparator for the selected ADC group and channel. \n\n
 977:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The ADC channel input is compared by Out of Range Comparator (ORC) for overvoltage monitoring
 978:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * or for detection of out of range analog inputs. ORC must be turned on explicitly
 979:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * to leverage the auditing feature. ORC is enabled by setting the enable bit in the GORCEN registe
 980:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 981:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableOutOfRangeComparator()\n\n\n
 982:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 983:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 984:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 985:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 986:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 987:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 988:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 989:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 990:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 991:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 992:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 993:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 994:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 995:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the out of range comparator for the selected ADC group and the channel. \n\n
 996:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Out of range comparator is disabled by clearing the enable bit in the GORCEN register.
 997:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 998:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableOutOfRangeComparator()\n\n\n
 999:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1000:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
1001:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1002:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1003:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1004:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1005:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1006:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables die temperature measurement by powering the DTS module.\n\n
1007:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is enabled by setting the PWD bit of DTSCON register.
1008:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1009:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTempe
1010:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1011:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1012:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableTemperatureSensor(void);
1013:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1014:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1015:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1016:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1017:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1018:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables die temperature measurement by powering the DTS module off.\n\n
1019:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is disabled by clearing the PWD bit of DTSCON register.
1020:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1021:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTemper
1022:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1023:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1024:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableTemperatureSensor(void);
1025:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1026:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1027:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of die temperature sensor. \n
1028:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: true - if temperature sensor is enabled.\n
1029:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    false - if temperature sensor is disabled.
1030:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1031:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1032:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the die temperature sensor power status.\n\n
1033:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading the PWD bit of DTSCON register.
1034:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1035:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1036:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1037:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1038:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorEnabled(void);
1039:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1040:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1041:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1042:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param offset  Offset value for calibrating the DTS result.\n
1043:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 127.
1044:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param gain    Gain value for calibrating the DTS conversion result.\n
1045:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 63.
1046:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1047:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1048:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1049:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1050:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Calibrates the measurement of temperature by configuring the values of offset and gain of \a DTS
1051:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Allows to improve the accuracy of the temperature measurement with the adjustment of \a OFFSET a
1052:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a DTSCON register.
1053:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset adjustment is defined as a shift of the conversion result. The range of the offset adjust
1054:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * resolution that corresponds to +/- 12.5�C. The offset value gets added to the measure result. 
1055:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset is considered as a signed value.
1056:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Gain adjustment helps in minimizing gain error. When the \a gain value is 0, result is generated
1057:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the \a gain value is 63, result is generated with least gain, i.e, \a RESULT - 63 at the hi
1058:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1059:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1060:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CalibrateTempMonitor with desired offset and gain calibration values to the DT
1061:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1062:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1063:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1064:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1065:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1066:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1067:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(),
1068:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1069:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1070:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain);
1071:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1072:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1073:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_STATUS_t  Result of starting the temperature measurement.\n
1074:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                           \b Range: \n 
1075:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_OK if the measurement is started successfully.\n
1076:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_ERROR if temperature sensor is not enabled.\n
1077:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_BUSY if temperature sensor is busy measuring the tem
1078:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1079:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1080:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1081:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Starts die temperature measurement using internal temperature sensor.\n\n
1082:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks if the temperature sensor is enabled and is not busy in measurement.\n
1083:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1084:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1085:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1086:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1087:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1088:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1089:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1090:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1091:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1092:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1093:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1094:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void);
1095:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1096:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1097:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1098:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1099:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Measured temperature value.\n
1100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Valid temperature range is 0 to 1023. \n
1101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              If sensor is not enabled, 0x7FFFFFFFH is returned.
1102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads the measured value of die temperature.\n\n
1105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Temperature measurement result is read from \a RESULT bit field of \a DTSSTAT register.
1106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The temperature measured in �C is given by (RESULT - 605) / 2.05 [�C]
1107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetTemperatureMeasurement(void);
1111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the die temperature sensor is busy.\n
1114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \b Range: \a true if sensor is busy in temperature measurement.
1115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \a false if sensor is free and can accept a new request for measurement.
1116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks whether Die Temperature Sensor (DTS) is busy in temperature measurement.\n\n
1119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from the \a BUSY bit field of the \a DTSSTAT register.
1120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorBusy(void);
1124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool Status of die temperature sensor whether it is ready to start measurement. \n
1127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: \n \a true if temperature sensor is ready to start measurement. \n
1128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \a false if temperature sensor is not ready to start measurement.
1129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the die temperature sensor is ready to start a measurement\n\n
1132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading \a RDY bit of \a DTSSTAT register. It is recommended
1133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * to check the ready status of die temperature sensor before starting it.
1134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorReady(void);
1138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (UC_SERIES != XMC45)
1140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has exceeded the configured upper 
1142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has exceeded the configured upper limit.
1143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is less than the configured upper limit.
1144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has exceeded the configured upper limit of temperature.\n\n
1147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a OVERFL bit (Upper Limit Overflow Status bit) of \a DTEMPALARM register.
1148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a OVERFL bit will be set if the measured temperature has exceeded the limit configured in 
1149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a UPPER in the \a DTEMPLIM register.
1150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_LowTemperature() \n\n\n
1152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_HighTemperature(void);
1154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param lower_temp  Lower threshold of die temperature. If measured temperature falls below this 
1158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a UNDERFL bit field of \a DTEMPALARM register.
1159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param upper_temp  Upper threshold of die temperature. If measured temperature exceeds this valu
1160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a OVERFL bit field of \a DTEMPALARM register.
1161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the lower and upper threshold of die temperature.\n\n
1166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * API configures \a DTEMPLIM register for upper and lower die temperature threshold limits.
1167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the measured temperature is outside the range defined by the limits, alarm bits \a UNDERFL 
1168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * will be set in the register \a DTEMPALARM.\n
1169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Use \a XMC_SCU_HighTemperature() and XMC_SCU_LowTemperature() to monitor the temperature.\n
1174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HighTemperature(), XMC_SCU_LowTemperature() \n\n\n
1176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp);
1178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has dropped below the configured l
1181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has dropped below the configured lower l
1182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is higher than the configured lower limit.
1183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has dropped below the configured lower limit of temperature.\
1186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a UNDERFL bit (Lower LimitUnderflow Status bit) of \a DTEMPALARM register.
1187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a UNDERFL bit will be set if the measured temperature has dropped below the limit configure
1188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a LOWER in the \a DTEMPLIM register.
1189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_HighTemperature() \n\n\n
1191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_LowTemperature(void);
1193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
1194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t Configured boot mode for the device.\n
1197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for enumeration of different boot modes.
1198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the boot mode configured for the device.\n\n
1201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The boot mode is read from the \a STCON register bit field \a SWCON.
1202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetBootMode() \n\n\n
1205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetBootMode(void);
1207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param mode Boot mode to be configured for the device.\n
1211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for selecting the boot mode.
1212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the desired boot mode for the device.\n\n
1217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The XMC4 series devices support multiple boot modes. A running application can set a desired boo
1218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * launch it by means of software reset. Switching of boot modes should be handled carefully. User 
1219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the initial boot sequence is executed. A stable execution environment should be maintained when 
1220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * eventually handed over to the application program.\n
1221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to launch requested bootmode:\n
1222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetBootMode() with desired boot mode value.\n
1223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Trigger a software reset using system reset request by enabling a bit \a SYSRESETREQ of AIRCR 
1224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *   (PPB->AIRCR |= PPB_AIRCR_SYSRESETREQ_Msk).\n
1225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetBootMode() \n\n\n
1227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t mode);
1229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be read.\n
1233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Data read from the selected general purpose register.
1236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides stored data from general purpose SCU register.\n\n
1239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API reads from either GPR0 or GPR1 based on the \a index value.
1241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteGPR()\n\n\n
1243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadGPR(const uint32_t index);
1245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  
1246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be written.\n
1249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data  Data to be written to the selected general purpose register.
1251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Stores data in the selected general purpose SCU register.\n\n
1256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API writes data to either GPR0 or GPR1 based on the \a index value.
1258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadGPR()\n\n\n
1260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data);
1262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be written.\n
1266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data    32 bit data to be written into retention memory. The API writes
1270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data to the address specified.\n
1271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Writes input data to the selected address of Retention memory in hibernate domain.\n\n
1277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadFromRetentionMemory() \n\n\n
1283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data);
1285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be read.\n
1289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  32 bit data read from retention memory. The API reads
1294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data from the address specified.\n
1295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads data from selected address of retention memory in hibernate domain.\n\n
1299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteToRetentionMemory() \n\n\n
1305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address);
1307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be enabled.\n
1311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively enables interrupt sources to generate non maskable interrupt(NMI).\n\n
1318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually enabled by setting corresponding bit of an interrupt in the 
1319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \a NMIREQEN register.
1320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_DisableNmiRequest() \n\n\n
1322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request);
1324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be disabled.\n
1328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively disables interrupt sources from generating non maskable interrupt(NMI).\n\n
1335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually disabled by clearing corresponding bits in the \a NMIREQEN reg
1336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request);
1340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be enabled.\n
1344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables assertion of trap for the selected trap event.\n\n
1350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually enabled by clearing respective bit of the 
1351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * event in \a TRAPDIS register in order to get an exception.
1352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Disable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Enable(const uint32_t trap);
1356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be disabled.\n
1360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables assertion of trap for the selected trap event.\n\n
1366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually disabled by setting the respective event bit 
1367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a TRAPDIS register in order to suppress trap generation.
1368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Disable(const uint32_t trap);
1372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap status bit has to be cleared.\n
1376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the trap status of input event.\n\n
1382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Once a trap event is detected, it will have to be acknowledged and later serviced. 
1383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap status bit should be cleared to detect the occurence of trap next time. 
1384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * This is useful while polling for TRAPSTAT without enabling the NMI for trap.
1385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap status can be cleared by setting the event bit in the \a TRAPCLR register.
1386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap);
1390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of trap generating events.\n
1393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event. The returned
1394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * value indicates the status of multiple events at their respective bit positions.
1395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * User should mask the bits of the events of interest using the type specified.
1396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of trap generating events. \n\n
1399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from \a TRAPRAW register. Status of the specific events can be checked
1400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * using their respective bits in the \a TRAPRAW register. The bit masks can be obtained from
1401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the enumeration type @ref XMC_SCU_TRAP_t. Multiple events can be combined using \a OR operation.
1402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * A trap event is considered to be asserted if the respective bit of the event is set to 1.
1403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_ClearStatus() \n\n\n
1405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_TRAP_GetStatus(void);  
1407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap has to be triggered.\n
1411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Triggers trap generation for the event specified. \n\n
1417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap source has to be enabled before invocation of this API. 
1418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be triggered by setting its respective bit in the \a TRAPSET register.
1419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be configured to generate a non maskable interrupt by using the API XMC_SCU_INTER
1420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to manually assert a trap event:\n
1421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_EnableEvent with desired trap request source ID.\n
1422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_SetEvent with same trap request source ID to manually assert a trap event
1423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Trigger(const uint32_t trap);
1427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be reset.\n
1431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Puts the specified peripheral in to reset state. \n\n
1437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API achieves reset of peripherals by setting the respective bit in the \a PRSET0,  \a PRSET1
1438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset assertion automatically stored in the \a PRSTATn register and can be c
1439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * user software to determine the state of the system and for debug purpose.\n
1440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to assert a peripheral reset:\n
1441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_AssertPeripheralReset() with desired peripheral identifier.\n
1442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted with same peripheral identifier to verify whet
1443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * is in reset state.\n
1444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_IsPeripheralResetAsserted() \n\n\n
1446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be moved out of reset state.\n
1452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the specified peripheral by moving it out of reset state.  \n\n
1458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Any peripheral should be moved out of reset state for executing its functionality.
1459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API enables the peripheral by setting its respective bit in the \a PRCLR0,  \a PRCLR1 or  \a
1460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset deassertion is automatically stored in the \a PRSTATn register and can
1461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the user software to determine the state of the system and for debug purpose.\n
1462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to deassert a peripheral reset:\n
1463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_DeassertPeripheralReset() with desired peripheral identifier.\n
1464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted() with desired peripheral identifier to verify
1465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * has been enabled.\n
1466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral, whose reset status has to be checked.\n
1474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals.
1475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral reset. \n
1477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *               \b Range: \a true if peripheral is in reset state. \a false if peripheral is enabl
1478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the reset status of the selected peripheral.\n\n
1481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API reads the reset status from \a PRSTATn register. Returns true if the peripheral is in
1482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset state. On power up of the device, all the peripherals will be in reset state. 
1483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If the peripheral is enabled, \a false will be returned as the status.
1484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n 
1486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  
1489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error status has to be cleared.\n
1492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory status bits can be cleared by using the \a OR operation.
1494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the parity error status bit. \n\n
1499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * When a memory parity error is detected using the status bits in \a PEFLAG register. It has to 
1500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * be cleared by software to detect the parity error from the same memory next time.
1501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API clears the parity error status bit of the selected peripheral by setting the 
1502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * respective bit in the \a PEFLAG register. Status of multiple memory parity errors 
1503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * can be cleared by combining the enum values using \a OR operation.
1504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetStatus(), XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_EnableTrapGeneration() \n\n\
1506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory);
1508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error checking has to be enabled.\n
1512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables parity error checking for the selected on-chip RAM type.\n\n
1519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error checking can be enabled by setting respective bits in the \a PEEN register.
1520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Additionally parity error can be configured to generate trap when the error is detected,
1521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * using the API XMC_SCU_PARITY_EnableTrapGeneration(). Such a trap can be further configured
1522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * to generate non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration(), XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Enable(const uint32_t memory);
1527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory   The on-chip RAM type, for which the parity error checking has to be disabled.\n
1531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables parity error checking for the selected on-chip RAM type.\n\n
1538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection can be disabled by clearing the respective bit in the \a PEEN register.
1539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Disable(const uint32_t memory);
1543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be enable
1547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables trap assertion for the parity error source.\n\n
1554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection for different types of on-chip RAM can generate trap.
1555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion for parity error can be individually enabled by setting the respective bits
1556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a PETE register. The generated trap can be additionally configured to generate
1557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory);
1562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be disabl
1566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the assertion of trap for the parity error source.\n\n
1573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be disabled by clearing the respective bit of the RAM type in the \a PETE reg
1574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration() \n\n\n
1577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory);
1579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of parity error detection for the on-chip RAM modules.\n
1583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to get the bit mask of each RAM module type.
1584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of parity error detection for the on-chip RAM modules.\n\n
1587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error status information is obtained from the \a PEFLAG register.
1588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If a particular RAM module has parity error, its respective bit field will be set to 1 in the 
1589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * returned value. A check for the status of a particular RAM module can be done by
1590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * masking the returned value with the RAM module identifier from the type @ref XMC_SCU_PARITY_t.
1591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_ClearStatus() \n\n\n
1593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_PARITY_GetStatus(void);  
1595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity logic should be overriden.\n
1599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enable access to parity bits of SRAM modules for various types of peripherals.
1606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enable direct write to parity bits using value selected using XMC_SCU_PARITY_SetParityWriteValue
1607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_SetParityWriteValue() \n\n\n
1609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_PARITY_OverrideParityBitLogic(uint32_t memory)
1612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_PARITY->MCHKCON = memory;
1614:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1615:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1616:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1617:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity test has to be enabled.\n
1618:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. 
1619:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Only a single memory type should be specified.
1620:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1621:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1622:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1623:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1624:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects parity test output from a memory instance that can be inspected using XMC_SCU_PARITY_Get
1625:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1626:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetParityReadValue() \n\n\n
1627:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1628:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1629:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_PARITY_SelectMemoryTest(const XMC_SCU_PARITY_t memory)
1630:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1631:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_PARITY->PMTSR = memory;
1632:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1633:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1634:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1635:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param write_value parity bits value stored with next write access\n
1636:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1637:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1638:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1639:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1640:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * For each byte of a memory module the parity bits corresponding to the next write access are sele
1641:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1642:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1643:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_OverrideParityBitLogic() \n\n\n
1644:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1645:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1646:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_PARITY_SetParityWriteValue(uint8_t write_value)
1647:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1648:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_PARITY->PMTPR = ((write_value << SCU_PARITY_PMTPR_PWR_Pos) & SCU_PARITY_PMTPR_PWR_Msk);
1649:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1650:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1651:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1652:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return parity bits generated during last read access  
1653:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1654:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1655:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * For each byte of a memory module the parity bits generated during the most recent read access ca
1656:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1657:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1658:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_OverrideParityBitLogic() \n\n\n
1659:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1660:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1661:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint8_t XMC_SCU_PARITY_GetParityReadValue(void)
1662:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1663:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return ((SCU_PARITY->PMTPR & SCU_PARITY_PMTPR_PRD_Msk) >> SCU_PARITY_PMTPR_PRD_Pos);
1664:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1665:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1666:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1667:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1668:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be enabled. \n
1669:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1670:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1671:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1672:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1673:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1674:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the source clock for selected peripheral.\n\n
1675:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually enabled by setting the pe
1676:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bit in the \a CLKSET register.\n
1677:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether a source clock of peripheral is enabl
1678:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_EnableClock() with desired peripheral identifier.\n
1679:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled() with same peripheral identifier to verify whether the c
1680:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1681:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableClock(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n
1682:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1683:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock);
1684:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1685:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1686:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1687:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be disabled. \n
1688:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1689:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1690:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1691:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1692:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1693:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables source clock for the peripheral selected.\n\n
1694:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually disabled  by setting the 
1695:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bits in the \a CLKCLR register.\n
1696:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether clock source of the peripheral is ena
1697:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_DisableClock with desired peripheral identifier.\n
1698:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled with same peripheral identifier to verify whether periphe
1699:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1700:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1701:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1702:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock);
1703:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1704:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1705:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1706:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock   Peripheral for which the clock status has to be checked. \n
1707:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1708:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1709:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral clock.\n
1710:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: \a true if peripheral clock is enabled. \a false if peripheral clock is disable
1711:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1712:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1713:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the status of peripheral source clock.\n\n
1714:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status of peripheral source clock is read from the \a CLKSTATn register. 
1715:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Returns \a true if clock is enabled and returns \a false otherwise.
1716:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1717:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_CLOCK_DisableClock() \n\n\n
1718:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1719:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock);
1720:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1721:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1722:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1723:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for fSYS.\n
1724:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1725:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI for selecting internal fast clock as fSYS.\n
1726:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL for selecting the output of PLL fPLL as fSYS.
1727:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1728:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1729:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1730:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1731:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source for system clock (fSYS).\n\n
1732:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock is selected by setting \a SYSSEL bits in the \a SYSCLKCR register.
1733:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSCLKSRC_PLL is selected, then the dividers of the PLL have to be
1734:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * additionally configured to achieve the required system clock frequency. 
1735:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   * \par<b>Related APIs:</b><BR>
1736:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_StartSystemPll(), XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
1737:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1738:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source);
1739:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1740:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1741:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_SYSCLKSRC_t   Source of clock for fSYS.\n
1742:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1743:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI - internal fast clock selected as fSYS.\n
1744:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL - output of PLL fPLL selected as fSYS.
1745:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1746:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1747:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of system clock (fSYS). \n\n
1748:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selected source of fSYS is obtained by reading \a SYSSEL bits of \a SYSCLKCR register.
1749:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1750:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource(), XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
1751:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1752:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSCLKSRC_t XMC_SCU_CLOCK_GetSystemClockSource(void)
1753:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1754:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSCLKSRC_t)(SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk);
1755:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1756:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1757:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1758:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1759:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1760:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to select the source of clock.\n
1761:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL as source of USB clock(fUSB/
1762:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL as source of USB clock(fUSB
1763:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1764:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1765:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1766:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1767:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of USB/SDMMC clock (fUSB/SDMMC).\n\n
1768:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * USB and SDMMC use a common clock source. They can either use fUSB PLL or fPLL as the source of c
1769:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selection is done by configuring the \a USBSEL bits of \a USBCLKCR register.
1770:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1771:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1772:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1773:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source);
1774:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1775:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1776:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_USBCLKSRC_t   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1777:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to identify the source of clock.\n
1778:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL is selected as source of USB
1779:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL is selected as source of US
1780:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1781:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1782:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of USB and SDMMC clock frequency.\n\n
1783:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
1784:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1785:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1786:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1787:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
1788:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1789:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
1790:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1791:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1792:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1793:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1794:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Clock source for watchdog timer.\n
1795:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1796:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1797:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1798:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1799:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1800:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1801:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1802:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1803:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of WDT clock (fWDT).\n\n
1804:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selected value is configured to the \a WDTSEL bits of \a WDTCLKCR register.
1805:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The watchdog timer counts at the frequency selected using this API. So the time for
1806:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * timeout or pre-warning of watchdog has to be calculated based on this selection.
1807:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1808:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1809:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_GetWdtClockFrequency() \n\n\n
1810:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1811:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source);
1812:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1813:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1814:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_WDTCLKSRC_t   Clock source configured for watchdog timer.\n
1815:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1816:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1817:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1818:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1819:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1820:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1821:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of clock used for watchdog timer.\n\n
1822:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTSEL bits of \a WDTCLKCR register.
1823:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The time for timeout or pre-warning of watchdog has to be calculated based on 
1824:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the clock source selected.
1825:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1826:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
1827:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
1829:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1830:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
1831:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1832:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1833:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1834:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1835:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source for standby clock.\n
1836:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1837:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1838:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1839:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1840:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1841:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1842:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1843:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of Standby clock (fSTDBY).\n\n
1844:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clock source is configured by setting the \a STDBYSEL bits of \a HDCR register.
1845:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Hibernate domain should be enabled explicitly before using the API.
1846:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1847:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1848:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1849:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1850:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1851:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetStdbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1852:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1853:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source);
1854:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1855:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1856:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source clock of standby clock(fSTDBY).\n
1857:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1858:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1859:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1860:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1861:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1862:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of standby clock (fSTDBY).\n\n
1863:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a STDBYSEL bits of \a HDCR register.\n
1864:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1865:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetStandbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1866:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1867:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetStdbyClockSource(void)
1868:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1869:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_STDBYSEL_Msk);
1870:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1871:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1872:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1873:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1874:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of RTC clock.\n
1875:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1876:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1877:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1878:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1879:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1880:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1882:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of RTC clock (fRTC).\n\n
1883:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a RCS bit of \a HDCR register.
1884:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * fULP needs external input powered by VBAT or VDDP. fOSI is internal clock.
1885:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1886:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1887:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1888:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1889:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1890:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1891:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetRtcClockSource() \n\n\n
1892:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1893:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source);
1894:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1895:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1896:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source of RTC clock.\n
1897:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1898:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1899:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1900:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1901:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1902:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of RTC clock (fRTC).
1903:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a RCS bit of \a HDCR register.
1904:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1905:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1906:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1907:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1908:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetRtcClockSource(void)
1909:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1910:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_RCS_Msk);
1911:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1912:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1913:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1914:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1915:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Source of external clock output(fEXT).\n
1916:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1917:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1918:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1919:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1920:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1921:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1922:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1923:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1924:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1925:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1926:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1927:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1928:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1929:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1931:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of external clock out (fEXT).\n\n
1932:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKSEL bits of \a EXTCLKCR register.
1933:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1934:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1935:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1936:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t clock);
1937:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1938:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1939:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_EXTOUTCLKSRC_t   Source of external clock output(fEXT).\n
1940:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1941:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1942:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1943:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1944:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1945:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1946:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1947:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1948:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1949:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1950:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1951:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1952:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of external clock output(fEXT).\n\n
1953:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
1954:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1955:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1956:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1957:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
1958:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1959:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
1960:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1961:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1962:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1963:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1964:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for system PLL.\n
1965:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1966:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1967:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1968:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1969:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1970:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1971:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1972:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of system PLL.\n\n
1973:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a VCOBYP bit of \a PLLCON0 register.
1974:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP is selected, ensure that the high performance oscillator 
1975:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * enabled by using the API XMC_SCU_CLOCK_EnableHighPerformanceOscillator().
1976:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1977:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator()\n\n\n
1978:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1979:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source);
1980:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1981:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1982:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_OSCCLKSRC_t   Source of clock for system PLL.\n
1983:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1984:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1985:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1986:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1987:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1988:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of system PLL clock (fPLL). \n\n
1989:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a VCOBYP bit of \a PLLCON0 register.
1990:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1991:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator(), XMC_SCU_CLOCK_SetSystemPllClockSource()\n\n\n
1992:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1993:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSPLLCLKSRC_t XMC_SCU_CLOCK_GetSystemPllClockSource(void)
1994:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1995:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSPLLCLKSRC_t)(SCU_PLL->PLLCON0 & SCU_PLL_PLLCON0_VCOBYP_Msk);
1996:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1997:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1998:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
1999:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2000:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2001:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of ECAT clock.\n
2002:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
2003:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
2004:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
2005:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2006:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2007:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2008:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2009:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of ECAT clock (fECAT).\n\n
2010:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
2011:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2012:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
2013:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2014:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
2015:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2016:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
2017:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****                       ((uint32_t)source);
2018:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2019:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2020:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2021:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_ECATCLKSRC_t   Source of ECAT clock.\n
2022:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
2023:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
2024:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
2025:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2026:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2027:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of ECAT clock (fECAT).
2028:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECATSEL bit of \a ECATCLKCR register.
2029:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2030:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
2031:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2032:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_ECATCLKSRC_t XMC_SCU_CLOCK_GetECATClockSource(void)
2033:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2034:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_ECATCLKSRC_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) >> SCU_C
2035:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2036:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2037:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2038:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2039:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2040:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param divider   Ratio of fSYS clock source to the value of fSYS.
2041:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 to 256.
2042:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2043:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2044:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2045:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2046:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ratio of system clock source to the value of system clock frequency.\n\n
2047:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured as \a SYSDIV bits of \a SYSCLKCR register. The divider value is 
2048:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * decremented by 1 before configuring.
2049:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2050:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2051:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2052:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider);
2053:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2054:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2055:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio of fSYS clock source to the value of fSYS.
2056:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 to 255.
2057:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2058:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2059:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of ratio between the source of system clock to the the value of system clock 
2060:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a SYSDIV bits of \a SYSCLKCR register.
2061:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2062:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2063:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2064:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockDivider(void)
2065:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2066:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) >> SCU_CLK_SYSCLKCR_SYSDIV_Po
2067:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2068:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2069:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2070:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2071:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of fCCU clock source to the value of fCCU.
2072:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 or 2.\n
2073:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS \n
2074:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  2-> fCCU= fSYS/2.
2075:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2076:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2077:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2078:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2079:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the divider for CCU clock source. \n\n
2080:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Capture compare unit(CCU) can take either fSYS or fSYS/2 as the source of clock.
2081:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The configuration is set to \a CCUDIV bit of \a CCUCLKCR register. The CCUDIV bit is 1 bit wide.
2082:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2083:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2084:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider() \n\n\n
2085:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2086:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t ratio);
2087:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2088:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2089:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of fCCU clock source to the value of fCCU.
2090:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 or 1.\n
2091:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0-> fCCU= fSYS \n
2092:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS/2.
2093:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2094:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2095:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CCU clock(fCCU) to system clock(fSYS).\n\n
2096:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CCUDIV bit of \a CCUCLKCR register.
2097:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2098:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2099:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCcuClockDivider() \n\n\n
2100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCcuClockDivider(void)
2102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >> SCU_CLK_CCUCLKCR_CCUDIV_Po
2104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between system clock(fSYS) and CPU clock(fCPU).
2109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS. \n
2111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            2-> fCPU= fSYS/2.
2112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the CPU clock by setting the divider value for the system clock. \n\n
2117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is set to the \a CPUDIV bit of \a CPUCLKCR register.
2118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockDivider() \n\n\n
2120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t ratio);
2122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio between system clock(fSYS) and CPU clock(fCPU).
2125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            0-> fCPU= fSYS. \n
2127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS/2.
2128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between system clock(fSYS) and CPU clock(fCPU). \n\n
2131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CPUDIV bit of \a CPUCLKCR register.
2132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCpuClockDivider() \n\n\n
2134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockDivider(void)
2136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Po
2138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of peripheral clock source to the value of peripheral clock.\n
2143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU.\n
2145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                2-> fPERIPH= fCPU/2.
2146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the peripheral clock by setting the divider for CPU clock(fCPU).\n\n
2151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The peripheral clock can be equal to either fCPU or fCPU/2. The value is configured to \a PBDIV 
2152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockDivider() \n\n\n
2155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t ratio);
2157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of peripheral clock source to the value of peripheral clock.\n
2160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                0-> fPERIPH= fCPU.\n
2162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU/2.
2163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CPU clock(fCPU) to peripheral clock(fPERIPH).\n\n
2166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a PBDIV bit of \a PBCLKCR register.
2167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetPeripheralClockDivider() \n\n\n
2169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetPeripheralClockDivider(void)
2171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos);
2173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 8.
2179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the USB clock(fUSB) by setting the USB clock divider. \n\n
2184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is decremented by 1 before setting it to \a USBDIV bits of \a USBCLKCR register.
2185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockDivider(), XMC_SCU_CLOCK_SetUsbClockSource() \n\n\n
2188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t ratio);
2190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 7.
2195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL output frequency(fPLL) and USB clock(fUSB).\n\n
2198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a USBDIV bit of \a USBCLKCR register.
2199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbClockSource() \n\n\n
2201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetUsbClockDivider(void)
2203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >> SCU_CLK_USBCLKCR_USBDIV_Po
2205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
2210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 64.
2214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the EBU clock(fEBU) by setting the divider value.\n\n
2219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock divider is configured to the \a EBUDIV bits of \a EBUCLKCR register.
2220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetEbuClockDivider() \n\n\n
2222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t ratio);
2224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 63.
2229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL clock(fPLL) and EBU clock(fEBU).\n\n
2232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EBUDIV bits of \a EBUCLKCR register.
2233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetEbuClockDivider() \n\n\n
2235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEbuClockDivider(void)
2237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >> SCU_CLK_EBUCLKCR_EBUDIV_Po
2239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between the source of WDT clock and the WDT clock.\n
2245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 256.
2246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the WDT clock by setting the clock divider for the WDT clock source.\n\n
2251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a WDTDIV bits of \a WDTCLKCR register. The value of divider
2252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring. Check the selected clock source for the WDT clock
2253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * before configuring the divider using the API XMC_SCU_CLOCK_SetWdtClockSource().
2254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_GetWdtClockDivider() \n\n\n
2256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t ratio);
2258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of WDT clock and the WDT clock.\n
2262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 255.
2263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the WDT parent clock and the WDT clock. \n\n
2266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTDIV bits of \a WDTCLKCR register.
2267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the WDT parent clock is considered before using the value of
2268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the divider value.
2269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_SetWdtClockDivider() \n\n\n
2271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetWdtClockDivider(void)
2273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >> SCU_CLK_WDTCLKCR_WDTDIV_Po
2275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the external output parent clock selected and the output clock.\n
2280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 512.
2281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the external output clock by setting the divider value for the parent clock. \n\n
2286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKDIV bits of \a EXTCLKCR register.
2287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The divider value is decremented by 1 before storing it to the bit fields.
2288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the source of external output clock is configured appropriately using the API
2289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource().
2290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_GetExternalOutputClockDivider() \n\n
2292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t ratio);
2294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the external output parent clock selected and the output clock.\
2298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 511.
2299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the divider value applied on parent clock before the generation of external output cloc
2302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EXTDIV bit of \a EXTCLKCR register.
2303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
2305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetExternalOutputClockDivider(void)
2307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >> SCU_CLK_EXTCLKCR_ECKDIV_Po
2309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
2312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the source of ECAT clock and the ECAT clock.\n
2315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 4.
2316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ECAT clock by setting the clock divider for the ECAT clock source.\n\n
2321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECADIV bits of \a ECATCLKCR register. The value of divider
2322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring.
2323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_GetECATClockDivider() \n\n\n
2325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider);
2327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of ECAT clock and the ECAT clock.\n
2331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 3.
2332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the ECAT parent clock and the ECAT clock. \n\n
2335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECADIV bits of \a ECATCLKCR register.
2336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_SetECATClockDivider() \n\n\n
2338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetECATClockDivider(void)
2340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECADIV_Msk) >> SCU_CLK_ECATCLKCR_ECADIV
2342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the high precision oscillator by configuring external crystal mode.\n\n
2351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 0, there by configuring the 
2352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * external clock input.
2353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The System Oscillator Watchdog is enabled. The user should check the status 
2354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable()
2355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void);
2359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the high precision oscillator by disabling the external oscillator.\n\n
2365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 1, there by disabling the 
2366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * external oscillator. 
2367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void);
2371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of high performance oscillator
2375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_HP oscillator is stable and usable
2378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void);
2382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus to monitor the status of
2390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableHighPerformanceOscillator
2391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void);
2395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void);
2406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_HP XTAL1 pin
2410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_HP XTAL1 pin.
2413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void);
2417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables ultra low power oscillator(ULP). \n\n
2424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It enables the hibernate domain, configures the ultra low power oscillator
2425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * uisng the \a MODE bits of the \a OSCULCTRL register. The \a Mode bits will be
2426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset to 0 to enable the low power oscillator. Mirror register update delays 
2427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * are handled internally.
2428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The OSC_ULP Oscillator Watchdog is enabled. The user should check the status 
2429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsLowPowerOscillatorStable()
2430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() 
2432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_IsLowPowerOscillatorStable() \n\n\n
2433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void);
2435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables ultra low power oscillator.\n\n
2442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is disabled by setting the \a MODE bits of \a OSCULCTRL register to value 2.
2443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * By default on power up, the ultra low power osciallator is disabled.
2444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void);
2448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of low power oscillator
2452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_ULP oscillator is stable and usable
2455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void);
2459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus to monitor the status of OSC_UL
2467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableLowPowerOscillator().
2468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() \n\n\n
2474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void);
2476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void);
2491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_ULP XTAL1 pin 
2495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_ULP XTAL1 pin.
2498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void);
2502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System frequency in Hertz.\n
2506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: clock frequency in Hertz. Range of the value depends on the source clock fr
2507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            and the configured values of dividers.
2508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of system PLL output clock frequency(fPLL).\n\n
2511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API uses \a N-DIV,  \a P-DIV,  \a K1-DIV,  \a K2-DIV bits information from \a PLLCON1 regist
2512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * VCOBYP bit information from \a PLLCON0 register. It calculates frequency of system pll clock usi
2513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If normal Mode : fPLL = (fOSC * N)/(P * K2).
2514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If prescaler mode: fPLL = fOSC/ K1.
2515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void);
2519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Source clock used for deriving system clock.\n
2523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: fOHP frequency if external high precision frequency is used. \n
2524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    fOFI fast internal clock frequency.
2525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of the input clock frequency for deriving the system clock.
2528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API retrieves frequency of system PLL input clock (fPLLin).
2529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on \a PINSEL bits information from \a PLLCON2 register, the parent clock source is obtaine
2530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * This bit field specifies if fOHP or fOFI is used for deriving system clock.
2531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock frequency is obtained by dividing the source clock frequency with different divider
2532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockFrequency() \n\n\n
2534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void);
2536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   USB PLL output clock frequency.
2540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of USB PLL output clock (fUSBPLL).\n\n
2543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It obtains the \a VCOBYP bits information from \a USBPLLCON register and decides if USB PLL mode
2544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If USB PLL mode is used, the USB clock frequency is obtained by dividing the source clock by USB
2545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency is obtained using following formula:\n
2546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Normal Mode : fUSBPLL = (fOSC * N)/(P * 2).\n
2547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Prescaler mode: fPLL = fOSC.
2548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
2550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void);
2552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System clock frequency in Hertz.
2556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of system clock (fSYS).\n\n
2559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value obtained by dividing \a CPUDIV bits information of \a CPUCLKCR register with SystemCor
2560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values, fSYS clock frequency is derived using the following formula:\n
2561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * fSYS = fCPU << CPUDIV.
2562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
2564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
2566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_
 769              	 .loc 3 2567 0
 770 0000 154B     	 ldr r3,.L60
 771              	.LBE21:
 772              	.LBE20:
 773              	.LBE19:
 774              	.LBE18:
 533:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t eth_mac_clk;
 534:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 535:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 536:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 537:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 538:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_STATUS_OK;
 539:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 540:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->GMII_ADDRESS);
 541:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 775              	 .loc 1 541 0
 776 0002 1649     	 ldr r1,.L60+4
 777              	.LBB25:
 778              	.LBB24:
 779              	.LBB23:
 780              	.LBB22:
 781              	 .loc 3 2567 0
 782 0004 1A69     	 ldr r2,[r3,#16]
 783 0006 164B     	 ldr r3,.L60+8
 784 0008 1B68     	 ldr r3,[r3]
 785 000a 02F00102 	 and r2,r2,#1
 786 000e 9340     	 lsls r3,r3,r2
 787              	.LBE22:
 788              	.LBE23:
2568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  
2570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  CCU clock frequency in Hertz.
2574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of clock(fCPU) used for CCU4, CCU8, POSIF and HRPWM.\n\n
2577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained from \a CCUDIV bits of \a CCUCLKCR register and system clock (fSYS) freque
2578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values, fCCU clock frequency is calculated using following formula:\n
2579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * fCCU = fSYS >> CCUDIV.\n
2580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider(), XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
2582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void);
2584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   USB clock frequency in Hertz.
2587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of USB and SDMMC clock(fUSB/fSDMMC).\n\n
2590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained from \a USBDIV bits of \a USBCLKCR register and USB clock source.
2591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values fUSB/fSDMMC clock frequency is calculated using following formula:\n
2592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * if USB clock source = USBPLL: fUSB/fSDMMC = fUSBPLL/(USBDIV + 1).\n
2593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * if USB clock source = PLL:  fUSB/fSDMMC = fPLL/(USBDIV + 1).\n
2594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockSource(), XMC_SCU_CLOCK_GetUsbClockDivider() \n\n\n
2597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void); 
2599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ethernet clock frequency in Hertz.
2602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of Ethernet clock(fETH).\n\n
2605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is derived from system clock frequency(fSYS). It is calculated using
2606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the following formula:\n
2607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * fETH = fSYS >> 1;
2608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
2610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
2612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h ****   return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 789              	 .loc 3 2613 0
 790 0010 5B08     	 lsrs r3,r3,#1
 791              	.LVL71:
 792              	.LBE24:
 793              	.LBE25:
 794              	 .loc 1 541 0
 795 0012 8B42     	 cmp r3,r1
 540:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 796              	 .loc 1 540 0
 797 0014 0268     	 ldr r2,[r0]
 798              	.LVL72:
 799              	 .loc 1 541 0
 800 0016 01D8     	 bhi .L52
 542:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 543:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 801              	 .loc 1 543 0
 802 0018 0823     	 movs r3,#8
 803 001a 18E0     	 b .L59
 804              	.L52:
 544:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 545:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 805              	 .loc 1 545 0
 806 001c 1149     	 ldr r1,.L60+12
 807 001e 8B42     	 cmp r3,r1
 808 0020 01D8     	 bhi .L54
 546:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 547:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 809              	 .loc 1 547 0
 810 0022 0C23     	 movs r3,#12
 811 0024 13E0     	 b .L59
 812              	.L54:
 548:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 549:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 813              	 .loc 1 549 0
 814 0026 1049     	 ldr r1,.L60+16
 815 0028 8B42     	 cmp r3,r1
 816 002a 02D8     	 bhi .L55
 550:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 551:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 817              	 .loc 1 551 0
 818 002c 0020     	 movs r0,#0
 819              	.LVL73:
 820 002e 1061     	 str r0,[r2,#16]
 821 0030 7047     	 bx lr
 822              	.LVL74:
 823              	.L55:
 552:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 553:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 824              	 .loc 1 553 0
 825 0032 0E49     	 ldr r1,.L60+20
 826 0034 8B42     	 cmp r3,r1
 827 0036 01D8     	 bhi .L56
 554:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 555:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 828              	 .loc 1 555 0
 829 0038 0423     	 movs r3,#4
 830 003a 08E0     	 b .L59
 831              	.L56:
 556:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 557:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 832              	 .loc 1 557 0
 833 003c 0C49     	 ldr r1,.L60+24
 834 003e 8B42     	 cmp r3,r1
 835 0040 01D8     	 bhi .L57
 558:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 559:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 836              	 .loc 1 559 0
 837 0042 1023     	 movs r3,#16
 838 0044 03E0     	 b .L59
 839              	.L57:
 560:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 561:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 840              	 .loc 1 561 0
 841 0046 0B49     	 ldr r1,.L60+28
 842 0048 8B42     	 cmp r3,r1
 843 004a 03D8     	 bhi .L58
 562:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 563:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 844              	 .loc 1 563 0
 845 004c 1423     	 movs r3,#20
 846              	.L59:
 847 004e 1361     	 str r3,[r2,#16]
 538:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 848              	 .loc 1 538 0
 849 0050 0020     	 movs r0,#0
 850              	.LVL75:
 851 0052 7047     	 bx lr
 852              	.LVL76:
 853              	.L58:
 564:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 565:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 566:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 567:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_ERROR;
 854              	 .loc 1 567 0
 855 0054 0220     	 movs r0,#2
 856              	.LVL77:
 568:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 569:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 570:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 571:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 857              	 .loc 1 571 0
 858 0056 7047     	 bx lr
 859              	.L61:
 860              	 .align 2
 861              	.L60:
 862 0058 00460050 	 .word 1342195200
 863 005c C00E1602 	 .word 35000000
 864 0060 00000000 	 .word SystemCoreClock
 865 0064 00879303 	 .word 60000000
 866 0068 00E1F505 	 .word 100000000
 867 006c 80D1F008 	 .word 150000000
 868 0070 00C2EB0B 	 .word 200000000
 869 0074 80B2E60E 	 .word 250000000
 870              	 .cfi_endproc
 871              	.LFE244:
 873              	 .section .text.XMC_ETH_MAC_Enable,"ax",%progbits
 874              	 .align 1
 875              	 .global XMC_ETH_MAC_Enable
 876              	 .thumb
 877              	 .thumb_func
 879              	XMC_ETH_MAC_Enable:
 880              	.LFB245:
 572:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 573:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC enable */
 574:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
 575:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 881              	 .loc 1 575 0
 882              	 .cfi_startproc
 883              	 
 884              	 
 885              	.LVL78:
 886 0000 08B5     	 push {r3,lr}
 887              	.LCFI7:
 888              	 .cfi_def_cfa_offset 8
 889              	 .cfi_offset 3,-8
 890              	 .cfi_offset 14,-4
 576:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_UNUSED_ARG(eth_mac);
 577:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 578:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 891              	 .loc 1 578 0
 892 0002 0420     	 movs r0,#4
 893              	.LVL79:
 894 0004 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableClock
 895              	.LVL80:
 579:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if UC_DEVICE != XMC4500
 580:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 581:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 582:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 896              	 .loc 1 582 0
 897 0008 0248     	 ldr r0,.L63
 583:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 898              	 .loc 1 583 0
 899 000a BDE80840 	 pop {r3,lr}
 900              	.LCFI8:
 901              	 .cfi_restore 14
 902              	 .cfi_restore 3
 903              	 .cfi_def_cfa_offset 0
 582:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 904              	 .loc 1 582 0
 905 000e FFF7FEBF 	 b XMC_SCU_RESET_DeassertPeripheralReset
 906              	.LVL81:
 907              	.L64:
 908 0012 00BF     	 .align 2
 909              	.L63:
 910 0014 04000020 	 .word 536870916
 911              	 .cfi_endproc
 912              	.LFE245:
 914              	 .section .text.XMC_ETH_MAC_Init,"ax",%progbits
 915              	 .align 1
 916              	 .global XMC_ETH_MAC_Init
 917              	 .thumb
 918              	 .thumb_func
 920              	XMC_ETH_MAC_Init:
 921              	.LFB233:
 262:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 922              	 .loc 1 262 0
 923              	 .cfi_startproc
 924              	 
 925              	 
 926              	.LVL82:
 927 0000 38B5     	 push {r3,r4,r5,lr}
 928              	.LCFI9:
 929              	 .cfi_def_cfa_offset 16
 930              	 .cfi_offset 3,-16
 931              	 .cfi_offset 4,-12
 932              	 .cfi_offset 5,-8
 933              	 .cfi_offset 14,-4
 262:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 934              	 .loc 1 262 0
 935 0002 0446     	 mov r4,r0
 267:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 936              	 .loc 1 267 0
 937 0004 FFF7FEFF 	 bl XMC_ETH_MAC_Enable
 938              	.LVL83:
 268:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 939              	 .loc 1 268 0
 940 0008 2046     	 mov r0,r4
 941 000a FFF7FEFF 	 bl XMC_ETH_MAC_SetManagmentClockDivider
 942              	.LVL84:
 943 000e 0546     	 mov r5,r0
 944              	.LVL85:
 270:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 945              	 .loc 1 270 0
 946 0010 2046     	 mov r0,r4
 947 0012 FFF7FEFF 	 bl XMC_ETH_MAC_InitEx
 948              	.LVL86:
 949 0016 2368     	 ldr r3,[r4]
 272:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 950              	 .loc 1 272 0
 951 0018 A268     	 ldr r2,[r4,#8]
 952 001a E168     	 ldr r1,[r4,#12]
 953              	.LVL87:
 954              	.LBB26:
 955              	.LBB27:
 512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   {
 513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   }
 514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param data The destination to which the read data needs to be copied to
 521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Read a PHY register <br>
 525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially polls busy bit during max
 528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * PHY_TIMEOUT time and reads the information into 'data' when not busy.
 529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t re
 531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param data The data to write
 537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Write a PHY register <br>
 541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially writes the data and polls
 544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the busy bit until it is no longer busy.
 545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t r
 547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param port_ctrl Port control configuration
 551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set port control configuration <br>
 555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the port control by writing the configuration into the
 558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * CON register.
 559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \note
 561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MII Mode is only available in:
 562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4500 LQFP144 and BGA144 packages
 563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4700 LQFP144 and BGA196 packages
 564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4800 LQFP144 and BGA196 packages
 565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_POR
 568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_UNUSED_ARG(eth_mac);
 570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set management clock divider <br>
 579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the management clock divider by writing to the GMII_ADDRESS
 582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * register.
 583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac);
 585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param addr The MAC address to set
 589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set MAC address <br>
 593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC_ADDRESS0_LOW registers.
 597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
 599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 956              	 .loc 2 600 0
 957 001c 1964     	 str r1,[r3,#64]
 958              	.LBE27:
 959              	.LBE26:
 275:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 960              	 .loc 1 275 0
 961 001e 2846     	 mov r0,r5
 962              	.LBB29:
 963              	.LBB28:
 601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 964              	 .loc 2 601 0
 965 0020 5A64     	 str r2,[r3,#68]
 966              	.LBE28:
 967              	.LBE29:
 275:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 968              	 .loc 1 275 0
 969 0022 38BD     	 pop {r3,r4,r5,pc}
 970              	 .cfi_endproc
 971              	.LFE233:
 973              	 .section .text.XMC_ETH_MAC_Disable,"ax",%progbits
 974              	 .align 1
 975              	 .global XMC_ETH_MAC_Disable
 976              	 .thumb
 977              	 .thumb_func
 979              	XMC_ETH_MAC_Disable:
 980              	.LFB246:
 584:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 585:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC disable */
 586:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac)
 587:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 981              	 .loc 1 587 0
 982              	 .cfi_startproc
 983              	 
 984              	 
 985              	.LVL88:
 986 0000 08B5     	 push {r3,lr}
 987              	.LCFI10:
 988              	 .cfi_def_cfa_offset 8
 989              	 .cfi_offset 3,-8
 990              	 .cfi_offset 14,-4
 588:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_UNUSED_ARG(eth_mac);
 589:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 590:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 991              	 .loc 1 590 0
 992 0002 0448     	 ldr r0,.L67
 993              	.LVL89:
 994 0004 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 995              	.LVL90:
 591:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if UC_DEVICE != XMC4500
 592:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 593:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 594:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
 996              	 .loc 1 594 0
 997 0008 0420     	 movs r0,#4
 595:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 998              	 .loc 1 595 0
 999 000a BDE80840 	 pop {r3,lr}
 1000              	.LCFI11:
 1001              	 .cfi_restore 14
 1002              	 .cfi_restore 3
 1003              	 .cfi_def_cfa_offset 0
 594:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1004              	 .loc 1 594 0
 1005 000e FFF7FEBF 	 b XMC_SCU_CLOCK_DisableClock
 1006              	.LVL91:
 1007              	.L68:
 1008 0012 00BF     	 .align 2
 1009              	.L67:
 1010 0014 04000020 	 .word 536870916
 1011              	 .cfi_endproc
 1012              	.LFE246:
 1014              	 .section .text.XMC_ETH_MAC_ReadPhy,"ax",%progbits
 1015              	 .align 1
 1016              	 .global XMC_ETH_MAC_ReadPhy
 1017              	 .thumb
 1018              	 .thumb_func
 1020              	XMC_ETH_MAC_ReadPhy:
 1021              	.LFB247:
 596:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 597:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Read physical layer and obtain status */
 598:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr
 599:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1022              	 .loc 1 599 0
 1023              	 .cfi_startproc
 1024              	 
 1025              	 
 1026              	.LVL92:
 1027 0000 10B5     	 push {r4,lr}
 1028              	.LCFI12:
 1029              	 .cfi_def_cfa_offset 8
 1030              	 .cfi_offset 4,-8
 1031              	 .cfi_offset 14,-4
 600:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t retries;
 601:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 602:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);
 603:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 604:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRES
 1032              	 .loc 1 604 0
 1033 0002 0468     	 ldr r4,[r0]
 1034 0004 2069     	 ldr r0,[r4,#16]
 1035              	.LVL93:
 1036 0006 00F03C00 	 and r0,r0,#60
 1037 000a 40F00100 	 orr r0,r0,#1
 1038 000e 40EA8212 	 orr r2,r0,r2,lsl#6
 1039              	.LVL94:
 1040 0012 42EAC121 	 orr r1,r2,r1,lsl#11
 1041              	.LVL95:
 1042 0016 2161     	 str r1,[r4,#16]
 1043              	.LVL96:
 1044 0018 4FF6FF72 	 movw r2,#65535
 1045              	.LVL97:
 1046              	.L72:
 605:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 606:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 607:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos
 608:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 609:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll busy bit during max PHY_TIMEOUT time */
 610:../Libraries/XMCLib/src/xmc_eth_mac.c ****   retries = 0U;
 611:../Libraries/XMCLib/src/xmc_eth_mac.c ****   do
 612:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 613:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 1047              	 .loc 1 613 0
 1048 001c 2069     	 ldr r0,[r4,#16]
 1049 001e 10F00100 	 ands r0,r0,#1
 1050 0022 02D1     	 bne .L70
 614:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 615:../Libraries/XMCLib/src/xmc_eth_mac.c ****       *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 1051              	 .loc 1 615 0
 1052 0024 6269     	 ldr r2,[r4,#20]
 1053              	.LVL98:
 1054 0026 1A80     	 strh r2,[r3]
 616:../Libraries/XMCLib/src/xmc_eth_mac.c ****       return XMC_ETH_MAC_STATUS_OK;
 1055              	 .loc 1 616 0
 1056 0028 10BD     	 pop {r4,pc}
 1057              	.LVL99:
 1058              	.L70:
 617:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 618:../Libraries/XMCLib/src/xmc_eth_mac.c ****     ++retries;
 619:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 1059              	 .loc 1 619 0
 1060 002a 013A     	 subs r2,r2,#1
 1061              	.LVL100:
 1062 002c F6D1     	 bne .L72
 620:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 621:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return XMC_ETH_MAC_STATUS_ERROR;
 1063              	 .loc 1 621 0
 1064 002e 0220     	 movs r0,#2
 622:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1065              	 .loc 1 622 0
 1066 0030 10BD     	 pop {r4,pc}
 1067              	 .cfi_endproc
 1068              	.LFE247:
 1070              	 .section .text.XMC_ETH_MAC_WritePhy,"ax",%progbits
 1071              	 .align 1
 1072              	 .global XMC_ETH_MAC_WritePhy
 1073              	 .thumb
 1074              	 .thumb_func
 1076              	XMC_ETH_MAC_WritePhy:
 1077              	.LFB248:
 623:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 624:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Write physical layer and return status */
 625:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_add
 626:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1078              	 .loc 1 626 0
 1079              	 .cfi_startproc
 1080              	 
 1081              	 
 1082              	.LVL101:
 1083 0000 10B5     	 push {r4,lr}
 1084              	.LCFI13:
 1085              	 .cfi_def_cfa_offset 8
 1086              	 .cfi_offset 4,-8
 1087              	 .cfi_offset 14,-4
 627:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t retries;
 628:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 629:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_DATA  = data;
 1088              	 .loc 1 629 0
 1089 0002 0468     	 ldr r4,[r0]
 1090 0004 6361     	 str r3,[r4,#20]
 630:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRES
 1091              	 .loc 1 630 0
 1092 0006 2369     	 ldr r3,[r4,#16]
 1093              	.LVL102:
 1094 0008 03F03C03 	 and r3,r3,#60
 1095 000c 43F00303 	 orr r3,r3,#3
 1096 0010 43EA8212 	 orr r2,r3,r2,lsl#6
 1097              	.LVL103:
 1098 0014 42EAC121 	 orr r1,r2,r1,lsl#11
 1099              	.LVL104:
 1100 0018 2161     	 str r1,[r4,#16]
 1101              	.LVL105:
 1102 001a 4FF6FF73 	 movw r3,#65535
 1103              	.LVL106:
 1104              	.L76:
 631:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 632:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 633:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 634:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos
 635:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 636:../Libraries/XMCLib/src/xmc_eth_mac.c ****    /* Poll busy bit during max PHY_TIMEOUT time */
 637:../Libraries/XMCLib/src/xmc_eth_mac.c ****   retries = 0U;
 638:../Libraries/XMCLib/src/xmc_eth_mac.c ****   do
 639:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 640:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 1105              	 .loc 1 640 0
 1106 001e 2069     	 ldr r0,[r4,#16]
 1107 0020 10F00100 	 ands r0,r0,#1
 1108 0024 02D0     	 beq .L75
 1109              	.LVL107:
 641:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 642:../Libraries/XMCLib/src/xmc_eth_mac.c ****       return XMC_ETH_MAC_STATUS_OK;
 643:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 644:../Libraries/XMCLib/src/xmc_eth_mac.c ****     ++retries;
 645:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 1110              	 .loc 1 645 0
 1111 0026 013B     	 subs r3,r3,#1
 1112              	.LVL108:
 1113 0028 F9D1     	 bne .L76
 646:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 647:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return XMC_ETH_MAC_STATUS_ERROR;
 1114              	 .loc 1 647 0
 1115 002a 0220     	 movs r0,#2
 1116              	.LVL109:
 1117              	.L75:
 648:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1118              	 .loc 1 648 0
 1119 002c 10BD     	 pop {r4,pc}
 1120              	 .cfi_endproc
 1121              	.LFE248:
 1123              	 .section .text.XMC_ETH_MAC_FlushTx,"ax",%progbits
 1124              	 .align 1
 1125              	 .global XMC_ETH_MAC_FlushTx
 1126              	 .thumb
 1127              	 .thumb_func
 1129              	XMC_ETH_MAC_FlushTx:
 1130              	.LFB249:
 649:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 650:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Flush TX */
 651:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_FlushTx(XMC_ETH_MAC_t *const eth_mac)
 652:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1131              	 .loc 1 652 0
 1132              	 .cfi_startproc
 1133              	 
 1134              	 
 1135              	.LVL110:
 1136 0000 38B5     	 push {r3,r4,r5,lr}
 1137              	.LCFI14:
 1138              	 .cfi_def_cfa_offset 16
 1139              	 .cfi_offset 3,-16
 1140              	 .cfi_offset 4,-12
 1141              	 .cfi_offset 5,-8
 1142              	 .cfi_offset 14,-4
 653:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 1143              	 .loc 1 653 0
 1144 0002 0268     	 ldr r2,[r0]
 1145 0004 41F21804 	 movw r4,#4120
 652:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 1146              	 .loc 1 652 0
 1147 0008 0546     	 mov r5,r0
 1148              	 .loc 1 653 0
 1149 000a 1359     	 ldr r3,[r2,r4]
 1150 000c 23F40053 	 bic r3,r3,#8192
 1151 0010 1351     	 str r3,[r2,r4]
 654:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 1152              	 .loc 1 654 0
 1153 0012 FFF7FEFF 	 bl XMC_ETH_MAC_InitTxDescriptors
 1154              	.LVL111:
 655:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 1155              	 .loc 1 655 0
 1156 0016 2A68     	 ldr r2,[r5]
 1157 0018 1359     	 ldr r3,[r2,r4]
 1158 001a 43F40053 	 orr r3,r3,#8192
 1159 001e 1351     	 str r3,[r2,r4]
 1160 0020 38BD     	 pop {r3,r4,r5,pc}
 1161              	 .cfi_endproc
 1162              	.LFE249:
 1164              	 .section .text.XMC_ETH_MAC_FlushRx,"ax",%progbits
 1165              	 .align 1
 1166              	 .global XMC_ETH_MAC_FlushRx
 1167              	 .thumb
 1168              	 .thumb_func
 1170              	XMC_ETH_MAC_FlushRx:
 1171              	.LFB250:
 656:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 657:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 658:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Flush RX */
 659:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_FlushRx(XMC_ETH_MAC_t *const eth_mac)
 660:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1172              	 .loc 1 660 0
 1173              	 .cfi_startproc
 1174              	 
 1175              	 
 1176              	.LVL112:
 1177 0000 38B5     	 push {r3,r4,r5,lr}
 1178              	.LCFI15:
 1179              	 .cfi_def_cfa_offset 16
 1180              	 .cfi_offset 3,-16
 1181              	 .cfi_offset 4,-12
 1182              	 .cfi_offset 5,-8
 1183              	 .cfi_offset 14,-4
 661:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 1184              	 .loc 1 661 0
 1185 0002 0268     	 ldr r2,[r0]
 1186 0004 41F21804 	 movw r4,#4120
 660:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 1187              	 .loc 1 660 0
 1188 0008 0546     	 mov r5,r0
 1189              	 .loc 1 661 0
 1190 000a 1359     	 ldr r3,[r2,r4]
 1191 000c 23F00203 	 bic r3,r3,#2
 1192 0010 1351     	 str r3,[r2,r4]
 662:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 1193              	 .loc 1 662 0
 1194 0012 FFF7FEFF 	 bl XMC_ETH_MAC_InitRxDescriptors
 1195              	.LVL113:
 663:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 1196              	 .loc 1 663 0
 1197 0016 2A68     	 ldr r2,[r5]
 1198 0018 1359     	 ldr r3,[r2,r4]
 1199 001a 43F00203 	 orr r3,r3,#2
 1200 001e 1351     	 str r3,[r2,r4]
 1201 0020 38BD     	 pop {r3,r4,r5,pc}
 1202              	 .cfi_endproc
 1203              	.LFE250:
 1205              	 .section .text.XMC_ETH_MAC_SetWakeUpFrameFilter,"ax",%progbits
 1206              	 .align 1
 1207              	 .global XMC_ETH_MAC_SetWakeUpFrameFilter
 1208              	 .thumb
 1209              	 .thumb_func
 1211              	XMC_ETH_MAC_SetWakeUpFrameFilter:
 1212              	.LFB251:
 664:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 665:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 666:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set wakeup frame filter */
 667:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetWakeUpFrameFilter(XMC_ETH_MAC_t *const eth_mac,
 668:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                       const uint32_t (*const filter)[XMC_ETH_WAKEUP_REGISTER_LENGTH
 669:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1213              	 .loc 1 669 0
 1214              	 .cfi_startproc
 1215              	 
 1216              	 
 1217              	 
 1218              	.LVL114:
 670:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i = 0U;
 671:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 672:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Fill Remote Wake-up frame filter register with buffer data */
 673:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < XMC_ETH_WAKEUP_REGISTER_LENGTH; i++)
 674:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 675:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Write each time to the same register */
 676:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->REMOTE_WAKE_UP_FRAME_FILTER = (*filter)[i];
 1219              	 .loc 1 676 0
 1220 0000 0268     	 ldr r2,[r0]
 1221 0002 0B1F     	 subs r3,r1,#4
 1222 0004 1C31     	 adds r1,r1,#28
 1223              	.LVL115:
 1224              	.L82:
 1225              	 .loc 1 676 0 is_stmt 0 discriminator 3
 1226 0006 53F8040F 	 ldr r0,[r3,#4]!
 1227 000a 9062     	 str r0,[r2,#40]
 673:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 1228              	 .loc 1 673 0 is_stmt 1 discriminator 3
 1229 000c 8B42     	 cmp r3,r1
 1230 000e FAD1     	 bne .L82
 677:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 678:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1231              	 .loc 1 678 0
 1232 0010 7047     	 bx lr
 1233              	 .cfi_endproc
 1234              	.LFE251:
 1236              	 .section .text.XMC_ETH_MAC_EnableEvent,"ax",%progbits
 1237              	 .align 1
 1238              	 .global XMC_ETH_MAC_EnableEvent
 1239              	 .thumb
 1240              	 .thumb_func
 1242              	XMC_ETH_MAC_EnableEvent:
 1243              	.LFB252:
 679:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 680:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Enable event */
 681:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 682:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1244              	 .loc 1 682 0
 1245              	 .cfi_startproc
 1246              	 
 1247              	 
 1248              	 
 1249              	.LVL116:
 683:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 684:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 685:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 1250              	 .loc 1 685 0
 1251 0000 0268     	 ldr r2,[r0]
 1252 0002 D36B     	 ldr r3,[r2,#60]
 1253              	.LBB30:
 1254              	.LBB31:
 190:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
 1255              	 .loc 1 190 0
 1256 0004 44F24500 	 movw r0,#16453
 1257              	.LVL117:
 1258              	.LBE31:
 1259              	.LBE30:
 1260              	 .loc 1 685 0
 1261 0008 23EA1143 	 bic r3,r3,r1,lsr#16
 1262              	.LBB33:
 1263              	.LBB32:
 190:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
 1264              	 .loc 1 190 0
 1265 000c 0840     	 ands r0,r0,r1
 1266              	.LBE32:
 1267              	.LBE33:
 1268              	 .loc 1 685 0
 1269 000e D363     	 str r3,[r2,#60]
 686:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 687:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event &= (uint16_t)0x7fffU;
 1270              	 .loc 1 687 0
 1271 0010 C1F30E03 	 ubfx r3,r1,#0,#15
 1272              	.LVL118:
 688:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (XCM_ETH_MAC_IsNormalEvent(event))
 1273              	 .loc 1 688 0
 1274 0014 08B1     	 cbz r0,.L85
 689:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 690:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 1275              	 .loc 1 690 0
 1276 0016 43F48033 	 orr r3,r3,#65536
 1277              	.LVL119:
 1278              	.L85:
 1279              	.LBB34:
 1280              	.LBB35:
 199:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT |
 1281              	 .loc 1 199 0
 1282 001a 42F2BA71 	 movw r1,#10170
 1283              	.LVL120:
 1284 001e 1940     	 ands r1,r1,r3
 1285              	.LBE35:
 1286              	.LBE34:
 691:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 692:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 693:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (XCM_ETH_MAC_IsAbnormalEvent(event))
 1287              	 .loc 1 693 0
 1288 0020 09B1     	 cbz r1,.L86
 694:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 695:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 1289              	 .loc 1 695 0
 1290 0022 43F40043 	 orr r3,r3,#32768
 1291              	.LVL121:
 1292              	.L86:
 696:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 697:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 698:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE |= event;
 1293              	 .loc 1 698 0
 1294 0026 41F21C00 	 movw r0,#4124
 1295 002a 1158     	 ldr r1,[r2,r0]
 1296 002c 0B43     	 orrs r3,r3,r1
 1297              	.LVL122:
 1298 002e 1350     	 str r3,[r2,r0]
 1299 0030 7047     	 bx lr
 1300              	 .cfi_endproc
 1301              	.LFE252:
 1303              	 .section .text.XMC_ETH_MAC_DisableEvent,"ax",%progbits
 1304              	 .align 1
 1305              	 .global XMC_ETH_MAC_DisableEvent
 1306              	 .thumb
 1307              	 .thumb_func
 1309              	XMC_ETH_MAC_DisableEvent:
 1310              	.LFB253:
 699:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 700:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 701:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Disable event */
 702:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 703:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1311              	 .loc 1 703 0
 1312              	 .cfi_startproc
 1313              	 
 1314              	 
 1315              	 
 1316              	.LVL123:
 704:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->
 705:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 706:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 1317              	 .loc 1 706 0
 1318 0000 0368     	 ldr r3,[r0]
 1319 0002 DA6B     	 ldr r2,[r3,#60]
 707:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 708:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event &= 0x7fffU;
 709:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 1320              	 .loc 1 709 0
 1321 0004 41F21C00 	 movw r0,#4124
 1322              	.LVL124:
 706:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 1323              	 .loc 1 706 0
 1324 0008 42EA1142 	 orr r2,r2,r1,lsr#16
 1325 000c DA63     	 str r2,[r3,#60]
 1326              	.LVL125:
 1327              	 .loc 1 709 0
 1328 000e 1A58     	 ldr r2,[r3,r0]
 708:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 1329              	 .loc 1 708 0
 1330 0010 C1F30E01 	 ubfx r1,r1,#0,#15
 1331              	.LVL126:
 1332              	 .loc 1 709 0
 1333 0014 22EA0101 	 bic r1,r2,r1
 1334 0018 1950     	 str r1,[r3,r0]
 1335 001a 7047     	 bx lr
 1336              	 .cfi_endproc
 1337              	.LFE253:
 1339              	 .section .text.XMC_ETH_MAC_ClearEventStatus,"ax",%progbits
 1340              	 .align 1
 1341              	 .global XMC_ETH_MAC_ClearEventStatus
 1342              	 .thumb
 1343              	 .thumb_func
 1345              	XMC_ETH_MAC_ClearEventStatus:
 1346              	.LFB254:
 710:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 711:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 712:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Clear event status */
 713:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 714:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1347              	 .loc 1 714 0
 1348              	 .cfi_startproc
 1349              	 
 1350              	 
 1351              	 
 1352              	.LVL127:
 715:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ClearEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac-
 716:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 717:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 1353              	 .loc 1 717 0
 1354 0000 0268     	 ldr r2,[r0]
 1355 0002 41F21403 	 movw r3,#4116
 1356 0006 D058     	 ldr r0,[r2,r3]
 1357              	.LVL128:
 718:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 719:../Libraries/XMCLib/src/xmc_eth_mac.c ****     event |= (uint32_t)ETH_STATUS_NIS_Msk;
 720:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 721:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 722:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 1358              	 .loc 1 722 0
 1359 0008 D358     	 ldr r3,[r2,r3]
 717:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 1360              	 .loc 1 717 0
 1361 000a C003     	 lsls r0,r0,#15
 719:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 1362              	 .loc 1 719 0
 1363 000c 48BF     	 it mi
 1364 000e 41F48031 	 orrmi r1,r1,#65536
 1365              	.LVL129:
 1366              	 .loc 1 722 0
 1367 0012 1B04     	 lsls r3,r3,#16
 723:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 724:../Libraries/XMCLib/src/xmc_eth_mac.c ****     event |= (uint32_t)ETH_STATUS_AIS_Msk;
 1368              	 .loc 1 724 0
 1369 0014 48BF     	 it mi
 1370 0016 41F40041 	 orrmi r1,r1,#32768
 1371              	.LVL130:
 725:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 726:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 727:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = event & 0x0001FFFFU;
 1372              	 .loc 1 727 0
 1373 001a 41F21403 	 movw r3,#4116
 1374 001e C1F31001 	 ubfx r1,r1,#0,#17
 1375              	.LVL131:
 1376 0022 D150     	 str r1,[r2,r3]
 1377 0024 7047     	 bx lr
 1378              	 .cfi_endproc
 1379              	.LFE254:
 1381              	 .section .text.XMC_ETH_MAC_GetEventStatus,"ax",%progbits
 1382              	 .align 1
 1383              	 .global XMC_ETH_MAC_GetEventStatus
 1384              	 .thumb
 1385              	 .thumb_func
 1387              	XMC_ETH_MAC_GetEventStatus:
 1388              	.LFB255:
 728:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 729:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 730:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Obtain event status */
 731:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetEventStatus(const XMC_ETH_MAC_t *const eth_mac)
 732:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1389              	 .loc 1 732 0
 1390              	 .cfi_startproc
 1391              	 
 1392              	 
 1393              	 
 1394              	.LVL132:
 733:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t temp_status = 0;
 734:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 735:../Libraries/XMCLib/src/xmc_eth_mac.c ****   
 736:../Libraries/XMCLib/src/xmc_eth_mac.c ****   temp_status =  (eth_mac->regs->STATUS & (uint32_t)0x7ffUL);
 1395              	 .loc 1 736 0
 1396 0000 0268     	 ldr r2,[r0]
 1397 0002 41F21403 	 movw r3,#4116
 1398 0006 D358     	 ldr r3,[r2,r3]
 1399              	.LVL133:
 737:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 738:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return ((uint32_t)((eth_mac->regs->INTERRUPT_STATUS & (ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRU
 1400              	 .loc 1 738 0
 1401 0008 906B     	 ldr r0,[r2,#56]
 1402              	.LVL134:
 736:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 1403              	 .loc 1 736 0
 1404 000a C3F30A03 	 ubfx r3,r3,#0,#11
 1405              	.LVL135:
 1406              	 .loc 1 738 0
 1407 000e 00F40270 	 and r0,r0,#520
 739:../Libraries/XMCLib/src/xmc_eth_mac.c ****       temp_status);
 740:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1408              	 .loc 1 740 0
 1409 0012 43EA0040 	 orr r0,r3,r0,lsl#16
 1410 0016 7047     	 bx lr
 1411              	 .cfi_endproc
 1412              	.LFE255:
 1414              	 .section .text.XMC_ETH_MAC_ReturnRxDescriptor,"ax",%progbits
 1415              	 .align 1
 1416              	 .global XMC_ETH_MAC_ReturnRxDescriptor
 1417              	 .thumb
 1418              	 .thumb_func
 1420              	XMC_ETH_MAC_ReturnRxDescriptor:
 1421              	.LFB256:
 741:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 742:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Return RX descriptor */
 743:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
 744:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1422              	 .loc 1 744 0
 1423              	 .cfi_startproc
 1424              	 
 1425              	 
 1426              	 
 1427              	.LVL136:
 745:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 1428              	 .loc 1 745 0
 1429 0000 90F82730 	 ldrb r3,[r0,#39]
 1430 0004 0169     	 ldr r1,[r0,#16]
 1431 0006 5B01     	 lsls r3,r3,#5
 1432 0008 CA58     	 ldr r2,[r1,r3]
 1433 000a 42F00042 	 orr r2,r2,#-2147483648
 1434 000e CA50     	 str r2,[r1,r3]
 746:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index++;
 1435              	 .loc 1 746 0
 1436 0010 90F82730 	 ldrb r3,[r0,#39]
 747:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->rx_index == eth_mac->num_rx_buf)
 1437              	 .loc 1 747 0
 1438 0014 90F82420 	 ldrb r2,[r0,#36]
 746:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index++;
 1439              	 .loc 1 746 0
 1440 0018 0133     	 adds r3,r3,#1
 1441 001a DBB2     	 uxtb r3,r3
 1442              	 .loc 1 747 0
 1443 001c 9A42     	 cmp r2,r3
 746:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index++;
 1444              	 .loc 1 746 0
 1445 001e 80F82730 	 strb r3,[r0,#39]
 748:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 749:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_index = 0U;
 1446              	 .loc 1 749 0
 1447 0022 04BF     	 itt eq
 1448 0024 0023     	 moveq r3,#0
 1449 0026 80F82730 	 strbeq r3,[r0,#39]
 1450 002a 7047     	 bx lr
 1451              	 .cfi_endproc
 1452              	.LFE256:
 1454              	 .section .text.XMC_ETH_MAC_ReturnTxDescriptor,"ax",%progbits
 1455              	 .align 1
 1456              	 .global XMC_ETH_MAC_ReturnTxDescriptor
 1457              	 .thumb
 1458              	 .thumb_func
 1460              	XMC_ETH_MAC_ReturnTxDescriptor:
 1461              	.LFB257:
 750:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } 
 751:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 752:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 753:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Return TX descriptor */
 754:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
 755:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1462              	 .loc 1 755 0
 1463              	 .cfi_startproc
 1464              	 
 1465              	 
 1466              	 
 1467              	.LVL137:
 756:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_ts_index = eth_mac->tx_index;
 1468              	 .loc 1 756 0
 1469 0000 90F82630 	 ldrb r3,[r0,#38]
 1470 0004 80F82830 	 strb r3,[r0,#40]
 757:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 758:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC |ETH_MAC_DMA_TDES0_OWN;
 1471              	 .loc 1 758 0
 1472 0008 4169     	 ldr r1,[r0,#20]
 1473 000a 5B01     	 lsls r3,r3,#5
 1474 000c CA58     	 ldr r2,[r1,r3]
 1475 000e 42F00042 	 orr r2,r2,#-2147483648
 1476 0012 42F44002 	 orr r2,r2,#12582912
 1477 0016 CA50     	 str r2,[r1,r3]
 759:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_index++;
 1478              	 .loc 1 759 0
 1479 0018 90F82630 	 ldrb r3,[r0,#38]
 760:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->tx_index == eth_mac->num_tx_buf)
 1480              	 .loc 1 760 0
 1481 001c 90F82520 	 ldrb r2,[r0,#37]
 759:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_index++;
 1482              	 .loc 1 759 0
 1483 0020 0133     	 adds r3,r3,#1
 1484 0022 DBB2     	 uxtb r3,r3
 1485 0024 80F82630 	 strb r3,[r0,#38]
 1486              	 .loc 1 760 0
 1487 0028 9A42     	 cmp r2,r3
 1488 002a 4FF00003 	 mov r3,#0
 761:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 762:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->tx_index = 0U;
 1489              	 .loc 1 762 0
 1490 002e 08BF     	 it eq
 1491 0030 80F82630 	 strbeq r3,[r0,#38]
 763:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } 
 764:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 765:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->frame_end = NULL;
 1492              	 .loc 1 765 0
 1493 0034 0362     	 str r3,[r0,#32]
 1494 0036 7047     	 bx lr
 1495              	 .cfi_endproc
 1496              	.LFE257:
 1498              	 .section .text.XMC_ETH_MAC_SetVLANTag,"ax",%progbits
 1499              	 .align 1
 1500              	 .global XMC_ETH_MAC_SetVLANTag
 1501              	 .thumb
 1502              	 .thumb_func
 1504              	XMC_ETH_MAC_SetVLANTag:
 1505              	.LFB258:
 766:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 767:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 768:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set VLAN tag */
 769:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetVLANTag(XMC_ETH_MAC_t *const eth_mac, uint32_t tag)
 770:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1506              	 .loc 1 770 0
 1507              	 .cfi_startproc
 1508              	 
 1509              	 
 1510              	 
 1511              	.LVL138:
 771:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetVLANTag: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 772:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 773:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->VLAN_TAG = tag;
 1512              	 .loc 1 773 0
 1513 0000 0368     	 ldr r3,[r0]
 1514 0002 D961     	 str r1,[r3,#28]
 1515 0004 7047     	 bx lr
 1516              	 .cfi_endproc
 1517              	.LFE258:
 1519              	 .section .text.XMC_ETH_MAC_InitPTP,"ax",%progbits
 1520              	 .align 1
 1521              	 .global XMC_ETH_MAC_InitPTP
 1522              	 .thumb
 1523              	 .thumb_func
 1525              	XMC_ETH_MAC_InitPTP:
 1526              	.LFB259:
 774:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 775:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 776:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize PTP */
 777:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitPTP(XMC_ETH_MAC_t *const eth_mac, uint32_t config)
 778:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1527              	 .loc 1 778 0
 1528              	 .cfi_startproc
 1529              	 
 1530              	 
 1531              	 
 1532              	.LVL139:
 779:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitPTP: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 780:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 781:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Mask the time stamp interrupt */
 782:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK |= (uint32_t)ETH_INTERRUPT_MASK_TSIM_Msk;
 1533              	 .loc 1 782 0
 1534 0000 0368     	 ldr r3,[r0]
 1535 0002 DA6B     	 ldr r2,[r3,#60]
 1536 0004 42F40072 	 orr r2,r2,#512
 1537 0008 DA63     	 str r2,[r3,#60]
 783:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 784:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Enable time stamp, rollover mode of nanosecond counter set to digital mode, i.e. after 0x3B9AC
 785:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL = ETH_TIMESTAMP_CONTROL_TSENA_Msk | ETH_TIMESTAMP_CONTROL_TSCTRL
 1538              	 .loc 1 785 0
 1539 000a 41F40072 	 orr r2,r1,#512
 1540 000e 42F00102 	 orr r2,r2,#1
 786:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 787:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((config & (uint32_t)XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE) != 0U)
 1541              	 .loc 1 787 0
 1542 0012 11F0020F 	 tst r1,#2
 785:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 1543              	 .loc 1 785 0
 1544 0016 C3F80027 	 str r2,[r3,#1792]
 1545 001a 2649     	 ldr r1,.L116
 1546              	.LVL140:
 1547 001c 264A     	 ldr r2,.L116+4
 1548 001e B6EE006A 	 fconsts s12,#96
 1549              	 .loc 1 787 0
 1550 0022 26D0     	 beq .L110
 1551              	.LBB41:
 788:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 789:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Program sub-second increment register based on PTP clock frequency ~ 50MHz */
 790:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->SUB_SECOND_INCREMENT = 20;
 1552              	 .loc 1 790 0
 1553 0024 1420     	 movs r0,#20
 1554              	.LVL141:
 1555 0026 C3F80407 	 str r0,[r3,#1796]
 1556              	.LBB42:
 1557              	.LBB43:
2567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1558              	 .loc 3 2567 0
 1559 002a 0969     	 ldr r1,[r1,#16]
 1560              	.LVL142:
 1561 002c 1268     	 ldr r2,[r2]
 1562              	.LVL143:
 1563              	.LBE43:
 1564              	.LBE42:
 791:../Libraries/XMCLib/src/xmc_eth_mac.c ****     
 792:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* fSYS = Reference Clock for the Time Stamp Update Logic*/
 793:../Libraries/XMCLib/src/xmc_eth_mac.c ****     float ratio = (float)XMC_SCU_CLOCK_GetSystemClockFrequency() / (float)XMC_ETH_SUB_SECOND_UPDATE
 1565              	 .loc 1 793 0
 1566 002e DFED236A 	 flds s13,.L116+8
 1567              	.LBB45:
 1568              	.LBB44:
2567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1569              	 .loc 3 2567 0
 1570 0032 01F00101 	 and r1,r1,#1
 1571              	.LVL144:
 1572 0036 8A40     	 lsls r2,r2,r1
 1573              	.LBE44:
 1574              	.LBE45:
 1575              	 .loc 1 793 0
 1576 0038 07EE902A 	 fmsr s15,r2
 1577 003c B8EE677A 	 fuitos s14,s15
 1578 0040 C7EE266A 	 fdivs s13,s14,s13
 1579              	.LVL145:
 794:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((float)0x100000000ULL / ratio) + 0.5F);
 1580              	 .loc 1 794 0
 1581 0044 9FED1E7A 	 flds s14,.L116+12
 1582 0048 87EE267A 	 fdivs s14,s14,s13
 1583 004c 77EE067A 	 fadds s15,s14,s12
 1584 0050 FCEEE77A 	 ftouizs s15,s15
 1585 0054 17EE902A 	 fmrs r2,s15
 1586 0058 C3F81827 	 str r2,[r3,#1816]
 795:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 796:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Addend register update */
 797:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 1587              	 .loc 1 797 0
 1588 005c D3F80027 	 ldr r2,[r3,#1792]
 1589 0060 42F02002 	 orr r2,r2,#32
 1590 0064 C3F80027 	 str r2,[r3,#1792]
 1591              	.L111:
 798:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 799:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
 800:../Libraries/XMCLib/src/xmc_eth_mac.c ****     while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);
 1592              	 .loc 1 800 0 discriminator 1
 1593 0068 D3F80027 	 ldr r2,[r3,#1792]
 1594 006c 9106     	 lsls r1,r2,#26
 1595 006e FBD4     	 bmi .L111
 1596 0070 14E0     	 b .L112
 1597              	.LVL146:
 1598              	.L110:
 1599              	.LBE41:
 1600              	.LBB46:
 1601              	.LBB47:
2567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1602              	 .loc 3 2567 0
 1603 0072 0969     	 ldr r1,[r1,#16]
 1604 0074 1268     	 ldr r2,[r2]
 1605              	.LBE47:
 1606              	.LBE46:
 801:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 802:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 803:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 804:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Program sub-second increment register based on PTP clock frequency = fSYS/2 */
 805:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SUB_SECOND_INCREMENT = (uint32_t)(((float)1000000000 / (float)XMC_SCU_CLOCK_GetSys
 1607              	 .loc 1 805 0
 1608 0076 9FED137A 	 flds s14,.L116+16
 1609              	.LBB49:
 1610              	.LBB48:
2567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 1611              	 .loc 3 2567 0
 1612 007a 01F00101 	 and r1,r1,#1
 1613 007e 8A40     	 lsls r2,r2,r1
 1614              	.LBE48:
 1615              	.LBE49:
 1616              	 .loc 1 805 0
 1617 0080 07EE902A 	 fmsr s15,r2
 1618 0084 F8EE677A 	 fuitos s15,s15
 1619 0088 C7EE277A 	 fdivs s15,s14,s15
 1620 008c 77EE867A 	 fadds s15,s15,s12
 1621 0090 FCEEE77A 	 ftouizs s15,s15
 1622 0094 17EE902A 	 fmrs r2,s15
 1623 0098 C3F80427 	 str r2,[r3,#1796]
 1624              	.LVL147:
 1625              	.L112:
 806:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 807:../Libraries/XMCLib/src/xmc_eth_mac.c ****   
 808:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 1626              	 .loc 1 808 0
 1627 009c D3F80027 	 ldr r2,[r3,#1792]
 1628 00a0 42F00402 	 orr r2,r2,#4
 1629 00a4 C3F80027 	 str r2,[r3,#1792]
 1630              	.L113:
 809:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSINIT_Msk);  
 1631              	 .loc 1 809 0 discriminator 1
 1632 00a8 D3F80027 	 ldr r2,[r3,#1792]
 1633 00ac 5207     	 lsls r2,r2,#29
 1634 00ae FBD4     	 bmi .L113
 810:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1635              	 .loc 1 810 0
 1636 00b0 7047     	 bx lr
 1637              	.L117:
 1638 00b2 00BF     	 .align 2
 1639              	.L116:
 1640 00b4 00460050 	 .word 1342195200
 1641 00b8 00000000 	 .word SystemCoreClock
 1642 00bc 20BC3E4C 	 .word 1279179808
 1643 00c0 0000804F 	 .word 1333788672
 1644 00c4 286B6E4E 	 .word 1315859240
 1645              	 .cfi_endproc
 1646              	.LFE259:
 1648              	 .section .text.XMC_ETH_MAC_InitPTPEx,"ax",%progbits
 1649              	 .align 1
 1650              	 .global XMC_ETH_MAC_InitPTPEx
 1651              	 .thumb
 1652              	 .thumb_func
 1654              	XMC_ETH_MAC_InitPTPEx:
 1655              	.LFB260:
 811:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 812:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize PTP using a given time */
 813:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitPTPEx(XMC_ETH_MAC_t *const eth_mac, uint32_t config, XMC_ETH_MAC_TIME_t *const
 814:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1656              	 .loc 1 814 0
 1657              	 .cfi_startproc
 1658              	 
 1659              	 
 1660              	.LVL148:
 1661 0000 10B5     	 push {r4,lr}
 1662              	.LCFI16:
 1663              	 .cfi_def_cfa_offset 8
 1664              	 .cfi_offset 4,-8
 1665              	 .cfi_offset 14,-4
 815:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitPTP: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 816:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 817:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize the system time */
 818:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = time->nanoseconds;
 1666              	 .loc 1 818 0
 1667 0002 0368     	 ldr r3,[r0]
 1668 0004 5468     	 ldr r4,[r2,#4]
 819:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 1669              	 .loc 1 819 0
 1670 0006 1268     	 ldr r2,[r2]
 1671              	.LVL149:
 818:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 1672              	 .loc 1 818 0
 1673 0008 C3F81447 	 str r4,[r3,#1812]
 1674              	 .loc 1 819 0
 1675 000c C3F81027 	 str r2,[r3,#1808]
 820:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 821:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitPTP(eth_mac, config);
 822:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1676              	 .loc 1 822 0
 1677 0010 BDE81040 	 pop {r4,lr}
 1678              	.LCFI17:
 1679              	 .cfi_restore 14
 1680              	 .cfi_restore 4
 1681              	 .cfi_def_cfa_offset 0
 821:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1682              	 .loc 1 821 0
 1683 0014 FFF7FEBF 	 b XMC_ETH_MAC_InitPTP
 1684              	.LVL150:
 1685              	 .cfi_endproc
 1686              	.LFE260:
 1688              	 .section .text.XMC_ETH_MAC_GetPTPTime,"ax",%progbits
 1689              	 .align 1
 1690              	 .global XMC_ETH_MAC_GetPTPTime
 1691              	 .thumb
 1692              	 .thumb_func
 1694              	XMC_ETH_MAC_GetPTPTime:
 1695              	.LFB261:
 823:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 824:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get PTP time */
 825:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_GetPTPTime(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
 826:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1696              	 .loc 1 826 0
 1697              	 .cfi_startproc
 1698              	 
 1699              	 
 1700              	 
 1701              	.LVL151:
 827:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 828:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 829:../Libraries/XMCLib/src/xmc_eth_mac.c ****   time->nanoseconds = (uint32_t)(eth_mac->regs->SYSTEM_TIME_NANOSECONDS); /* accuracy of 1 ns */
 1702              	 .loc 1 829 0
 1703 0000 0368     	 ldr r3,[r0]
 1704 0002 D3F80C27 	 ldr r2,[r3,#1804]
 830:../Libraries/XMCLib/src/xmc_eth_mac.c ****   time->seconds = eth_mac->regs->SYSTEM_TIME_SECONDS;
 1705              	 .loc 1 830 0
 1706 0006 D3F80837 	 ldr r3,[r3,#1800]
 829:../Libraries/XMCLib/src/xmc_eth_mac.c ****   time->seconds = eth_mac->regs->SYSTEM_TIME_SECONDS;
 1707              	 .loc 1 829 0
 1708 000a 4A60     	 str r2,[r1,#4]
 1709              	 .loc 1 830 0
 1710 000c 0B60     	 str r3,[r1]
 1711 000e 7047     	 bx lr
 1712              	 .cfi_endproc
 1713              	.LFE261:
 1715              	 .section .text.XMC_ETH_MAC_SetPTPTime,"ax",%progbits
 1716              	 .align 1
 1717              	 .global XMC_ETH_MAC_SetPTPTime
 1718              	 .thumb
 1719              	 .thumb_func
 1721              	XMC_ETH_MAC_SetPTPTime:
 1722              	.LFB262:
 831:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 832:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 833:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP time */
 834:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetPTPTime(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
 835:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1723              	 .loc 1 835 0
 1724              	 .cfi_startproc
 1725              	 
 1726              	 
 1727              	 
 1728              	.LVL152:
 836:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 837:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 838:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 1729              	 .loc 1 838 0
 1730 0000 0368     	 ldr r3,[r0]
 1731 0002 0A68     	 ldr r2,[r1]
 1732 0004 C3F81027 	 str r2,[r3,#1808]
 839:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = time->nanoseconds;
 1733              	 .loc 1 839 0
 1734 0008 4A68     	 ldr r2,[r1,#4]
 840:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 841:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize precision timer */
 842:../Libraries/XMCLib/src/xmc_eth_mac.c ****   ETH0->TIMESTAMP_CONTROL |= ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 1735              	 .loc 1 842 0
 1736 000a 0749     	 ldr r1,.L123
 1737              	.LVL153:
 839:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = time->nanoseconds;
 1738              	 .loc 1 839 0
 1739 000c C3F81427 	 str r2,[r3,#1812]
 1740              	 .loc 1 842 0
 1741 0010 D1F80027 	 ldr r2,[r1,#1792]
 1742 0014 42F00402 	 orr r2,r2,#4
 1743 0018 C1F80027 	 str r2,[r1,#1792]
 1744              	.L121:
 843:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSINIT_Msk);
 1745              	 .loc 1 843 0 discriminator 1
 1746 001c D3F80027 	 ldr r2,[r3,#1792]
 1747 0020 5207     	 lsls r2,r2,#29
 1748 0022 FBD4     	 bmi .L121
 844:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1749              	 .loc 1 844 0
 1750 0024 7047     	 bx lr
 1751              	.L124:
 1752 0026 00BF     	 .align 2
 1753              	.L123:
 1754 0028 00C00050 	 .word 1342226432
 1755              	 .cfi_endproc
 1756              	.LFE262:
 1758              	 .section .text.XMC_ETH_MAC_UpdatePTPTime,"ax",%progbits
 1759              	 .align 1
 1760              	 .global XMC_ETH_MAC_UpdatePTPTime
 1761              	 .thumb
 1762              	 .thumb_func
 1764              	XMC_ETH_MAC_UpdatePTPTime:
 1765              	.LFB263:
 845:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 846:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Update PTP time */
 847:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_UpdatePTPTime(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
 848:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1766              	 .loc 1 848 0
 1767              	 .cfi_startproc
 1768              	 
 1769              	 
 1770              	 
 1771              	.LVL154:
 849:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t temp;
 850:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 851:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_UpdatePTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->re
 852:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_UpdatePTPTime: time.time_stamp_nanoseconds not in range", (time->nanoseco
 853:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 854:../Libraries/XMCLib/src/xmc_eth_mac.c ****   temp = (uint32_t)(abs(time->nanoseconds));
 1772              	 .loc 1 854 0
 1773 0000 4B68     	 ldr r3,[r1,#4]
 1774 0002 83EAE372 	 eor r2,r3,r3,asr#31
 1775 0006 A2EBE372 	 sub r2,r2,r3,asr#31
 1776              	.LVL155:
 855:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (time->nanoseconds < 0)
 1777              	 .loc 1 855 0
 1778 000a 002B     	 cmp r3,#0
 856:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 857:../Libraries/XMCLib/src/xmc_eth_mac.c ****     temp |= (uint32_t)ETH_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_Msk;
 858:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 859:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 860:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = temp;
 1779              	 .loc 1 860 0
 1780 000c 0368     	 ldr r3,[r0]
 857:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 1781              	 .loc 1 857 0
 1782 000e B8BF     	 it lt
 1783 0010 42F00042 	 orrlt r2,r2,#-2147483648
 1784              	.LVL156:
 1785              	 .loc 1 860 0
 1786 0014 C3F81427 	 str r2,[r3,#1812]
 861:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 1787              	 .loc 1 861 0
 1788 0018 0A68     	 ldr r2,[r1]
 1789              	.LVL157:
 1790 001a C3F81027 	 str r2,[r3,#1808]
 1791              	.LVL158:
 862:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 863:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSUPDT_Msk;
 1792              	 .loc 1 863 0
 1793 001e D3F80027 	 ldr r2,[r3,#1792]
 1794 0022 42F00802 	 orr r2,r2,#8
 1795 0026 C3F80027 	 str r2,[r3,#1792]
 1796 002a 7047     	 bx lr
 1797              	 .cfi_endproc
 1798              	.LFE263:
 1800              	 .section .text.XMC_ETH_MAC_SetPTPAlarm,"ax",%progbits
 1801              	 .align 1
 1802              	 .global XMC_ETH_MAC_SetPTPAlarm
 1803              	 .thumb
 1804              	 .thumb_func
 1806              	XMC_ETH_MAC_SetPTPAlarm:
 1807              	.LFB264:
 864:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 865:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 866:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP alarm */
 867:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetPTPAlarm(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
 868:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1808              	 .loc 1 868 0
 1809              	 .cfi_startproc
 1810              	 
 1811              	 
 1812              	 
 1813              	.LVL159:
 869:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetPTPAlarm: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs
 870:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetPTPAlarm: time.time_stamp_nanoseconds not in range", (time->nanosecond
 871:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 872:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TARGET_TIME_NANOSECONDS = time->nanoseconds;
 1814              	 .loc 1 872 0
 1815 0000 0368     	 ldr r3,[r0]
 1816 0002 4A68     	 ldr r2,[r1,#4]
 1817 0004 C3F82027 	 str r2,[r3,#1824]
 873:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TARGET_TIME_SECONDS = time->seconds;
 1818              	 .loc 1 873 0
 1819 0008 0A68     	 ldr r2,[r1]
 1820 000a C3F81C27 	 str r2,[r3,#1820]
 1821 000e 7047     	 bx lr
 1822              	 .cfi_endproc
 1823              	.LFE264:
 1825              	 .section .text.XMC_ETH_MAC_AdjustPTPClock,"ax",%progbits
 1826              	 .align 1
 1827              	 .global XMC_ETH_MAC_AdjustPTPClock
 1828              	 .thumb
 1829              	 .thumb_func
 1831              	XMC_ETH_MAC_AdjustPTPClock:
 1832              	.LFB265:
 874:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 875:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 876:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Adjust PTP clock */
 877:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_AdjustPTPClock(XMC_ETH_MAC_t *const eth_mac, uint32_t correction)
 878:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1833              	 .loc 1 878 0
 1834              	 .cfi_startproc
 1835              	 
 1836              	 
 1837              	 
 1838              	.LVL160:
 879:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_AdjustPTPClock: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 880:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 881:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Correction factor is Q31 (0x80000000 = 1.000000000) */
 882:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((uint64_t)correction * eth_mac->regs->TIMESTAMP_ADD
 1839              	 .loc 1 882 0
 1840 0000 0368     	 ldr r3,[r0]
 1841 0002 D3F81807 	 ldr r0,[r3,#1816]
 1842              	.LVL161:
 1843 0006 A1FB0001 	 umull r0,r1,r1,r0
 1844 000a C20F     	 lsrs r2,r0,#31
 1845 000c 42EA4102 	 orr r2,r2,r1,lsl#1
 1846 0010 C3F81827 	 str r2,[r3,#1816]
 883:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 884:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Update addend register */
 885:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 1847              	 .loc 1 885 0
 1848 0014 D3F80027 	 ldr r2,[r3,#1792]
 1849 0018 42F02002 	 orr r2,r2,#32
 1850 001c C3F80027 	 str r2,[r3,#1792]
 1851              	.L129:
 886:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 887:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
 888:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);  
 1852              	 .loc 1 888 0 discriminator 1
 1853 0020 D3F80027 	 ldr r2,[r3,#1792]
 1854 0024 9206     	 lsls r2,r2,#26
 1855 0026 FBD4     	 bmi .L129
 889:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1856              	 .loc 1 889 0
 1857 0028 7047     	 bx lr
 1858              	 .cfi_endproc
 1859              	.LFE265:
 1861              	 .section .text.XMC_ETH_MAC_UpdateAddend,"ax",%progbits
 1862              	 .align 1
 1863              	 .global XMC_ETH_MAC_UpdateAddend
 1864              	 .thumb
 1865              	 .thumb_func
 1867              	XMC_ETH_MAC_UpdateAddend:
 1868              	.LFB266:
 890:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 891:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Update Addend */
 892:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_UpdateAddend(XMC_ETH_MAC_t *const eth_mac, uint32_t addend)
 893:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1869              	 .loc 1 893 0
 1870              	 .cfi_startproc
 1871              	 
 1872              	 
 1873              	 
 1874              	.LVL162:
 894:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_AdjustPTPClock: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 895:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 896:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_ADDEND = addend;
 1875              	 .loc 1 896 0
 1876 0000 0368     	 ldr r3,[r0]
 1877 0002 C3F81817 	 str r1,[r3,#1816]
 897:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 898:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Update addend register */
 899:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 1878              	 .loc 1 899 0
 1879 0006 D3F80027 	 ldr r2,[r3,#1792]
 1880 000a 42F02002 	 orr r2,r2,#32
 1881 000e C3F80027 	 str r2,[r3,#1792]
 1882              	.L132:
 900:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 901:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
 902:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);
 1883              	 .loc 1 902 0 discriminator 1
 1884 0012 D3F80027 	 ldr r2,[r3,#1792]
 1885 0016 9206     	 lsls r2,r2,#26
 1886 0018 FBD4     	 bmi .L132
 903:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1887              	 .loc 1 903 0
 1888 001a 7047     	 bx lr
 1889              	 .cfi_endproc
 1890              	.LFE266:
 1892              	 .section .text.XMC_ETH_MAC_GetPTPStatus,"ax",%progbits
 1893              	 .align 1
 1894              	 .global XMC_ETH_MAC_GetPTPStatus
 1895              	 .thumb
 1896              	 .thumb_func
 1898              	XMC_ETH_MAC_GetPTPStatus:
 1899              	.LFB267:
 904:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 905:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP status */
 906:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetPTPStatus(const XMC_ETH_MAC_t *const eth_mac)
 907:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1900              	 .loc 1 907 0
 1901              	 .cfi_startproc
 1902              	 
 1903              	 
 1904              	 
 1905              	.LVL163:
 908:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->reg
 909:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 910:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (eth_mac->regs->TIMESTAMP_STATUS);
 1906              	 .loc 1 910 0
 1907 0000 0368     	 ldr r3,[r0]
 1908 0002 D3F82807 	 ldr r0,[r3,#1832]
 1909              	.LVL164:
 911:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1910              	 .loc 1 911 0
 1911 0006 7047     	 bx lr
 1912              	 .cfi_endproc
 1913              	.LFE267:
 1915              	 .section .text.XMC_ETH_MAC_GetRxTimeStamp,"ax",%progbits
 1916              	 .align 1
 1917              	 .global XMC_ETH_MAC_GetRxTimeStamp
 1918              	 .thumb
 1919              	 .thumb_func
 1921              	XMC_ETH_MAC_GetRxTimeStamp:
 1922              	.LFB268:
 912:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 913:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get TX time-stamp */
 914:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetRxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *c
 915:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1923              	 .loc 1 915 0
 1924              	 .cfi_startproc
 1925              	 
 1926              	 
 1927              	.LVL165:
 1928 0000 10B5     	 push {r4,lr}
 1929              	.LCFI18:
 1930              	 .cfi_def_cfa_offset 8
 1931              	 .cfi_offset 4,-8
 1932              	 .cfi_offset 14,-4
 916:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_DMA_DESC_t *rx_desc;
 917:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 918:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 919:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 920:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: time is invalid", time != NULL);
 921:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 922:../Libraries/XMCLib/src/xmc_eth_mac.c ****   rx_desc = &eth_mac->rx_desc[eth_mac->rx_index];
 1933              	 .loc 1 922 0
 1934 0002 90F82730 	 ldrb r3,[r0,#39]
 1935 0006 0269     	 ldr r2,[r0,#16]
 1936 0008 5B01     	 lsls r3,r3,#5
 1937 000a D018     	 adds r0,r2,r3
 1938              	.LVL166:
 923:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (rx_desc->status & ETH_MAC_DMA_RDES0_OWN)
 1939              	 .loc 1 923 0
 1940 000c D458     	 ldr r4,[r2,r3]
 1941 000e 002C     	 cmp r4,#0
 1942 0010 0BDB     	 blt .L137
 924:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 925:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 926:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 927:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 928:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 929:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((rx_desc->status & (ETH_MAC_DMA_RDES0_TSA | ETH_MAC_DMA_RDES0_LS)) == (ETH_MAC_DMA_RDES0_TS
 1943              	 .loc 1 929 0
 1944 0012 D358     	 ldr r3,[r2,r3]
 1945 0014 03F4C073 	 and r3,r3,#384
 1946 0018 B3F5C07F 	 cmp r3,#384
 1947 001c 07D1     	 bne .L138
 930:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 931:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->nanoseconds = (int32_t)(rx_desc->time_stamp_nanoseconds);
 1948              	 .loc 1 931 0
 1949 001e 8369     	 ldr r3,[r0,#24]
 1950 0020 4B60     	 str r3,[r1,#4]
 932:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->seconds = rx_desc->time_stamp_seconds;      
 1951              	 .loc 1 932 0
 1952 0022 C369     	 ldr r3,[r0,#28]
 1953 0024 0B60     	 str r3,[r1]
 1954              	.LVL167:
 933:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 934:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_OK;
 1955              	 .loc 1 934 0
 1956 0026 0020     	 movs r0,#0
 1957              	.LVL168:
 1958 0028 10BD     	 pop {r4,pc}
 1959              	.LVL169:
 1960              	.L137:
 925:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 1961              	 .loc 1 925 0
 1962 002a 0120     	 movs r0,#1
 1963              	.LVL170:
 1964 002c 10BD     	 pop {r4,pc}
 1965              	.LVL171:
 1966              	.L138:
 935:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 936:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 937:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 938:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_ERROR;  
 1967              	 .loc 1 938 0
 1968 002e 0220     	 movs r0,#2
 1969              	.LVL172:
 939:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 940:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 941:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 942:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 943:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1970              	 .loc 1 943 0
 1971 0030 10BD     	 pop {r4,pc}
 1972              	 .cfi_endproc
 1973              	.LFE268:
 1975              	 .section .text.XMC_ETH_MAC_GetTxTimeStamp,"ax",%progbits
 1976              	 .align 1
 1977              	 .global XMC_ETH_MAC_GetTxTimeStamp
 1978              	 .thumb
 1979              	 .thumb_func
 1981              	XMC_ETH_MAC_GetTxTimeStamp:
 1982              	.LFB269:
 944:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 945:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get TX time-stamp */
 946:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetTxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *c
 947:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1983              	 .loc 1 947 0
 1984              	 .cfi_startproc
 1985              	 
 1986              	 
 1987              	.LVL173:
 1988 0000 10B5     	 push {r4,lr}
 1989              	.LCFI19:
 1990              	 .cfi_def_cfa_offset 8
 1991              	 .cfi_offset 4,-8
 1992              	 .cfi_offset 14,-4
 948:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_DMA_DESC_t *tx_desc;
 949:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 950:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 951:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 952:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: time is invalid", time != NULL);
 953:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 954:../Libraries/XMCLib/src/xmc_eth_mac.c ****   tx_desc = &eth_mac->tx_desc[eth_mac->tx_ts_index];
 1993              	 .loc 1 954 0
 1994 0002 90F82830 	 ldrb r3,[r0,#40]
 1995 0006 4269     	 ldr r2,[r0,#20]
 1996 0008 5B01     	 lsls r3,r3,#5
 1997 000a D018     	 adds r0,r2,r3
 1998              	.LVL174:
 955:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (tx_desc->status & ETH_MAC_DMA_TDES0_OWN)
 1999              	 .loc 1 955 0
 2000 000c D458     	 ldr r4,[r2,r3]
 2001 000e 002C     	 cmp r4,#0
 2002 0010 0BDB     	 blt .L141
 956:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 957:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 958:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 959:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 960:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 961:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((tx_desc->status & (ETH_MAC_DMA_TDES0_TTSS | ETH_MAC_DMA_TDES0_LS)) == (ETH_MAC_DMA_TDES0_T
 2003              	 .loc 1 961 0
 2004 0012 D258     	 ldr r2,[r2,r3]
 2005 0014 074B     	 ldr r3,.L143
 2006 0016 1340     	 ands r3,r3,r2
 2007 0018 064A     	 ldr r2,.L143
 2008 001a 9342     	 cmp r3,r2
 2009 001c 07D1     	 bne .L142
 962:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 963:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->nanoseconds = (int32_t)(tx_desc->time_stamp_nanoseconds); /* accuracy of 1 ns */
 2010              	 .loc 1 963 0
 2011 001e 8369     	 ldr r3,[r0,#24]
 2012 0020 4B60     	 str r3,[r1,#4]
 964:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->seconds = tx_desc->time_stamp_seconds;
 2013              	 .loc 1 964 0
 2014 0022 C369     	 ldr r3,[r0,#28]
 2015 0024 0B60     	 str r3,[r1]
 2016              	.LVL175:
 965:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 966:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_OK;
 2017              	 .loc 1 966 0
 2018 0026 0020     	 movs r0,#0
 2019              	.LVL176:
 2020 0028 10BD     	 pop {r4,pc}
 2021              	.LVL177:
 2022              	.L141:
 957:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 2023              	 .loc 1 957 0
 2024 002a 0120     	 movs r0,#1
 2025              	.LVL178:
 2026 002c 10BD     	 pop {r4,pc}
 2027              	.LVL179:
 2028              	.L142:
 967:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 968:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 969:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 970:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_ERROR;
 2029              	 .loc 1 970 0
 2030 002e 0220     	 movs r0,#2
 2031              	.LVL180:
 971:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 972:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 973:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 974:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 975:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2032              	 .loc 1 975 0
 2033 0030 10BD     	 pop {r4,pc}
 2034              	.L144:
 2035 0032 00BF     	 .align 2
 2036              	.L143:
 2037 0034 00000220 	 .word 537001984
 2038              	 .cfi_endproc
 2039              	.LFE269:
 2041              	 .text
 2042              	.Letext0:
 2043              	 .file 4 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2044              	 .file 5 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2045              	 .file 6 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2046              	 .file 7 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Include/core_cm4.h"
 2047              	 .file 8 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eth_mac.c
    {standard input}:20     .text.XMC_ETH_MAC_InitRxDescriptors:00000000 $t
    {standard input}:25     .text.XMC_ETH_MAC_InitRxDescriptors:00000000 XMC_ETH_MAC_InitRxDescriptors
    {standard input}:93     .text.XMC_ETH_MAC_InitTxDescriptors:00000000 $t
    {standard input}:98     .text.XMC_ETH_MAC_InitTxDescriptors:00000000 XMC_ETH_MAC_InitTxDescriptors
    {standard input}:162    .text.XMC_ETH_MAC_InitTxDescriptors:00000048 $d
    {standard input}:167    .text.XMC_ETH_MAC_InitEx:00000000 $t
    {standard input}:172    .text.XMC_ETH_MAC_InitEx:00000000 XMC_ETH_MAC_InitEx
    {standard input}:255    .text.XMC_ETH_MAC_InitEx:00000068 $d
    {standard input}:261    .text.XMC_ETH_MAC_SetAddressEx:00000000 $t
    {standard input}:266    .text.XMC_ETH_MAC_SetAddressEx:00000000 XMC_ETH_MAC_SetAddressEx
    {standard input}:296    .text.XMC_ETH_MAC_GetAddressEx:00000000 $t
    {standard input}:301    .text.XMC_ETH_MAC_GetAddressEx:00000000 XMC_ETH_MAC_GetAddressEx
    {standard input}:344    .text.XMC_ETH_MAC_SetAddressPerfectFilter:00000000 $t
    {standard input}:349    .text.XMC_ETH_MAC_SetAddressPerfectFilter:00000000 XMC_ETH_MAC_SetAddressPerfectFilter
    {standard input}:383    .text.XMC_ETH_MAC_SetAddressPerfectFilterEx:00000000 $t
    {standard input}:388    .text.XMC_ETH_MAC_SetAddressPerfectFilterEx:00000000 XMC_ETH_MAC_SetAddressPerfectFilterEx
    {standard input}:437    .text.XMC_ETH_MAC_SetAddressHashFilter:00000000 $t
    {standard input}:442    .text.XMC_ETH_MAC_SetAddressHashFilter:00000000 XMC_ETH_MAC_SetAddressHashFilter
    {standard input}:460    .text.XMC_ETH_MAC_SendFrame:00000000 $t
    {standard input}:465    .text.XMC_ETH_MAC_SendFrame:00000000 XMC_ETH_MAC_SendFrame
    {standard input}:620    .text.XMC_ETH_MAC_ReadFrame:00000000 $t
    {standard input}:625    .text.XMC_ETH_MAC_ReadFrame:00000000 XMC_ETH_MAC_ReadFrame
    {standard input}:701    .text.XMC_ETH_MAC_GetRxFrameSize:00000000 $t
    {standard input}:706    .text.XMC_ETH_MAC_GetRxFrameSize:00000000 XMC_ETH_MAC_GetRxFrameSize
    {standard input}:751    .text.XMC_ETH_MAC_SetManagmentClockDivider:00000000 $t
    {standard input}:756    .text.XMC_ETH_MAC_SetManagmentClockDivider:00000000 XMC_ETH_MAC_SetManagmentClockDivider
    {standard input}:862    .text.XMC_ETH_MAC_SetManagmentClockDivider:00000058 $d
    {standard input}:874    .text.XMC_ETH_MAC_Enable:00000000 $t
    {standard input}:879    .text.XMC_ETH_MAC_Enable:00000000 XMC_ETH_MAC_Enable
    {standard input}:910    .text.XMC_ETH_MAC_Enable:00000014 $d
    {standard input}:915    .text.XMC_ETH_MAC_Init:00000000 $t
    {standard input}:920    .text.XMC_ETH_MAC_Init:00000000 XMC_ETH_MAC_Init
    {standard input}:974    .text.XMC_ETH_MAC_Disable:00000000 $t
    {standard input}:979    .text.XMC_ETH_MAC_Disable:00000000 XMC_ETH_MAC_Disable
    {standard input}:1010   .text.XMC_ETH_MAC_Disable:00000014 $d
    {standard input}:1015   .text.XMC_ETH_MAC_ReadPhy:00000000 $t
    {standard input}:1020   .text.XMC_ETH_MAC_ReadPhy:00000000 XMC_ETH_MAC_ReadPhy
    {standard input}:1071   .text.XMC_ETH_MAC_WritePhy:00000000 $t
    {standard input}:1076   .text.XMC_ETH_MAC_WritePhy:00000000 XMC_ETH_MAC_WritePhy
    {standard input}:1124   .text.XMC_ETH_MAC_FlushTx:00000000 $t
    {standard input}:1129   .text.XMC_ETH_MAC_FlushTx:00000000 XMC_ETH_MAC_FlushTx
    {standard input}:1165   .text.XMC_ETH_MAC_FlushRx:00000000 $t
    {standard input}:1170   .text.XMC_ETH_MAC_FlushRx:00000000 XMC_ETH_MAC_FlushRx
    {standard input}:1206   .text.XMC_ETH_MAC_SetWakeUpFrameFilter:00000000 $t
    {standard input}:1211   .text.XMC_ETH_MAC_SetWakeUpFrameFilter:00000000 XMC_ETH_MAC_SetWakeUpFrameFilter
    {standard input}:1237   .text.XMC_ETH_MAC_EnableEvent:00000000 $t
    {standard input}:1242   .text.XMC_ETH_MAC_EnableEvent:00000000 XMC_ETH_MAC_EnableEvent
    {standard input}:1304   .text.XMC_ETH_MAC_DisableEvent:00000000 $t
    {standard input}:1309   .text.XMC_ETH_MAC_DisableEvent:00000000 XMC_ETH_MAC_DisableEvent
    {standard input}:1340   .text.XMC_ETH_MAC_ClearEventStatus:00000000 $t
    {standard input}:1345   .text.XMC_ETH_MAC_ClearEventStatus:00000000 XMC_ETH_MAC_ClearEventStatus
    {standard input}:1382   .text.XMC_ETH_MAC_GetEventStatus:00000000 $t
    {standard input}:1387   .text.XMC_ETH_MAC_GetEventStatus:00000000 XMC_ETH_MAC_GetEventStatus
    {standard input}:1415   .text.XMC_ETH_MAC_ReturnRxDescriptor:00000000 $t
    {standard input}:1420   .text.XMC_ETH_MAC_ReturnRxDescriptor:00000000 XMC_ETH_MAC_ReturnRxDescriptor
    {standard input}:1455   .text.XMC_ETH_MAC_ReturnTxDescriptor:00000000 $t
    {standard input}:1460   .text.XMC_ETH_MAC_ReturnTxDescriptor:00000000 XMC_ETH_MAC_ReturnTxDescriptor
    {standard input}:1499   .text.XMC_ETH_MAC_SetVLANTag:00000000 $t
    {standard input}:1504   .text.XMC_ETH_MAC_SetVLANTag:00000000 XMC_ETH_MAC_SetVLANTag
    {standard input}:1520   .text.XMC_ETH_MAC_InitPTP:00000000 $t
    {standard input}:1525   .text.XMC_ETH_MAC_InitPTP:00000000 XMC_ETH_MAC_InitPTP
    {standard input}:1640   .text.XMC_ETH_MAC_InitPTP:000000b4 $d
    {standard input}:1649   .text.XMC_ETH_MAC_InitPTPEx:00000000 $t
    {standard input}:1654   .text.XMC_ETH_MAC_InitPTPEx:00000000 XMC_ETH_MAC_InitPTPEx
    {standard input}:1689   .text.XMC_ETH_MAC_GetPTPTime:00000000 $t
    {standard input}:1694   .text.XMC_ETH_MAC_GetPTPTime:00000000 XMC_ETH_MAC_GetPTPTime
    {standard input}:1716   .text.XMC_ETH_MAC_SetPTPTime:00000000 $t
    {standard input}:1721   .text.XMC_ETH_MAC_SetPTPTime:00000000 XMC_ETH_MAC_SetPTPTime
    {standard input}:1754   .text.XMC_ETH_MAC_SetPTPTime:00000028 $d
    {standard input}:1759   .text.XMC_ETH_MAC_UpdatePTPTime:00000000 $t
    {standard input}:1764   .text.XMC_ETH_MAC_UpdatePTPTime:00000000 XMC_ETH_MAC_UpdatePTPTime
    {standard input}:1801   .text.XMC_ETH_MAC_SetPTPAlarm:00000000 $t
    {standard input}:1806   .text.XMC_ETH_MAC_SetPTPAlarm:00000000 XMC_ETH_MAC_SetPTPAlarm
    {standard input}:1826   .text.XMC_ETH_MAC_AdjustPTPClock:00000000 $t
    {standard input}:1831   .text.XMC_ETH_MAC_AdjustPTPClock:00000000 XMC_ETH_MAC_AdjustPTPClock
    {standard input}:1862   .text.XMC_ETH_MAC_UpdateAddend:00000000 $t
    {standard input}:1867   .text.XMC_ETH_MAC_UpdateAddend:00000000 XMC_ETH_MAC_UpdateAddend
    {standard input}:1893   .text.XMC_ETH_MAC_GetPTPStatus:00000000 $t
    {standard input}:1898   .text.XMC_ETH_MAC_GetPTPStatus:00000000 XMC_ETH_MAC_GetPTPStatus
    {standard input}:1916   .text.XMC_ETH_MAC_GetRxTimeStamp:00000000 $t
    {standard input}:1921   .text.XMC_ETH_MAC_GetRxTimeStamp:00000000 XMC_ETH_MAC_GetRxTimeStamp
    {standard input}:1976   .text.XMC_ETH_MAC_GetTxTimeStamp:00000000 $t
    {standard input}:1981   .text.XMC_ETH_MAC_GetTxTimeStamp:00000000 XMC_ETH_MAC_GetTxTimeStamp
    {standard input}:2037   .text.XMC_ETH_MAC_GetTxTimeStamp:00000034 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.ca5ae67a873a4952d630d8e4120b9e3e
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4e89a3f145accdcb1100c37260c088e6
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.65.5c0d35eb1a6853ff8300ab2ec1b944b0
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.57f124f9262f3dbf77da6a6506ffb430
                           .group:00000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:00000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1500.3eca65ed9ba7f90e09c1ffcb0b3f5724
                           .group:00000000 wm4.xmc_common.h.98.806f17e888fd51d0e4be2ad115163551
                           .group:00000000 wm4.xmc_eth_mac.h.120.f3d0d414f833c3104dd3156cb8b6399b
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.fe81d5186f74ee22c982a1a79f340ee8
                           .group:00000000 wm4.xmc4_scu.h.90.f49c0839764a6c1240876a5f2e586200

UNDEFINED SYMBOLS
memcpy
SystemCoreClock
XMC_SCU_CLOCK_EnableClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_DisableClock
