   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dma.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DMA_Enable,"ax",%progbits
  20              	 .align 1
  21              	 .global XMC_DMA_Enable
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_DMA_Enable:
  26              	.LFB189:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_dma.c"
   1:../Libraries/XMCLib/src/xmc_dma.c **** 
   2:../Libraries/XMCLib/src/xmc_dma.c **** /**
   3:../Libraries/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../Libraries/XMCLib/src/xmc_dma.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_dma.c ****  *
   6:../Libraries/XMCLib/src/xmc_dma.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_dma.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_dma.c ****  *
  10:../Libraries/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_dma.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_dma.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_dma.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  19:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  22:../Libraries/XMCLib/src/xmc_dma.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_dma.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_dma.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_dma.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_dma.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_dma.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_dma.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_dma.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_dma.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_dma.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_dma.c ****  *
  37:../Libraries/XMCLib/src/xmc_dma.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_dma.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_dma.c ****  *
  40:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_dma.c ****  *
  43:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  44:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  45:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  49:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  50:../Libraries/XMCLib/src/xmc_dma.c ****  *
  51:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  53:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  54:../Libraries/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  55:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  56:../Libraries/XMCLib/src/xmc_dma.c ****  *
  57:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-03-09:
  58:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Optimize write only registers
  59:../Libraries/XMCLib/src/xmc_dma.c ****  *
  60:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-04-08:
  61:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Update XMC_DMA_CH_EnableEvent and XMC_DMA_CH_DisableEvent.
  62:../Libraries/XMCLib/src/xmc_dma.c ****  *       Write optimization of MASKCHEV 
  63:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_IRQHandler, clear channel event status before processing the event handler.
  64:../Libraries/XMCLib/src/xmc_dma.c ****  *       It corrects event losses if the DMA triggered in the event handler finished before returni
  65:../Libraries/XMCLib/src/xmc_dma.c ****  *
  66:../Libraries/XMCLib/src/xmc_dma.c ****  * 2018-02-08:
  67:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_CH_RequestLastMultiblockTransfer() clearing CTLL_LLP_SRC_EN and CTLL_LLP_DST_E
  68:../Libraries/XMCLib/src/xmc_dma.c ****  *
  69:../Libraries/XMCLib/src/xmc_dma.c ****  * 2019-05-07:
  70:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fixed compilation warnings
  71:../Libraries/XMCLib/src/xmc_dma.c ****  *
  72:../Libraries/XMCLib/src/xmc_dma.c ****  * @endcond
  73:../Libraries/XMCLib/src/xmc_dma.c ****  */
  74:../Libraries/XMCLib/src/xmc_dma.c **** 
  75:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  76:../Libraries/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  77:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  78:../Libraries/XMCLib/src/xmc_dma.c **** 
  79:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  80:../Libraries/XMCLib/src/xmc_dma.c **** 
  81:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  82:../Libraries/XMCLib/src/xmc_dma.c **** 
  83:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  84:../Libraries/XMCLib/src/xmc_dma.c **** 
  85:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  86:../Libraries/XMCLib/src/xmc_dma.c ****  * MACROS
  87:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  88:../Libraries/XMCLib/src/xmc_dma.c **** 
  89:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  90:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  91:../Libraries/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  92:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  93:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  94:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
  95:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
  96:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
  97:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
  98:../Libraries/XMCLib/src/xmc_dma.c **** 
  99:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 100:../Libraries/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
 101:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 102:../Libraries/XMCLib/src/xmc_dma.c **** 
 103:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
 104:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
 105:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 106:../Libraries/XMCLib/src/xmc_dma.c **** 
 107:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
 108:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
 109:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 110:../Libraries/XMCLib/src/xmc_dma.c ****  
 111:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 112:../Libraries/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
 113:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 114:../Libraries/XMCLib/src/xmc_dma.c **** 
 115:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 116:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 117:../Libraries/XMCLib/src/xmc_dma.c **** {
 118:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 119:../Libraries/XMCLib/src/xmc_dma.c **** }
 120:../Libraries/XMCLib/src/xmc_dma.c **** 
 121:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 122:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 123:../Libraries/XMCLib/src/xmc_dma.c **** {
  28              	 .loc 1 123 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
 124:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 125:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
  33              	 .loc 1 125 0
  34 0000 064B     	 ldr r3,.L5
 123:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
  35              	 .loc 1 123 0
  36 0002 10B5     	 push {r4,lr}
  37              	.LCFI0:
  38              	 .cfi_def_cfa_offset 8
  39              	 .cfi_offset 4,-8
  40              	 .cfi_offset 14,-4
  41              	 .loc 1 125 0
  42 0004 9842     	 cmp r0,r3
 123:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
  43              	 .loc 1 123 0
  44 0006 0446     	 mov r4,r0
 126:../Libraries/XMCLib/src/xmc_dma.c ****   {
 127:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 128:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 129:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 130:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 131:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
  45              	 .loc 1 131 0
  46 0008 0CBF     	 ite eq
  47 000a 0548     	 ldreq r0,.L5+4
  48              	.LVL1:
 132:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 133:../Libraries/XMCLib/src/xmc_dma.c ****   }
 134:../Libraries/XMCLib/src/xmc_dma.c ****   else
 135:../Libraries/XMCLib/src/xmc_dma.c ****   {
 136:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 137:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 138:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 139:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
  49              	 .loc 1 139 0
  50 000c 0548     	 ldrne r0,.L5+8
  51 000e FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
  52              	.LVL2:
 140:../Libraries/XMCLib/src/xmc_dma.c ****   }
 141:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 142:../Libraries/XMCLib/src/xmc_dma.c **** 
 143:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
  53              	 .loc 1 143 0
  54 0012 0123     	 movs r3,#1
  55 0014 C4F89833 	 str r3,[r4,#920]
  56 0018 10BD     	 pop {r4,pc}
  57              	.LVL3:
  58              	.L6:
  59 001a 00BF     	 .align 2
  60              	.L5:
  61 001c 00400150 	 .word 1342259200
  62 0020 10000020 	 .word 536870928
  63 0024 20000020 	 .word 536870944
  64              	 .cfi_endproc
  65              	.LFE189:
  67              	 .section .text.XMC_DMA_Init,"ax",%progbits
  68              	 .align 1
  69              	 .global XMC_DMA_Init
  70              	 .thumb
  71              	 .thumb_func
  73              	XMC_DMA_Init:
  74              	.LFB188:
 117:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
  75              	 .loc 1 117 0
  76              	 .cfi_startproc
  77              	 
  78              	 
  79              	 
  80              	.LVL4:
 118:../Libraries/XMCLib/src/xmc_dma.c **** }
  81              	 .loc 1 118 0
  82 0000 FFF7FEBF 	 b XMC_DMA_Enable
  83              	.LVL5:
  84              	 .cfi_endproc
  85              	.LFE188:
  87              	 .section .text.XMC_DMA_Disable,"ax",%progbits
  88              	 .align 1
  89              	 .global XMC_DMA_Disable
  90              	 .thumb
  91              	 .thumb_func
  93              	XMC_DMA_Disable:
  94              	.LFB190:
 144:../Libraries/XMCLib/src/xmc_dma.c **** }
 145:../Libraries/XMCLib/src/xmc_dma.c **** 
 146:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 147:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 148:../Libraries/XMCLib/src/xmc_dma.c **** {
  95              	 .loc 1 148 0
  96              	 .cfi_startproc
  97              	 
  98              	 
  99              	 
 100              	.LVL6:
 149:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 101              	 .loc 1 149 0
 102 0000 0023     	 movs r3,#0
 103 0002 C0F89833 	 str r3,[r0,#920]
 150:../Libraries/XMCLib/src/xmc_dma.c **** 
 151:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 152:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 104              	 .loc 1 152 0
 105 0006 034B     	 ldr r3,.L11
 106 0008 9842     	 cmp r0,r3
 153:../Libraries/XMCLib/src/xmc_dma.c ****   {
 154:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 155:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 107              	 .loc 1 155 0
 108 000a 0CBF     	 ite eq
 109 000c 0248     	 ldreq r0,.L11+4
 110              	.LVL7:
 156:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 157:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 158:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 159:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 160:../Libraries/XMCLib/src/xmc_dma.c ****   }
 161:../Libraries/XMCLib/src/xmc_dma.c ****   else
 162:../Libraries/XMCLib/src/xmc_dma.c ****   {
 163:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 111              	 .loc 1 163 0
 112 000e 0348     	 ldrne r0,.L11+8
 113 0010 FFF7FEBF 	 b XMC_SCU_RESET_AssertPeripheralReset
 114              	.LVL8:
 115              	.L12:
 116              	 .align 2
 117              	.L11:
 118 0014 00400150 	 .word 1342259200
 119 0018 10000020 	 .word 536870928
 120 001c 20000020 	 .word 536870944
 121              	 .cfi_endproc
 122              	.LFE190:
 124              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 125              	 .align 1
 126              	 .global XMC_DMA_IsEnabled
 127              	 .thumb
 128              	 .thumb_func
 130              	XMC_DMA_IsEnabled:
 131              	.LFB191:
 164:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 165:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 166:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 167:../Libraries/XMCLib/src/xmc_dma.c ****   }
 168:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 169:../Libraries/XMCLib/src/xmc_dma.c **** }
 170:../Libraries/XMCLib/src/xmc_dma.c **** 
 171:../Libraries/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 172:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 173:../Libraries/XMCLib/src/xmc_dma.c **** {
 132              	 .loc 1 173 0
 133              	 .cfi_startproc
 134              	 
 135              	 
 136              	.LVL9:
 174:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 175:../Libraries/XMCLib/src/xmc_dma.c **** 
 176:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 177:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 137              	 .loc 1 177 0
 138 0000 094B     	 ldr r3,.L22
 139 0002 9842     	 cmp r0,r3
 173:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 140              	 .loc 1 173 0
 141 0004 10B5     	 push {r4,lr}
 142              	.LCFI1:
 143              	 .cfi_def_cfa_offset 8
 144              	 .cfi_offset 4,-8
 145              	 .cfi_offset 14,-4
 173:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 146              	 .loc 1 173 0
 147 0006 0446     	 mov r4,r0
 178:../Libraries/XMCLib/src/xmc_dma.c ****   {
 179:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 180:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 148              	 .loc 1 180 0
 149 0008 0CBF     	 ite eq
 150 000a 0848     	 ldreq r0,.L22+4
 151              	.LVL10:
 181:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 182:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 183:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 184:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 185:../Libraries/XMCLib/src/xmc_dma.c ****   }
 186:../Libraries/XMCLib/src/xmc_dma.c ****   else
 187:../Libraries/XMCLib/src/xmc_dma.c ****   {
 188:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 152              	 .loc 1 188 0
 153 000c 0848     	 ldrne r0,.L22+8
 154 000e FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 155              	.LVL11:
 156 0012 80F00100 	 eor r0,r0,#1
 157 0016 C0B2     	 uxtb r0,r0
 158              	.LVL12:
 189:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 190:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 191:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 192:../Libraries/XMCLib/src/xmc_dma.c ****   }
 193:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 194:../Libraries/XMCLib/src/xmc_dma.c **** 
 195:../Libraries/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 196:../Libraries/XMCLib/src/xmc_dma.c ****   if (status == true)
 159              	 .loc 1 196 0
 160 0018 28B1     	 cbz r0,.L21
 197:../Libraries/XMCLib/src/xmc_dma.c ****   {
 198:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 161              	 .loc 1 198 0 discriminator 1
 162 001a D4F89803 	 ldr r0,[r4,#920]
 163              	.LVL13:
 164 001e 0030     	 adds r0,r0,#0
 165 0020 18BF     	 it ne
 166 0022 0120     	 movne r0,#1
 167              	.LVL14:
 168 0024 10BD     	 pop {r4,pc}
 169              	.LVL15:
 170              	.L21:
 199:../Libraries/XMCLib/src/xmc_dma.c ****   }
 200:../Libraries/XMCLib/src/xmc_dma.c **** 
 201:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 202:../Libraries/XMCLib/src/xmc_dma.c **** }
 171              	 .loc 1 202 0
 172 0026 10BD     	 pop {r4,pc}
 173              	.LVL16:
 174              	.L23:
 175              	 .align 2
 176              	.L22:
 177 0028 00400150 	 .word 1342259200
 178 002c 10000020 	 .word 536870928
 179 0030 20000020 	 .word 536870944
 180              	 .cfi_endproc
 181              	.LFE191:
 183              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 184              	 .align 1
 185              	 .global XMC_DMA_EnableRequestLine
 186              	 .thumb
 187              	 .thumb_func
 189              	XMC_DMA_EnableRequestLine:
 190              	.LFB192:
 203:../Libraries/XMCLib/src/xmc_dma.c **** 
 204:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable request line */
 205:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 206:../Libraries/XMCLib/src/xmc_dma.c **** {
 191              	 .loc 1 206 0
 192              	 .cfi_startproc
 193              	 
 194              	 
 195              	.LVL17:
 207:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 208:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 196              	 .loc 1 208 0
 197 0000 114B     	 ldr r3,.L28
 198 0002 9842     	 cmp r0,r3
 206:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 199              	 .loc 1 206 0
 200 0004 30B5     	 push {r4,r5,lr}
 201              	.LCFI2:
 202              	 .cfi_def_cfa_offset 12
 203              	 .cfi_offset 4,-12
 204              	 .cfi_offset 5,-8
 205              	 .cfi_offset 14,-4
 206 0006 1148     	 ldr r0,.L28+4
 207              	.LVL18:
 208 0008 0BB2     	 sxth r3,r1
 209              	 .loc 1 208 0
 210 000a 0DD1     	 bne .L25
 211              	.LVL19:
 212              	.LBB18:
 213              	.LBB19:
 209:../Libraries/XMCLib/src/xmc_dma.c ****   {
 210:../Libraries/XMCLib/src/xmc_dma.c **** #else
 211:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 212:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 213:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 214              	 .loc 1 213 0
 215 000c 8568     	 ldr r5,[r0,#8]
 216 000e 9B00     	 lsls r3,r3,#2
 217 0010 0F24     	 movs r4,#15
 218 0012 9C40     	 lsls r4,r4,r3
 214:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 219              	 .loc 1 214 0
 220 0014 9A40     	 lsls r2,r2,r3
 221              	.LVL20:
 213:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 222              	 .loc 1 213 0
 223 0016 25EA0404 	 bic r4,r5,r4
 224 001a 2243     	 orrs r2,r2,r4
 225 001c 8260     	 str r2,[r0,#8]
 215:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 226              	 .loc 1 215 0
 227 001e 0269     	 ldr r2,[r0,#16]
 228 0020 01F00701 	 and r1,r1,#7
 229              	.LVL21:
 230 0024 0123     	 movs r3,#1
 231 0026 0BE0     	 b .L27
 232              	.LVL22:
 233              	.L25:
 234              	.LBE19:
 235              	.LBE18:
 216:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 217:../Libraries/XMCLib/src/xmc_dma.c ****   }
 218:../Libraries/XMCLib/src/xmc_dma.c ****   else
 219:../Libraries/XMCLib/src/xmc_dma.c ****   {
 220:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 236              	 .loc 1 220 0
 237 0028 C568     	 ldr r5,[r0,#12]
 238 002a 9B00     	 lsls r3,r3,#2
 239 002c 0F24     	 movs r4,#15
 240 002e 9C40     	 lsls r4,r4,r3
 221:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 241              	 .loc 1 221 0
 242 0030 9A40     	 lsls r2,r2,r3
 243              	.LVL23:
 220:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 244              	 .loc 1 220 0
 245 0032 25EA0404 	 bic r4,r5,r4
 246 0036 2243     	 orrs r2,r2,r4
 247 0038 C260     	 str r2,[r0,#12]
 222:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 248              	 .loc 1 222 0
 249 003a 0269     	 ldr r2,[r0,#16]
 250 003c 4FF48073 	 mov r3,#256
 251              	.LVL24:
 252              	.L27:
 253 0040 8B40     	 lsls r3,r3,r1
 254 0042 1343     	 orrs r3,r3,r2
 255 0044 0361     	 str r3,[r0,#16]
 256 0046 30BD     	 pop {r4,r5,pc}
 257              	.L29:
 258              	 .align 2
 259              	.L28:
 260 0048 00400150 	 .word 1342259200
 261 004c 00490050 	 .word 1342195968
 262              	 .cfi_endproc
 263              	.LFE192:
 265              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 266              	 .align 1
 267              	 .global XMC_DMA_DisableRequestLine
 268              	 .thumb
 269              	 .thumb_func
 271              	XMC_DMA_DisableRequestLine:
 272              	.LFB193:
 223:../Libraries/XMCLib/src/xmc_dma.c ****   }
 224:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 225:../Libraries/XMCLib/src/xmc_dma.c **** }
 226:../Libraries/XMCLib/src/xmc_dma.c **** 
 227:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 228:../Libraries/XMCLib/src/xmc_dma.c **** {
 273              	 .loc 1 228 0
 274              	 .cfi_startproc
 275              	 
 276              	 
 277              	 
 278              	.LVL25:
 229:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 230:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 279              	 .loc 1 230 0
 280 0000 074B     	 ldr r3,.L34
 281 0002 9842     	 cmp r0,r3
 282 0004 A3F57743 	 sub r3,r3,#63232
 231:../Libraries/XMCLib/src/xmc_dma.c ****   {
 232:../Libraries/XMCLib/src/xmc_dma.c **** #else
 233:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 234:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 235:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 283              	 .loc 1 235 0
 284 0008 08BF     	 it eq
 285 000a 0122     	 moveq r2,#1
 286 000c 1869     	 ldr r0,[r3,#16]
 287              	.LVL26:
 236:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 237:../Libraries/XMCLib/src/xmc_dma.c ****   }
 238:../Libraries/XMCLib/src/xmc_dma.c ****   else
 239:../Libraries/XMCLib/src/xmc_dma.c ****   {
 240:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 288              	 .loc 1 240 0
 289 000e 18BF     	 it ne
 290 0010 4FF48072 	 movne r2,#256
 291 0014 8A40     	 lsls r2,r2,r1
 292 0016 20EA0202 	 bic r2,r0,r2
 293 001a 1A61     	 str r2,[r3,#16]
 294 001c 7047     	 bx lr
 295              	.L35:
 296 001e 00BF     	 .align 2
 297              	.L34:
 298 0020 00400150 	 .word 1342259200
 299              	 .cfi_endproc
 300              	.LFE193:
 302              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 303              	 .align 1
 304              	 .global XMC_DMA_ClearRequestLine
 305              	 .thumb
 306              	 .thumb_func
 308              	XMC_DMA_ClearRequestLine:
 309              	.LFB194:
 241:../Libraries/XMCLib/src/xmc_dma.c ****   }
 242:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 243:../Libraries/XMCLib/src/xmc_dma.c **** }
 244:../Libraries/XMCLib/src/xmc_dma.c **** 
 245:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 246:../Libraries/XMCLib/src/xmc_dma.c **** {
 310              	 .loc 1 246 0
 311              	 .cfi_startproc
 312              	 
 313              	 
 314              	 
 315              	.LVL27:
 247:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 248:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 316              	 .loc 1 248 0
 317 0000 084B     	 ldr r3,.L40
 318 0002 9842     	 cmp r0,r3
 319 0004 A3F57743 	 sub r3,r3,#63232
 320              	.LBB22:
 321              	.LBB23:
 249:../Libraries/XMCLib/src/xmc_dma.c ****   {
 250:../Libraries/XMCLib/src/xmc_dma.c **** #else
 251:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 252:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 253:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 322              	 .loc 1 253 0
 323 0008 08BF     	 it eq
 324 000a 0122     	 moveq r2,#1
 325 000c 1869     	 ldr r0,[r3,#16]
 326              	.LVL28:
 327              	.LBE23:
 328              	.LBE22:
 254:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x1UL << line;
 255:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 256:../Libraries/XMCLib/src/xmc_dma.c ****   }
 257:../Libraries/XMCLib/src/xmc_dma.c ****   else
 258:../Libraries/XMCLib/src/xmc_dma.c ****   {
 259:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 329              	 .loc 1 259 0
 330 000e 18BF     	 it ne
 331 0010 4FF48072 	 movne r2,#256
 332 0014 8A40     	 lsls r2,r2,r1
 333 0016 20EA0201 	 bic r1,r0,r2
 334              	.LVL29:
 335 001a 1961     	 str r1,[r3,#16]
 260:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x100UL << line;
 336              	 .loc 1 260 0
 337 001c 1969     	 ldr r1,[r3,#16]
 338 001e 0A43     	 orrs r2,r2,r1
 339 0020 1A61     	 str r2,[r3,#16]
 340 0022 7047     	 bx lr
 341              	.L41:
 342              	 .align 2
 343              	.L40:
 344 0024 00400150 	 .word 1342259200
 345              	 .cfi_endproc
 346              	.LFE194:
 348              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 349              	 .align 1
 350              	 .global XMC_DMA_GetOverrunStatus
 351              	 .thumb
 352              	 .thumb_func
 354              	XMC_DMA_GetOverrunStatus:
 355              	.LFB195:
 261:../Libraries/XMCLib/src/xmc_dma.c ****   }
 262:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 263:../Libraries/XMCLib/src/xmc_dma.c **** }
 264:../Libraries/XMCLib/src/xmc_dma.c **** 
 265:../Libraries/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 266:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 267:../Libraries/XMCLib/src/xmc_dma.c **** {
 356              	 .loc 1 267 0
 357              	 .cfi_startproc
 358              	 
 359              	 
 360              	 
 361              	.LVL30:
 268:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 269:../Libraries/XMCLib/src/xmc_dma.c **** 
 270:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 271:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 362              	 .loc 1 271 0
 363 0000 094B     	 ldr r3,.L45
 364 0002 9842     	 cmp r0,r3
 365 0004 A3F57743 	 sub r3,r3,#63232
 366 0008 04D1     	 bne .L43
 272:../Libraries/XMCLib/src/xmc_dma.c ****   {
 273:../Libraries/XMCLib/src/xmc_dma.c **** #else
 274:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 275:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 276:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 367              	 .loc 1 276 0
 368 000a 1868     	 ldr r0,[r3]
 369              	.LVL31:
 370 000c C840     	 lsrs r0,r0,r1
 371 000e 00F00100 	 and r0,r0,#1
 372              	.LVL32:
 373 0012 7047     	 bx lr
 374              	.LVL33:
 375              	.L43:
 277:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 278:../Libraries/XMCLib/src/xmc_dma.c ****   }
 279:../Libraries/XMCLib/src/xmc_dma.c ****   else
 280:../Libraries/XMCLib/src/xmc_dma.c ****   {
 281:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 376              	 .loc 1 281 0
 377 0014 1A68     	 ldr r2,[r3]
 378 0016 4FF48073 	 mov r3,#256
 379 001a 8B40     	 lsls r3,r3,r1
 380 001c 1342     	 tst r3,r2
 381 001e 14BF     	 ite ne
 382 0020 0120     	 movne r0,#1
 383              	.LVL34:
 384 0022 0020     	 moveq r0,#0
 385              	.LVL35:
 282:../Libraries/XMCLib/src/xmc_dma.c ****   }
 283:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 284:../Libraries/XMCLib/src/xmc_dma.c **** 
 285:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 286:../Libraries/XMCLib/src/xmc_dma.c **** }
 386              	 .loc 1 286 0
 387 0024 7047     	 bx lr
 388              	.L46:
 389 0026 00BF     	 .align 2
 390              	.L45:
 391 0028 00400150 	 .word 1342259200
 392              	 .cfi_endproc
 393              	.LFE195:
 395              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 396              	 .align 1
 397              	 .global XMC_DMA_ClearOverrunStatus
 398              	 .thumb
 399              	 .thumb_func
 401              	XMC_DMA_ClearOverrunStatus:
 402              	.LFB196:
 287:../Libraries/XMCLib/src/xmc_dma.c **** 
 288:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 289:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 290:../Libraries/XMCLib/src/xmc_dma.c **** {
 403              	 .loc 1 290 0
 404              	 .cfi_startproc
 405              	 
 406              	 
 407              	 
 408              	.LVL36:
 291:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 292:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 409              	 .loc 1 292 0
 410 0000 044B     	 ldr r3,.L51
 411 0002 054A     	 ldr r2,.L51+4
 412 0004 9842     	 cmp r0,r3
 293:../Libraries/XMCLib/src/xmc_dma.c ****   {
 294:../Libraries/XMCLib/src/xmc_dma.c **** #else
 295:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 296:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 297:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x1UL << line);
 413              	 .loc 1 297 0
 414 0006 0CBF     	 ite eq
 415 0008 0123     	 moveq r3,#1
 298:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 299:../Libraries/XMCLib/src/xmc_dma.c ****   }
 300:../Libraries/XMCLib/src/xmc_dma.c ****   else
 301:../Libraries/XMCLib/src/xmc_dma.c ****   {
 302:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x100UL << line);
 416              	 .loc 1 302 0
 417 000a 4FF48073 	 movne r3,#256
 418 000e 8B40     	 lsls r3,r3,r1
 419 0010 5360     	 str r3,[r2,#4]
 420 0012 7047     	 bx lr
 421              	.L52:
 422              	 .align 2
 423              	.L51:
 424 0014 00400150 	 .word 1342259200
 425 0018 00490050 	 .word 1342195968
 426              	 .cfi_endproc
 427              	.LFE196:
 429              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 430              	 .align 1
 431              	 .global XMC_DMA_CH_Disable
 432              	 .thumb
 433              	 .thumb_func
 435              	XMC_DMA_CH_Disable:
 436              	.LFB197:
 303:../Libraries/XMCLib/src/xmc_dma.c ****   }
 304:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 305:../Libraries/XMCLib/src/xmc_dma.c **** }
 306:../Libraries/XMCLib/src/xmc_dma.c **** 
 307:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 308:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 309:../Libraries/XMCLib/src/xmc_dma.c **** {
 437              	 .loc 1 309 0
 438              	 .cfi_startproc
 439              	 
 440              	 
 441              	 
 442              	.LVL37:
 310:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 443              	 .loc 1 310 0
 444 0000 4FF48073 	 mov r3,#256
 445 0004 8B40     	 lsls r3,r3,r1
 446 0006 C0F8A033 	 str r3,[r0,#928]
 447 000a 0123     	 movs r3,#1
 448 000c 8B40     	 lsls r3,r3,r1
 449              	.L54:
 311:../Libraries/XMCLib/src/xmc_dma.c ****   while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 450              	 .loc 1 311 0 discriminator 1
 451 000e D0F8A023 	 ldr r2,[r0,#928]
 452 0012 1342     	 tst r3,r2
 453 0014 FBD1     	 bne .L54
 312:../Libraries/XMCLib/src/xmc_dma.c ****   {
 313:../Libraries/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 314:../Libraries/XMCLib/src/xmc_dma.c ****   }
 315:../Libraries/XMCLib/src/xmc_dma.c **** }
 454              	 .loc 1 315 0
 455 0016 7047     	 bx lr
 456              	 .cfi_endproc
 457              	.LFE197:
 459              	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 460              	 .align 1
 461              	 .global XMC_DMA_CH_IsEnabled
 462              	 .thumb
 463              	 .thumb_func
 465              	XMC_DMA_CH_IsEnabled:
 466              	.LFB198:
 316:../Libraries/XMCLib/src/xmc_dma.c **** 
 317:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 318:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 319:../Libraries/XMCLib/src/xmc_dma.c **** {
 467              	 .loc 1 319 0
 468              	 .cfi_startproc
 469              	 
 470              	 
 471              	 
 472              	.LVL38:
 320:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 473              	 .loc 1 320 0
 474 0000 D0F8A003 	 ldr r0,[r0,#928]
 475              	.LVL39:
 476 0004 C840     	 lsrs r0,r0,r1
 321:../Libraries/XMCLib/src/xmc_dma.c **** }
 477              	 .loc 1 321 0
 478 0006 00F00100 	 and r0,r0,#1
 479 000a 7047     	 bx lr
 480              	 .cfi_endproc
 481              	.LFE198:
 483              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 484              	 .align 1
 485              	 .global XMC_DMA_CH_Suspend
 486              	 .thumb
 487              	 .thumb_func
 489              	XMC_DMA_CH_Suspend:
 490              	.LFB200:
 322:../Libraries/XMCLib/src/xmc_dma.c **** 
 323:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 324:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 325:../Libraries/XMCLib/src/xmc_dma.c **** {
 326:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 327:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t line;
 328:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 329:../Libraries/XMCLib/src/xmc_dma.c **** 
 330:../Libraries/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 331:../Libraries/XMCLib/src/xmc_dma.c ****   {
 332:../Libraries/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 333:../Libraries/XMCLib/src/xmc_dma.c ****     {
 334:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 335:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 336:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 337:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 338:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 339:../Libraries/XMCLib/src/xmc_dma.c **** 
 340:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 341:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 342:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 343:../Libraries/XMCLib/src/xmc_dma.c **** 
 344:../Libraries/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 345:../Libraries/XMCLib/src/xmc_dma.c ****       {
 346:../Libraries/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 347:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 348:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 349:../Libraries/XMCLib/src/xmc_dma.c ****       }
 350:../Libraries/XMCLib/src/xmc_dma.c **** 
 351:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 352:../Libraries/XMCLib/src/xmc_dma.c ****       {
 353:../Libraries/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 354:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 355:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 356:../Libraries/XMCLib/src/xmc_dma.c ****         {
 357:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 358:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 359:../Libraries/XMCLib/src/xmc_dma.c ****           {
 360:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 361:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 362:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 363:../Libraries/XMCLib/src/xmc_dma.c ****           }
 364:../Libraries/XMCLib/src/xmc_dma.c ****           else
 365:../Libraries/XMCLib/src/xmc_dma.c ****           {
 366:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 367:../Libraries/XMCLib/src/xmc_dma.c ****           }
 368:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 369:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 370:../Libraries/XMCLib/src/xmc_dma.c **** 
 371:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 372:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 373:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 374:../Libraries/XMCLib/src/xmc_dma.c ****         }
 375:../Libraries/XMCLib/src/xmc_dma.c ****       }
 376:../Libraries/XMCLib/src/xmc_dma.c **** 
 377:../Libraries/XMCLib/src/xmc_dma.c **** 
 378:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 379:../Libraries/XMCLib/src/xmc_dma.c ****       {
 380:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 381:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 382:../Libraries/XMCLib/src/xmc_dma.c ****         {
 383:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 384:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 385:../Libraries/XMCLib/src/xmc_dma.c ****           {
 386:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 387:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 388:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 389:../Libraries/XMCLib/src/xmc_dma.c ****           }
 390:../Libraries/XMCLib/src/xmc_dma.c ****           else
 391:../Libraries/XMCLib/src/xmc_dma.c ****           {
 392:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 393:../Libraries/XMCLib/src/xmc_dma.c ****           }
 394:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 395:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 396:../Libraries/XMCLib/src/xmc_dma.c **** 
 397:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 398:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 399:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 400:../Libraries/XMCLib/src/xmc_dma.c ****         }
 401:../Libraries/XMCLib/src/xmc_dma.c ****       }
 402:../Libraries/XMCLib/src/xmc_dma.c ****       
 403:../Libraries/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 404:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 405:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 406:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 407:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 408:../Libraries/XMCLib/src/xmc_dma.c **** 
 409:../Libraries/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 410:../Libraries/XMCLib/src/xmc_dma.c ****       {
 411:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 412:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 413:../Libraries/XMCLib/src/xmc_dma.c **** 
 414:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 415:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 416:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 417:../Libraries/XMCLib/src/xmc_dma.c **** 
 418:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 419:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 420:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 421:../Libraries/XMCLib/src/xmc_dma.c **** 
 422:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 423:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 424:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 425:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 426:../Libraries/XMCLib/src/xmc_dma.c **** 
 427:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 428:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 429:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 430:../Libraries/XMCLib/src/xmc_dma.c **** 
 431:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 432:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 433:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 434:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 435:../Libraries/XMCLib/src/xmc_dma.c **** 
 436:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 437:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 438:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 439:../Libraries/XMCLib/src/xmc_dma.c **** 
 440:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 441:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 442:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 443:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 444:../Libraries/XMCLib/src/xmc_dma.c **** 
 445:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 446:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 447:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 448:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 449:../Libraries/XMCLib/src/xmc_dma.c **** 
 450:../Libraries/XMCLib/src/xmc_dma.c ****         default:
 451:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 452:../Libraries/XMCLib/src/xmc_dma.c ****       }
 453:../Libraries/XMCLib/src/xmc_dma.c **** 
 454:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 455:../Libraries/XMCLib/src/xmc_dma.c **** 
 456:../Libraries/XMCLib/src/xmc_dma.c ****     }
 457:../Libraries/XMCLib/src/xmc_dma.c ****     else
 458:../Libraries/XMCLib/src/xmc_dma.c ****     {
 459:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 460:../Libraries/XMCLib/src/xmc_dma.c ****     }
 461:../Libraries/XMCLib/src/xmc_dma.c ****   }
 462:../Libraries/XMCLib/src/xmc_dma.c ****   else 
 463:../Libraries/XMCLib/src/xmc_dma.c ****   {
 464:../Libraries/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 465:../Libraries/XMCLib/src/xmc_dma.c ****   }
 466:../Libraries/XMCLib/src/xmc_dma.c ****   
 467:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 468:../Libraries/XMCLib/src/xmc_dma.c **** }
 469:../Libraries/XMCLib/src/xmc_dma.c **** 
 470:../Libraries/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 471:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 472:../Libraries/XMCLib/src/xmc_dma.c **** {
 491              	 .loc 1 472 0
 492              	 .cfi_startproc
 493              	 
 494              	 
 495              	 
 496              	.LVL40:
 473:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 497              	 .loc 1 473 0
 498 0000 5823     	 movs r3,#88
 499 0002 03FB0101 	 mla r1,r3,r1,r0
 500              	.LVL41:
 501 0006 0B6C     	 ldr r3,[r1,#64]
 502 0008 43F48073 	 orr r3,r3,#256
 503 000c 0B64     	 str r3,[r1,#64]
 504 000e 7047     	 bx lr
 505              	 .cfi_endproc
 506              	.LFE200:
 508              	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 509              	 .align 1
 510              	 .global XMC_DMA_CH_Resume
 511              	 .thumb
 512              	 .thumb_func
 514              	XMC_DMA_CH_Resume:
 515              	.LFB201:
 474:../Libraries/XMCLib/src/xmc_dma.c **** }
 475:../Libraries/XMCLib/src/xmc_dma.c **** 
 476:../Libraries/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 477:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 478:../Libraries/XMCLib/src/xmc_dma.c **** {
 516              	 .loc 1 478 0
 517              	 .cfi_startproc
 518              	 
 519              	 
 520              	 
 521              	.LVL42:
 479:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 522              	 .loc 1 479 0
 523 0000 5823     	 movs r3,#88
 524 0002 03FB0101 	 mla r1,r3,r1,r0
 525              	.LVL43:
 526 0006 0B6C     	 ldr r3,[r1,#64]
 527 0008 23F48073 	 bic r3,r3,#256
 528 000c 0B64     	 str r3,[r1,#64]
 529 000e 7047     	 bx lr
 530              	 .cfi_endproc
 531              	.LFE201:
 533              	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 534              	 .align 1
 535              	 .global XMC_DMA_CH_IsSuspended
 536              	 .thumb
 537              	 .thumb_func
 539              	XMC_DMA_CH_IsSuspended:
 540              	.LFB202:
 480:../Libraries/XMCLib/src/xmc_dma.c **** }
 481:../Libraries/XMCLib/src/xmc_dma.c **** 
 482:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 483:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 484:../Libraries/XMCLib/src/xmc_dma.c **** {
 541              	 .loc 1 484 0
 542              	 .cfi_startproc
 543              	 
 544              	 
 545              	 
 546              	.LVL44:
 485:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 547              	 .loc 1 485 0
 548 0000 5823     	 movs r3,#88
 549 0002 03FB0101 	 mla r1,r3,r1,r0
 550              	.LVL45:
 551 0006 086C     	 ldr r0,[r1,#64]
 552              	.LVL46:
 486:../Libraries/XMCLib/src/xmc_dma.c **** }
 553              	 .loc 1 486 0
 554 0008 C0F30020 	 ubfx r0,r0,#8,#1
 555 000c 7047     	 bx lr
 556              	 .cfi_endproc
 557              	.LFE202:
 559              	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 560              	 .align 1
 561              	 .global XMC_DMA_CH_EnableEvent
 562              	 .thumb
 563              	 .thumb_func
 565              	XMC_DMA_CH_EnableEvent:
 566              	.LFB203:
 487:../Libraries/XMCLib/src/xmc_dma.c **** 
 488:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 489:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 490:../Libraries/XMCLib/src/xmc_dma.c **** {
 567              	 .loc 1 490 0
 568              	 .cfi_startproc
 569              	 
 570              	 
 571              	.LVL47:
 572 0000 10B5     	 push {r4,lr}
 573              	.LCFI3:
 574              	 .cfi_def_cfa_offset 8
 575              	 .cfi_offset 4,-8
 576              	 .cfi_offset 14,-4
 491:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 492:../Libraries/XMCLib/src/xmc_dma.c **** 
 493:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 494:../Libraries/XMCLib/src/xmc_dma.c ****   {
 495:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 496:../Libraries/XMCLib/src/xmc_dma.c ****     {
 497:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 577              	 .loc 1 497 0
 578 0002 40F20113 	 movw r3,#257
 579 0006 03FA01F1 	 lsl r1,r3,r1
 580              	.LVL48:
 493:../Libraries/XMCLib/src/xmc_dma.c ****   {
 581              	 .loc 1 493 0
 582 000a 0023     	 movs r3,#0
 583              	.LVL49:
 584              	.L62:
 495:../Libraries/XMCLib/src/xmc_dma.c ****     {
 585              	 .loc 1 495 0
 586 000c 22FA03F4 	 lsr r4,r2,r3
 587 0010 E407     	 lsls r4,r4,#31
 588 0012 44BF     	 itt mi
 589 0014 5C00     	 lslmi r4,r3,#1
 590              	 .loc 1 497 0
 591 0016 C434     	 addmi r4,r4,#196
 493:../Libraries/XMCLib/src/xmc_dma.c ****   {
 592              	 .loc 1 493 0
 593 0018 03F10103 	 add r3,r3,#1
 594              	.LVL50:
 595              	 .loc 1 497 0
 596 001c 48BF     	 it mi
 597 001e 40F82410 	 strmi r1,[r0,r4,lsl#2]
 493:../Libraries/XMCLib/src/xmc_dma.c ****   {
 598              	 .loc 1 493 0
 599 0022 052B     	 cmp r3,#5
 600 0024 F2D1     	 bne .L62
 498:../Libraries/XMCLib/src/xmc_dma.c ****     }
 499:../Libraries/XMCLib/src/xmc_dma.c ****   }
 500:../Libraries/XMCLib/src/xmc_dma.c **** }
 601              	 .loc 1 500 0
 602 0026 10BD     	 pop {r4,pc}
 603              	 .cfi_endproc
 604              	.LFE203:
 606              	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 607              	 .align 1
 608              	 .global XMC_DMA_CH_DisableEvent
 609              	 .thumb
 610              	 .thumb_func
 612              	XMC_DMA_CH_DisableEvent:
 613              	.LFB204:
 501:../Libraries/XMCLib/src/xmc_dma.c **** 
 502:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 503:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 504:../Libraries/XMCLib/src/xmc_dma.c **** {
 614              	 .loc 1 504 0
 615              	 .cfi_startproc
 616              	 
 617              	 
 618              	.LVL51:
 619 0000 10B5     	 push {r4,lr}
 620              	.LCFI4:
 621              	 .cfi_def_cfa_offset 8
 622              	 .cfi_offset 4,-8
 623              	 .cfi_offset 14,-4
 505:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 506:../Libraries/XMCLib/src/xmc_dma.c **** 
 507:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 508:../Libraries/XMCLib/src/xmc_dma.c ****   {
 509:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 510:../Libraries/XMCLib/src/xmc_dma.c ****     {
 511:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 624              	 .loc 1 511 0
 625 0002 4FF48073 	 mov r3,#256
 626 0006 03FA01F1 	 lsl r1,r3,r1
 627              	.LVL52:
 507:../Libraries/XMCLib/src/xmc_dma.c ****   {
 628              	 .loc 1 507 0
 629 000a 0023     	 movs r3,#0
 630              	.LVL53:
 631              	.L69:
 509:../Libraries/XMCLib/src/xmc_dma.c ****     {
 632              	 .loc 1 509 0
 633 000c 22FA03F4 	 lsr r4,r2,r3
 634 0010 E407     	 lsls r4,r4,#31
 635 0012 44BF     	 itt mi
 636 0014 5C00     	 lslmi r4,r3,#1
 637              	 .loc 1 511 0
 638 0016 C434     	 addmi r4,r4,#196
 507:../Libraries/XMCLib/src/xmc_dma.c ****   {
 639              	 .loc 1 507 0
 640 0018 03F10103 	 add r3,r3,#1
 641              	.LVL54:
 642              	 .loc 1 511 0
 643 001c 48BF     	 it mi
 644 001e 40F82410 	 strmi r1,[r0,r4,lsl#2]
 507:../Libraries/XMCLib/src/xmc_dma.c ****   {
 645              	 .loc 1 507 0
 646 0022 052B     	 cmp r3,#5
 647 0024 F2D1     	 bne .L69
 512:../Libraries/XMCLib/src/xmc_dma.c ****     }
 513:../Libraries/XMCLib/src/xmc_dma.c ****   }
 514:../Libraries/XMCLib/src/xmc_dma.c **** }
 648              	 .loc 1 514 0
 649 0026 10BD     	 pop {r4,pc}
 650              	 .cfi_endproc
 651              	.LFE204:
 653              	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 654              	 .align 1
 655              	 .global XMC_DMA_CH_ClearEventStatus
 656              	 .thumb
 657              	 .thumb_func
 659              	XMC_DMA_CH_ClearEventStatus:
 660              	.LFB205:
 515:../Libraries/XMCLib/src/xmc_dma.c **** 
 516:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 517:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 518:../Libraries/XMCLib/src/xmc_dma.c **** {
 661              	 .loc 1 518 0
 662              	 .cfi_startproc
 663              	 
 664              	 
 665              	.LVL55:
 666 0000 10B5     	 push {r4,lr}
 667              	.LCFI5:
 668              	 .cfi_def_cfa_offset 8
 669              	 .cfi_offset 4,-8
 670              	 .cfi_offset 14,-4
 519:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 520:../Libraries/XMCLib/src/xmc_dma.c **** 
 521:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 522:../Libraries/XMCLib/src/xmc_dma.c ****   {
 523:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 524:../Libraries/XMCLib/src/xmc_dma.c ****     {
 525:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 671              	 .loc 1 525 0
 672 0002 0123     	 movs r3,#1
 673 0004 03FA01F1 	 lsl r1,r3,r1
 674              	.LVL56:
 521:../Libraries/XMCLib/src/xmc_dma.c ****   {
 675              	 .loc 1 521 0
 676 0008 0023     	 movs r3,#0
 677              	.LVL57:
 678              	.L76:
 523:../Libraries/XMCLib/src/xmc_dma.c ****     {
 679              	 .loc 1 523 0
 680 000a 22FA03F4 	 lsr r4,r2,r3
 681 000e E407     	 lsls r4,r4,#31
 682 0010 44BF     	 itt mi
 683 0012 5C00     	 lslmi r4,r3,#1
 684              	 .loc 1 525 0
 685 0014 CE34     	 addmi r4,r4,#206
 521:../Libraries/XMCLib/src/xmc_dma.c ****   {
 686              	 .loc 1 521 0
 687 0016 03F10103 	 add r3,r3,#1
 688              	.LVL58:
 689              	 .loc 1 525 0
 690 001a 48BF     	 it mi
 691 001c 40F82410 	 strmi r1,[r0,r4,lsl#2]
 521:../Libraries/XMCLib/src/xmc_dma.c ****   {
 692              	 .loc 1 521 0
 693 0020 052B     	 cmp r3,#5
 694 0022 F2D1     	 bne .L76
 526:../Libraries/XMCLib/src/xmc_dma.c ****     }
 527:../Libraries/XMCLib/src/xmc_dma.c ****   }
 528:../Libraries/XMCLib/src/xmc_dma.c **** 
 529:../Libraries/XMCLib/src/xmc_dma.c **** }
 695              	 .loc 1 529 0
 696 0024 10BD     	 pop {r4,pc}
 697              	 .cfi_endproc
 698              	.LFE205:
 700              	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 701              	 .align 1
 702              	 .global XMC_DMA_CH_Init
 703              	 .thumb
 704              	 .thumb_func
 706              	XMC_DMA_CH_Init:
 707              	.LFB199:
 325:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 708              	 .loc 1 325 0
 709              	 .cfi_startproc
 710              	 
 711              	 
 712              	.LVL59:
 713 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 714              	.LCFI6:
 715              	 .cfi_def_cfa_offset 24
 716              	 .cfi_offset 3,-24
 717              	 .cfi_offset 4,-20
 718              	 .cfi_offset 5,-16
 719              	 .cfi_offset 6,-12
 720              	 .cfi_offset 7,-8
 721              	 .cfi_offset 14,-4
 325:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 722              	 .loc 1 325 0
 723 0002 0446     	 mov r4,r0
 724 0004 0D46     	 mov r5,r1
 725 0006 1646     	 mov r6,r2
 330:../Libraries/XMCLib/src/xmc_dma.c ****   {
 726              	 .loc 1 330 0
 727 0008 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 728              	.LVL60:
 729 000c 0028     	 cmp r0,#0
 730 000e 00F0A880 	 beq .L99
 731              	.LVL61:
 732              	.LBB24:
 733              	.LBB25:
 320:../Libraries/XMCLib/src/xmc_dma.c **** }
 734              	 .loc 1 320 0
 735 0012 D4F8A033 	 ldr r3,[r4,#928]
 736 0016 EB40     	 lsrs r3,r3,r5
 737              	.LBE25:
 738              	.LBE24:
 332:../Libraries/XMCLib/src/xmc_dma.c ****     {
 739              	 .loc 1 332 0
 740 0018 DB07     	 lsls r3,r3,#31
 741 001a 00F1A480 	 bmi .L100
 334:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 742              	 .loc 1 334 0
 743 001e 5822     	 movs r2,#88
 744 0020 6A43     	 muls r2,r5,r2
 745 0022 7168     	 ldr r1,[r6,#4]
 746 0024 A150     	 str r1,[r4,r2]
 747 0026 A318     	 adds r3,r4,r2
 335:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 748              	 .loc 1 335 0
 749 0028 B268     	 ldr r2,[r6,#8]
 750 002a 9A60     	 str r2,[r3,#8]
 337:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 751              	 .loc 1 337 0
 752 002c 318B     	 ldrh r1,[r6,#24]
 336:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 753              	 .loc 1 336 0
 754 002e F268     	 ldr r2,[r6,#12]
 755 0030 1A61     	 str r2,[r3,#16]
 337:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 756              	 .loc 1 337 0
 757 0032 D961     	 str r1,[r3,#28]
 338:../Libraries/XMCLib/src/xmc_dma.c **** 
 758              	 .loc 1 338 0
 759 0034 3268     	 ldr r2,[r6]
 760 0036 9A61     	 str r2,[r3,#24]
 340:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 761              	 .loc 1 340 0
 762 0038 F27E     	 ldrb r2,[r6,#27]
 763 003a 42F44062 	 orr r2,r2,#3072
 764 003e 1A64     	 str r2,[r3,#64]
 344:../Libraries/XMCLib/src/xmc_dma.c ****       {
 765              	 .loc 1 344 0
 766 0040 4B4A     	 ldr r2,.L106
 767 0042 9442     	 cmp r4,r2
 768 0044 05D1     	 bne .L83
 344:../Libraries/XMCLib/src/xmc_dma.c ****       {
 769              	 .loc 1 344 0 is_stmt 0 discriminator 1
 770 0046 012D     	 cmp r5,#1
 347:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 771              	 .loc 1 347 0 is_stmt 1 discriminator 1
 772 0048 9FBF     	 itttt ls
 773 004a 3269     	 ldrls r2,[r6,#16]
 774 004c 9A64     	 strls r2,[r3,#72]
 348:../Libraries/XMCLib/src/xmc_dma.c ****       }
 775              	 .loc 1 348 0 discriminator 1
 776 004e 7269     	 ldrls r2,[r6,#20]
 777 0050 1A65     	 strls r2,[r3,#80]
 778              	.L83:
 351:../Libraries/XMCLib/src/xmc_dma.c ****       {
 779              	 .loc 1 351 0
 780 0052 338C     	 ldrh r3,[r6,#32]
 781 0054 E3B9     	 cbnz r3,.L84
 354:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 782              	 .loc 1 354 0
 783 0056 B378     	 ldrb r3,[r6,#2]
 784 0058 03F05003 	 and r3,r3,#80
 785 005c 102B     	 cmp r3,#16
 786 005e 17D1     	 bne .L84
 371:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 787              	 .loc 1 371 0
 788 0060 5827     	 movs r7,#88
 789 0062 07FB0547 	 mla r7,r7,r5,r4
 358:../Libraries/XMCLib/src/xmc_dma.c ****           {
 790              	 .loc 1 358 0
 791 0066 424B     	 ldr r3,.L106
 792 0068 96F82220 	 ldrb r2,[r6,#34]
 793 006c 9C42     	 cmp r4,r3
 371:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 794              	 .loc 1 371 0
 795 006e 7B6C     	 ldr r3,[r7,#68]
 361:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 796              	 .loc 1 361 0
 797 0070 0CBF     	 ite eq
 798 0072 02F00701 	 andeq r1,r2,#7
 799              	.LVL62:
 366:../Libraries/XMCLib/src/xmc_dma.c ****           }
 800              	 .loc 1 366 0
 801 0076 02F00301 	 andne r1,r2,#3
 802              	.LVL63:
 371:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 803              	 .loc 1 371 0
 804 007a 43EAC123 	 orr r3,r3,r1,lsl#11
 805 007e 7B64     	 str r3,[r7,#68]
 372:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 806              	 .loc 1 372 0
 807 0080 2046     	 mov r0,r4
 808 0082 1209     	 lsrs r2,r2,#4
 809              	.LVL64:
 810 0084 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 811              	.LVL65:
 373:../Libraries/XMCLib/src/xmc_dma.c ****         }
 812              	 .loc 1 373 0
 813 0088 3B6C     	 ldr r3,[r7,#64]
 814 008a 23F48063 	 bic r3,r3,#1024
 815 008e 3B64     	 str r3,[r7,#64]
 816              	.L84:
 378:../Libraries/XMCLib/src/xmc_dma.c ****       {
 817              	 .loc 1 378 0
 818 0090 B38B     	 ldrh r3,[r6,#28]
 819 0092 DBB9     	 cbnz r3,.L87
 380:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 820              	 .loc 1 380 0
 821 0094 B378     	 ldrb r3,[r6,#2]
 822 0096 03F06003 	 and r3,r3,#96
 823 009a 202B     	 cmp r3,#32
 824 009c 16D1     	 bne .L87
 397:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 825              	 .loc 1 397 0
 826 009e 5827     	 movs r7,#88
 827 00a0 07FB0547 	 mla r7,r7,r5,r4
 384:../Libraries/XMCLib/src/xmc_dma.c ****           {
 828              	 .loc 1 384 0
 829 00a4 324B     	 ldr r3,.L106
 830 00a6 B27F     	 ldrb r2,[r6,#30]
 831 00a8 9C42     	 cmp r4,r3
 397:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 832              	 .loc 1 397 0
 833 00aa 7B6C     	 ldr r3,[r7,#68]
 387:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 834              	 .loc 1 387 0
 835 00ac 0CBF     	 ite eq
 836 00ae 02F00701 	 andeq r1,r2,#7
 837              	.LVL66:
 392:../Libraries/XMCLib/src/xmc_dma.c ****           }
 838              	 .loc 1 392 0
 839 00b2 02F00301 	 andne r1,r2,#3
 840              	.LVL67:
 397:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 841              	 .loc 1 397 0
 842 00b6 43EAC113 	 orr r3,r3,r1,lsl#7
 843 00ba 7B64     	 str r3,[r7,#68]
 398:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 844              	 .loc 1 398 0
 845 00bc 2046     	 mov r0,r4
 846 00be 1209     	 lsrs r2,r2,#4
 847              	.LVL68:
 848 00c0 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 849              	.LVL69:
 399:../Libraries/XMCLib/src/xmc_dma.c ****         }
 850              	 .loc 1 399 0
 851 00c4 3B6C     	 ldr r3,[r7,#64]
 852 00c6 23F40063 	 bic r3,r3,#2048
 853 00ca 3B64     	 str r3,[r7,#64]
 854              	.L87:
 403:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 855              	 .loc 1 403 0
 856 00cc 2046     	 mov r0,r4
 857 00ce 2946     	 mov r1,r5
 858 00d0 1F22     	 movs r2,#31
 859 00d2 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 860              	.LVL70:
 409:../Libraries/XMCLib/src/xmc_dma.c ****       {
 861              	 .loc 1 409 0
 862 00d6 B37E     	 ldrb r3,[r6,#26]
 863 00d8 013B     	 subs r3,r3,#1
 864 00da 072B     	 cmp r3,#7
 865 00dc 45D8     	 bhi .L101
 866 00de DFE803F0 	 tbb [pc,r3]
 867              	.L91:
 868 00e2 04       	 .byte (.L90-.L91)/2
 869 00e3 0B       	 .byte (.L92-.L91)/2
 870 00e4 13       	 .byte (.L93-.L91)/2
 871 00e5 1A       	 .byte (.L94-.L91)/2
 872 00e6 1E       	 .byte (.L95-.L91)/2
 873 00e7 29       	 .byte (.L96-.L91)/2
 874 00e8 2D       	 .byte (.L97-.L91)/2
 875 00e9 38       	 .byte (.L98-.L91)/2
 876              	 .p2align 1
 877              	.L90:
 415:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 878              	 .loc 1 415 0
 879 00ea 5823     	 movs r3,#88
 880 00ec 03FB0544 	 mla r4,r3,r5,r4
 881              	.LVL71:
 882 00f0 236C     	 ldr r3,[r4,#64]
 883 00f2 43F00043 	 orr r3,r3,#-2147483648
 884 00f6 05E0     	 b .L103
 885              	.LVL72:
 886              	.L92:
 419:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 887              	 .loc 1 419 0
 888 00f8 5823     	 movs r3,#88
 889 00fa 03FB0544 	 mla r4,r3,r5,r4
 890              	.LVL73:
 891 00fe 236C     	 ldr r3,[r4,#64]
 892 0100 43F08043 	 orr r3,r3,#1073741824
 893              	.L103:
 894 0104 2364     	 str r3,[r4,#64]
 895 0106 30E0     	 b .L101
 896              	.LVL74:
 897              	.L93:
 423:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 898              	 .loc 1 423 0
 899 0108 5823     	 movs r3,#88
 900 010a 03FB0544 	 mla r4,r3,r5,r4
 901              	.LVL75:
 902 010e 236C     	 ldr r3,[r4,#64]
 903 0110 43F04043 	 orr r3,r3,#-1073741824
 904 0114 F6E7     	 b .L103
 905              	.LVL76:
 906              	.L94:
 428:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 907              	 .loc 1 428 0
 908 0116 5823     	 movs r3,#88
 909 0118 03FB0544 	 mla r4,r3,r5,r4
 910              	.LVL77:
 911 011c 06E0     	 b .L105
 912              	.LVL78:
 913              	.L95:
 432:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 914              	 .loc 1 432 0
 915 011e 5823     	 movs r3,#88
 916 0120 03FB0544 	 mla r4,r3,r5,r4
 917              	.LVL79:
 918 0124 236C     	 ldr r3,[r4,#64]
 919 0126 43F08043 	 orr r3,r3,#1073741824
 920 012a 2364     	 str r3,[r4,#64]
 921              	.L105:
 433:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 922              	 .loc 1 433 0
 923 012c A369     	 ldr r3,[r4,#24]
 924 012e 43F00063 	 orr r3,r3,#134217728
 925 0132 14E0     	 b .L102
 926              	.LVL80:
 927              	.L96:
 437:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 928              	 .loc 1 437 0
 929 0134 5823     	 movs r3,#88
 930 0136 03FB0544 	 mla r4,r3,r5,r4
 931              	.LVL81:
 932 013a 06E0     	 b .L104
 933              	.LVL82:
 934              	.L97:
 441:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 935              	 .loc 1 441 0
 936 013c 5823     	 movs r3,#88
 937 013e 03FB0544 	 mla r4,r3,r5,r4
 938              	.LVL83:
 939 0142 236C     	 ldr r3,[r4,#64]
 940 0144 43F00043 	 orr r3,r3,#-2147483648
 941 0148 2364     	 str r3,[r4,#64]
 942              	.L104:
 442:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 943              	 .loc 1 442 0
 944 014a A369     	 ldr r3,[r4,#24]
 945 014c 43F08053 	 orr r3,r3,#268435456
 946 0150 05E0     	 b .L102
 947              	.LVL84:
 948              	.L98:
 446:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 949              	 .loc 1 446 0
 950 0152 5823     	 movs r3,#88
 951 0154 03FB0544 	 mla r4,r3,r5,r4
 952              	.LVL85:
 953 0158 A369     	 ldr r3,[r4,#24]
 954 015a 43F0C053 	 orr r3,r3,#402653184
 955              	.L102:
 956 015e A361     	 str r3,[r4,#24]
 957 0160 03E0     	 b .L101
 958              	.LVL86:
 959              	.L99:
 464:../Libraries/XMCLib/src/xmc_dma.c ****   }
 960              	 .loc 1 464 0
 961 0162 0120     	 movs r0,#1
 962 0164 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 963              	.LVL87:
 964              	.L100:
 459:../Libraries/XMCLib/src/xmc_dma.c ****     }
 965              	 .loc 1 459 0
 966 0166 0220     	 movs r0,#2
 967 0168 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 968              	.LVL88:
 969              	.L101:
 454:../Libraries/XMCLib/src/xmc_dma.c **** 
 970              	 .loc 1 454 0
 971 016a 0020     	 movs r0,#0
 972              	.LVL89:
 468:../Libraries/XMCLib/src/xmc_dma.c **** 
 973              	 .loc 1 468 0
 974 016c F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 975              	.LVL90:
 976              	.L107:
 977 016e 00BF     	 .align 2
 978              	.L106:
 979 0170 00400150 	 .word 1342259200
 980              	 .cfi_endproc
 981              	.LFE199:
 983              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 984              	 .align 1
 985              	 .global XMC_DMA_CH_GetEventStatus
 986              	 .thumb
 987              	 .thumb_func
 989              	XMC_DMA_CH_GetEventStatus:
 990              	.LFB206:
 530:../Libraries/XMCLib/src/xmc_dma.c **** 
 531:../Libraries/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 532:../Libraries/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 533:../Libraries/XMCLib/src/xmc_dma.c **** {
 991              	 .loc 1 533 0
 992              	 .cfi_startproc
 993              	 
 994              	 
 995              	.LVL91:
 996 0000 10B5     	 push {r4,lr}
 997              	.LCFI7:
 998              	 .cfi_def_cfa_offset 8
 999              	 .cfi_offset 4,-8
 1000              	 .cfi_offset 14,-4
 1001 0002 0124     	 movs r4,#1
 1002 0004 8C40     	 lsls r4,r4,r1
 534:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 535:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 1003              	 .loc 1 535 0
 1004 0006 0021     	 movs r1,#0
 1005              	.LVL92:
 536:../Libraries/XMCLib/src/xmc_dma.c **** 
 537:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1006              	 .loc 1 537 0
 1007 0008 0A46     	 mov r2,r1
 1008              	.LVL93:
 1009              	.L110:
 1010 000a 5300     	 lsls r3,r2,#1
 538:../Libraries/XMCLib/src/xmc_dma.c ****   {
 539:../Libraries/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 1011              	 .loc 1 539 0
 1012 000c BA33     	 adds r3,r3,#186
 1013 000e 50F82330 	 ldr r3,[r0,r3,lsl#2]
 1014 0012 2340     	 ands r3,r3,r4
 1015 0014 1CBF     	 itt ne
 1016 0016 0123     	 movne r3,#1
 1017 0018 9340     	 lslne r3,r3,r2
 537:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1018              	 .loc 1 537 0
 1019 001a 0132     	 adds r2,r2,#1
 1020              	.LVL94:
 1021 001c 052A     	 cmp r2,#5
 1022              	 .loc 1 539 0
 1023 001e 41EA0301 	 orr r1,r1,r3
 1024              	.LVL95:
 537:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1025              	 .loc 1 537 0
 1026 0022 F2D1     	 bne .L110
 540:../Libraries/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 541:../Libraries/XMCLib/src/xmc_dma.c ****   }
 542:../Libraries/XMCLib/src/xmc_dma.c **** 
 543:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 544:../Libraries/XMCLib/src/xmc_dma.c **** }
 1027              	 .loc 1 544 0
 1028 0024 0846     	 mov r0,r1
 1029              	.LVL96:
 1030 0026 10BD     	 pop {r4,pc}
 1031              	 .cfi_endproc
 1032              	.LFE206:
 1034              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 1035              	 .align 1
 1036              	 .global XMC_DMA_CH_EnableSourceGather
 1037              	 .thumb
 1038              	 .thumb_func
 1040              	XMC_DMA_CH_EnableSourceGather:
 1041              	.LFB207:
 545:../Libraries/XMCLib/src/xmc_dma.c **** 
 546:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 547:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 548:../Libraries/XMCLib/src/xmc_dma.c **** {
 1042              	 .loc 1 548 0
 1043              	 .cfi_startproc
 1044              	 
 1045              	 
 1046              	.LVL97:
 1047 0000 10B5     	 push {r4,lr}
 1048              	.LCFI8:
 1049              	 .cfi_def_cfa_offset 8
 1050              	 .cfi_offset 4,-8
 1051              	 .cfi_offset 14,-4
 549:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 1052              	 .loc 1 549 0
 1053 0002 5824     	 movs r4,#88
 1054 0004 04FB0101 	 mla r1,r4,r1,r0
 1055              	.LVL98:
 550:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 1056              	 .loc 1 550 0
 1057 0008 42EA0353 	 orr r3,r2,r3,lsl#20
 1058              	.LVL99:
 549:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 1059              	 .loc 1 549 0
 1060 000c 8869     	 ldr r0,[r1,#24]
 1061              	.LVL100:
 1062 000e 40F40030 	 orr r0,r0,#131072
 1063 0012 8861     	 str r0,[r1,#24]
 1064              	 .loc 1 550 0
 1065 0014 8B64     	 str r3,[r1,#72]
 1066 0016 10BD     	 pop {r4,pc}
 1067              	 .cfi_endproc
 1068              	.LFE207:
 1070              	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 1071              	 .align 1
 1072              	 .global XMC_DMA_CH_DisableSourceGather
 1073              	 .thumb
 1074              	 .thumb_func
 1076              	XMC_DMA_CH_DisableSourceGather:
 1077              	.LFB208:
 551:../Libraries/XMCLib/src/xmc_dma.c **** }
 552:../Libraries/XMCLib/src/xmc_dma.c **** 
 553:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 554:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 555:../Libraries/XMCLib/src/xmc_dma.c **** {
 1078              	 .loc 1 555 0
 1079              	 .cfi_startproc
 1080              	 
 1081              	 
 1082              	 
 1083              	.LVL101:
 556:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 1084              	 .loc 1 556 0
 1085 0000 5823     	 movs r3,#88
 1086 0002 03FB0101 	 mla r1,r3,r1,r0
 1087              	.LVL102:
 1088 0006 8B69     	 ldr r3,[r1,#24]
 1089 0008 23F40033 	 bic r3,r3,#131072
 1090 000c 8B61     	 str r3,[r1,#24]
 1091 000e 7047     	 bx lr
 1092              	 .cfi_endproc
 1093              	.LFE208:
 1095              	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 1096              	 .align 1
 1097              	 .global XMC_DMA_CH_EnableDestinationScatter
 1098              	 .thumb
 1099              	 .thumb_func
 1101              	XMC_DMA_CH_EnableDestinationScatter:
 1102              	.LFB209:
 557:../Libraries/XMCLib/src/xmc_dma.c **** }
 558:../Libraries/XMCLib/src/xmc_dma.c **** 
 559:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 560:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 561:../Libraries/XMCLib/src/xmc_dma.c **** {
 1103              	 .loc 1 561 0
 1104              	 .cfi_startproc
 1105              	 
 1106              	 
 1107              	.LVL103:
 1108 0000 10B5     	 push {r4,lr}
 1109              	.LCFI9:
 1110              	 .cfi_def_cfa_offset 8
 1111              	 .cfi_offset 4,-8
 1112              	 .cfi_offset 14,-4
 562:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 1113              	 .loc 1 562 0
 1114 0002 5824     	 movs r4,#88
 1115 0004 04FB0101 	 mla r1,r4,r1,r0
 1116              	.LVL104:
 563:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 1117              	 .loc 1 563 0
 1118 0008 42EA0353 	 orr r3,r2,r3,lsl#20
 1119              	.LVL105:
 562:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 1120              	 .loc 1 562 0
 1121 000c 8869     	 ldr r0,[r1,#24]
 1122              	.LVL106:
 1123 000e 40F48020 	 orr r0,r0,#262144
 1124 0012 8861     	 str r0,[r1,#24]
 1125              	 .loc 1 563 0
 1126 0014 0B65     	 str r3,[r1,#80]
 1127 0016 10BD     	 pop {r4,pc}
 1128              	 .cfi_endproc
 1129              	.LFE209:
 1131              	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 1132              	 .align 1
 1133              	 .global XMC_DMA_CH_DisableDestinationScatter
 1134              	 .thumb
 1135              	 .thumb_func
 1137              	XMC_DMA_CH_DisableDestinationScatter:
 1138              	.LFB210:
 564:../Libraries/XMCLib/src/xmc_dma.c **** }
 565:../Libraries/XMCLib/src/xmc_dma.c **** 
 566:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 567:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 568:../Libraries/XMCLib/src/xmc_dma.c **** {
 1139              	 .loc 1 568 0
 1140              	 .cfi_startproc
 1141              	 
 1142              	 
 1143              	 
 1144              	.LVL107:
 569:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 1145              	 .loc 1 569 0
 1146 0000 5823     	 movs r3,#88
 1147 0002 03FB0101 	 mla r1,r3,r1,r0
 1148              	.LVL108:
 1149 0006 8B69     	 ldr r3,[r1,#24]
 1150 0008 23F48023 	 bic r3,r3,#262144
 1151 000c 8B61     	 str r3,[r1,#24]
 1152 000e 7047     	 bx lr
 1153              	 .cfi_endproc
 1154              	.LFE210:
 1156              	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 1157              	 .align 1
 1158              	 .global XMC_DMA_CH_TriggerSourceRequest
 1159              	 .thumb
 1160              	 .thumb_func
 1162              	XMC_DMA_CH_TriggerSourceRequest:
 1163              	.LFB211:
 570:../Libraries/XMCLib/src/xmc_dma.c **** }
 571:../Libraries/XMCLib/src/xmc_dma.c **** 
 572:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 573:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 574:../Libraries/XMCLib/src/xmc_dma.c **** {
 1164              	 .loc 1 574 0
 1165              	 .cfi_startproc
 1166              	 
 1167              	 
 1168              	 
 1169              	.LVL109:
 575:../Libraries/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 1170              	 .loc 1 575 0
 1171 0000 22B9     	 cbnz r2,.L120
 576:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 577:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 1172              	 .loc 1 577 0
 1173 0002 40F20112 	 movw r2,#257
 1174              	.LVL110:
 1175 0006 8A40     	 lsls r2,r2,r1
 1176 0008 C0F87823 	 str r2,[r0,#888]
 1177              	.L120:
 1178 000c 40F20112 	 movw r2,#257
 578:../Libraries/XMCLib/src/xmc_dma.c ****   }
 579:../Libraries/XMCLib/src/xmc_dma.c **** 
 580:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 1179              	 .loc 1 580 0
 1180 0010 1BB1     	 cbz r3,.L121
 581:../Libraries/XMCLib/src/xmc_dma.c ****   {
 582:../Libraries/XMCLib/src/xmc_dma.c ****   dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 1181              	 .loc 1 582 0
 1182 0012 02FA01F3 	 lsl r3,r2,r1
 1183              	.LVL111:
 1184 0016 C0F88833 	 str r3,[r0,#904]
 1185              	.L121:
 583:../Libraries/XMCLib/src/xmc_dma.c ****   }
 584:../Libraries/XMCLib/src/xmc_dma.c ****   
 585:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 1186              	 .loc 1 585 0
 1187 001a 8A40     	 lsls r2,r2,r1
 1188 001c C0F86823 	 str r2,[r0,#872]
 1189 0020 7047     	 bx lr
 1190              	 .cfi_endproc
 1191              	.LFE211:
 1193              	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 1194              	 .align 1
 1195              	 .global XMC_DMA_CH_TriggerDestinationRequest
 1196              	 .thumb
 1197              	 .thumb_func
 1199              	XMC_DMA_CH_TriggerDestinationRequest:
 1200              	.LFB212:
 586:../Libraries/XMCLib/src/xmc_dma.c **** }
 587:../Libraries/XMCLib/src/xmc_dma.c **** 
 588:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 589:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 590:../Libraries/XMCLib/src/xmc_dma.c **** {
 1201              	 .loc 1 590 0
 1202              	 .cfi_startproc
 1203              	 
 1204              	 
 1205              	 
 1206              	.LVL112:
 591:../Libraries/XMCLib/src/xmc_dma.c ****   if(type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 1207              	 .loc 1 591 0
 1208 0000 22B9     	 cbnz r2,.L126
 592:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 593:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 1209              	 .loc 1 593 0
 1210 0002 40F20112 	 movw r2,#257
 1211              	.LVL113:
 1212 0006 8A40     	 lsls r2,r2,r1
 1213 0008 C0F88023 	 str r2,[r0,#896]
 1214              	.L126:
 1215 000c 40F20112 	 movw r2,#257
 594:../Libraries/XMCLib/src/xmc_dma.c ****   }
 595:../Libraries/XMCLib/src/xmc_dma.c **** 
 596:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 1216              	 .loc 1 596 0
 1217 0010 1BB1     	 cbz r3,.L127
 597:../Libraries/XMCLib/src/xmc_dma.c ****   {
 598:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 1218              	 .loc 1 598 0
 1219 0012 02FA01F3 	 lsl r3,r2,r1
 1220              	.LVL114:
 1221 0016 C0F89033 	 str r3,[r0,#912]
 1222              	.L127:
 599:../Libraries/XMCLib/src/xmc_dma.c ****   }
 600:../Libraries/XMCLib/src/xmc_dma.c **** 
 601:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 1223              	 .loc 1 601 0
 1224 001a 8A40     	 lsls r2,r2,r1
 1225 001c C0F87023 	 str r2,[r0,#880]
 1226 0020 7047     	 bx lr
 1227              	 .cfi_endproc
 1228              	.LFE212:
 1230              	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 1231              	 .align 1
 1232              	 .global XMC_DMA_CH_EnableSourceAddressReload
 1233              	 .thumb
 1234              	 .thumb_func
 1236              	XMC_DMA_CH_EnableSourceAddressReload:
 1237              	.LFB213:
 602:../Libraries/XMCLib/src/xmc_dma.c **** }
 603:../Libraries/XMCLib/src/xmc_dma.c **** 
 604:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 605:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 606:../Libraries/XMCLib/src/xmc_dma.c **** {
 1238              	 .loc 1 606 0
 1239              	 .cfi_startproc
 1240              	 
 1241              	 
 1242              	 
 1243              	.LVL115:
 607:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1244              	 .loc 1 607 0
 1245 0000 5823     	 movs r3,#88
 1246 0002 03FB0101 	 mla r1,r3,r1,r0
 1247              	.LVL116:
 1248 0006 0B6C     	 ldr r3,[r1,#64]
 1249 0008 43F08043 	 orr r3,r3,#1073741824
 1250 000c 0B64     	 str r3,[r1,#64]
 1251 000e 7047     	 bx lr
 1252              	 .cfi_endproc
 1253              	.LFE213:
 1255              	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 1256              	 .align 1
 1257              	 .global XMC_DMA_CH_DisableSourceAddressReload
 1258              	 .thumb
 1259              	 .thumb_func
 1261              	XMC_DMA_CH_DisableSourceAddressReload:
 1262              	.LFB214:
 608:../Libraries/XMCLib/src/xmc_dma.c **** }
 609:../Libraries/XMCLib/src/xmc_dma.c **** 
 610:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 611:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 612:../Libraries/XMCLib/src/xmc_dma.c **** {
 1263              	 .loc 1 612 0
 1264              	 .cfi_startproc
 1265              	 
 1266              	 
 1267              	 
 1268              	.LVL117:
 613:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1269              	 .loc 1 613 0
 1270 0000 5823     	 movs r3,#88
 1271 0002 03FB0101 	 mla r1,r3,r1,r0
 1272              	.LVL118:
 1273 0006 0B6C     	 ldr r3,[r1,#64]
 1274 0008 23F08043 	 bic r3,r3,#1073741824
 1275 000c 0B64     	 str r3,[r1,#64]
 1276 000e 7047     	 bx lr
 1277              	 .cfi_endproc
 1278              	.LFE214:
 1280              	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 1281              	 .align 1
 1282              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 1283              	 .thumb
 1284              	 .thumb_func
 1286              	XMC_DMA_CH_EnableDestinationAddressReload:
 1287              	.LFB215:
 614:../Libraries/XMCLib/src/xmc_dma.c **** }
 615:../Libraries/XMCLib/src/xmc_dma.c **** 
 616:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 617:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 618:../Libraries/XMCLib/src/xmc_dma.c **** {
 1288              	 .loc 1 618 0
 1289              	 .cfi_startproc
 1290              	 
 1291              	 
 1292              	 
 1293              	.LVL119:
 619:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1294              	 .loc 1 619 0
 1295 0000 5823     	 movs r3,#88
 1296 0002 03FB0101 	 mla r1,r3,r1,r0
 1297              	.LVL120:
 1298 0006 0B6C     	 ldr r3,[r1,#64]
 1299 0008 43F00043 	 orr r3,r3,#-2147483648
 1300 000c 0B64     	 str r3,[r1,#64]
 1301 000e 7047     	 bx lr
 1302              	 .cfi_endproc
 1303              	.LFE215:
 1305              	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 1306              	 .align 1
 1307              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 1308              	 .thumb
 1309              	 .thumb_func
 1311              	XMC_DMA_CH_DisableDestinationAddressReload:
 1312              	.LFB216:
 620:../Libraries/XMCLib/src/xmc_dma.c **** }
 621:../Libraries/XMCLib/src/xmc_dma.c **** 
 622:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 623:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 624:../Libraries/XMCLib/src/xmc_dma.c **** {
 1313              	 .loc 1 624 0
 1314              	 .cfi_startproc
 1315              	 
 1316              	 
 1317              	 
 1318              	.LVL121:
 625:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1319              	 .loc 1 625 0
 1320 0000 5823     	 movs r3,#88
 1321 0002 03FB0101 	 mla r1,r3,r1,r0
 1322              	.LVL122:
 1323 0006 0B6C     	 ldr r3,[r1,#64]
 1324 0008 23F00043 	 bic r3,r3,#-2147483648
 1325 000c 0B64     	 str r3,[r1,#64]
 1326 000e 7047     	 bx lr
 1327              	 .cfi_endproc
 1328              	.LFE216:
 1330              	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 1331              	 .align 1
 1332              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 1333              	 .thumb
 1334              	 .thumb_func
 1336              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 1337              	.LFB217:
 626:../Libraries/XMCLib/src/xmc_dma.c **** }
 627:../Libraries/XMCLib/src/xmc_dma.c **** 
 628:../Libraries/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 629:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 630:../Libraries/XMCLib/src/xmc_dma.c **** {
 1338              	 .loc 1 630 0
 1339              	 .cfi_startproc
 1340              	 
 1341              	 
 1342              	 
 1343              	.LVL123:
 631:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 1344              	 .loc 1 631 0
 1345 0000 5823     	 movs r3,#88
 1346 0002 03FB0101 	 mla r1,r3,r1,r0
 1347              	.LVL124:
 1348 0006 0B6C     	 ldr r3,[r1,#64]
 1349 0008 23F04043 	 bic r3,r3,#-1073741824
 1350 000c 0B64     	 str r3,[r1,#64]
 632:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Ms
 1351              	 .loc 1 632 0
 1352 000e 8B69     	 ldr r3,[r1,#24]
 1353 0010 23F0C053 	 bic r3,r3,#402653184
 1354 0014 8B61     	 str r3,[r1,#24]
 1355 0016 7047     	 bx lr
 1356              	 .cfi_endproc
 1357              	.LFE217:
 1359              	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 1360              	 .align 1
 1361              	 .global XMC_DMA_CH_SetEventHandler
 1362              	 .thumb
 1363              	 .thumb_func
 1365              	XMC_DMA_CH_SetEventHandler:
 1366              	.LFB218:
 633:../Libraries/XMCLib/src/xmc_dma.c **** }
 634:../Libraries/XMCLib/src/xmc_dma.c **** 
 635:../Libraries/XMCLib/src/xmc_dma.c **** /* Set event handler */
 636:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 637:../Libraries/XMCLib/src/xmc_dma.c **** {
 1367              	 .loc 1 637 0
 1368              	 .cfi_startproc
 1369              	 
 1370              	 
 1371              	 
 1372              	.LVL125:
 638:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 639:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 1373              	 .loc 1 639 0
 1374 0000 034B     	 ldr r3,.L140
 1375 0002 9842     	 cmp r0,r3
 640:../Libraries/XMCLib/src/xmc_dma.c ****   {
 641:../Libraries/XMCLib/src/xmc_dma.c **** #else
 642:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 643:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 644:../Libraries/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 1376              	 .loc 1 644 0
 1377 0004 0CBF     	 ite eq
 1378 0006 034B     	 ldreq r3,.L140+4
 645:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 646:../Libraries/XMCLib/src/xmc_dma.c ****   }
 647:../Libraries/XMCLib/src/xmc_dma.c ****   else
 648:../Libraries/XMCLib/src/xmc_dma.c ****   {
 649:../Libraries/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 1379              	 .loc 1 649 0
 1380 0008 034B     	 ldrne r3,.L140+8
 1381 000a 43F82120 	 str r2,[r3,r1,lsl#2]
 1382 000e 7047     	 bx lr
 1383              	.L141:
 1384              	 .align 2
 1385              	.L140:
 1386 0010 00400150 	 .word 1342259200
 1387 0014 00000000 	 .word dma0_event_handlers
 1388 0018 00000000 	 .word dma1_event_handlers
 1389              	 .cfi_endproc
 1390              	.LFE218:
 1392              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 1393              	 .align 1
 1394              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 1395              	 .thumb
 1396              	 .thumb_func
 1398              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 1399              	.LFB219:
 650:../Libraries/XMCLib/src/xmc_dma.c ****   }
 651:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 652:../Libraries/XMCLib/src/xmc_dma.c **** }
 653:../Libraries/XMCLib/src/xmc_dma.c **** 
 654:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 655:../Libraries/XMCLib/src/xmc_dma.c **** {
 1400              	 .loc 1 655 0
 1401              	 .cfi_startproc
 1402              	 
 1403              	 
 1404              	 
 1405              	.LVL126:
 656:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 657:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 1406              	 .loc 1 657 0
 1407 0000 5823     	 movs r3,#88
 1408 0002 03FB0101 	 mla r1,r3,r1,r0
 1409              	.LVL127:
 1410 0006 4031     	 adds r1,r1,#64
 1411 0008 4968     	 ldr r1,[r1,#4]
 1412              	.LVL128:
 658:../Libraries/XMCLib/src/xmc_dma.c **** 
 659:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 1413              	 .loc 1 659 0
 1414 000a C1F3C311 	 ubfx r1,r1,#7,#4
 1415              	.LVL129:
 1416 000e FFF7FEBF 	 b XMC_DMA_ClearRequestLine
 1417              	.LVL130:
 1418              	 .cfi_endproc
 1419              	.LFE219:
 1421              	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 1422              	 .align 1
 1423              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 1424              	 .thumb
 1425              	 .thumb_func
 1427              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 1428              	.LFB220:
 660:../Libraries/XMCLib/src/xmc_dma.c **** }
 661:../Libraries/XMCLib/src/xmc_dma.c **** 
 662:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 663:../Libraries/XMCLib/src/xmc_dma.c **** {
 1429              	 .loc 1 663 0
 1430              	 .cfi_startproc
 1431              	 
 1432              	 
 1433              	 
 1434              	.LVL131:
 664:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 665:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 1435              	 .loc 1 665 0
 1436 0000 5823     	 movs r3,#88
 1437 0002 03FB0101 	 mla r1,r3,r1,r0
 1438              	.LVL132:
 1439 0006 4031     	 adds r1,r1,#64
 1440 0008 4968     	 ldr r1,[r1,#4]
 1441              	.LVL133:
 666:../Libraries/XMCLib/src/xmc_dma.c **** 
 667:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 1442              	 .loc 1 667 0
 1443 000a C1F3C321 	 ubfx r1,r1,#11,#4
 1444              	.LVL134:
 1445 000e FFF7FEBF 	 b XMC_DMA_ClearRequestLine
 1446              	.LVL135:
 1447              	 .cfi_endproc
 1448              	.LFE220:
 1450              	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 1451              	 .align 1
 1452              	 .global XMC_DMA_IRQHandler
 1453              	 .thumb
 1454              	 .thumb_func
 1456              	XMC_DMA_IRQHandler:
 1457              	.LFB221:
 668:../Libraries/XMCLib/src/xmc_dma.c **** }
 669:../Libraries/XMCLib/src/xmc_dma.c **** 
 670:../Libraries/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 671:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 672:../Libraries/XMCLib/src/xmc_dma.c **** {
 1458              	 .loc 1 672 0
 1459              	 .cfi_startproc
 1460              	 
 1461              	 
 1462              	.LVL136:
 673:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 674:../Libraries/XMCLib/src/xmc_dma.c ****   int32_t channel;
 675:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 676:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 677:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 678:../Libraries/XMCLib/src/xmc_dma.c **** 
 679:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 680:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 681:../Libraries/XMCLib/src/xmc_dma.c ****   {
 682:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 683:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 684:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 685:../Libraries/XMCLib/src/xmc_dma.c ****   }
 686:../Libraries/XMCLib/src/xmc_dma.c ****   else
 687:../Libraries/XMCLib/src/xmc_dma.c ****   {
 688:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 1463              	 .loc 1 688 0
 1464 0000 3F4B     	 ldr r3,.L189
 1465 0002 404A     	 ldr r2,.L189+4
 672:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 1466              	 .loc 1 672 0
 1467 0004 70B5     	 push {r4,r5,r6,lr}
 1468              	.LCFI10:
 1469              	 .cfi_def_cfa_offset 16
 1470              	 .cfi_offset 4,-16
 1471              	 .cfi_offset 5,-12
 1472              	 .cfi_offset 6,-8
 1473              	 .cfi_offset 14,-4
 1474              	 .loc 1 688 0
 1475 0006 404D     	 ldr r5,.L189+8
 1476 0008 A842     	 cmp r0,r5
 1477 000a 0CBF     	 ite eq
 1478 000c 1546     	 moveq r5,r2
 1479 000e 1D46     	 movne r5,r3
 1480              	.LVL137:
 1481              	.LBB26:
 1482              	.LBB27:
 1483              	 .file 2 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_dma.h"
   1:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
   2:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @date 2018-09-18
   4:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
   5:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @cond
   6:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
   7:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library
   8:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
   9:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * All rights reserved.                        
  11:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *                                             
  12:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * following conditions are met:   
  14:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  15:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer.                        
  17:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  18:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  21:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * products derived from this software without specific prior written permission.                  
  23:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  24:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  32:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
  35:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  36:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Change History
  37:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * --------------
  38:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  39:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  40:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  41:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  42:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  43:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  44:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  45:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  46:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  47:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  48:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  50:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  51:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  52:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  53:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  54:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  55:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  56:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * 2018-09-18:
  57:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Added XMC_DMA_CH_GetTransferredData()
  58:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  59:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @endcond
  60:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
  61:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
  62:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  63:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  64:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
  65:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  66:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  67:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  68:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
  69:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  70:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
  71:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  72:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
  73:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  74:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
  75:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
  76:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  77:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  78:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
  79:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
  80:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
  81:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  82:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  83:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  84:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  85:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  86:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  87:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  88:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  89:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  90:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  91:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
  92:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  93:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  94:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  95:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
  96:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
  97:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  98:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * MACROS
  99:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 100:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 101:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
 102:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 103:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 104:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 105:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 106:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 107:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 108:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 109:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 110:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 111:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 112:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * ENUMS
 113:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 114:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 115:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 116:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 117:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 118:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 119:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 120:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 121:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 122:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 123:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 124:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 125:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 126:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 127:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 128:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 129:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 130:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 131:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 132:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 133:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 134:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 135:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 136:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 137:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 138:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 139:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 140:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 141:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 142:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 143:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 144:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 145:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 146:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 147:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 148:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 149:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 150:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 151:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 152:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 153:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 154:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 155:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 156:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 157:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 158:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 159:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 160:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 161:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 162:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 163:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 164:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 165:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 166:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 167:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 168:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 169:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 170:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 171:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 172:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 173:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 174:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 175:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 176:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 177:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 178:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 179:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 180:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 181:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 182:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 183:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 184:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 185:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 186:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 187:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 188:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 189:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 190:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 191:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 192:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 193:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 194:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 195:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 196:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 197:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 198:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 199:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 200:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 201:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 202:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 203:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 204:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 205:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 206:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 207:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 208:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 209:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 210:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 211:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 212:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 213:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 214:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 215:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 216:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 217:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 218:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 219:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 220:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 221:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 222:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 223:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 224:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 225:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 226:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA events
 227:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 228:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 229:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 230:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 231:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 232:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 233:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 234:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 235:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 236:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 237:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 238:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Transaction types
 239:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 240:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 241:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 242:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 243:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 244:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 245:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 246:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 247:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 248:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 249:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 250:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 251:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 252:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 253:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 254:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 255:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 256:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 257:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 258:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 259:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 260:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 261:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 262:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 263:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 264:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 265:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 266:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 267:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 268:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 269:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  
 270:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 271:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 272:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 273:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 274:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 275:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 276:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 277:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 278:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 279:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 280:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 281:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 282:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 283:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 284:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 285:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 286:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 287:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 288:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 289:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 290:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 291:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 292:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 293:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 294:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 295:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 296:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 297:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 298:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 299:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 300:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 301:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 302:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 303:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 304:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 305:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 306:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 307:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 308:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 309:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 310:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 311:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 312:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 313:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 314:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 315:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 316:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 317:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 318:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 319:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 320:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 321:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 322:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 323:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 324:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 325:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 326:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 327:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 328:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 329:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 330:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 331:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 332:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 333:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 334:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 335:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma push
 336:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma anon_unions
 337:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 338:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning 586
 339:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 340:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 341:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 342:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 343:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 344:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 345:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 346:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 347:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 348:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 349:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 350:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   union
 351:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   {
 352:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 353:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     {
 354:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 355:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 356:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 357:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 358:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 359:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 360:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 361:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 362:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 363:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 364:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 365:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 366:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 367:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 368:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 369:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     };
 370:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 371:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   };
 372:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 373:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 374:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 375:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 376:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 377:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 378:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 379:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 380:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 381:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 382:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 383:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 384:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   union
 385:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   {
 386:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 387:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 388:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     {
 389:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 390:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 391:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 392:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 393:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 394:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 395:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 396:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 397:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 398:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             
 399:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 400:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;                             
 401:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     };
 402:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   };
 403:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 404:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 405:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 406:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 407:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   
 408:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   union
 409:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   {
 410:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 411:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 412:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     {
 413:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 414:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 415:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     };
 416:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   };
 417:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 418:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   union
 419:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   {
 420:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 421:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 422:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     {
 423:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 424:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 425:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****     };
 426:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   };
 427:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   
 428:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 429:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 430:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 431:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 432:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 433:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 434:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 435:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 436:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 437:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 438:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 439:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma pop
 440:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 441:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning restore
 442:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 443:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 444:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 445:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 446:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 447:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 448:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 449:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 450:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 451:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 452:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 453:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 454:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** extern "C" {
 455:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 456:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 457:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 458:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 459:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 460:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 461:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 462:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 463:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 464:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 465:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 466:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral.
 467:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 468:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 469:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 470:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 471:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 472:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 473:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 474:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 475:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 476:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 477:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 478:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 479:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 480:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 481:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 482:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 483:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 484:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 485:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 486:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 487:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 488:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 489:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 490:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 491:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 492:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 493:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 494:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 495:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 496:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 497:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 498:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 499:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 500:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return bool
 501:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 502:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 503:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 504:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 505:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 506:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 507:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 508:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 509:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * is enabled.
 510:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 511:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 512:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 513:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 514:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 515:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 516:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 517:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 518:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 519:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 520:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 521:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 522:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 523:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 524:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 525:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 526:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 527:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 528:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 529:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 530:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 531:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 532:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 533:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 534:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 535:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
 1484              	 .loc 2 535 0
 1485 0010 D0F86033 	 ldr r3,[r0,#864]
 1486              	.LVL138:
 1487              	.LBE27:
 1488              	.LBE26:
 689:../Libraries/XMCLib/src/xmc_dma.c ****   }
 690:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 691:../Libraries/XMCLib/src/xmc_dma.c ****   
 692:../Libraries/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 693:../Libraries/XMCLib/src/xmc_dma.c ****   channel = 0;
 694:../Libraries/XMCLib/src/xmc_dma.c **** 
 695:../Libraries/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 1489              	 .loc 1 695 0
 1490 0014 13F01002 	 ands r2,r3,#16
 1491 0018 14D0     	 beq .L146
 1492              	.LVL139:
 1493              	.LBB28:
 1494              	.LBB29:
 536:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** }
 537:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 538:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 539:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 540:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 541:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 542:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 543:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 544:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 545:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 546:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 547:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 548:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 549:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 550:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
 551:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** }
 552:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 553:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 554:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 555:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 556:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 557:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 558:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 559:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 560:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 561:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 562:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 563:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 564:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 565:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 566:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** }
 567:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 568:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 569:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 570:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 571:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 572:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 573:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 574:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 575:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 576:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 577:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 578:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 579:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 580:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * ignored.
 581:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 582:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 583:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 584:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 585:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** }
 586:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 587:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 588:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 589:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 590:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 591:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 592:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 593:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 594:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 595:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 596:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 597:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 598:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 599:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 600:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 601:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 602:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 603:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 604:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** }
 605:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** 
 606:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** /**
 607:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 608:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 609:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 610:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 611:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 612:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  *
 613:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 614:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 615:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****  */
 616:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 617:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** {
 618:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 1495              	 .loc 2 618 0
 1496 001a D0F80823 	 ldr r2,[r0,#776]
 1497              	.LBE29:
 1498              	.LBE28:
 693:../Libraries/XMCLib/src/xmc_dma.c **** 
 1499              	 .loc 1 693 0
 1500 001e 0024     	 movs r4,#0
 1501              	.LVL140:
 1502              	.L147:
 696:../Libraries/XMCLib/src/xmc_dma.c ****   {
 697:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 698:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1503              	 .loc 1 698 0
 1504 0020 7AB1     	 cbz r2,.L185
 1505              	.LVL141:
 699:../Libraries/XMCLib/src/xmc_dma.c ****     {
 700:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 1506              	 .loc 1 700 0
 1507 0022 0123     	 movs r3,#1
 1508 0024 A340     	 lsls r3,r3,r4
 1509              	.LVL142:
 701:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 1510              	 .loc 1 701 0
 1511 0026 1342     	 tst r3,r2
 1512 0028 09D0     	 beq .L148
 702:../Libraries/XMCLib/src/xmc_dma.c ****       {
 703:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 1513              	 .loc 1 703 0
 1514 002a E1B2     	 uxtb r1,r4
 1515 002c 1022     	 movs r2,#16
 1516 002e FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1517              	.LVL143:
 704:../Libraries/XMCLib/src/xmc_dma.c **** 
 705:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 706:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1518              	 .loc 1 706 0
 1519 0032 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1520              	.LVL144:
 707:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1521              	 .loc 1 707 0
 1522 0036 002B     	 cmp r3,#0
 1523 0038 60D0     	 beq .L144
 708:../Libraries/XMCLib/src/xmc_dma.c ****         {
 709:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 1524              	 .loc 1 709 0
 1525 003a 1020     	 movs r0,#16
 1526 003c 5BE0     	 b .L184
 1527              	.LVL145:
 1528              	.L148:
 710:../Libraries/XMCLib/src/xmc_dma.c ****         }
 711:../Libraries/XMCLib/src/xmc_dma.c ****        
 712:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 713:../Libraries/XMCLib/src/xmc_dma.c ****       }
 714:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 1529              	 .loc 1 714 0
 1530 003e 0134     	 adds r4,r4,#1
 1531              	.LVL146:
 1532 0040 EEE7     	 b .L147
 1533              	.LVL147:
 1534              	.L185:
 1535 0042 70BD     	 pop {r4,r5,r6,pc}
 1536              	.LVL148:
 1537              	.L146:
 715:../Libraries/XMCLib/src/xmc_dma.c ****     }
 716:../Libraries/XMCLib/src/xmc_dma.c ****   }
 717:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 1538              	 .loc 1 717 0
 1539 0044 13F00104 	 ands r4,r3,#1
 1540 0048 15D0     	 beq .L153
 1541              	.LVL149:
 1542              	.LBB30:
 1543              	.LBB31:
 550:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** }
 1544              	 .loc 2 550 0
 1545 004a D0F8E832 	 ldr r3,[r0,#744]
 1546              	.LBE31:
 1547              	.LBE30:
 693:../Libraries/XMCLib/src/xmc_dma.c **** 
 1548              	 .loc 1 693 0
 1549 004e 1446     	 mov r4,r2
 1550              	.LVL150:
 1551              	.L154:
 718:../Libraries/XMCLib/src/xmc_dma.c ****   {
 719:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 720:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1552              	 .loc 1 720 0
 1553 0050 83B1     	 cbz r3,.L186
 1554              	.LVL151:
 721:../Libraries/XMCLib/src/xmc_dma.c ****     {
 722:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 1555              	 .loc 1 722 0
 1556 0052 0126     	 movs r6,#1
 1557 0054 06FA04F2 	 lsl r2,r6,r4
 1558              	.LVL152:
 723:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1559              	 .loc 1 723 0
 1560 0058 1A42     	 tst r2,r3
 1561 005a 09D0     	 beq .L155
 724:../Libraries/XMCLib/src/xmc_dma.c ****       {
 725:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 1562              	 .loc 1 725 0
 1563 005c E1B2     	 uxtb r1,r4
 1564 005e 0F22     	 movs r2,#15
 1565              	.LVL153:
 1566 0060 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1567              	.LVL154:
 726:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_BL
 727:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 728:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 729:../Libraries/XMCLib/src/xmc_dma.c **** 
 730:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 731:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1568              	 .loc 1 731 0
 1569 0064 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1570              	.LVL155:
 732:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1571              	 .loc 1 732 0
 1572 0068 002B     	 cmp r3,#0
 1573 006a 47D0     	 beq .L144
 733:../Libraries/XMCLib/src/xmc_dma.c ****         {
 734:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 1574              	 .loc 1 734 0
 1575 006c 3046     	 mov r0,r6
 1576 006e 42E0     	 b .L184
 1577              	.LVL156:
 1578              	.L155:
 735:../Libraries/XMCLib/src/xmc_dma.c ****         }
 736:../Libraries/XMCLib/src/xmc_dma.c **** 																	  
 737:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 738:../Libraries/XMCLib/src/xmc_dma.c ****       }
 739:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 1579              	 .loc 1 739 0
 1580 0070 0134     	 adds r4,r4,#1
 1581              	.LVL157:
 1582 0072 EDE7     	 b .L154
 1583              	.LVL158:
 1584              	.L186:
 1585 0074 70BD     	 pop {r4,r5,r6,pc}
 1586              	.LVL159:
 1587              	.L153:
 740:../Libraries/XMCLib/src/xmc_dma.c ****     }
 741:../Libraries/XMCLib/src/xmc_dma.c ****   }
 742:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 1588              	 .loc 1 742 0
 1589 0076 13F00202 	 ands r2,r3,#2
 1590 007a 12D0     	 beq .L157
 1591              	.LVL160:
 1592              	.LBB32:
 1593              	.LBB33:
 565:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** }
 1594              	 .loc 2 565 0
 1595 007c D0F8F022 	 ldr r2,[r0,#752]
 1596              	.LVL161:
 1597              	.L158:
 1598              	.LBE33:
 1599              	.LBE32:
 743:../Libraries/XMCLib/src/xmc_dma.c ****   {
 744:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 745:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1600              	 .loc 1 745 0
 1601 0080 72B1     	 cbz r2,.L187
 1602              	.LVL162:
 746:../Libraries/XMCLib/src/xmc_dma.c ****     {
 747:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 1603              	 .loc 1 747 0
 1604 0082 0123     	 movs r3,#1
 1605 0084 A340     	 lsls r3,r3,r4
 1606              	.LVL163:
 748:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1607              	 .loc 1 748 0
 1608 0086 1342     	 tst r3,r2
 1609 0088 08D0     	 beq .L159
 749:../Libraries/XMCLib/src/xmc_dma.c ****       {
 750:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 1610              	 .loc 1 750 0
 1611 008a E1B2     	 uxtb r1,r4
 1612 008c 0E22     	 movs r2,#14
 1613 008e FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1614              	.LVL164:
 751:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 752:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 753:../Libraries/XMCLib/src/xmc_dma.c **** 
 754:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 755:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1615              	 .loc 1 755 0
 1616 0092 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1617              	.LVL165:
 756:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1618              	 .loc 1 756 0
 1619 0096 8BB3     	 cbz r3,.L144
 757:../Libraries/XMCLib/src/xmc_dma.c ****         {
 758:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 1620              	 .loc 1 758 0
 1621 0098 0220     	 movs r0,#2
 1622 009a 2CE0     	 b .L184
 1623              	.LVL166:
 1624              	.L159:
 759:../Libraries/XMCLib/src/xmc_dma.c ****         }
 760:../Libraries/XMCLib/src/xmc_dma.c **** 
 761:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 762:../Libraries/XMCLib/src/xmc_dma.c ****       }
 763:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 1625              	 .loc 1 763 0
 1626 009c 0134     	 adds r4,r4,#1
 1627              	.LVL167:
 1628 009e EFE7     	 b .L158
 1629              	.LVL168:
 1630              	.L187:
 1631 00a0 70BD     	 pop {r4,r5,r6,pc}
 1632              	.LVL169:
 1633              	.L157:
 764:../Libraries/XMCLib/src/xmc_dma.c ****     }
 765:../Libraries/XMCLib/src/xmc_dma.c ****   }
 766:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 1634              	 .loc 1 766 0
 1635 00a2 13F00404 	 ands r4,r3,#4
 1636 00a6 13D0     	 beq .L161
 1637              	.LVL170:
 1638              	.LBB34:
 1639              	.LBB35:
 584:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** }
 1640              	 .loc 2 584 0
 1641 00a8 D0F8F812 	 ldr r1,[r0,#760]
 1642              	.LBE35:
 1643              	.LBE34:
 693:../Libraries/XMCLib/src/xmc_dma.c **** 
 1644              	 .loc 1 693 0
 1645 00ac 1446     	 mov r4,r2
 1646              	.LVL171:
 1647              	.L162:
 767:../Libraries/XMCLib/src/xmc_dma.c ****   {
 768:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 769:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1648              	 .loc 1 769 0
 1649 00ae 71B1     	 cbz r1,.L188
 1650              	.LVL172:
 770:../Libraries/XMCLib/src/xmc_dma.c ****     {
 771:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 1651              	 .loc 1 771 0
 1652 00b0 0123     	 movs r3,#1
 1653 00b2 A340     	 lsls r3,r3,r4
 1654              	.LVL173:
 772:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1655              	 .loc 1 772 0
 1656 00b4 0B42     	 tst r3,r1
 1657 00b6 08D0     	 beq .L163
 773:../Libraries/XMCLib/src/xmc_dma.c ****       {
 774:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 1658              	 .loc 1 774 0
 1659 00b8 E1B2     	 uxtb r1,r4
 1660 00ba 0422     	 movs r2,#4
 1661 00bc FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1662              	.LVL174:
 775:../Libraries/XMCLib/src/xmc_dma.c **** 
 776:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 777:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1663              	 .loc 1 777 0
 1664 00c0 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1665              	.LVL175:
 778:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1666              	 .loc 1 778 0
 1667 00c4 D3B1     	 cbz r3,.L144
 779:../Libraries/XMCLib/src/xmc_dma.c ****         {
 780:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 1668              	 .loc 1 780 0
 1669 00c6 0420     	 movs r0,#4
 1670 00c8 15E0     	 b .L184
 1671              	.LVL176:
 1672              	.L163:
 781:../Libraries/XMCLib/src/xmc_dma.c ****         }
 782:../Libraries/XMCLib/src/xmc_dma.c ****         
 783:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 784:../Libraries/XMCLib/src/xmc_dma.c ****       }
 785:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 1673              	 .loc 1 785 0
 1674 00ca 0134     	 adds r4,r4,#1
 1675              	.LVL177:
 1676 00cc EFE7     	 b .L162
 1677              	.LVL178:
 1678              	.L188:
 1679 00ce 70BD     	 pop {r4,r5,r6,pc}
 1680              	.LVL179:
 1681              	.L161:
 786:../Libraries/XMCLib/src/xmc_dma.c ****     }
 787:../Libraries/XMCLib/src/xmc_dma.c ****   }
 788:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 1682              	 .loc 1 788 0
 1683 00d0 1B07     	 lsls r3,r3,#28
 1684 00d2 13D5     	 bpl .L144
 1685              	.LVL180:
 1686              	.LBB36:
 1687              	.LBB37:
 603:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dma.h **** }
 1688              	 .loc 2 603 0
 1689 00d4 D0F80023 	 ldr r2,[r0,#768]
 1690              	.LBE37:
 1691              	.LBE36:
 789:../Libraries/XMCLib/src/xmc_dma.c ****   {
 790:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 791:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 1692              	 .loc 1 791 0
 1693 00d8 00E0     	 b .L165
 1694              	.LVL181:
 1695              	.L166:
 792:../Libraries/XMCLib/src/xmc_dma.c ****     {
 793:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 794:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 795:../Libraries/XMCLib/src/xmc_dma.c ****       {
 796:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 797:../Libraries/XMCLib/src/xmc_dma.c **** 
 798:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 799:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 800:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 801:../Libraries/XMCLib/src/xmc_dma.c ****         {
 802:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 803:../Libraries/XMCLib/src/xmc_dma.c ****         }      
 804:../Libraries/XMCLib/src/xmc_dma.c **** 
 805:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 806:../Libraries/XMCLib/src/xmc_dma.c ****       }
 807:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 1696              	 .loc 1 807 0
 1697 00da 0134     	 adds r4,r4,#1
 1698              	.LVL182:
 1699              	.L165:
 791:../Libraries/XMCLib/src/xmc_dma.c ****     {
 1700              	 .loc 1 791 0
 1701 00dc 72B1     	 cbz r2,.L144
 1702              	.LVL183:
 793:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 1703              	 .loc 1 793 0
 1704 00de 0123     	 movs r3,#1
 1705 00e0 A340     	 lsls r3,r3,r4
 1706              	.LVL184:
 794:../Libraries/XMCLib/src/xmc_dma.c ****       {
 1707              	 .loc 1 794 0
 1708 00e2 1342     	 tst r3,r2
 1709 00e4 F9D0     	 beq .L166
 796:../Libraries/XMCLib/src/xmc_dma.c **** 
 1710              	 .loc 1 796 0
 1711 00e6 E1B2     	 uxtb r1,r4
 1712 00e8 0822     	 movs r2,#8
 1713 00ea FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1714              	.LVL185:
 799:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 1715              	 .loc 1 799 0
 1716 00ee 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1717              	.LVL186:
 800:../Libraries/XMCLib/src/xmc_dma.c ****         {
 1718              	 .loc 1 800 0
 1719 00f2 1BB1     	 cbz r3,.L144
 802:../Libraries/XMCLib/src/xmc_dma.c ****         }      
 1720              	 .loc 1 802 0
 1721 00f4 0820     	 movs r0,#8
 1722              	.LVL187:
 1723              	.L184:
 808:../Libraries/XMCLib/src/xmc_dma.c ****     }
 809:../Libraries/XMCLib/src/xmc_dma.c ****   }
 810:../Libraries/XMCLib/src/xmc_dma.c ****   else
 811:../Libraries/XMCLib/src/xmc_dma.c ****   {
 812:../Libraries/XMCLib/src/xmc_dma.c ****     /* no active interrupt was found? */
 813:../Libraries/XMCLib/src/xmc_dma.c ****   }
 814:../Libraries/XMCLib/src/xmc_dma.c **** 
 815:../Libraries/XMCLib/src/xmc_dma.c **** }
 1724              	 .loc 1 815 0
 1725 00f6 BDE87040 	 pop {r4,r5,r6,lr}
 1726              	.LCFI11:
 1727              	 .cfi_remember_state
 1728              	 .cfi_restore 14
 1729              	 .cfi_restore 6
 1730              	 .cfi_restore 5
 1731              	 .cfi_restore 4
 1732              	 .cfi_def_cfa_offset 0
 1733              	.LVL188:
 802:../Libraries/XMCLib/src/xmc_dma.c ****         }      
 1734              	 .loc 1 802 0
 1735 00fa 1847     	 bx r3
 1736              	.LVL189:
 1737              	.L144:
 1738              	.LCFI12:
 1739              	 .cfi_restore_state
 1740 00fc 70BD     	 pop {r4,r5,r6,pc}
 1741              	.LVL190:
 1742              	.L190:
 1743 00fe 00BF     	 .align 2
 1744              	.L189:
 1745 0100 00000000 	 .word dma1_event_handlers
 1746 0104 00000000 	 .word dma0_event_handlers
 1747 0108 00400150 	 .word 1342259200
 1748              	 .cfi_endproc
 1749              	.LFE221:
 1751              	 .comm dma1_event_handlers,16,4
 1752              	 .comm dma0_event_handlers,32,4
 1753              	 .text
 1754              	.Letext0:
 1755              	 .file 3 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1756              	 .file 4 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1757              	 .file 5 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1758              	 .file 6 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc4_scu.h"
 1759              	 .file 7 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Include/core_cm4.h"
 1760              	 .file 8 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:20     .text.XMC_DMA_Enable:00000000 $t
    {standard input}:25     .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:61     .text.XMC_DMA_Enable:0000001c $d
    {standard input}:68     .text.XMC_DMA_Init:00000000 $t
    {standard input}:73     .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:88     .text.XMC_DMA_Disable:00000000 $t
    {standard input}:93     .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:118    .text.XMC_DMA_Disable:00000014 $d
    {standard input}:125    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:130    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:177    .text.XMC_DMA_IsEnabled:00000028 $d
    {standard input}:184    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:189    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:260    .text.XMC_DMA_EnableRequestLine:00000048 $d
    {standard input}:266    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:271    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:298    .text.XMC_DMA_DisableRequestLine:00000020 $d
    {standard input}:303    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:308    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:344    .text.XMC_DMA_ClearRequestLine:00000024 $d
    {standard input}:349    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:354    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:391    .text.XMC_DMA_GetOverrunStatus:00000028 $d
    {standard input}:396    .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:401    .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:424    .text.XMC_DMA_ClearOverrunStatus:00000014 $d
    {standard input}:430    .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:435    .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:460    .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:465    .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:484    .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:489    .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:509    .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:514    .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:534    .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:539    .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:560    .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:565    .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:607    .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:612    .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:654    .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:659    .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:701    .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:706    .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:868    .text.XMC_DMA_CH_Init:000000e2 $d
    {standard input}:876    .text.XMC_DMA_CH_Init:000000ea $t
    {standard input}:979    .text.XMC_DMA_CH_Init:00000170 $d
    {standard input}:984    .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:989    .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:1035   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:1040   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:1071   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:1076   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:1096   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:1101   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:1132   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:1137   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:1157   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:1162   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:1194   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:1199   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:1231   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:1236   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:1256   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:1261   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:1281   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:1286   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:1306   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:1311   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:1331   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:1336   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:1360   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:1365   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:1386   .text.XMC_DMA_CH_SetEventHandler:00000010 $d
                            *COM*:00000020 dma0_event_handlers
                            *COM*:00000010 dma1_event_handlers
    {standard input}:1393   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:1398   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:1422   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:1427   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:1451   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:1456   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:1745   .text.XMC_DMA_IRQHandler:00000100 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.ca5ae67a873a4952d630d8e4120b9e3e
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4e89a3f145accdcb1100c37260c088e6
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.65.5c0d35eb1a6853ff8300ab2ec1b944b0
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.57f124f9262f3dbf77da6a6506ffb430
                           .group:00000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:00000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1500.3eca65ed9ba7f90e09c1ffcb0b3f5724
                           .group:00000000 wm4.xmc_common.h.98.806f17e888fd51d0e4be2ad115163551
                           .group:00000000 wm4.xmc_dma_map.h.50.56139b24aefaee572adb4448246412e9
                           .group:00000000 wm4.xmc_dma.h.102.a1e4b5155a1eb909c7f7a8099b6529ee
                           .group:00000000 wm4.xmc4_scu.h.90.f49c0839764a6c1240876a5f2e586200

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_IsPeripheralResetAsserted
