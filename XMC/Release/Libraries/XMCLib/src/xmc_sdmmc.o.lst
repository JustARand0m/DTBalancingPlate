   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_sdmmc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SDMMC_GetPowerStatus,"ax",%progbits
  20              	 .align 1
  21              	 .global XMC_SDMMC_GetPowerStatus
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_SDMMC_GetPowerStatus:
  26              	.LFB216:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_sdmmc.c"
   1:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
   2:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
   3:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @file xmc_sdmmc.c
   4:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
   6:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  10:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  19:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  22:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  37:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  40:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed GetDriverVersion API <br>
  43:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  44:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-06-20:
  45:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed definition of GetDriverVersion API <br>
  46:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  47:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-03-14:
  48:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Values are directly assigned to the int status registers <br>
  49:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  50:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-07-11:
  51:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - XMC_SDMMC_SetDataTransferMode() shall not invoke SetDateLineTimeout() <br>
  52:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  53:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2019-05-07:
  54:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Fixed compilation warnings
  55:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  56:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @endcond
  57:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  58:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  59:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  60:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup XMClib
  61:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  62:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  63:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  64:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  65:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup SDMMC
  66:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @brief SDMMC driver
  67:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  68:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  69:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  70:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  71:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * HEADER FILES
  72:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  73:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  74:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_sdmmc.h"
  75:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  76:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  77:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The SDMMC peripheral is only available on the
  78:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMC4500. The SDMMC definition can be found in
  79:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the XMC4500.h (device header file).
  80:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  81:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined (SDMMC)
  82:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_scu.h"
  83:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  84:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  85:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * MACROS
  86:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  87:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  88:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  89:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC error events <br>
  90:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  91:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
  92:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  93:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_ERROR_EVENT(e)\
  94:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_TIMEOUT_ERR)     ||\
  95:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_CRC_ERR)         ||\
  96:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_END_BIT_ERR)     ||\
  97:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_IND_ERR)         ||\
  98:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_TIMEOUT_ERR)    ||\
  99:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_CRC_ERR)        ||\
 100:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_END_BIT_ERR)    ||\
 101:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CURRENT_LIMIT_ERR)   ||\
 102:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_ACMD_ERR)            ||\
 103:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TARGET_RESP_ERR))
 104:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 105:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 106:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC normal events <br>
 107:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 108:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 109:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 110:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_NORMAL_EVENT(e)\
 111:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_COMPLETE)        ||\
 112:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TX_COMPLETE)         ||\
 113:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BLOCK_GAP_EVENT)     ||\
 114:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_WRITE_READY)  ||\
 115:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_READ_READY)   ||\
 116:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INS)            ||\
 117:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_REMOVAL)        ||\
 118:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INT))
 119:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 120:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 121:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for both normal and error events <br>
 122:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 123:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 124:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 125:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_EVENT(e)\
 126:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((XMC_SDMMC_CHECK_NORMAL_EVENT(e))    ||\
 127:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (XMC_SDMMC_CHECK_ERROR_EVENT(e)))
 128:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 129:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 130:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC wakeup events <br>
 131:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 132:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 133:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 134:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_WAKEUP_EVENT(w)\
 135:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((w == XMC_SDMMC_WAKEUP_EN_CARD_INT)  ||\
 136:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_INS)  ||\
 137:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_REM))
 138:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 139:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 140:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC software reset modes <br>
 141:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 142:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 143:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 144:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_SW_RESET_MODE(m)\
 145:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_SW_RESET_ALL)        ||\
 146:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_CMD_LINE)     ||\
 147:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_DAT_LINE))
 148:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 149:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 150:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC transfer modes <br>
 151:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 152:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 153:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 154:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_TRANSFER_MODE(m)\
 155:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)    ||\
 156:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE)  ||\
 157:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE)  ||\
 158:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE))
 159:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 160:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 161:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
 162:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * API IMPLEMENTATION
 163:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
 164:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
 165:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get power status of the SDMMC peripheral */
 166:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc)
 167:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  28              	 .loc 1 167 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
 168:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetPowerStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 169:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 170:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return (bool)(sdmmc->POWER_CTRL & SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
  34              	 .loc 1 170 0
  35 0000 90F82900 	 ldrb r0,[r0,#41]
  36              	.LVL1:
 171:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
  37              	 .loc 1 171 0
  38 0004 00F00100 	 and r0,r0,#1
  39 0008 7047     	 bx lr
  40              	 .cfi_endproc
  41              	.LFE216:
  43              	 .section .text.XMC_SDMMC_Enable,"ax",%progbits
  44              	 .align 1
  45              	 .global XMC_SDMMC_Enable
  46              	 .thumb
  47              	 .thumb_func
  49              	XMC_SDMMC_Enable:
  50              	.LFB217:
 172:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 173:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 174:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * De-assert the peripheral reset. The SDMMC peripheral
 175:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * needs to be initialized
 176:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 177:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
 178:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  51              	 .loc 1 178 0
  52              	 .cfi_startproc
  53              	 
  54              	 
  55              	 
  56              	.LVL2:
 179:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Enable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 180:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 181:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 182:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 183:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 184:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 185:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 186:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
  57              	 .loc 1 186 0
  58 0000 0148     	 ldr r0,.L3
  59              	.LVL3:
  60 0002 FFF7FEBF 	 b XMC_SCU_RESET_DeassertPeripheralReset
  61              	.LVL4:
  62              	.L4:
  63 0006 00BF     	 .align 2
  64              	.L3:
  65 0008 40000010 	 .word 268435520
  66              	 .cfi_endproc
  67              	.LFE217:
  69              	 .section .text.XMC_SDMMC_Disable,"ax",%progbits
  70              	 .align 1
  71              	 .global XMC_SDMMC_Disable
  72              	 .thumb
  73              	 .thumb_func
  75              	XMC_SDMMC_Disable:
  76              	.LFB218:
 187:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 188:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 189:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 190:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Assert the peripheral reset */
 191:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc)
 192:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  77              	 .loc 1 192 0
  78              	 .cfi_startproc
  79              	 
  80              	 
  81              	 
  82              	.LVL5:
 193:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Disable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 194:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 195:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 196:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 197:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
  83              	 .loc 1 197 0
  84 0000 0148     	 ldr r0,.L6
  85              	.LVL6:
  86 0002 FFF7FEBF 	 b XMC_SCU_RESET_AssertPeripheralReset
  87              	.LVL7:
  88              	.L7:
  89 0006 00BF     	 .align 2
  90              	.L6:
  91 0008 40000010 	 .word 268435520
  92              	 .cfi_endproc
  93              	.LFE218:
  95              	 .section .text.XMC_SDMMC_Init,"ax",%progbits
  96              	 .align 1
  97              	 .global XMC_SDMMC_Init
  98              	 .thumb
  99              	 .thumb_func
 101              	XMC_SDMMC_Init:
 102              	.LFB219:
 198:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 199:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 200:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 201:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 202:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 203:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 204:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Initialize SDMMC peripheral */
 205:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config)
 206:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 103              	 .loc 1 206 0
 104              	 .cfi_startproc
 105              	 
 106              	 
 107              	.LVL8:
 108 0000 38B5     	 push {r3,r4,r5,lr}
 109              	.LCFI0:
 110              	 .cfi_def_cfa_offset 16
 111              	 .cfi_offset 3,-16
 112              	 .cfi_offset 4,-12
 113              	 .cfi_offset 5,-8
 114              	 .cfi_offset 14,-4
 115              	 .loc 1 206 0
 116 0002 0446     	 mov r4,r0
 117              	.LVL9:
 118 0004 0D46     	 mov r5,r1
 119              	.LBB4:
 120              	.LBB5:
 186:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 121              	 .loc 1 186 0
 122 0006 0A48     	 ldr r0,.L9
 123              	.LVL10:
 124 0008 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 125              	.LVL11:
 126              	.LBE5:
 127              	.LBE4:
 207:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 208:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid clock divider value", XMC_SDMMC_CHECK_SDCLK_FREQ(config->cloc
 209:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid bus width", XMC_SDMMC_CHECK_DATA_LINES(config->bus_width));
 210:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 211:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Enable SDMMC peripheral */
 212:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_Enable(sdmmc);
 213:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 214:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Write internal clock divider register */
 215:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SE
 128              	 .loc 1 215 0
 129 000c A38D     	 ldrh r3,[r4,#44]
 130 000e 6A78     	 ldrb r2,[r5,#1]
 131 0010 9BB2     	 uxth r3,r3
 132 0012 43EA0223 	 orr r3,r3,r2,lsl#8
 133 0016 A385     	 strh r3,[r4,#44]
 216:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 217:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set bus width */
 218:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 134              	 .loc 1 218 0
 135 0018 94F82830 	 ldrb r3,[r4,#40]
 219:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 136              	 .loc 1 219 0
 137 001c 2A78     	 ldrb r2,[r5]
 218:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 138              	 .loc 1 218 0
 139 001e 03F0FD03 	 and r3,r3,#253
 140 0022 43EA4203 	 orr r3,r3,r2,lsl#1
 141 0026 DBB2     	 uxtb r3,r3
 142 0028 84F82830 	 strb r3,[r4,#40]
 220:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 221:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 222:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 143              	 .loc 1 222 0
 144 002c 0020     	 movs r0,#0
 145 002e 38BD     	 pop {r3,r4,r5,pc}
 146              	.LVL12:
 147              	.L10:
 148              	 .align 2
 149              	.L9:
 150 0030 40000010 	 .word 268435520
 151              	 .cfi_endproc
 152              	.LFE219:
 154              	 .section .text.XMC_SDMMC_EnableEventStatus,"ax",%progbits
 155              	 .align 1
 156              	 .global XMC_SDMMC_EnableEventStatus
 157              	 .thumb
 158              	 .thumb_func
 160              	XMC_SDMMC_EnableEventStatus:
 161              	.LFB220:
 223:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 224:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable event status */
 225:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 226:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 162              	 .loc 1 226 0
 163              	 .cfi_startproc
 164              	 
 165              	 
 166              	 
 167              	.LVL13:
 227:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 228:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 229:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set INT status enable register */
 230:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 168              	 .loc 1 230 0
 169 0000 838E     	 ldrh r3,[r0,#52]
 170 0002 0B43     	 orrs r3,r3,r1
 171 0004 9BB2     	 uxth r3,r3
 172 0006 8386     	 strh r3,[r0,#52]
 231:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 173              	 .loc 1 231 0
 174 0008 C38E     	 ldrh r3,[r0,#54]
 175 000a 9BB2     	 uxth r3,r3
 176 000c 43EA1141 	 orr r1,r3,r1,lsr#16
 177              	.LVL14:
 178 0010 C186     	 strh r1,[r0,#54]
 179 0012 7047     	 bx lr
 180              	 .cfi_endproc
 181              	.LFE220:
 183              	 .section .text.XMC_SDMMC_DisableEventStatus,"ax",%progbits
 184              	 .align 1
 185              	 .global XMC_SDMMC_DisableEventStatus
 186              	 .thumb
 187              	 .thumb_func
 189              	XMC_SDMMC_DisableEventStatus:
 190              	.LFB221:
 232:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 233:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 234:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable event status */
 235:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 236:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 191              	 .loc 1 236 0
 192              	 .cfi_startproc
 193              	 
 194              	 
 195              	 
 196              	.LVL15:
 237:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 238:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 239:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT status enable register */
 240:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM &= (uint16_t)~event;
 197              	 .loc 1 240 0
 198 0000 838E     	 ldrh r3,[r0,#52]
 199 0002 9BB2     	 uxth r3,r3
 200 0004 23EA0103 	 bic r3,r3,r1
 201 0008 8386     	 strh r3,[r0,#52]
 241:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
 202              	 .loc 1 241 0
 203 000a C38E     	 ldrh r3,[r0,#54]
 204 000c 9BB2     	 uxth r3,r3
 205 000e 23EA1141 	 bic r1,r3,r1,lsr#16
 206              	.LVL16:
 207 0012 C186     	 strh r1,[r0,#54]
 208 0014 7047     	 bx lr
 209              	 .cfi_endproc
 210              	.LFE221:
 212              	 .section .text.XMC_SDMMC_EnableEvent,"ax",%progbits
 213              	 .align 1
 214              	 .global XMC_SDMMC_EnableEvent
 215              	 .thumb
 216              	 .thumb_func
 218              	XMC_SDMMC_EnableEvent:
 219              	.LFB222:
 242:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 243:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 244:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable SDMMC event */
 245:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 246:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 220              	 .loc 1 246 0
 221              	 .cfi_startproc
 222              	 
 223              	 
 224              	.LVL17:
 225 0000 38B5     	 push {r3,r4,r5,lr}
 226              	.LCFI1:
 227              	 .cfi_def_cfa_offset 16
 228              	 .cfi_offset 3,-16
 229              	 .cfi_offset 4,-12
 230              	 .cfi_offset 5,-8
 231              	 .cfi_offset 14,-4
 232              	 .loc 1 246 0
 233 0002 0446     	 mov r4,r0
 234 0004 0D46     	 mov r5,r1
 247:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 248:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 249:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_EnableEventStatus(sdmmc, event);
 235              	 .loc 1 249 0
 236 0006 FFF7FEFF 	 bl XMC_SDMMC_EnableEventStatus
 237              	.LVL18:
 250:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 251:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 238              	 .loc 1 251 0
 239 000a 238F     	 ldrh r3,[r4,#56]
 240 000c 2B43     	 orrs r3,r3,r5
 241 000e 9BB2     	 uxth r3,r3
 242 0010 2387     	 strh r3,[r4,#56]
 252:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 243              	 .loc 1 252 0
 244 0012 618F     	 ldrh r1,[r4,#58]
 245 0014 89B2     	 uxth r1,r1
 246 0016 41EA1541 	 orr r1,r1,r5,lsr#16
 247 001a 6187     	 strh r1,[r4,#58]
 248 001c 38BD     	 pop {r3,r4,r5,pc}
 249              	 .cfi_endproc
 250              	.LFE222:
 252              	 .section .text.XMC_SDMMC_DisableEvent,"ax",%progbits
 253              	 .align 1
 254              	 .global XMC_SDMMC_DisableEvent
 255              	 .thumb
 256              	 .thumb_func
 258              	XMC_SDMMC_DisableEvent:
 259              	.LFB223:
 253:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 254:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 255:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable SDMMC event without disabling event status */
 256:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 257:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 260              	 .loc 1 257 0
 261              	 .cfi_startproc
 262              	 
 263              	 
 264              	 
 265              	.LVL19:
 258:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 259:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 260:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT signal enable register */
 261:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 266              	 .loc 1 261 0
 267 0000 038F     	 ldrh r3,[r0,#56]
 268 0002 9BB2     	 uxth r3,r3
 269 0004 23EA0103 	 bic r3,r3,r1
 270 0008 0387     	 strh r3,[r0,#56]
 262:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 271              	 .loc 1 262 0
 272 000a 438F     	 ldrh r3,[r0,#58]
 273 000c 9BB2     	 uxth r3,r3
 274 000e 23EA1141 	 bic r1,r3,r1,lsr#16
 275              	.LVL20:
 276 0012 4187     	 strh r1,[r0,#58]
 277 0014 7047     	 bx lr
 278              	 .cfi_endproc
 279              	.LFE223:
 281              	 .section .text.XMC_SDMMC_ClearEvent,"ax",%progbits
 282              	 .align 1
 283              	 .global XMC_SDMMC_ClearEvent
 284              	 .thumb
 285              	 .thumb_func
 287              	XMC_SDMMC_ClearEvent:
 288              	.LFB224:
 263:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 264:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 265:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Clear SDMMC event(s) */
 266:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 267:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 289              	 .loc 1 267 0
 290              	 .cfi_startproc
 291              	 
 292              	 
 293              	 
 294              	.LVL21:
 268:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 269:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));
 270:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 271:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_NORM = (uint16_t)event;
 295              	 .loc 1 271 0
 296 0000 8BB2     	 uxth r3,r1
 272:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 297              	 .loc 1 272 0
 298 0002 090C     	 lsrs r1,r1,#16
 299              	.LVL22:
 271:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 300              	 .loc 1 271 0
 301 0004 0386     	 strh r3,[r0,#48]
 302              	 .loc 1 272 0
 303 0006 4186     	 strh r1,[r0,#50]
 304 0008 7047     	 bx lr
 305              	 .cfi_endproc
 306              	.LFE224:
 308              	 .section .text.XMC_SDMMC_GetEvent,"ax",%progbits
 309              	 .align 1
 310              	 .global XMC_SDMMC_GetEvent
 311              	 .thumb
 312              	 .thumb_func
 314              	XMC_SDMMC_GetEvent:
 315              	.LFB225:
 273:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 274:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 275:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get the status of an SDMMC event */
 276:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
 277:../Libraries/XMCLib/src/xmc_sdmmc.c **** {  
 316              	 .loc 1 277 0
 317              	 .cfi_startproc
 318              	 
 319              	 
 320              	 
 321              	.LVL23:
 278:../Libraries/XMCLib/src/xmc_sdmmc.c ****   bool status;
 279:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 280:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 281:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));
 282:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 283:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 322              	 .loc 1 283 0
 323 0000 B1F5803F 	 cmp r1,#65536
 324 0004 03D2     	 bcs .L17
 284:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 285:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 325              	 .loc 1 285 0
 326 0006 038E     	 ldrh r3,[r0,#48]
 327 0008 9BB2     	 uxth r3,r3
 328 000a 0B42     	 tst r3,r1
 329 000c 02E0     	 b .L19
 330              	.L17:
 286:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 287:../Libraries/XMCLib/src/xmc_sdmmc.c ****   else
 288:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 289:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 331              	 .loc 1 289 0
 332 000e 438E     	 ldrh r3,[r0,#50]
 333 0010 13EA1143 	 ands r3,r3,r1,lsr#16
 334              	.L19:
 335 0014 14BF     	 ite ne
 336 0016 0120     	 movne r0,#1
 337              	.LVL24:
 338 0018 0020     	 moveq r0,#0
 339              	.LVL25:
 290:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 291:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 292:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return status;
 293:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 340              	 .loc 1 293 0
 341 001a 7047     	 bx lr
 342              	 .cfi_endproc
 343              	.LFE225:
 345              	 .section .text.XMC_SDMMC_GetR2Response,"ax",%progbits
 346              	 .align 1
 347              	 .global XMC_SDMMC_GetR2Response
 348              	 .thumb
 349              	 .thumb_func
 351              	XMC_SDMMC_GetR2Response:
 352              	.LFB226:
 294:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 295:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Read R2 response (CID, CSD register) */
 296:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response)
 297:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 353              	 .loc 1 297 0
 354              	 .cfi_startproc
 355              	 
 356              	 
 357              	 
 358              	.LVL26:
 298:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetR2Response: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 299:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 300:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_0 = sdmmc->RESPONSE[0];
 359              	 .loc 1 300 0
 360 0000 0369     	 ldr r3,[r0,#16]
 361 0002 0B60     	 str r3,[r1]
 301:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_2 = sdmmc->RESPONSE[1];
 362              	 .loc 1 301 0
 363 0004 4369     	 ldr r3,[r0,#20]
 364 0006 4B60     	 str r3,[r1,#4]
 302:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_4 = sdmmc->RESPONSE[2];
 365              	 .loc 1 302 0
 366 0008 8369     	 ldr r3,[r0,#24]
 367 000a 8B60     	 str r3,[r1,#8]
 303:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_6 = sdmmc->RESPONSE[3];
 368              	 .loc 1 303 0
 369 000c C369     	 ldr r3,[r0,#28]
 370 000e CB60     	 str r3,[r1,#12]
 371 0010 7047     	 bx lr
 372              	 .cfi_endproc
 373              	.LFE226:
 375              	 .section .text.XMC_SDMMC_SendCommand,"ax",%progbits
 376              	 .align 1
 377              	 .global XMC_SDMMC_SendCommand
 378              	 .thumb
 379              	 .thumb_func
 381              	XMC_SDMMC_SendCommand:
 382              	.LFB227:
 304:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 305:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 306:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Send SDMMC command */
 307:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, 
 308:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 383              	 .loc 1 308 0
 384              	 .cfi_startproc
 385              	 
 386              	 
 387              	 
 388              	.LVL27:
 309:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 310:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 311:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->ARGUMENT1 = arg;
 312:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 389              	 .loc 1 312 0
 390 0000 0B88     	 ldrh r3,[r1]
 311:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 391              	 .loc 1 311 0
 392 0002 8260     	 str r2,[r0,#8]
 393              	 .loc 1 312 0
 394 0004 C381     	 strh r3,[r0,#14]
 313:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 314:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 315:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 395              	 .loc 1 315 0
 396 0006 0020     	 movs r0,#0
 397              	.LVL28:
 398 0008 7047     	 bx lr
 399              	 .cfi_endproc
 400              	.LFE227:
 402              	 .section .text.XMC_SDMMC_SetDataTransferMode,"ax",%progbits
 403              	 .align 1
 404              	 .global XMC_SDMMC_SetDataTransferMode
 405              	 .thumb
 406              	 .thumb_func
 408              	XMC_SDMMC_SetDataTransferMode:
 409              	.LFB228:
 316:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 317:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Set data transfer mode */
 318:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const respo
 319:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 410              	 .loc 1 319 0
 411              	 .cfi_startproc
 412              	 
 413              	 
 414              	 
 415              	.LVL29:
 320:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sd
 321:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(
 322:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 323:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Block size */
 324:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 416              	 .loc 1 324 0
 417 0000 0B88     	 ldrh r3,[r1]
 418 0002 8380     	 strh r3,[r0,#4]
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 326:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Number of blocks */
 327:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 419              	 .loc 1 327 0
 420 0004 8B88     	 ldrh r3,[r1,#4]
 421 0006 C380     	 strh r3,[r0,#6]
 328:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 329:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Type of data transfer: single, infinite, multiple or stop multiple */
 330:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BL
 422              	 .loc 1 330 0
 423 0008 8389     	 ldrh r3,[r0,#12]
 331:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 424              	 .loc 1 331 0
 425 000a 0A7A     	 ldrb r2,[r1,#8]
 330:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 426              	 .loc 1 330 0
 427 000c 9BB2     	 uxth r3,r3
 428 000e 23F02003 	 bic r3,r3,#32
 429 0012 1343     	 orrs r3,r3,r2
 430 0014 8381     	 strh r3,[r0,#12]
 332:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 333:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /*
 334:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * Clear block count enable bit; that's only valid for
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * a multi-block transfer
 336:../Libraries/XMCLib/src/xmc_sdmmc.c ****    */
 337:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 431              	 .loc 1 337 0
 432 0016 2AB9     	 cbnz r2,.L24
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 339:../Libraries/XMCLib/src/xmc_sdmmc.c ****     sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 433              	 .loc 1 339 0
 434 0018 8389     	 ldrh r3,[r0,#12]
 435 001a 23F00203 	 bic r3,r3,#2
 436 001e 1B04     	 lsls r3,r3,#16
 437 0020 1B0C     	 lsrs r3,r3,#16
 438 0022 8381     	 strh r3,[r0,#12]
 439              	.L24:
 340:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 341:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 342:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Auto CMD configuration */
 343:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_
 440              	 .loc 1 343 0
 441 0024 8389     	 ldrh r3,[r0,#12]
 344:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 442              	 .loc 1 344 0
 443 0026 4A7A     	 ldrb r2,[r1,#9]
 343:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 444              	 .loc 1 343 0
 445 0028 9BB2     	 uxth r3,r3
 446 002a 23F00C03 	 bic r3,r3,#12
 447 002e 43EA8203 	 orr r3,r3,r2,lsl#2
 448 0032 8381     	 strh r3,[r0,#12]
 449 0034 7047     	 bx lr
 450              	 .cfi_endproc
 451              	.LFE228:
 453              	 .text
 454              	.Letext0:
 455              	 .file 2 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 456              	 .file 3 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 457              	 .file 4 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_sdmmc.h"
 458              	 .file 5 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc4_scu.h"
 459              	 .file 6 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Include/core_cm4.h"
 460              	 .file 7 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_sdmmc.c
    {standard input}:20     .text.XMC_SDMMC_GetPowerStatus:00000000 $t
    {standard input}:25     .text.XMC_SDMMC_GetPowerStatus:00000000 XMC_SDMMC_GetPowerStatus
    {standard input}:44     .text.XMC_SDMMC_Enable:00000000 $t
    {standard input}:49     .text.XMC_SDMMC_Enable:00000000 XMC_SDMMC_Enable
    {standard input}:65     .text.XMC_SDMMC_Enable:00000008 $d
    {standard input}:70     .text.XMC_SDMMC_Disable:00000000 $t
    {standard input}:75     .text.XMC_SDMMC_Disable:00000000 XMC_SDMMC_Disable
    {standard input}:91     .text.XMC_SDMMC_Disable:00000008 $d
    {standard input}:96     .text.XMC_SDMMC_Init:00000000 $t
    {standard input}:101    .text.XMC_SDMMC_Init:00000000 XMC_SDMMC_Init
    {standard input}:150    .text.XMC_SDMMC_Init:00000030 $d
    {standard input}:155    .text.XMC_SDMMC_EnableEventStatus:00000000 $t
    {standard input}:160    .text.XMC_SDMMC_EnableEventStatus:00000000 XMC_SDMMC_EnableEventStatus
    {standard input}:184    .text.XMC_SDMMC_DisableEventStatus:00000000 $t
    {standard input}:189    .text.XMC_SDMMC_DisableEventStatus:00000000 XMC_SDMMC_DisableEventStatus
    {standard input}:213    .text.XMC_SDMMC_EnableEvent:00000000 $t
    {standard input}:218    .text.XMC_SDMMC_EnableEvent:00000000 XMC_SDMMC_EnableEvent
    {standard input}:253    .text.XMC_SDMMC_DisableEvent:00000000 $t
    {standard input}:258    .text.XMC_SDMMC_DisableEvent:00000000 XMC_SDMMC_DisableEvent
    {standard input}:282    .text.XMC_SDMMC_ClearEvent:00000000 $t
    {standard input}:287    .text.XMC_SDMMC_ClearEvent:00000000 XMC_SDMMC_ClearEvent
    {standard input}:309    .text.XMC_SDMMC_GetEvent:00000000 $t
    {standard input}:314    .text.XMC_SDMMC_GetEvent:00000000 XMC_SDMMC_GetEvent
    {standard input}:346    .text.XMC_SDMMC_GetR2Response:00000000 $t
    {standard input}:351    .text.XMC_SDMMC_GetR2Response:00000000 XMC_SDMMC_GetR2Response
    {standard input}:376    .text.XMC_SDMMC_SendCommand:00000000 $t
    {standard input}:381    .text.XMC_SDMMC_SendCommand:00000000 XMC_SDMMC_SendCommand
    {standard input}:403    .text.XMC_SDMMC_SetDataTransferMode:00000000 $t
    {standard input}:408    .text.XMC_SDMMC_SetDataTransferMode:00000000 XMC_SDMMC_SetDataTransferMode
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.ca5ae67a873a4952d630d8e4120b9e3e
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4e89a3f145accdcb1100c37260c088e6
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.65.5c0d35eb1a6853ff8300ab2ec1b944b0
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.57f124f9262f3dbf77da6a6506ffb430
                           .group:00000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:00000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1500.3eca65ed9ba7f90e09c1ffcb0b3f5724
                           .group:00000000 wm4.xmc_common.h.98.806f17e888fd51d0e4be2ad115163551
                           .group:00000000 wm4.xmc_sdmmc.h.135.3faa5e02bcae5296a9ef95b39c69b3c3
                           .group:00000000 wm4.xmc4_scu.h.90.f49c0839764a6c1240876a5f2e586200

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
