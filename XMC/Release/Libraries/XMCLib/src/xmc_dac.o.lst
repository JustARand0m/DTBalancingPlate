   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dac.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DAC_Enable,"ax",%progbits
  20              	 .align 1
  21              	 .global XMC_DAC_Enable
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_DAC_Enable:
  26              	.LFB202:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_dac.c"
   1:../Libraries/XMCLib/src/xmc_dac.c **** /**
   2:../Libraries/XMCLib/src/xmc_dac.c ****  * @file xmc_dac.c
   3:../Libraries/XMCLib/src/xmc_dac.c ****  * @date 2015-06-19
   4:../Libraries/XMCLib/src/xmc_dac.c ****  *
   5:../Libraries/XMCLib/src/xmc_dac.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_dac.c ****  **********************************************************************************
   7:../Libraries/XMCLib/src/xmc_dac.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_dac.c ****  *
   9:../Libraries/XMCLib/src/xmc_dac.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_dac.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_dac.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_dac.c ****  * Redistribution and use in source and binary forms, with or without           
  13:../Libraries/XMCLib/src/xmc_dac.c ****  * modification,are permitted provided that the following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_dac.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_dac.c ****  *   Redistributions of source code must retain the above copyright notice,      
  16:../Libraries/XMCLib/src/xmc_dac.c ****  *   this list of conditions and the following disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_dac.c ****  * 
  18:../Libraries/XMCLib/src/xmc_dac.c ****  *   Redistributions in binary form must reproduce the above copyright notice,   
  19:../Libraries/XMCLib/src/xmc_dac.c ****  *   this list of conditions and the following disclaimer in the documentation    
  20:../Libraries/XMCLib/src/xmc_dac.c ****  *   and/or other materials provided with the distribution.                       
  21:../Libraries/XMCLib/src/xmc_dac.c ****  * 
  22:../Libraries/XMCLib/src/xmc_dac.c ****  *   Neither the name of the copyright holders nor the names of its contributors 
  23:../Libraries/XMCLib/src/xmc_dac.c ****  *   may be used to endorse or promote products derived from this software without
  24:../Libraries/XMCLib/src/xmc_dac.c ****  *   specific prior written permission.                                           
  25:../Libraries/XMCLib/src/xmc_dac.c ****  *                                                                              
  26:../Libraries/XMCLib/src/xmc_dac.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
  27:../Libraries/XMCLib/src/xmc_dac.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    
  28:../Libraries/XMCLib/src/xmc_dac.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
  29:../Libraries/XMCLib/src/xmc_dac.c ****  * ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   
  30:../Libraries/XMCLib/src/xmc_dac.c ****  * LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         
  31:../Libraries/XMCLib/src/xmc_dac.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         
  32:../Libraries/XMCLib/src/xmc_dac.c ****  * SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    
  33:../Libraries/XMCLib/src/xmc_dac.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      
  34:../Libraries/XMCLib/src/xmc_dac.c ****  * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       
  35:../Libraries/XMCLib/src/xmc_dac.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
  36:../Libraries/XMCLib/src/xmc_dac.c ****  * POSSIBILITY OF SUCH DAMAGE.                                                  
  37:../Libraries/XMCLib/src/xmc_dac.c ****  *                                                                              
  38:../Libraries/XMCLib/src/xmc_dac.c ****  * To improve the quality of the software, users are encouraged to share        
  39:../Libraries/XMCLib/src/xmc_dac.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG       
  40:../Libraries/XMCLib/src/xmc_dac.c ****  * dave@infineon.com).                                                          
  41:../Libraries/XMCLib/src/xmc_dac.c ****  **********************************************************************************
  42:../Libraries/XMCLib/src/xmc_dac.c ****  *
  43:../Libraries/XMCLib/src/xmc_dac.c ****  * Change History
  44:../Libraries/XMCLib/src/xmc_dac.c ****  * --------------
  45:../Libraries/XMCLib/src/xmc_dac.c ****  *
  46:../Libraries/XMCLib/src/xmc_dac.c ****  * 2015-02-18:
  47:../Libraries/XMCLib/src/xmc_dac.c ****  *     - Initial version
  48:../Libraries/XMCLib/src/xmc_dac.c ****  *
  49:../Libraries/XMCLib/src/xmc_dac.c ****  * 2015-06-19:
  50:../Libraries/XMCLib/src/xmc_dac.c ****  *     - Removed GetDriverVersion API
  51:../Libraries/XMCLib/src/xmc_dac.c ****  * @endcond 
  52:../Libraries/XMCLib/src/xmc_dac.c ****  *
  53:../Libraries/XMCLib/src/xmc_dac.c ****  */
  54:../Libraries/XMCLib/src/xmc_dac.c **** 
  55:../Libraries/XMCLib/src/xmc_dac.c **** /*******************************************************************************
  56:../Libraries/XMCLib/src/xmc_dac.c ****  * HEADER FILES
  57:../Libraries/XMCLib/src/xmc_dac.c ****  *******************************************************************************/
  58:../Libraries/XMCLib/src/xmc_dac.c **** 
  59:../Libraries/XMCLib/src/xmc_dac.c **** #include <xmc_dac.h>
  60:../Libraries/XMCLib/src/xmc_dac.c **** #include <xmc_scu.h>
  61:../Libraries/XMCLib/src/xmc_dac.c **** 
  62:../Libraries/XMCLib/src/xmc_dac.c **** /* DAC peripheral is not available on XMC1X devices. */
  63:../Libraries/XMCLib/src/xmc_dac.c **** #if defined(DAC)
  64:../Libraries/XMCLib/src/xmc_dac.c **** 
  65:../Libraries/XMCLib/src/xmc_dac.c **** /*******************************************************************************
  66:../Libraries/XMCLib/src/xmc_dac.c ****  * MACROS
  67:../Libraries/XMCLib/src/xmc_dac.c ****  *******************************************************************************/
  68:../Libraries/XMCLib/src/xmc_dac.c **** 
  69:../Libraries/XMCLib/src/xmc_dac.c **** #define XMC_DAC_MIN_FREQ_DIVIDER (16U)
  70:../Libraries/XMCLib/src/xmc_dac.c **** #define XMC_DAC_MAX_FREQ_DIVIDER (1048576U)
  71:../Libraries/XMCLib/src/xmc_dac.c **** #define XMC_DAC_DAC0PATL_PAT_BITSIZE (5U)
  72:../Libraries/XMCLib/src/xmc_dac.c **** 
  73:../Libraries/XMCLib/src/xmc_dac.c **** /*******************************************************************************
  74:../Libraries/XMCLib/src/xmc_dac.c ****  * API IMPLEMENTATION
  75:../Libraries/XMCLib/src/xmc_dac.c ****  *******************************************************************************/
  76:../Libraries/XMCLib/src/xmc_dac.c **** 
  77:../Libraries/XMCLib/src/xmc_dac.c **** /* API to enable the DAC module */
  78:../Libraries/XMCLib/src/xmc_dac.c **** void XMC_DAC_Enable(XMC_DAC_t *const dac)
  79:../Libraries/XMCLib/src/xmc_dac.c **** {
  28              	 .loc 1 79 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
  80:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_UNUSED_ARG(dac);
  81:../Libraries/XMCLib/src/xmc_dac.c ****   
  82:../Libraries/XMCLib/src/xmc_dac.c **** #if defined(CLOCK_GATING_SUPPORTED)
  83:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
  84:../Libraries/XMCLib/src/xmc_dac.c **** #endif
  85:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
  34              	 .loc 1 85 0
  35 0000 0148     	 ldr r0,.L2
  36              	.LVL1:
  37 0002 FFF7FEBF 	 b XMC_SCU_RESET_DeassertPeripheralReset
  38              	.LVL2:
  39              	.L3:
  40 0006 00BF     	 .align 2
  41              	.L2:
  42 0008 20000010 	 .word 268435488
  43              	 .cfi_endproc
  44              	.LFE202:
  46              	 .section .text.XMC_DAC_Disable,"ax",%progbits
  47              	 .align 1
  48              	 .global XMC_DAC_Disable
  49              	 .thumb
  50              	 .thumb_func
  52              	XMC_DAC_Disable:
  53              	.LFB203:
  86:../Libraries/XMCLib/src/xmc_dac.c **** }
  87:../Libraries/XMCLib/src/xmc_dac.c **** 
  88:../Libraries/XMCLib/src/xmc_dac.c **** /* API to disable the DAC module */
  89:../Libraries/XMCLib/src/xmc_dac.c **** void XMC_DAC_Disable(XMC_DAC_t *const dac)
  90:../Libraries/XMCLib/src/xmc_dac.c **** {
  54              	 .loc 1 90 0
  55              	 .cfi_startproc
  56              	 
  57              	 
  58              	 
  59              	.LVL3:
  91:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_UNUSED_ARG(dac);
  92:../Libraries/XMCLib/src/xmc_dac.c **** 
  93:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
  60              	 .loc 1 93 0
  61 0000 0148     	 ldr r0,.L5
  62              	.LVL4:
  63 0002 FFF7FEBF 	 b XMC_SCU_RESET_AssertPeripheralReset
  64              	.LVL5:
  65              	.L6:
  66 0006 00BF     	 .align 2
  67              	.L5:
  68 0008 20000010 	 .word 268435488
  69              	 .cfi_endproc
  70              	.LFE203:
  72              	 .section .text.XMC_DAC_IsEnabled,"ax",%progbits
  73              	 .align 1
  74              	 .global XMC_DAC_IsEnabled
  75              	 .thumb
  76              	 .thumb_func
  78              	XMC_DAC_IsEnabled:
  79              	.LFB204:
  94:../Libraries/XMCLib/src/xmc_dac.c **** #if defined(CLOCK_GATING_SUPPORTED)
  95:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
  96:../Libraries/XMCLib/src/xmc_dac.c **** #endif
  97:../Libraries/XMCLib/src/xmc_dac.c **** }
  98:../Libraries/XMCLib/src/xmc_dac.c **** 
  99:../Libraries/XMCLib/src/xmc_dac.c **** /* API to check whether DAC is enabled */
 100:../Libraries/XMCLib/src/xmc_dac.c **** bool XMC_DAC_IsEnabled(const XMC_DAC_t *const dac)
 101:../Libraries/XMCLib/src/xmc_dac.c **** {
  80              	 .loc 1 101 0
  81              	 .cfi_startproc
  82              	 
  83              	 
  84              	.LVL6:
  85 0000 08B5     	 push {r3,lr}
  86              	.LCFI0:
  87              	 .cfi_def_cfa_offset 8
  88              	 .cfi_offset 3,-8
  89              	 .cfi_offset 14,-4
 102:../Libraries/XMCLib/src/xmc_dac.c ****   bool status;
 103:../Libraries/XMCLib/src/xmc_dac.c **** 
 104:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_UNUSED_ARG(dac);
 105:../Libraries/XMCLib/src/xmc_dac.c **** 
 106:../Libraries/XMCLib/src/xmc_dac.c ****   status = XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_DAC);
  90              	 .loc 1 106 0
  91 0002 0348     	 ldr r0,.L8
  92              	.LVL7:
  93 0004 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
  94              	.LVL8:
 107:../Libraries/XMCLib/src/xmc_dac.c ****   if(status == true)
  95              	 .loc 1 107 0
  96 0008 80F00100 	 eor r0,r0,#1
  97              	.LVL9:
 108:../Libraries/XMCLib/src/xmc_dac.c ****   {
 109:../Libraries/XMCLib/src/xmc_dac.c ****     status = false;
 110:../Libraries/XMCLib/src/xmc_dac.c ****   }
 111:../Libraries/XMCLib/src/xmc_dac.c ****   else
 112:../Libraries/XMCLib/src/xmc_dac.c ****   {
 113:../Libraries/XMCLib/src/xmc_dac.c ****     status = true;
 114:../Libraries/XMCLib/src/xmc_dac.c ****   }
 115:../Libraries/XMCLib/src/xmc_dac.c ****   return (status);
 116:../Libraries/XMCLib/src/xmc_dac.c **** }
  98              	 .loc 1 116 0
  99 000c C0B2     	 uxtb r0,r0
 100 000e 08BD     	 pop {r3,pc}
 101              	.L9:
 102              	 .align 2
 103              	.L8:
 104 0010 20000010 	 .word 268435488
 105              	 .cfi_endproc
 106              	.LFE204:
 108              	 .section .text.XMC_DAC_CH_Init,"ax",%progbits
 109              	 .align 1
 110              	 .global XMC_DAC_CH_Init
 111              	 .thumb
 112              	 .thumb_func
 114              	XMC_DAC_CH_Init:
 115              	.LFB205:
 117:../Libraries/XMCLib/src/xmc_dac.c **** 
 118:../Libraries/XMCLib/src/xmc_dac.c **** /* API to initialize DAC channel configuration */
 119:../Libraries/XMCLib/src/xmc_dac.c **** void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const 
 120:../Libraries/XMCLib/src/xmc_dac.c **** {
 116              	 .loc 1 120 0
 117              	 .cfi_startproc
 118              	 
 119              	 
 120              	.LVL10:
 121 0000 70B5     	 push {r4,r5,r6,lr}
 122              	.LCFI1:
 123              	 .cfi_def_cfa_offset 16
 124              	 .cfi_offset 4,-16
 125              	 .cfi_offset 5,-12
 126              	 .cfi_offset 6,-8
 127              	 .cfi_offset 14,-4
 128              	 .loc 1 120 0
 129 0002 0D46     	 mov r5,r1
 130 0004 1646     	 mov r6,r2
 131 0006 0446     	 mov r4,r0
 132              	.LVL11:
 133              	.LBB38:
 134              	.LBB39:
  85:../Libraries/XMCLib/src/xmc_dac.c **** }
 135              	 .loc 1 85 0
 136 0008 0748     	 ldr r0,.L12
 137              	.LVL12:
 138 000a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 139              	.LVL13:
 140 000e 04EBC500 	 add r0,r4,r5,lsl#3
 141              	.LBE39:
 142              	.LBE38:
 121:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_Enable(dac);
 122:../Libraries/XMCLib/src/xmc_dac.c **** 
 123:../Libraries/XMCLib/src/xmc_dac.c ****   dac->DACCFG[channel].low = config->cfg0;
 143              	 .loc 1 123 0
 144 0012 3368     	 ldr r3,[r6]
 145 0014 4360     	 str r3,[r0,#4]
 124:../Libraries/XMCLib/src/xmc_dac.c ****   dac->DACCFG[channel].high = config->cfg1;
 146              	 .loc 1 124 0
 147 0016 7368     	 ldr r3,[r6,#4]
 148 0018 8360     	 str r3,[r0,#8]
 125:../Libraries/XMCLib/src/xmc_dac.c ****   if (channel < XMC_DAC_NO_CHANNELS)
 149              	 .loc 1 125 0
 150 001a 012D     	 cmp r5,#1
 151              	.LVL14:
 152              	.LBB40:
 153              	.LBB41:
 154              	 .file 2 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_dac.h"
   1:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
   2:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @file xmc_dac.h
   3:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @date 2015-08-31
   4:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
   5:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @cond
   6:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  **********************************************************************************
   7:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
   9:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * All rights reserved.                        
  11:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *                                             
  12:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Redistribution and use in source and binary forms, with or without           
  13:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * modification,are permitted provided that the following conditions are met:   
  14:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *                                                                              
  15:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *   Redistributions of source code must retain the above copyright notice,      
  16:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *   this list of conditions and the following disclaimer.                        
  17:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 
  18:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *   Redistributions in binary form must reproduce the above copyright notice,   
  19:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *   this list of conditions and the following disclaimer in the documentation    
  20:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *   and/or other materials provided with the distribution.                       
  21:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 
  22:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *   Neither the name of the copyright holders nor the names of its contributors 
  23:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *   may be used to endorse or promote products derived from this software without
  24:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *   specific prior written permission.                                           
  25:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *                                                                              
  26:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
  27:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    
  28:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
  29:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   
  30:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         
  31:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         
  32:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    
  33:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      
  34:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       
  35:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
  36:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * POSSIBILITY OF SUCH DAMAGE.                                                  
  37:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *                                                                              
  38:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * To improve the quality of the software, users are encouraged to share        
  39:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG       
  40:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * dave@infineon.com).                                                          
  41:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  **********************************************************************************
  42:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
  43:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Change History
  44:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * --------------
  45:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
  46:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 2015-02-18:
  47:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *     - Initial version
  48:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *      
  49:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 2015-02-20:
  50:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *     - Driver description added
  51:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
  52:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 2015-06-19:
  53:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  54:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
  55:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 2015-08-31:
  56:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *     - Help document updated
  57:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @endcond 
  58:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
  59:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
  60:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
  61:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #ifndef XMC_DAC_H
  62:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_H
  63:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
  64:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
  65:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * HEADER FILES
  66:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
  67:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
  68:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #include <xmc_common.h>
  69:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
  70:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /* DAC peripheral is not available on XMC1X devices. */
  71:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #if defined(DAC)
  72:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
  73:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
  74:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @addtogroup XMClib
  75:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @{
  76:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
  77:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
  78:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
  79:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @addtogroup DAC
  80:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @{
  81:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
  82:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @brief Digital to Analog Converter (DAC) driver for XMC 4000 microcontroller family. <br>
  83:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
  84:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC driver uses DAC peripheral to convert digital value to analog value. XMC4000 microcontroller
  85:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * and maximum conversion rate of 2MHz with full accuracy and 5MHz with reduced accuracy.
  86:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * It consists of inbuilt pattern generator, ramp generator and noise generator modes. Additionally
  87:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * in single value mode and in data mode.
  88:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * It has DMA handling capability to generate custom waveforms in data mode without CPU interventio
  89:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
  90:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC driver features:
  91:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * -#  Configuration structure XMC_DAC_CH_CONFIG_t and initialization function XMC_DAC_CH_Init() to
  92:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * -#  Pattern Generator Mode:
  93:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- DAC is configured in pattern generator mode using XMC_DAC_CH_StartPatternMode()
  94:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- XMC_DAC_CH_SetPattern() is used to set the waveform pattern values in pattern register for on
  95:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- Allows to change the trigger frequency using XMC_DAC_CH_SetPatternFrequency()
  96:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * -#  Single Value Mode:
  97:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- DAC is configured in single value mode using XMC_DAC_CH_StartSingleValueMode()
  98:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- Allows to change the trigger frequency using XMC_DAC_CH_SetFrequency()
  99:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Data Mode:
 100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- DAC is configured in data mode using XMC_DAC_CH_StartDataMode()
 101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- Allows to change the trigger frequency using XMC_DAC_CH_SetFrequency()
 102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Ramp Mode:
 103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *  - DAC is configured in ramp generator mode using XMC_DAC_CH_StartRampMode()
 104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *  - Allows to change the trigger frequency using XMC_DAC_CH_SetRampFrequency()
 105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *  - Allows to set the start and stop values of the ramp using XMC_DAC_CH_SetRampStart() and XMC_D
 106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Noise Mode:
 107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- DAC is configured in noise mode using XMC_DAC_CH_StartNoiseMode()
 108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- Allows to change the trigger frequency using XMC_DAC_CH_SetFrequency()
 109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Allows to change the scale, offset dynamically using XMC_DAC_CH_SetOutputScale() and XMC_DAC_
 110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Allows to select one of the eight possible trigger sources using XMC_DAC_CH_SetTrigger()
 111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * -# 2 DAC channels can be used in synchronization in single value mode and data mode to generate 
 112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
 115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * MACROS
 116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
 117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC0 ((XMC_DAC_t *)DAC_BASE)         /**< DAC module register base */
 119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_DACCFG_NEGATE_Msk (0x10000000UL) /*< DAC negation enable mask in XMC44 device */
 121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_NO_CHANNELS (2U)                 /**< DAC maximum channels */
 122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_SAMPLES_PER_PERIOD (32U)         /**< DAC samples per period in pattern mode */
 123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_PATTERN_TRIANGLE  {0U, 4U, 8U, 12U, 16U, 19U, 23U, 27U, 31U} /**< First quarter Tri
 125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_PATTERN_SINE      {0U, 6U, 12U, 17U, 22U, 26U, 29U, 30U, 31U} /**< First quarter Si
 126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_PATTERN_RECTANGLE {31U, 31U, 31U, 31U, 31U, 31U, 31U, 31U, 31U} /**< First quarter 
 127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_DAC_VALID(PTR)            ((PTR) == XMC_DAC0)
 129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_CHANNEL_VALID(CH)         (CH < XMC_DAC_NO_CHANNELS)
 130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_TRIGGER_VALID(TRIGGER)    ((TRIGGER == XMC_DAC_CH_TRIGGER_INTERNAL) ||\
 131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1) ||
 132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1) ||
 133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1) ||
 134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9) ||\
 135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8) ||\
 136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS) 
 137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS) 
 138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_SOFTWARE))
 139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_MODE_VALID(MODE)          ((MODE == XMC_DAC_CH_MODE_IDLE) ||\
 140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_SINGLE) ||\
 141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_DATA) ||\
 142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_PATTERN) ||\
 143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_NOISE) ||\
 144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_RAMP))
 145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_OUTPUT_SCALE_VALID(SCALE) ((SCALE == XMC_DAC_CH_OUTPUT_SCALE_NONE) ||\
 146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_2) ||\
 147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_4) ||\
 148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_8) ||\
 149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_16) ||\
 150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_32) ||\
 151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_64) ||\
 152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_128) ||\
 153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_2) ||\
 154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_4) ||\
 155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_8) ||\
 156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_16) ||\
 157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_32) ||\
 158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_64) ||\
 159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_128))
 160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                             
 161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
 163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * ENUMS
 164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
 165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Return types of the API's
 168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_STATUS
 170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_OK              = 0U, /**< Status is ok, no error detected */
 172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_ERROR           = 1U, /**< Error detected */
 173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_BUSY            = 2U, /**< DAC is busy */
 174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_ERROR_FREQ2LOW  = 3U, /**< Frequency can't be configured. Frequency is to low. 
 175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH = 4U  /**< Frequency can't be configured. Frequency is to high.
 176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_STATUS_t;
 177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Operating modes of DAC
 180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_MODE
 182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_IDLE    = 0x0U << DAC_DAC0CFG0_MODE_Pos,    /**< DAC is disabled */
 184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_SINGLE  = 0x1U << DAC_DAC0CFG0_MODE_Pos,    /**< Single value mode - single data 
 185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_DATA    = 0x2U << DAC_DAC0CFG0_MODE_Pos,    /**< Data mode - continuous data proc
 186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_PATTERN = 0x3U << DAC_DAC0CFG0_MODE_Pos,    /**< Pattern mode - inbuilt pattern w
 187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                                    Sine, Triangle, Rectangle */
 188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_NOISE   = 0x4U << DAC_DAC0CFG0_MODE_Pos,    /**< Noise mode - pseudo-random noise
 189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_RAMP    = 0x5U << DAC_DAC0CFG0_MODE_Pos     /**< Ramp mode - ramp generation */
 190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_MODE_t;
 191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Trigger sources for the data update
 194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_TRIGGER
 196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_INTERNAL =
 198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x0U << DAC_DAC0CFG1_TRIGMOD_Pos),                                      /**< Internal trigge
 199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1 =
 200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | 0x0U,                               /**< External trigge
 201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1 =
 202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x2U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1 =
 204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x3U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9 =
 206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x4U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8 =
 208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x5U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS =
 210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x6U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS =
 212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x7U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_SOFTWARE =
 214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x2U << DAC_DAC0CFG1_TRIGMOD_Pos)                                       /**< Software trigge
 215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_TRIGGER_t;
 216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Data type of the input data
 219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_DATA_TYPE
 221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_DATA_TYPE_UNSIGNED = 0U , /**< input data is unsigned */
 223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_DATA_TYPE_SIGNED = 1U     /**< input data is signed */
 224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_DATA_TYPE_t;
 225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Scaling of the input data
 228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_OUTPUT_SCALE
 230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_NONE =
 232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       0x0U,                                                                   /**< No scaling */
 233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_2 =
 234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x1U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 2 
 235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_4 =
 236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x2U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 4 
 237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_8 =
 238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x3U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 8 
 239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_16 =
 240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x4U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 16
 241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_32 =
 242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x5U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 32
 243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_64 =
 244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x6U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 64
 245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_128 =
 246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x7U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 12
 247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_2 =
 248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       0x1U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 2 */
 249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_4 =
 250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       0x2U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 4 */
 251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_8 =
 252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       0x3U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 8 */
 253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_16 =
 254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       0x4U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 16 */
 255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_32 =
 256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       0x5U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 32 */
 257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_64 =
 258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       0x6U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 64 */
 259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_128 =
 260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****       0x7U << DAC_DAC0CFG1_SCALE_Pos                                          /**< divided by 128 *
 261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_OUTPUT_SCALE_t;
 262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Negation of input data (applicable only for XMC44 device)
 265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_OUTPUT_NEGATION
 267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_NEGATION_DISABLED = 0U,                   /**< XMC_DAC_CH_OUTPUT_NEGATION_DISAB
 269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_NEGATION_ENABLED = 1U                     /**< XMC_DAC_CH_OUTPUT_NEGATION_ENABL
 270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_OUTPUT_NEGATION_t;
 271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Output sign signal for the Pattern Generation Mode
 274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_PATTERN_SIGN_OUTPUT
 276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_PATTERN_SIGN_OUTPUT_DISABLED = 0U,  /**< Sign output signal generation is disabled */
 278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED = 1U    /**< Sign output signal generation is enabled */
 279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t;
 280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
 282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DATA STRUCTURES
 283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
 284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC peripheral registers configuration.
 286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** typedef struct
 288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   __I  uint32_t  ID;
 290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   struct
 292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   {
 293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****      __IO uint32_t low;
 294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****      __IO uint32_t high;
 295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   } DACCFG[XMC_DAC_NO_CHANNELS];
 296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   __IO uint32_t DACDATA[XMC_DAC_NO_CHANNELS];
 298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   __IO uint32_t DAC01DATA;
 299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   struct
 301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   {
 302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****      __IO uint32_t low;
 303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****      __IO uint32_t high;
 304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   } DACPAT[XMC_DAC_NO_CHANNELS];
 305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_t;
 307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /*Anonymous structure/union guard start*/
 309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #if defined(__CC_ARM)
 310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma push
 311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma anon_unions
 312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #elif defined(__TASKING__)
 313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma warning 586
 314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #endif
 315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel related configuration
 318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** typedef struct XMC_DAC_CH_CONFIG
 320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   union
 322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   {
 323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   struct
 324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   {
 325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t :23;                /**< Not used bits */
 326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t data_type:1;        /**< input data type - unsigned / signed */
 327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t :4;                 /**< Not used bits */
 328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t output_negation:1;  /**< Negation of the output waveform enabled/disabled */
 329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t :3;
 330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   };
 331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   uint32_t cfg0;
 332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   };
 333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   union
 334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   {
 335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   struct
 336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   {
 337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t output_scale:4;  /**< Scale value of type XMC_DAC_CH_OUTPUT_SCALE_t. It includes scali
 338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t output_offset:8; /**< offset value */
 339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t :20;
 340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   };
 341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   uint32_t cfg1;
 342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   };
 343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_CONFIG_t;
 344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /*Anonymous structure/union guard end*/
 345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #if defined(__CC_ARM)
 346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma pop
 347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #elif defined(__TASKING__)
 348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma warning restore
 349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #endif
 350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
 351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * API PROTOTYPES
 352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
 353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #ifdef __cplusplus
 355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** extern "C" {
 356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** #endif
 357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Enables DAC clock and releases DAC reset.<br>
 365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Enabling DAC is the first step of DAC initialisation. This API is called by XMC_DAC_CH_Init().
 368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC clock is enabled by setting \a DAC bit of \a CGATCLR1 register. DAC reset is released by set
 369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_IsEnabled(), XMC_DAC_Disable(), XMC_DAC_CH_Init()\n\n\n
 373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** void XMC_DAC_Enable(XMC_DAC_t *const dac);
 376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Disables DAC clock and resets DAC.
 384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC clock is disabled by setting \a DAC bit of \a CGATSET1 register. DAC is reset by setting \a 
 387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_IsEnabled(), XMC_DAC_Enable()\n\n\n
 390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** void XMC_DAC_Disable(XMC_DAC_t *const dac);
 393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return bool<br>
 398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * true  - if DAC is enabled<br>
 399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * false - if DAC is disabled
 400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Returns the state of the DAC.
 403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC enabled status is determined by referring to \a DACRS bit of \a PRSTAT1 register.
 406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_Enable(), XMC_DAC_Disable()\n\n\n
 409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** bool XMC_DAC_IsEnabled(const XMC_DAC_t *const dac);
 412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC switches to Simultaneous data mode from Independent data mode.
 420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Independent data mode is the default data mode.
 423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Simultaneous data mode is enabled by setting \a DATMOD bit of \a DAC0CFG1 register.
 424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Set channel 0 and channel 1 to Data mode before calling this API.
 427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_SimultaneousWrite(), XMC_
 430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_EnableSimultaneousDataMode(XMC_DAC_t *const dac)
 433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_EnableSimultaneousDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(
 435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[0].high |= DAC_DAC0CFG1_DATMOD_Msk;
 437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC switches to independent data mode from simultaneous Data mode.
 446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Independent data mode is the default data mode.
 449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Simultaneous data mode is disabled by clearing \a DATMOD bit of \a DAC0CFG1 register.
 450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartDataMode(), XMC_DAC_EnableSimultaneousDataMode()\n\n\n
 453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_DisableSimultaneousDataMode(XMC_DAC_t *const dac)
 456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_DisableSimultaneousDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID
 458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[0].high &= ~DAC_DAC0CFG1_DATMOD_Msk;
 460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param data0 Data for DAC channel 0 [0-4095]
 465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param data1 Data for DAC channel 1 [0-4095]
 466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * The data (\e data0 & \e data1) to be converted by channel 0 & channel 1 are updated to \a DATA1 
 471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * data0 and data1 have the range of [0-4095].
 472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel 0 and Channel 1 should be set to simultaneous data mode before calling this API.
 475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_EnableSimultaneousDataMode()\n\n\n
 478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_SimultaneousWrite(XMC_DAC_t *const dac, const uint16_t data0, const ui
 481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_SimultaneousWrite: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DAC01DATA = (data0 << DAC_DAC01DATA_DATA0_Pos) | (data1 << DAC_DAC01DATA_DATA1_Pos);
 485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param config Pointer to the DAC channel configuration structure
 491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Initialises and configures the DAC \e channel with the configuration date pointed by \e config.
 496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC channel is initialised by configuring the registers \a DAC0CFG0 and \a DAC0CFG1 registers (f
 499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * It enables the channel output by calling XMC_DAC_CH_EnableOutput().
 500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const 
 503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel \a channel output is enabled by setting the \a ANAEN bit of \a DAC0CFG1 register (for ch
 512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><BR>
 514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \a tSTARTUP time for DAC analog output starts after the \a ANAEN bit is set to one.
 515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * After the expiry of the startup time the default value is driven to DAC output and a new value c
 516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
 522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(cha
 525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 155              	 .loc 2 526 0
 156 001c 9EBF     	 ittt ls
 157 001e 8368     	 ldrls r3,[r0,#8]
 158 0020 43F08073 	 orrls r3,r3,#16777216
 159 0024 8360     	 strls r3,[r0,#8]
 160 0026 70BD     	 pop {r4,r5,r6,pc}
 161              	.LVL15:
 162              	.L13:
 163              	 .align 2
 164              	.L12:
 165 0028 20000010 	 .word 268435488
 166              	.LBE41:
 167              	.LBE40:
 168              	 .cfi_endproc
 169              	.LFE205:
 171              	 .section .text.XMC_DAC_CH_SetFrequency,"ax",%progbits
 172              	 .align 1
 173              	 .global XMC_DAC_CH_SetFrequency
 174              	 .thumb
 175              	 .thumb_func
 177              	XMC_DAC_CH_SetFrequency:
 178              	.LFB206:
 126:../Libraries/XMCLib/src/xmc_dac.c ****   {
 127:../Libraries/XMCLib/src/xmc_dac.c ****     XMC_DAC_CH_EnableOutput(dac, channel);
 128:../Libraries/XMCLib/src/xmc_dac.c ****   }
 129:../Libraries/XMCLib/src/xmc_dac.c **** }
 130:../Libraries/XMCLib/src/xmc_dac.c **** 
 131:../Libraries/XMCLib/src/xmc_dac.c **** /* API to set the waveform frequency except in Ramp and Pattern generation mode. */
 132:../Libraries/XMCLib/src/xmc_dac.c **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac,
 133:../Libraries/XMCLib/src/xmc_dac.c ****                                             const uint8_t channel,
 134:../Libraries/XMCLib/src/xmc_dac.c ****                                             const uint32_t frequency)
 135:../Libraries/XMCLib/src/xmc_dac.c **** {
 179              	 .loc 1 135 0
 180              	 .cfi_startproc
 181              	 
 182              	 
 183              	.LVL16:
 184 0000 70B5     	 push {r4,r5,r6,lr}
 185              	.LCFI2:
 186              	 .cfi_def_cfa_offset 16
 187              	 .cfi_offset 4,-16
 188              	 .cfi_offset 5,-12
 189              	 .cfi_offset 6,-8
 190              	 .cfi_offset 14,-4
 191              	 .loc 1 135 0
 192 0002 1446     	 mov r4,r2
 193 0004 0546     	 mov r5,r0
 194 0006 0E46     	 mov r6,r1
 136:../Libraries/XMCLib/src/xmc_dac.c ****   uint32_t divider;
 137:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_STATUS_t status;
 138:../Libraries/XMCLib/src/xmc_dac.c **** 
 139:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_SetFrequency: frequency must be greater than zero", frequency > 0U);
 140:../Libraries/XMCLib/src/xmc_dac.c **** 
 141:../Libraries/XMCLib/src/xmc_dac.c ****   divider = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / frequency;
 195              	 .loc 1 141 0
 196 0008 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 197              	.LVL17:
 198 000c B0FBF4F0 	 udiv r0,r0,r4
 199              	.LVL18:
 142:../Libraries/XMCLib/src/xmc_dac.c **** 
 143:../Libraries/XMCLib/src/xmc_dac.c ****   if (divider < XMC_DAC_MIN_FREQ_DIVIDER)
 200              	 .loc 1 143 0
 201 0010 0F28     	 cmp r0,#15
 202 0012 0BD9     	 bls .L16
 144:../Libraries/XMCLib/src/xmc_dac.c ****   {
 145:../Libraries/XMCLib/src/xmc_dac.c ****     status = XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH;
 146:../Libraries/XMCLib/src/xmc_dac.c ****   }
 147:../Libraries/XMCLib/src/xmc_dac.c ****   else if (divider >= XMC_DAC_MAX_FREQ_DIVIDER)
 203              	 .loc 1 147 0
 204 0014 B0F5801F 	 cmp r0,#1048576
 205 0018 0AD2     	 bcs .L17
 206 001a 05EBC601 	 add r1,r5,r6,lsl#3
 148:../Libraries/XMCLib/src/xmc_dac.c ****   {
 149:../Libraries/XMCLib/src/xmc_dac.c ****     status = XMC_DAC_CH_STATUS_ERROR_FREQ2LOW;
 150:../Libraries/XMCLib/src/xmc_dac.c ****   }
 151:../Libraries/XMCLib/src/xmc_dac.c ****   else {
 152:../Libraries/XMCLib/src/xmc_dac.c ****     dac->DACCFG[channel].low = (dac->DACCFG[channel].low & (uint32_t)(~DAC_DAC0CFG0_FREQ_Msk)) |
 207              	 .loc 1 152 0
 208 001e 4C68     	 ldr r4,[r1,#4]
 209              	.LVL19:
 210 0020 230D     	 lsrs r3,r4,#20
 211 0022 1B05     	 lsls r3,r3,#20
 212 0024 0343     	 orrs r3,r3,r0
 213 0026 4B60     	 str r3,[r1,#4]
 214              	.LVL20:
 153:../Libraries/XMCLib/src/xmc_dac.c ****                                (divider << DAC_DAC0CFG0_FREQ_Pos);
 154:../Libraries/XMCLib/src/xmc_dac.c ****     status = XMC_DAC_CH_STATUS_OK;
 215              	 .loc 1 154 0
 216 0028 0020     	 movs r0,#0
 217              	.LVL21:
 218 002a 70BD     	 pop {r4,r5,r6,pc}
 219              	.LVL22:
 220              	.L16:
 145:../Libraries/XMCLib/src/xmc_dac.c ****   }
 221              	 .loc 1 145 0
 222 002c 0420     	 movs r0,#4
 223              	.LVL23:
 224 002e 70BD     	 pop {r4,r5,r6,pc}
 225              	.LVL24:
 226              	.L17:
 149:../Libraries/XMCLib/src/xmc_dac.c ****   }
 227              	 .loc 1 149 0
 228 0030 0320     	 movs r0,#3
 229              	.LVL25:
 155:../Libraries/XMCLib/src/xmc_dac.c ****   }
 156:../Libraries/XMCLib/src/xmc_dac.c **** 
 157:../Libraries/XMCLib/src/xmc_dac.c ****   return status;
 158:../Libraries/XMCLib/src/xmc_dac.c **** }
 230              	 .loc 1 158 0
 231 0032 70BD     	 pop {r4,r5,r6,pc}
 232              	 .cfi_endproc
 233              	.LFE206:
 235              	 .section .text.XMC_DAC_CH_SetRampFrequency,"ax",%progbits
 236              	 .align 1
 237              	 .global XMC_DAC_CH_SetRampFrequency
 238              	 .thumb
 239              	 .thumb_func
 241              	XMC_DAC_CH_SetRampFrequency:
 242              	.LFB207:
 159:../Libraries/XMCLib/src/xmc_dac.c **** 
 160:../Libraries/XMCLib/src/xmc_dac.c **** /* API to set the waveform frequency in Ramp Mode. */
 161:../Libraries/XMCLib/src/xmc_dac.c **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac,
 162:../Libraries/XMCLib/src/xmc_dac.c ****                                                 const uint8_t channel,
 163:../Libraries/XMCLib/src/xmc_dac.c ****                                                 const uint32_t frequency)
 164:../Libraries/XMCLib/src/xmc_dac.c **** {
 243              	 .loc 1 164 0
 244              	 .cfi_startproc
 245              	 
 246              	 
 247              	.LVL26:
 165:../Libraries/XMCLib/src/xmc_dac.c ****   uint32_t stop;
 166:../Libraries/XMCLib/src/xmc_dac.c ****   uint32_t start;
 167:../Libraries/XMCLib/src/xmc_dac.c **** 
 168:../Libraries/XMCLib/src/xmc_dac.c ****   start = dac->DACDATA[channel];
 248              	 .loc 1 168 0
 249 0000 0B1D     	 adds r3,r1,#4
 250 0002 00EB8303 	 add r3,r0,r3,lsl#2
 164:../Libraries/XMCLib/src/xmc_dac.c ****   uint32_t stop;
 251              	 .loc 1 164 0
 252 0006 70B5     	 push {r4,r5,r6,lr}
 253              	.LCFI3:
 254              	 .cfi_def_cfa_offset 16
 255              	 .cfi_offset 4,-16
 256              	 .cfi_offset 5,-12
 257              	 .cfi_offset 6,-8
 258              	 .cfi_offset 14,-4
 259              	 .loc 1 168 0
 260 0008 5E68     	 ldr r6,[r3,#4]
 261              	.LVL27:
 169:../Libraries/XMCLib/src/xmc_dac.c ****   stop = (dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & (uint32_t)DAC_DAC01DATA_DATA0_Ms
 262              	 .loc 1 169 0
 263 000a C369     	 ldr r3,[r0,#28]
 264              	.LVL28:
 265 000c 0C01     	 lsls r4,r1,#4
 266 000e E340     	 lsrs r3,r3,r4
 267              	.LVL29:
 268 0010 C3F30B03 	 ubfx r3,r3,#0,#12
 170:../Libraries/XMCLib/src/xmc_dac.c **** 
 171:../Libraries/XMCLib/src/xmc_dac.c ****   return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
 269              	 .loc 1 171 0
 270 0014 9B1B     	 subs r3,r3,r6
 271 0016 03FB0222 	 mla r2,r3,r2,r2
 272              	.LVL30:
 172:../Libraries/XMCLib/src/xmc_dac.c **** }
 273              	 .loc 1 172 0
 274 001a BDE87040 	 pop {r4,r5,r6,lr}
 275              	.LCFI4:
 276              	 .cfi_restore 14
 277              	 .cfi_restore 6
 278              	 .cfi_restore 5
 279              	 .cfi_restore 4
 280              	 .cfi_def_cfa_offset 0
 281              	.LVL31:
 171:../Libraries/XMCLib/src/xmc_dac.c **** }
 282              	 .loc 1 171 0
 283 001e FFF7FEBF 	 b XMC_DAC_CH_SetFrequency
 284              	.LVL32:
 285              	 .cfi_endproc
 286              	.LFE207:
 288              	 .section .text.XMC_DAC_CH_StartSingleValueMode,"ax",%progbits
 289              	 .align 1
 290              	 .global XMC_DAC_CH_StartSingleValueMode
 291              	 .thumb
 292              	 .thumb_func
 294              	XMC_DAC_CH_StartSingleValueMode:
 295              	.LFB208:
 173:../Libraries/XMCLib/src/xmc_dac.c **** 
 174:../Libraries/XMCLib/src/xmc_dac.c **** /* API to start the operation in Single Value Mode. */
 175:../Libraries/XMCLib/src/xmc_dac.c **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
 176:../Libraries/XMCLib/src/xmc_dac.c **** {
 296              	 .loc 1 176 0
 297              	 .cfi_startproc
 298              	 
 299              	 
 300              	 
 301              	.LVL33:
 302 0000 00EBC101 	 add r1,r0,r1,lsl#3
 303              	.LVL34:
 177:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac
 178:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_V
 179:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));
 180:../Libraries/XMCLib/src/xmc_dac.c **** 
 181:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 182:../Libraries/XMCLib/src/xmc_dac.c **** 
 183:../Libraries/XMCLib/src/xmc_dac.c ****   return XMC_DAC_CH_STATUS_OK;
 184:../Libraries/XMCLib/src/xmc_dac.c **** }
 304              	 .loc 1 184 0
 305 0004 0020     	 movs r0,#0
 306              	.LVL35:
 307              	.LBB42:
 308              	.LBB43:
 527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel \a channel output is disabled by clearing the \a ANAEN bit of \a DAC0CFG1 register (for 
 537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * A call to this API stops driving the converted digital input to its output.
 540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_EnableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_DisableOutput(XMC_DAC_t *const dac, const uint8_t channel)
 546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_DisableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_DisableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(ch
 549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].high &= ~DAC_DAC0CFG1_ANAEN_Msk;
 551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return bool <BR>
 558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * true  - if analog output is enabled <BR>
 559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * false - if analog output is disabled <BR>
 560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Returns the status of DAC analog output.
 563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel \a channel output enabled or disabled is determined by reading the \a ANAEN bit of \a DA
 566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_EnableOutput(), XMC_DAC_CH_DisableOutput()\n\n\n
 569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE bool XMC_DAC_CH_IsOutputEnabled(const XMC_DAC_t *const dac, const uint8_t channel)
 572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_IsOutputEnabled: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_IsOutputEnabled: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(
 575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   return (bool)(dac->DACCFG[channel].high & DAC_DAC0CFG1_ANAEN_Msk);
 577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param data Data to be written  [0-4095]
 583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Writes the \e data to the \e channel's DATA register.
 588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * The \e data is then converted and driven to the output.
 591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * If the trigger is set, On a trigger event the data in DATA register is converted and driven to \
 592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Data \a data is written to the \a channel by loading \a data to \a DATA0 bit-field of \a DAC0DAT
 593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * data has the range of [0-4095].
 594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * The API can be used for Single Value Mode, Data Mode (Individual) & Ramp Mode.
 597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call XMC_DAC_CH_EnableOutput() API to enable analog output.
 598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_CH_StartRampMode()\n\n\n
 601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_Write(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t d
 604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_Write: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_Write: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
 607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACDATA[channel] = data;
 609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 614:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 615:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 616:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 617:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 618:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Single Value Mode by calling XMC_DAC_CH_SetMode().
 619:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 620:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 621:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call XMC_DAC_CH_Write() API to write the data.
 622:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 623:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 624:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Write()\n\n\n
 625:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 626:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 627:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel);
 628:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 629:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 630:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 631:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 632:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Data points update trigger
 633:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Waveform frequency [Hz]
 634:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 635:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t status
 636:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 637:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 638:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Data mode. Trigger and frequency are configured.
 639:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 640:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 641:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call XMC_DAC_CH_Write() API to write the data. Call XMC_DAC_EnableSimultaneousDataMode() to swit
 642:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 643:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 644:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Init(), XMC_DAC_CH_Write(), XMC_DAC_EnableSimultaneousDataMode() \n\n\n
 645:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 646:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 647:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
 648:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint8_t channel,
 649:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                              const XMC_DAC_CH_TRIGGER_t trigger,
 650:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint32_t frequency);
 651:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 652:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 653:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 654:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 655:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param start Start point of the ramp [0-4095]
 656:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param stop Stop point of the ramp [0-4095]
 657:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Data points update trigger
 658:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Ramp frequency in [Hz]
 659:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 660:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t status
 661:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 662:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 663:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Ramp mode. Trigger, frequency, start and stop values are configured.
 664:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * On a \e trigger ramp values are converted and driven to \e channel output.
 665:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Start and stop have the range of [0-4095]. Stop should be equal or greater than start. 
 666:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 667:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 668:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its \e stop value, it restarts from the \e start value with the next
 669:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 670:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 671:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Init(), XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop() \n\n\n
 672:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 673:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 674:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartRampMode(XMC_DAC_t *const dac,
 675:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint8_t channel,
 676:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint16_t start,
 677:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint16_t stop,
 678:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                              const XMC_DAC_CH_TRIGGER_t trigger,
 679:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint32_t frequency);
 680:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 681:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 682:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 683:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 684:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param pattern Data table of a pattern
 685:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param sign_output Sign information of the waveform
 686:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Data points update trigger
 687:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Waveform frequency in [Hz]
 688:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 689:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t status
 690:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 691:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 692:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Pattern mode. Trigger, frequency, sign output and data are configured.
 693:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * On a \e trigger, the \e pattern values are converted and driven to \e channel output.
 694:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 695:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 696:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Init(), XMC_DAC_CH_DisablePatternSignOutput() \n\n\n
 697:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 698:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 699:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartPatternMode(XMC_DAC_t *const dac,
 700:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const uint8_t channel,
 701:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const uint8_t *const pattern,
 702:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
 703:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const XMC_DAC_CH_TRIGGER_t trigger,
 704:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const uint32_t frequency);
 705:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 706:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 707:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 708:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 709:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Data points update trigger
 710:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Waveform frequency in [Hz]
 711:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 712:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t status
 713:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 714:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 715:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Noise mode. Trigger and frequency are configured.
 716:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * On a \e trigger the DAC starts converting and drives to \e channel output.
 717:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 718:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 719:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Init()\n\n\n
 720:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 721:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 722:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
 723:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               const uint8_t channel,
 724:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               const XMC_DAC_CH_TRIGGER_t trigger,
 725:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                               const uint32_t frequency);
 726:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 727:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 728:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 729:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 730:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param pattern Pointer to the data table
 731:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 732:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 733:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 734:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 735:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * The data for the Pattern mode is written to the \a DAC0PATL and \a DAC0PATH registers.
 736:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * The API is called by XMC_DAC_CH_StartPatternMode().
 737:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 738:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 739:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \a channel is set to Pattern mode.
 740:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 741:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 742:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_EnablePatternSignOutput(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 743:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 744:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 745:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, const uint8_t channel, const uint8_t *const patter
 746:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 747:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 748:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 749:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 750:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 751:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 752:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 753:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 754:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Enables the output sign information for Pattern Mode.
 755:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 756:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 757:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sign output is enabled by setting \a SIGNEN bit of \a DAC0CFG0 register (for channel 0) / DAC1CF
 758:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 759:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 760:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Pattern mode.
 761:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 762:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 763:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 764:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 765:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 766:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
 767:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                      const uint8_t channel)
 768:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 769:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(
 770:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNE
 771:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 772:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 773:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 774:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 775:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 776:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 777:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 778:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 779:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 780:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 781:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 782:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Disables output sign information for Pattern Mode.
 783:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 784:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 785:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sign output is disabled by clearing \a SIGNEN bit of \a DAC0CFG0 register (for channel 0) / DAC1
 786:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 787:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 788:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Pattern mode.
 789:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 790:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 791:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 792:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 793:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 794:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
 795:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                      const uint8_t channel)
 796:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 797:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID
 798:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANN
 799:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 800:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 801:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 802:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 803:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 804:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 805:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 806:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param start Ramp start point [0-4095]
 807:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 808:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 809:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 810:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 811:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the ramp start value by writing to the register \a DAC0DATA (for \e channel 0) or \a DAC1DA
 812:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its stop value, it restarts from the \a start value with the next tr
 813:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Ensure \e start value is lower than the stop value.
 814:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 815:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 816:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \a channel is set to Ramp mode.
 817:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Start value is a 12 bit data.
 818:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 819:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 820:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 821:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 822:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 823:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uin
 824:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 825:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 826:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(cha
 827:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACDATA[channel] = start;
 829:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 830:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 831:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 832:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 833:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 834:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 835:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return uint16_t
 836:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 837:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 838:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Gets the ramp start value by reading \a DATA0 bit-field of \a DAC0DATA register (for channel 0) 
 839:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its stop value, it restarts from the start value with the next trigg
 840:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 841:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 842:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Ramp mode.
 843:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 844:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 845:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_SetRampStart(), XMC_DAC_CH_StartRampMode(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetR
 846:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 847:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 848:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE uint16_t XMC_DAC_CH_GetRampStart(XMC_DAC_t *const dac, const uint8_t channel)
 849:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 850:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_GetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 851:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_GetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(cha
 852:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   
 853:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   return (uint16_t)(dac->DACDATA[channel]);
 854:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 855:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 856:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 857:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 858:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 859:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param stop Ramp stop point [0-4095]
 860:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 861:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 862:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 863:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 864:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the ramp stop value by writing to the bit-field \a DATA0 (for \e channel 0) or \a DATA1 (fo
 865:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its \a stop value, it restarts from the start value with the next tr
 866:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Ensure \e stop value is higher than the start value.
 867:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 868:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 869:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Ramp mode.
 870:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Stop value is a 12 bit data.
 871:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 872:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 873:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 874:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 875:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 876:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint
 877:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 878:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 879:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(chan
 880:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     
 881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Po
 882:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 883:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 884:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 885:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 886:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 887:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 888:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 889:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return uint16_t
 890:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 891:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 892:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Gets the ramp stop value by reading \a DATA0 bit-field of \a DAC01DATA register (for channel 0) 
 893:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its stop value, it restarts from the start value with the next trigg
 894:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 895:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 896:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Ramp mode.
 897:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 898:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 899:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_SetRampStop(), XMC_DAC_CH_StartRampMode(), XMC_DAC_CH_GetRampStart()\n\n\n
 900:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 901:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 902:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE uint16_t XMC_DAC_CH_GetRampStop(XMC_DAC_t *const dac, const uint8_t channel)
 903:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 904:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_GetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 905:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_GetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(chan
 906:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 907:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   return((dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & DAC_DAC01DATA_DATA0_Msk);
 908:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 909:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 910:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 911:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 912:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 913:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Trigger source
 914:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 915:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 916:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 917:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 918:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Selects the \e trigger source for the \e channel by configuring the bits TRIGSEL & TRIGMOD of CF
 919:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 920:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 921:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (f
 922:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 923:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 924:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_D
 925:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
 926:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetTrigger: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 927:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetTrigger: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(chann
 928:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetTrigger: trigger parameter not valid\n", XMC_DAC_IS_TRIGGER_VALID(trigg
 929:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG
 931:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                               trigger;
 932:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 933:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 934:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 935:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 936:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 937:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Waveform frequency in [Hz]
 938:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 939:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t
 940:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 941:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 942:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e frequency of DAC channel.
 943:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 944:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 945:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * The value \e frequency acts as clock divider. The smallest \e frequency divider value is 16.
 946:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * A valid \e frequency value should be within the range XMC_DAC_MIN_FREQ_DIVIDER to XMC_DAC_MAX_FR
 947:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Frequency \a frequency is configured by setting \a FREQ bit-field of \a DAC0CFG0 register (for c
 948:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 949:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 950:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API only for Single value mode, Data mode and Noise mode.
 951:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call XMC_DAC_CH_SetRampFrequency() in case of Ramp mode and XMC_DAC_CH_SetPatternFrequency() in 
 952:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 953:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 954:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_SetRampFrequency(), XMC_DAC_CH_SetPatternFrequency()\n\n\n
 955:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 956:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 957:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac, const uint8_t channel, const uint
 958:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 959:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 960:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 961:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 962:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency [Hz]
 963:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 964:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t
 965:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 966:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 967:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e frequency of DAC channel by calling XMC_DAC_CH_SetFrequency().
 968:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 969:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 970:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * For the Ramp mode, the \a frequency of operation depends on the total number of sample points (\
 971:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Frequency \e frequency is multiplied by the total number of sample points, so that each trigger 
 972:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 973:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 974:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API only if the \a channel is set to Ramp mode.
 975:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 976:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 977:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartRampMode()\n\n\n
 978:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 979:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
 980:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac, const uint8_t channel, const 
 981:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
 982:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
 983:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 984:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 985:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency in [Hz]
 986:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 987:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t
 988:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 989:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 990:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e frequency of DAC channel by calling XMC_DAC_CH_SetFrequency().
 991:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 992:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 993:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * For the Pattern mode, the \a frequency of operation depends on the total number of sample points
 994:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Frequency \e frequency is multiplied by the total number of sample points, so that each trigger 
 995:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 996:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 997:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API only if the \a channel is set to Pattern mode.
 998:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
 999:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
1000:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartPatternMode()\n\n\n
1001:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
1002:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
1003:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetPatternFrequency(XMC_DAC_t *const dac,
1004:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                                    const uint8_t channel,
1005:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                                                                    const uint32_t frequency)
1006:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
1007:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetPatternFrequency: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac)
1008:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetPatternFrequency: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VA
1009:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
1010:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   return XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
1011:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
1012:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** 
1013:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** /**
1014:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
1015:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
1016:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @param mode DAC operation mode
1017:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
1018:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
1019:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
1020:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
1021:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 re
1022:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
1023:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  *
1024:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****  */
1025:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_
1026:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** {
1027:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
1028:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel)
1029:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
1030:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****     
1031:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 309              	 .loc 2 1031 0
 310 0006 4B68     	 ldr r3,[r1,#4]
 311 0008 23F4E003 	 bic r3,r3,#7340032
 312 000c 43F48013 	 orr r3,r3,#1048576
 313 0010 4B60     	 str r3,[r1,#4]
 314              	.LBE43:
 315              	.LBE42:
 316              	 .loc 1 184 0
 317 0012 7047     	 bx lr
 318              	 .cfi_endproc
 319              	.LFE208:
 321              	 .section .text.XMC_DAC_CH_StartDataMode,"ax",%progbits
 322              	 .align 1
 323              	 .global XMC_DAC_CH_StartDataMode
 324              	 .thumb
 325              	 .thumb_func
 327              	XMC_DAC_CH_StartDataMode:
 328              	.LFB209:
 185:../Libraries/XMCLib/src/xmc_dac.c **** 
 186:../Libraries/XMCLib/src/xmc_dac.c **** /* API to start the operation in Data Mode. */
 187:../Libraries/XMCLib/src/xmc_dac.c **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
 188:../Libraries/XMCLib/src/xmc_dac.c ****                                              const uint8_t channel,
 189:../Libraries/XMCLib/src/xmc_dac.c ****                                              const XMC_DAC_CH_TRIGGER_t trigger,
 190:../Libraries/XMCLib/src/xmc_dac.c ****                                              const uint32_t frequency)
 191:../Libraries/XMCLib/src/xmc_dac.c **** {
 329              	 .loc 1 191 0
 330              	 .cfi_startproc
 331              	 
 332              	 
 333              	.LVL36:
 334 0000 38B5     	 push {r3,r4,r5,lr}
 335              	.LCFI5:
 336              	 .cfi_def_cfa_offset 16
 337              	 .cfi_offset 3,-16
 338              	 .cfi_offset 4,-12
 339              	 .cfi_offset 5,-8
 340              	 .cfi_offset 14,-4
 341 0002 00EBC104 	 add r4,r0,r1,lsl#3
 342              	.LBB44:
 343              	.LBB45:
 344              	 .loc 2 1031 0
 345 0006 6568     	 ldr r5,[r4,#4]
 346 0008 25F4E005 	 bic r5,r5,#7340032
 347 000c 6560     	 str r5,[r4,#4]
 348              	.LBE45:
 349              	.LBE44:
 192:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 193:../Libraries/XMCLib/src/xmc_dac.c **** 
 194:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 195:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartDataMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(ch
 196:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));
 197:../Libraries/XMCLib/src/xmc_dac.c **** 
 198:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 199:../Libraries/XMCLib/src/xmc_dac.c **** 
 200:../Libraries/XMCLib/src/xmc_dac.c ****   if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 350              	 .loc 1 200 0
 351 000e 1546     	 mov r5,r2
 352 0010 62B1     	 cbz r2,.L22
 353              	.LVL37:
 354              	.L24:
 355              	.LBB46:
 356              	.LBB47:
 930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                               trigger;
 357              	 .loc 2 930 0
 358 0012 A268     	 ldr r2,[r4,#8]
 359 0014 22F4CE22 	 bic r2,r2,#421888
 360 0018 2A43     	 orrs r2,r2,r5
 361 001a A260     	 str r2,[r4,#8]
 362              	.LVL38:
 363              	.LBE47:
 364              	.LBE46:
 365              	.LBB48:
 366              	.LBB49:
 367              	 .loc 2 1031 0
 368 001c 6368     	 ldr r3,[r4,#4]
 369 001e 23F4E003 	 bic r3,r3,#7340032
 370 0022 43F40013 	 orr r3,r3,#2097152
 371 0026 6360     	 str r3,[r4,#4]
 372 0028 0020     	 movs r0,#0
 373 002a 38BD     	 pop {r3,r4,r5,pc}
 374              	.LVL39:
 375              	.L22:
 376              	.LBE49:
 377              	.LBE48:
 201:../Libraries/XMCLib/src/xmc_dac.c ****   {
 202:../Libraries/XMCLib/src/xmc_dac.c ****     status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 378              	 .loc 1 202 0
 379 002c 1A46     	 mov r2,r3
 380              	.LVL40:
 381 002e FFF7FEFF 	 bl XMC_DAC_CH_SetFrequency
 382              	.LVL41:
 203:../Libraries/XMCLib/src/xmc_dac.c ****   }
 204:../Libraries/XMCLib/src/xmc_dac.c **** 
 205:../Libraries/XMCLib/src/xmc_dac.c ****   if (status == XMC_DAC_CH_STATUS_OK)
 383              	 .loc 1 205 0
 384 0032 0028     	 cmp r0,#0
 385 0034 EDD0     	 beq .L24
 206:../Libraries/XMCLib/src/xmc_dac.c ****   {
 207:../Libraries/XMCLib/src/xmc_dac.c ****     XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 208:../Libraries/XMCLib/src/xmc_dac.c ****     XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_DATA);
 209:../Libraries/XMCLib/src/xmc_dac.c ****   }
 210:../Libraries/XMCLib/src/xmc_dac.c **** 
 211:../Libraries/XMCLib/src/xmc_dac.c ****   return status;
 212:../Libraries/XMCLib/src/xmc_dac.c **** }
 386              	 .loc 1 212 0
 387 0036 38BD     	 pop {r3,r4,r5,pc}
 388              	 .cfi_endproc
 389              	.LFE209:
 391              	 .section .text.XMC_DAC_CH_StartRampMode,"ax",%progbits
 392              	 .align 1
 393              	 .global XMC_DAC_CH_StartRampMode
 394              	 .thumb
 395              	 .thumb_func
 397              	XMC_DAC_CH_StartRampMode:
 398              	.LFB210:
 213:../Libraries/XMCLib/src/xmc_dac.c **** 
 214:../Libraries/XMCLib/src/xmc_dac.c **** /* API to start the operation in Ramp Mode. */
 215:../Libraries/XMCLib/src/xmc_dac.c **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartRampMode(XMC_DAC_t *const dac,
 216:../Libraries/XMCLib/src/xmc_dac.c ****                                              const uint8_t channel,
 217:../Libraries/XMCLib/src/xmc_dac.c ****                                              const uint16_t start,
 218:../Libraries/XMCLib/src/xmc_dac.c ****                                              const uint16_t stop,
 219:../Libraries/XMCLib/src/xmc_dac.c ****                                              const XMC_DAC_CH_TRIGGER_t trigger,
 220:../Libraries/XMCLib/src/xmc_dac.c ****                                              const uint32_t frequency)
 221:../Libraries/XMCLib/src/xmc_dac.c **** {
 399              	 .loc 1 221 0
 400              	 .cfi_startproc
 401              	 
 402              	 
 403              	.LVL42:
 404 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 405              	.LCFI6:
 406              	 .cfi_def_cfa_offset 24
 407              	 .cfi_offset 3,-24
 408              	 .cfi_offset 4,-20
 409              	 .cfi_offset 5,-16
 410              	 .cfi_offset 6,-12
 411              	 .cfi_offset 7,-8
 412              	 .cfi_offset 14,-4
 413 0002 0EB2     	 sxth r6,r1
 414 0004 00EBC604 	 add r4,r0,r6,lsl#3
 415              	 .loc 1 221 0
 416 0008 0D46     	 mov r5,r1
 417              	.LBB60:
 418              	.LBB61:
 419              	 .loc 2 1031 0
 420 000a D4F804C0 	 ldr ip,[r4,#4]
 421              	.LBE61:
 422              	.LBE60:
 423              	 .loc 1 221 0
 424 000e DDF818E0 	 ldr lr,[sp,#24]
 425              	.LBB63:
 426              	.LBB64:
 828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 427              	 .loc 2 828 0
 428 0012 0435     	 adds r5,r5,#4
 429 0014 00EB8505 	 add r5,r0,r5,lsl#2
 430              	.LBE64:
 431              	.LBE63:
 432              	.LBB66:
 433              	.LBB62:
 434              	 .loc 2 1031 0
 435 0018 2CF4E00C 	 bic ip,ip,#7340032
 436 001c C4F804C0 	 str ip,[r4,#4]
 437              	.LVL43:
 438              	.LBE62:
 439              	.LBE66:
 440              	.LBB67:
 441              	.LBB65:
 828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 442              	 .loc 2 828 0
 443 0020 6A60     	 str r2,[r5,#4]
 444              	.LVL44:
 445              	.LBE65:
 446              	.LBE67:
 447              	.LBB68:
 448              	.LBB69:
 881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 449              	 .loc 2 881 0
 450 0022 C569     	 ldr r5,[r0,#28]
 451 0024 3201     	 lsls r2,r6,#4
 452              	.LVL45:
 453 0026 40F6FF76 	 movw r6,#4095
 454 002a 9640     	 lsls r6,r6,r2
 455 002c 25EA0605 	 bic r5,r5,r6
 882:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 456              	 .loc 2 882 0
 457 0030 9340     	 lsls r3,r3,r2
 458              	.LVL46:
 881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 459              	 .loc 2 881 0
 460 0032 2B43     	 orrs r3,r3,r5
 461 0034 C361     	 str r3,[r0,#28]
 462              	.LVL47:
 463              	.LBE69:
 464              	.LBE68:
 465              	.LBB70:
 466              	.LBB71:
 930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                               trigger;
 467              	 .loc 2 930 0
 468 0036 A368     	 ldr r3,[r4,#8]
 469 0038 23F4CE23 	 bic r3,r3,#421888
 470 003c 4EEA0303 	 orr r3,lr,r3
 471 0040 A360     	 str r3,[r4,#8]
 472              	.LBE71:
 473              	.LBE70:
 222:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 223:../Libraries/XMCLib/src/xmc_dac.c **** 
 224:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 225:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartRampMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(ch
 226:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));
 227:../Libraries/XMCLib/src/xmc_dac.c **** 
 228:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 229:../Libraries/XMCLib/src/xmc_dac.c **** 
 230:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_SetRampStart(dac, channel, start);
 231:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_SetRampStop(dac, channel, stop);
 232:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 233:../Libraries/XMCLib/src/xmc_dac.c **** 
 234:../Libraries/XMCLib/src/xmc_dac.c ****   if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 474              	 .loc 1 234 0
 475 0042 BEF1000F 	 cmp lr,#0
 476 0046 07D0     	 beq .L29
 477              	.LVL48:
 478              	.L31:
 479              	.LBB72:
 480              	.LBB73:
 481              	 .loc 2 1031 0
 482 0048 6368     	 ldr r3,[r4,#4]
 483 004a 23F4E003 	 bic r3,r3,#7340032
 484 004e 43F4A003 	 orr r3,r3,#5242880
 485 0052 6360     	 str r3,[r4,#4]
 486 0054 0020     	 movs r0,#0
 487 0056 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 488              	.LVL49:
 489              	.L29:
 490              	.LBE73:
 491              	.LBE72:
 235:../Libraries/XMCLib/src/xmc_dac.c ****   {
 236:../Libraries/XMCLib/src/xmc_dac.c ****     status = XMC_DAC_CH_SetRampFrequency(dac, channel, frequency);
 492              	 .loc 1 236 0
 493 0058 079A     	 ldr r2,[sp,#28]
 494 005a FFF7FEFF 	 bl XMC_DAC_CH_SetRampFrequency
 495              	.LVL50:
 237:../Libraries/XMCLib/src/xmc_dac.c ****   }
 238:../Libraries/XMCLib/src/xmc_dac.c **** 
 239:../Libraries/XMCLib/src/xmc_dac.c ****   if (status == XMC_DAC_CH_STATUS_OK)
 496              	 .loc 1 239 0
 497 005e 0028     	 cmp r0,#0
 498 0060 F2D0     	 beq .L31
 240:../Libraries/XMCLib/src/xmc_dac.c ****   {
 241:../Libraries/XMCLib/src/xmc_dac.c ****     XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_RAMP);
 242:../Libraries/XMCLib/src/xmc_dac.c ****   }
 243:../Libraries/XMCLib/src/xmc_dac.c **** 
 244:../Libraries/XMCLib/src/xmc_dac.c ****   return status;
 245:../Libraries/XMCLib/src/xmc_dac.c **** }
 499              	 .loc 1 245 0
 500 0062 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 501              	 .cfi_endproc
 502              	.LFE210:
 504              	 .section .text.XMC_DAC_CH_StartNoiseMode,"ax",%progbits
 505              	 .align 1
 506              	 .global XMC_DAC_CH_StartNoiseMode
 507              	 .thumb
 508              	 .thumb_func
 510              	XMC_DAC_CH_StartNoiseMode:
 511              	.LFB212:
 246:../Libraries/XMCLib/src/xmc_dac.c **** 
 247:../Libraries/XMCLib/src/xmc_dac.c **** /* API to start the operation in Pattern Mode. */
 248:../Libraries/XMCLib/src/xmc_dac.c **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartPatternMode(XMC_DAC_t *const dac,
 249:../Libraries/XMCLib/src/xmc_dac.c ****                                                 const uint8_t channel,
 250:../Libraries/XMCLib/src/xmc_dac.c ****                                                 const uint8_t *const pattern,
 251:../Libraries/XMCLib/src/xmc_dac.c ****                                                 const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
 252:../Libraries/XMCLib/src/xmc_dac.c ****                                                 const XMC_DAC_CH_TRIGGER_t trigger,
 253:../Libraries/XMCLib/src/xmc_dac.c ****                                                 const uint32_t frequency)
 254:../Libraries/XMCLib/src/xmc_dac.c **** {
 255:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 256:../Libraries/XMCLib/src/xmc_dac.c **** 
 257:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 258:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartPatternMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID
 259:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));
 260:../Libraries/XMCLib/src/xmc_dac.c **** 
 261:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 262:../Libraries/XMCLib/src/xmc_dac.c **** 
 263:../Libraries/XMCLib/src/xmc_dac.c ****   if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 264:../Libraries/XMCLib/src/xmc_dac.c ****   {
 265:../Libraries/XMCLib/src/xmc_dac.c ****     status = XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
 266:../Libraries/XMCLib/src/xmc_dac.c ****   }
 267:../Libraries/XMCLib/src/xmc_dac.c **** 
 268:../Libraries/XMCLib/src/xmc_dac.c ****   if (status == XMC_DAC_CH_STATUS_OK)
 269:../Libraries/XMCLib/src/xmc_dac.c ****   {
 270:../Libraries/XMCLib/src/xmc_dac.c ****     XMC_DAC_CH_SetPattern(dac, channel, pattern);
 271:../Libraries/XMCLib/src/xmc_dac.c ****     if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 272:../Libraries/XMCLib/src/xmc_dac.c ****     {
 273:../Libraries/XMCLib/src/xmc_dac.c ****       XMC_DAC_CH_EnablePatternSignOutput(dac, channel);
 274:../Libraries/XMCLib/src/xmc_dac.c ****     }
 275:../Libraries/XMCLib/src/xmc_dac.c ****     else
 276:../Libraries/XMCLib/src/xmc_dac.c ****     {
 277:../Libraries/XMCLib/src/xmc_dac.c ****       XMC_DAC_CH_DisablePatternSignOutput(dac, channel);
 278:../Libraries/XMCLib/src/xmc_dac.c ****     }
 279:../Libraries/XMCLib/src/xmc_dac.c ****     XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 280:../Libraries/XMCLib/src/xmc_dac.c ****     XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_PATTERN);
 281:../Libraries/XMCLib/src/xmc_dac.c ****   }
 282:../Libraries/XMCLib/src/xmc_dac.c **** 
 283:../Libraries/XMCLib/src/xmc_dac.c ****   return status;
 284:../Libraries/XMCLib/src/xmc_dac.c **** }
 285:../Libraries/XMCLib/src/xmc_dac.c **** 
 286:../Libraries/XMCLib/src/xmc_dac.c **** /* API to start the operation in Noise Mode. */
 287:../Libraries/XMCLib/src/xmc_dac.c **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
 288:../Libraries/XMCLib/src/xmc_dac.c ****                                               const uint8_t channel,
 289:../Libraries/XMCLib/src/xmc_dac.c ****                                               const XMC_DAC_CH_TRIGGER_t trigger,
 290:../Libraries/XMCLib/src/xmc_dac.c ****                                               const uint32_t frequency)
 291:../Libraries/XMCLib/src/xmc_dac.c **** {
 512              	 .loc 1 291 0
 513              	 .cfi_startproc
 514              	 
 515              	 
 516              	.LVL51:
 517 0000 38B5     	 push {r3,r4,r5,lr}
 518              	.LCFI7:
 519              	 .cfi_def_cfa_offset 16
 520              	 .cfi_offset 3,-16
 521              	 .cfi_offset 4,-12
 522              	 .cfi_offset 5,-8
 523              	 .cfi_offset 14,-4
 524 0002 00EBC104 	 add r4,r0,r1,lsl#3
 525              	.LBB74:
 526              	.LBB75:
 527              	 .loc 2 1031 0
 528 0006 6568     	 ldr r5,[r4,#4]
 529 0008 25F4E005 	 bic r5,r5,#7340032
 530 000c 6560     	 str r5,[r4,#4]
 531              	.LBE75:
 532              	.LBE74:
 292:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 293:../Libraries/XMCLib/src/xmc_dac.c **** 
 294:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 295:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(c
 296:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));
 297:../Libraries/XMCLib/src/xmc_dac.c **** 
 298:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 299:../Libraries/XMCLib/src/xmc_dac.c **** 
 300:../Libraries/XMCLib/src/xmc_dac.c ****   if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 533              	 .loc 1 300 0
 534 000e 1546     	 mov r5,r2
 535 0010 62B1     	 cbz r2,.L36
 536              	.LVL52:
 537              	.L38:
 538              	.LBB76:
 539              	.LBB77:
 930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                               trigger;
 540              	 .loc 2 930 0
 541 0012 A268     	 ldr r2,[r4,#8]
 542 0014 22F4CE22 	 bic r2,r2,#421888
 543 0018 2A43     	 orrs r2,r2,r5
 544 001a A260     	 str r2,[r4,#8]
 545              	.LVL53:
 546              	.LBE77:
 547              	.LBE76:
 548              	.LBB78:
 549              	.LBB79:
 550              	 .loc 2 1031 0
 551 001c 6368     	 ldr r3,[r4,#4]
 552 001e 23F4E003 	 bic r3,r3,#7340032
 553 0022 43F48003 	 orr r3,r3,#4194304
 554 0026 6360     	 str r3,[r4,#4]
 555 0028 0020     	 movs r0,#0
 556 002a 38BD     	 pop {r3,r4,r5,pc}
 557              	.LVL54:
 558              	.L36:
 559              	.LBE79:
 560              	.LBE78:
 301:../Libraries/XMCLib/src/xmc_dac.c ****   {
 302:../Libraries/XMCLib/src/xmc_dac.c ****     status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 561              	 .loc 1 302 0
 562 002c 1A46     	 mov r2,r3
 563              	.LVL55:
 564 002e FFF7FEFF 	 bl XMC_DAC_CH_SetFrequency
 565              	.LVL56:
 303:../Libraries/XMCLib/src/xmc_dac.c ****   }
 304:../Libraries/XMCLib/src/xmc_dac.c **** 
 305:../Libraries/XMCLib/src/xmc_dac.c ****   if (status == XMC_DAC_CH_STATUS_OK)
 566              	 .loc 1 305 0
 567 0032 0028     	 cmp r0,#0
 568 0034 EDD0     	 beq .L38
 306:../Libraries/XMCLib/src/xmc_dac.c ****   {
 307:../Libraries/XMCLib/src/xmc_dac.c ****     XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 308:../Libraries/XMCLib/src/xmc_dac.c ****     XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_NOISE);
 309:../Libraries/XMCLib/src/xmc_dac.c ****   }
 310:../Libraries/XMCLib/src/xmc_dac.c **** 
 311:../Libraries/XMCLib/src/xmc_dac.c ****   return status;
 312:../Libraries/XMCLib/src/xmc_dac.c **** }
 569              	 .loc 1 312 0
 570 0036 38BD     	 pop {r3,r4,r5,pc}
 571              	 .cfi_endproc
 572              	.LFE212:
 574              	 .section .text.XMC_DAC_CH_SetPattern,"ax",%progbits
 575              	 .align 1
 576              	 .global XMC_DAC_CH_SetPattern
 577              	 .thumb
 578              	 .thumb_func
 580              	XMC_DAC_CH_SetPattern:
 581              	.LFB213:
 313:../Libraries/XMCLib/src/xmc_dac.c **** 
 314:../Libraries/XMCLib/src/xmc_dac.c **** /* API to write the pattern data table. */
 315:../Libraries/XMCLib/src/xmc_dac.c **** void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, uint8_t channel, const uint8_t *const data)
 316:../Libraries/XMCLib/src/xmc_dac.c **** {
 582              	 .loc 1 316 0
 583              	 .cfi_startproc
 584              	 
 585              	 
 586              	.LVL57:
 587 0000 70B5     	 push {r4,r5,r6,lr}
 588              	.LCFI8:
 589              	 .cfi_def_cfa_offset 16
 590              	 .cfi_offset 4,-16
 591              	 .cfi_offset 5,-12
 592              	 .cfi_offset 6,-8
 593              	 .cfi_offset 14,-4
 317:../Libraries/XMCLib/src/xmc_dac.c ****   uint32_t index;
 318:../Libraries/XMCLib/src/xmc_dac.c ****   uint32_t temp;
 319:../Libraries/XMCLib/src/xmc_dac.c **** 
 320:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 321:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(chann
 322:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));
 323:../Libraries/XMCLib/src/xmc_dac.c **** 
 324:../Libraries/XMCLib/src/xmc_dac.c ****   temp = data[0U];
 594              	 .loc 1 324 0
 595 0002 1478     	 ldrb r4,[r2]
 596              	.LVL58:
 325:../Libraries/XMCLib/src/xmc_dac.c ****   for(index = 1U; index < 6U; ++index)
 597              	 .loc 1 325 0
 598 0004 0123     	 movs r3,#1
 599              	.LVL59:
 600              	.L43:
 326:../Libraries/XMCLib/src/xmc_dac.c ****   {
 327:../Libraries/XMCLib/src/xmc_dac.c ****     temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 601              	 .loc 1 327 0 discriminator 3
 602 0006 D55C     	 ldrb r5,[r2,r3]
 603 0008 03EB8306 	 add r6,r3,r3,lsl#2
 325:../Libraries/XMCLib/src/xmc_dac.c ****   for(index = 1U; index < 6U; ++index)
 604              	 .loc 1 325 0 discriminator 3
 605 000c 0133     	 adds r3,r3,#1
 606              	.LVL60:
 607              	 .loc 1 327 0 discriminator 3
 608 000e B540     	 lsls r5,r5,r6
 325:../Libraries/XMCLib/src/xmc_dac.c ****   for(index = 1U; index < 6U; ++index)
 609              	 .loc 1 325 0 discriminator 3
 610 0010 062B     	 cmp r3,#6
 611              	 .loc 1 327 0 discriminator 3
 612 0012 44EA0504 	 orr r4,r4,r5
 613              	.LVL61:
 325:../Libraries/XMCLib/src/xmc_dac.c ****   for(index = 1U; index < 6U; ++index)
 614              	 .loc 1 325 0 discriminator 3
 615 0016 F6D1     	 bne .L43
 616 0018 00EBC101 	 add r1,r0,r1,lsl#3
 617              	.LVL62:
 328:../Libraries/XMCLib/src/xmc_dac.c ****   }
 329:../Libraries/XMCLib/src/xmc_dac.c ****   dac->DACPAT[channel].low = temp;
 330:../Libraries/XMCLib/src/xmc_dac.c **** 
 331:../Libraries/XMCLib/src/xmc_dac.c ****   temp = data[6U];
 332:../Libraries/XMCLib/src/xmc_dac.c ****   for(index = 1U; index < 6U; ++index)
 618              	 .loc 1 332 0
 619 001c 0123     	 movs r3,#1
 620              	.LVL63:
 329:../Libraries/XMCLib/src/xmc_dac.c **** 
 621              	 .loc 1 329 0
 622 001e 0C62     	 str r4,[r1,#32]
 331:../Libraries/XMCLib/src/xmc_dac.c ****   for(index = 1U; index < 6U; ++index)
 623              	 .loc 1 331 0
 624 0020 12F8060F 	 ldrb r0,[r2,#6]!
 625              	.LVL64:
 626              	.L44:
 333:../Libraries/XMCLib/src/xmc_dac.c ****   {
 334:../Libraries/XMCLib/src/xmc_dac.c ****     temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 627              	 .loc 1 334 0 discriminator 3
 628 0024 12F8014F 	 ldrb r4,[r2,#1]!
 629 0028 03EB8305 	 add r5,r3,r3,lsl#2
 332:../Libraries/XMCLib/src/xmc_dac.c ****   {
 630              	 .loc 1 332 0 discriminator 3
 631 002c 0133     	 adds r3,r3,#1
 632              	.LVL65:
 633              	 .loc 1 334 0 discriminator 3
 634 002e AC40     	 lsls r4,r4,r5
 332:../Libraries/XMCLib/src/xmc_dac.c ****   {
 635              	 .loc 1 332 0 discriminator 3
 636 0030 062B     	 cmp r3,#6
 637              	 .loc 1 334 0 discriminator 3
 638 0032 40EA0400 	 orr r0,r0,r4
 639              	.LVL66:
 332:../Libraries/XMCLib/src/xmc_dac.c ****   {
 640              	 .loc 1 332 0 discriminator 3
 641 0036 F5D1     	 bne .L44
 335:../Libraries/XMCLib/src/xmc_dac.c ****   }
 336:../Libraries/XMCLib/src/xmc_dac.c ****   dac->DACPAT[channel].high = temp;
 642              	 .loc 1 336 0
 643 0038 4862     	 str r0,[r1,#36]
 644 003a 70BD     	 pop {r4,r5,r6,pc}
 645              	 .cfi_endproc
 646              	.LFE213:
 648              	 .section .text.XMC_DAC_CH_StartPatternMode,"ax",%progbits
 649              	 .align 1
 650              	 .global XMC_DAC_CH_StartPatternMode
 651              	 .thumb
 652              	 .thumb_func
 654              	XMC_DAC_CH_StartPatternMode:
 655              	.LFB211:
 254:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 656              	 .loc 1 254 0
 657              	 .cfi_startproc
 658              	 
 659              	 
 660              	.LVL67:
 661 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 662              	.LCFI9:
 663              	 .cfi_def_cfa_offset 32
 664              	 .cfi_offset 3,-32
 665              	 .cfi_offset 4,-28
 666              	 .cfi_offset 5,-24
 667              	 .cfi_offset 6,-20
 668              	 .cfi_offset 7,-16
 669              	 .cfi_offset 8,-12
 670              	 .cfi_offset 9,-8
 671              	 .cfi_offset 14,-4
 672 0004 00EBC104 	 add r4,r0,r1,lsl#3
 254:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 673              	 .loc 1 254 0
 674 0008 9846     	 mov r8,r3
 675              	.LBB80:
 676              	.LBB81:
 677              	 .loc 2 1031 0
 678 000a 6368     	 ldr r3,[r4,#4]
 679              	.LVL68:
 680              	.LBE81:
 681              	.LBE80:
 254:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 682              	 .loc 1 254 0
 683 000c 089D     	 ldr r5,[sp,#32]
 684              	.LBB84:
 685              	.LBB82:
 686              	 .loc 2 1031 0
 687 000e 23F4E003 	 bic r3,r3,#7340032
 688              	.LBE82:
 689              	.LBE84:
 254:../Libraries/XMCLib/src/xmc_dac.c ****   XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 690              	 .loc 1 254 0
 691 0012 0646     	 mov r6,r0
 692              	.LVL69:
 693 0014 0F46     	 mov r7,r1
 694 0016 9146     	 mov r9,r2
 695              	.LBB85:
 696              	.LBB83:
 697              	 .loc 2 1031 0
 698 0018 6360     	 str r3,[r4,#4]
 699              	.LBE83:
 700              	.LBE85:
 263:../Libraries/XMCLib/src/xmc_dac.c ****   {
 701              	 .loc 1 263 0
 702 001a 5DB1     	 cbz r5,.L48
 703              	.LVL70:
 704              	.L51:
 270:../Libraries/XMCLib/src/xmc_dac.c ****     if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 705              	 .loc 1 270 0
 706 001c 3046     	 mov r0,r6
 707 001e 3946     	 mov r1,r7
 708 0020 4A46     	 mov r2,r9
 709 0022 FFF7FEFF 	 bl XMC_DAC_CH_SetPattern
 710              	.LVL71:
 271:../Libraries/XMCLib/src/xmc_dac.c ****     {
 711              	 .loc 1 271 0
 712 0026 B8F1010F 	 cmp r8,#1
 713 002a 09D1     	 bne .L57
 714              	.LVL72:
 715              	.LBB86:
 716              	.LBB87:
 772:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 717              	 .loc 2 772 0
 718 002c 6368     	 ldr r3,[r4,#4]
 719 002e 43F00053 	 orr r3,r3,#536870912
 720 0032 08E0     	 b .L58
 721              	.LVL73:
 722              	.L48:
 723              	.LBE87:
 724              	.LBE86:
 265:../Libraries/XMCLib/src/xmc_dac.c ****   }
 725              	 .loc 1 265 0
 726 0034 099A     	 ldr r2,[sp,#36]
 727              	.LVL74:
 728 0036 5201     	 lsls r2,r2,#5
 729 0038 FFF7FEFF 	 bl XMC_DAC_CH_SetFrequency
 730              	.LVL75:
 268:../Libraries/XMCLib/src/xmc_dac.c ****   {
 731              	 .loc 1 268 0
 732 003c 80B9     	 cbnz r0,.L52
 733 003e EDE7     	 b .L51
 734              	.LVL76:
 735              	.L57:
 736              	.LBB88:
 737              	.LBB89:
 800:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h **** }
 738              	 .loc 2 800 0
 739 0040 6368     	 ldr r3,[r4,#4]
 740 0042 23F00053 	 bic r3,r3,#536870912
 741              	.LVL77:
 742              	.L58:
 743 0046 6360     	 str r3,[r4,#4]
 744              	.LVL78:
 745              	.LBE89:
 746              	.LBE88:
 747              	.LBB90:
 748              	.LBB91:
 930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_dac.h ****                               trigger;
 749              	 .loc 2 930 0
 750 0048 A368     	 ldr r3,[r4,#8]
 751 004a 23F4CE23 	 bic r3,r3,#421888
 752 004e 2B43     	 orrs r3,r3,r5
 753 0050 A360     	 str r3,[r4,#8]
 754              	.LVL79:
 755              	.LBE91:
 756              	.LBE90:
 757              	.LBB92:
 758              	.LBB93:
 759              	 .loc 2 1031 0
 760 0052 6368     	 ldr r3,[r4,#4]
 761 0054 23F4E003 	 bic r3,r3,#7340032
 762 0058 43F44013 	 orr r3,r3,#3145728
 763 005c 6360     	 str r3,[r4,#4]
 764 005e 0020     	 movs r0,#0
 765              	.LVL80:
 766              	.L52:
 767              	.LBE93:
 768              	.LBE92:
 284:../Libraries/XMCLib/src/xmc_dac.c **** 
 769              	 .loc 1 284 0
 770 0060 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 771              	 .cfi_endproc
 772              	.LFE211:
 774              	 .text
 775              	.Letext0:
 776              	 .file 3 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 777              	 .file 4 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 778              	 .file 5 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc4_scu.h"
 779              	 .file 6 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Include/core_cm4.h"
 780              	 .file 7 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 781              	 .file 8 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dac.c
    {standard input}:20     .text.XMC_DAC_Enable:00000000 $t
    {standard input}:25     .text.XMC_DAC_Enable:00000000 XMC_DAC_Enable
    {standard input}:42     .text.XMC_DAC_Enable:00000008 $d
    {standard input}:47     .text.XMC_DAC_Disable:00000000 $t
    {standard input}:52     .text.XMC_DAC_Disable:00000000 XMC_DAC_Disable
    {standard input}:68     .text.XMC_DAC_Disable:00000008 $d
    {standard input}:73     .text.XMC_DAC_IsEnabled:00000000 $t
    {standard input}:78     .text.XMC_DAC_IsEnabled:00000000 XMC_DAC_IsEnabled
    {standard input}:104    .text.XMC_DAC_IsEnabled:00000010 $d
    {standard input}:109    .text.XMC_DAC_CH_Init:00000000 $t
    {standard input}:114    .text.XMC_DAC_CH_Init:00000000 XMC_DAC_CH_Init
    {standard input}:165    .text.XMC_DAC_CH_Init:00000028 $d
    {standard input}:172    .text.XMC_DAC_CH_SetFrequency:00000000 $t
    {standard input}:177    .text.XMC_DAC_CH_SetFrequency:00000000 XMC_DAC_CH_SetFrequency
    {standard input}:236    .text.XMC_DAC_CH_SetRampFrequency:00000000 $t
    {standard input}:241    .text.XMC_DAC_CH_SetRampFrequency:00000000 XMC_DAC_CH_SetRampFrequency
    {standard input}:289    .text.XMC_DAC_CH_StartSingleValueMode:00000000 $t
    {standard input}:294    .text.XMC_DAC_CH_StartSingleValueMode:00000000 XMC_DAC_CH_StartSingleValueMode
    {standard input}:322    .text.XMC_DAC_CH_StartDataMode:00000000 $t
    {standard input}:327    .text.XMC_DAC_CH_StartDataMode:00000000 XMC_DAC_CH_StartDataMode
    {standard input}:392    .text.XMC_DAC_CH_StartRampMode:00000000 $t
    {standard input}:397    .text.XMC_DAC_CH_StartRampMode:00000000 XMC_DAC_CH_StartRampMode
    {standard input}:505    .text.XMC_DAC_CH_StartNoiseMode:00000000 $t
    {standard input}:510    .text.XMC_DAC_CH_StartNoiseMode:00000000 XMC_DAC_CH_StartNoiseMode
    {standard input}:575    .text.XMC_DAC_CH_SetPattern:00000000 $t
    {standard input}:580    .text.XMC_DAC_CH_SetPattern:00000000 XMC_DAC_CH_SetPattern
    {standard input}:649    .text.XMC_DAC_CH_StartPatternMode:00000000 $t
    {standard input}:654    .text.XMC_DAC_CH_StartPatternMode:00000000 XMC_DAC_CH_StartPatternMode
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.ca5ae67a873a4952d630d8e4120b9e3e
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4e89a3f145accdcb1100c37260c088e6
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.65.5c0d35eb1a6853ff8300ab2ec1b944b0
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.57f124f9262f3dbf77da6a6506ffb430
                           .group:00000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:00000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1500.3eca65ed9ba7f90e09c1ffcb0b3f5724
                           .group:00000000 wm4.xmc_common.h.98.806f17e888fd51d0e4be2ad115163551
                           .group:00000000 wm4.xmc_dac.h.118.c8112c8efde85b3b5edb795c9ea09622
                           .group:00000000 wm4.xmc4_scu.h.113.70a903f8782696023ba1d8628d8ac2d6

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_IsPeripheralResetAsserted
XMC_SCU_CLOCK_GetPeripheralClockFrequency
