   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_ccu8.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU8_EnableModule,"ax",%progbits
  20              	 .align 1
  21              	 .global XMC_CCU8_EnableModule
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_CCU8_EnableModule:
  26              	.LFB233:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_ccu8.c"
   1:../Libraries/XMCLib/src/xmc_ccu8.c **** /**
   2:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @file xmc_ccu8.c
   3:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @date 2017-04-27
   4:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
   5:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_ccu8.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
   9:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_ccu8.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_ccu8.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_ccu8.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  18:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_ccu8.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  21:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_ccu8.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_ccu8.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_ccu8.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_ccu8.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_ccu8.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_ccu8.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_ccu8.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_ccu8.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_ccu8.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  36:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_ccu8.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  39:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  42:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  45:../Libraries/XMCLib/src/xmc_ccu8.c ****  *       during external load event. 
  46:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  47:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-07-24:
  48:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  49:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  50:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-08-17:
  51:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_CHC_CONFIG_MASK is not applicable to XMC14 devices. <br>
  52:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Start of prescaler XMC_CCU8_StartPrescaler() is invoked in XMC_CCU8_Init() API. <br>
  53:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - In XMC_CCU8_SLICE_CompareInit(), CHC register is updated according to the device. <br>
  54:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Bug fix XMC_CCU8_SLICE_ConfigureEvent() during the level setting for XMC14 devices. <br>
  55:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_EnableShadowTransfer() definition is removed, since the API is made as inline. <b
  56:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  57:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-10-07:
  58:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  59:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - DOC updates for the newly added APIs.
  60:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  61:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2017-02-25:
  62:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_lAssertReset(), XMC_CCU8_lDeassertReset(), XMC_CCU8_lGateClock() and XMC_CCU8_lUn
  63:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  64:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2017-04-27:
  65:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU8_SLICE_PRESCALER_t
  66:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  67:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @endcond
  68:../Libraries/XMCLib/src/xmc_ccu8.c ****  */
  69:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_ccu8.c ****  * HEADER FILES
  71:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_ccu8.c **** #include "xmc_ccu8.h"
  73:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  74:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU80)
  75:../Libraries/XMCLib/src/xmc_ccu8.c **** #include "xmc_scu.h"
  76:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  77:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
  78:../Libraries/XMCLib/src/xmc_ccu8.c ****  * MACROS
  79:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  80:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_NUM_SLICES_PER_MODULE          (4U)
  81:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DITHER_PERIOD_MASK       (1U)
  82:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DITHER_DUTYCYCLE_MASK    (2U)
  83:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK   (3U)
  84:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK  (1U)
  85:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK (3U)
  86:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices */
  87:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK  CCU8_CC8_INS1_EV0IS_Msk
  88:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
  89:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK  CCU8_CC8_INS_EV0IS_Msk
  90:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
  91:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GIDLC_CLOCK_MASK               (15U)
  92:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE0_MASK               (1U)
  93:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE1_MASK               (16U)
  94:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE2_MASK               (256U)
  95:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE3_MASK               (4096U)
  96:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK    (63U)
  97:../Libraries/XMCLib/src/xmc_ccu8.c **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
  98:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHC_CONFIG_MASK          (20U)
  99:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 100:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 101:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_DTC_DIV(div) \
 102:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((div == XMC_CCU8_SLICE_DTC_DIV_1) || \
 103:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_2) || \
 104:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_4) || \
 105:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_8))
 106:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 107:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_CLOCK(clock) \
 108:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((clock == XMC_CCU8_CLOCK_SCU)        || \
 109:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_A) || \
 110:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_B) || \
 111:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_C))
 112:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 113:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_OUTPUT(out) \
 114:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((out == XMC_CCU8_SLICE_OUTPUT_0) || \
 115:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_1) || \
 116:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_2) || \
 117:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_3))
 118:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 119:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_END_MODE(end_mode) \
 120:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_STOP) || \
 121:../Libraries/XMCLib/src/xmc_ccu8.c ****      (end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR) || \
 122:../Libraries/XMCLib/src/xmc_ccu8.c ****      (end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR))
 123:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 124:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EVENT_ID(event_id) \
 125:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((event_id == XMC_CCU8_SLICE_EVENT_NONE)|| \
 126:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_0)   || \
 127:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_1)   || \
 128:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_2))
 129:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 130:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(edge) \
 131:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE)        || \
 132:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE) || \
 133:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE)|| \
 134:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE))
 135:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 136:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EVENT_FILTER(cycles) \
 137:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((cycles == XMC_CCU8_SLICE_EVENT_FILTER_DISABLED) || \
 138:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES) || \
 139:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES) || \
 140:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES))
 141:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 142:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_CAP_TIMER_CLEAR_MODE(mode) \
 143:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER)   || \
 144:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH)|| \
 145:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW) || \
 146:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS))
 147:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 148:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action) \
 149:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR)      || \
 150:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP) || \
 151:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT))
 152:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 153:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SR_ID(id) \
 154:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((id == XMC_CCU8_SLICE_SR_ID_0) || \
 155:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_1) || \
 156:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_2) || \
 157:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_3))
 158:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 159:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel) \
 160:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE) || \
 161:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_1)    || \
 162:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_2)    || \
 163:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2))
 164:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 165:../Libraries/XMCLib/src/xmc_ccu8.c **** #if((UC_SERIES == XMC13) || (UC_SERIES == XMC14))
 166:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel) \
 167:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1)       || \
 168:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_2)       || \
 169:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2) || \
 170:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2))
 171:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 172:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel) \
 173:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1)       || \
 174:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_2)       || \
 175:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2))
 176:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 177:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 178:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
 179:../Libraries/XMCLib/src/xmc_ccu8.c ****  * LOCAL ROUTINES
 180:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
 181:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 182:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lAssertReset(const XMC_CCU8_MODULE_t *const module)
 183:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 184:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 185:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 186:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 187:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 188:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 189:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 190:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 191:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 192:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 193:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 194:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 195:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 196:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
 197:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 198:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 199:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 200:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
 201:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 202:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 203:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 204:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 205:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 206:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 207:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 208:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 209:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 210:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 211:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 212:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 213:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 214:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
 215:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 216:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 217:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 218:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 219:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 220:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lGateClock(XMC_CCU8_MODULE_t *const module)
 221:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 222:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 223:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 224:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 225:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 226:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 227:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 228:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 229:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 230:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 231:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 232:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 233:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 234:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
 235:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 236:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 237:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 238:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
 239:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 240:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 241:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 242:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 243:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 244:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 245:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 246:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 247:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 248:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 249:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 250:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 251:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 252:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
 253:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 254:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 255:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 256:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 257:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined (XMC_ASSERT_ENABLE)
 258:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsInputvalid(XMC_CCU8_SLICE_INPUT_t input)
 259:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 260:../Libraries/XMCLib/src/xmc_ccu8.c **** #if (UC_SERIES == XMC14)
 261:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (input < 48U);
 262:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 263:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (input < 16U);
 264:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 265:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 266:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 267:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
 268:../Libraries/XMCLib/src/xmc_ccu8.c ****  * API IMPLEMENTATION
 269:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
 270:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 271:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to set the CCU8 module as active and enable the clock  */
 272:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
 273:../Libraries/XMCLib/src/xmc_ccu8.c **** {
  28              	 .loc 1 273 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 10B5     	 push {r4,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 8
  36              	 .cfi_offset 4,-8
  37              	 .cfi_offset 14,-4
  38              	 .loc 1 273 0
  39 0002 0446     	 mov r4,r0
 274:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 275:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 276:../Libraries/XMCLib/src/xmc_ccu8.c **** #if (UC_FAMILY == XMC4)
 277:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable CCU8 module clock */
 278:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
  40              	 .loc 1 278 0
  41 0004 1020     	 movs r0,#16
  42              	.LVL1:
  43 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableClock
  44              	.LVL2:
  45              	.LBB12:
  46              	.LBB13:
 202:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
  47              	 .loc 1 202 0
  48 000a 074B     	 ldr r3,.L6
  49 000c 9C42     	 cmp r4,r3
  50 000e 01D1     	 bne .L2
 204:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
  51              	 .loc 1 204 0
  52 0010 8020     	 movs r0,#128
  53 0012 04E0     	 b .L4
  54              	.L2:
 207:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
  55              	 .loc 1 207 0
  56 0014 054B     	 ldr r3,.L6+4
  57 0016 9C42     	 cmp r4,r3
  58 0018 05D1     	 bne .L1
 209:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
  59              	 .loc 1 209 0
  60 001a 4FF48070 	 mov r0,#256
  61              	.L4:
  62              	.LBE13:
  63              	.LBE12:
 279:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 280:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 281:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 282:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lUngateClock(module);
 283:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 284:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 285:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 286:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lDeassertReset(module);
 287:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 288:../Libraries/XMCLib/src/xmc_ccu8.c **** }
  64              	 .loc 1 288 0
  65 001e BDE81040 	 pop {r4,lr}
  66              	.LCFI1:
  67              	 .cfi_remember_state
  68              	 .cfi_restore 14
  69              	 .cfi_restore 4
  70              	 .cfi_def_cfa_offset 0
  71              	.LVL3:
  72              	.LBB15:
  73              	.LBB14:
 209:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
  74              	 .loc 1 209 0
  75 0022 FFF7FEBF 	 b XMC_SCU_RESET_DeassertPeripheralReset
  76              	.LVL4:
  77              	.L1:
  78              	.LCFI2:
  79              	 .cfi_restore_state
  80 0026 10BD     	 pop {r4,pc}
  81              	.LVL5:
  82              	.L7:
  83              	 .align 2
  84              	.L6:
  85 0028 00000240 	 .word 1073872896
  86 002c 00400240 	 .word 1073889280
  87              	.LBE14:
  88              	.LBE15:
  89              	 .cfi_endproc
  90              	.LFE233:
  92              	 .section .text.XMC_CCU8_DisableModule,"ax",%progbits
  93              	 .align 1
  94              	 .global XMC_CCU8_DisableModule
  95              	 .thumb
  96              	 .thumb_func
  98              	XMC_CCU8_DisableModule:
  99              	.LFB234:
 289:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 290:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to set the CCU8 module as idle and disable the clock  */
 291:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module)
 292:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 100              	 .loc 1 292 0
 101              	 .cfi_startproc
 102              	 
 103              	 
 104              	 
 105              	.LVL6:
 106              	.LBB18:
 107              	.LBB19:
 184:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 108              	 .loc 1 184 0
 109 0000 064B     	 ldr r3,.L12
 110 0002 9842     	 cmp r0,r3
 111 0004 01D1     	 bne .L9
 186:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 112              	 .loc 1 186 0
 113 0006 8020     	 movs r0,#128
 114              	.LVL7:
 115 0008 04E0     	 b .L11
 116              	.LVL8:
 117              	.L9:
 189:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 118              	 .loc 1 189 0
 119 000a 054B     	 ldr r3,.L12+4
 120 000c 9842     	 cmp r0,r3
 121 000e 03D1     	 bne .L8
 191:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 122              	 .loc 1 191 0
 123 0010 4FF48070 	 mov r0,#256
 124              	.LVL9:
 125              	.L11:
 126 0014 FFF7FEBF 	 b XMC_SCU_RESET_AssertPeripheralReset
 127              	.LVL10:
 128              	.L8:
 129 0018 7047     	 bx lr
 130              	.L13:
 131 001a 00BF     	 .align 2
 132              	.L12:
 133 001c 00000240 	 .word 1073872896
 134 0020 00400240 	 .word 1073889280
 135              	.LBE19:
 136              	.LBE18:
 137              	 .cfi_endproc
 138              	.LFE234:
 140              	 .section .text.XMC_CCU8_Init,"ax",%progbits
 141              	 .align 1
 142              	 .global XMC_CCU8_Init
 143              	 .thumb
 144              	 .thumb_func
 146              	XMC_CCU8_Init:
 147              	.LFB235:
 293:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_DisableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 294:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 295:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 296:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lAssertReset(module);
 297:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 298:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 299:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 300:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lGateClock(module);
 301:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 302:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 303:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 304:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to initialize CCU8 global resources  */
 305:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
 306:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 148              	 .loc 1 306 0
 149              	 .cfi_startproc
 150              	 
 151              	 
 152              	.LVL11:
 153 0000 38B5     	 push {r3,r4,r5,lr}
 154              	.LCFI3:
 155              	 .cfi_def_cfa_offset 16
 156              	 .cfi_offset 3,-16
 157              	 .cfi_offset 4,-12
 158              	 .cfi_offset 5,-8
 159              	 .cfi_offset 14,-4
 160              	 .loc 1 306 0
 161 0002 0446     	 mov r4,r0
 162 0004 0D46     	 mov r5,r1
 307:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 308:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 309:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 310:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));
 311:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 312:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable CCU8 module */
 313:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_EnableModule(module);
 163              	 .loc 1 313 0
 164 0006 FFF7FEFF 	 bl XMC_CCU8_EnableModule
 165              	.LVL12:
 166              	.LBB20:
 167              	.LBB21:
 168              	 .file 2 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_ccu8.h"
   1:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
   2:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @file xmc_ccu8.h
   3:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @date 2019-03-30
   4:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
   5:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @cond
   6:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
   7:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
   9:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * All rights reserved.                        
  11:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                             
  12:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * following conditions are met:   
  14:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                                                              
  15:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * disclaimer.                        
  17:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
  18:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
  21:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * products derived from this software without specific prior written permission.                  
  23:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                                                              
  24:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                                                              
  32:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
  35:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  36:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Change History
  37:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * --------------
  38:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  39:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-02-20:
  40:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Initial <br>
  41:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Documentation updates <br>
  42:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  43:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-06-20:
  44:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  46:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       during external load event.
  47:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  48:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-07-01:
  49:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_CHECK_INTERRUPT macro, fixed the missing item for compare match down for
  50:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  51:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-07-24:
  52:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  53:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  54:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-08-17:
  55:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  56:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t is added for all the devices except XMC45 devices, t
  57:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       shadow transfer has to happen. <br>
  58:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SOURCE_OUT0_t, XMC_CCU8_SOURCE_OUT1_t, XMC_CCU8_SOURCE_OUT2_t, XMC_CCU8_SOURCE_OU
  59:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       to maps one of the ST to OUT0, OUT1, OUT3, OUT4 signals.
  60:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_COMPARE_CONFIG_t structure, selector_out0, selector_out1, selector_out2,
  61:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       added to support XMC14 devices.
  62:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  63:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_EnableCascadedShadowTransfer(), XMC_CCU8_SLICE_DisableCascadedShadowTransfe
  64:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_SetShadowTransferMode() API are supported for all the devices except XMC45.
  65:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  66:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-09-29:
  67:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  68:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       settings.
  69:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  70:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-10-07:
  71:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(), XMC_CCU8_SLICE_SetTimerCompareMatchChannel2
  72:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       added to update the respective compare registers directly.
  73:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  74:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU8_SLICE_EnableMultipleEvents(
  75:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_DisableMultipleEvents() APIs.
  76:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - DOC updates for the newly added APIs.
  77:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  78:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2016-03-09:
  79:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Optimization of write only registers
  80:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  81:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2016-05-20:
  82:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_StopClearTimer()
  83:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Changed XMC_CCU8_SLICE_StopTimer() and XMC_CCU8_SLICE_ClearTimer() 
  84:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  85:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2017-04-27:
  86:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU8_SLICE_PRESCALER_t
  87:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  88:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2017-09-15:
  89:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Fix XMC_CCU8_SLICE_SetShadowTransferMode()
  90:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added parity checking functionality
  91:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  92:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2019-03-30:
  93:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Changed XMC_CCU8_StartPrescaler(), XMC_CCU8_StartParityChecker(), XMC_CCU8_StopPrescaler()
  94:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_EnableMultipleClocks(), XMC_CCU8_EnableClock(), XMC_CCU8_DisableClock() to avoid 
  95:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Changed XMC_CCU8_SLICE_SetEvent(), XMC_CCU8_SLICE_ClearEvent() to avoid RMW access
  96:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SetSuspendMode(), XMC_CCU8_SLICE_GetPrescaler()
  97:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_GetTimerCompareMatchChannel1() and XMC_CCU8_SLICE_GetTimerCompareMatc
  98:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
  99:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @endcond
 100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #ifndef XMC_CCU8_H
 103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_H
 104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * HEADER FILES
 107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #include "xmc_common.h"
 109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80)
 111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if UC_FAMILY == XMC1
 113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  #include "xmc1_ccu8_map.h"
 114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if UC_FAMILY == XMC4
 117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  #include "xmc4_ccu8_map.h"
 118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @addtogroup XMClib XMC Peripheral Library
 122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @{
 123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @addtogroup CCU8
 127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @brief Capture Compare Unit 8 (CCU8) low level driver for XMC family of microcontrollers<br>
 129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The CCU8 peripheral functions play a major role in applications that need complex Pulse Width Mo
 131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * generation, with complementary high side and low side switches, multi phase control. These funct
 132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * with a very flexible and programmable signal conditioning scheme, make the CCU8 the must have pe
 133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the art motor control, multi phase and multi level power electronics systems.\n
 134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Each CCU8 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC8y (where
 135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * timer slice can work in compare mode or in capture mode.
 136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * APIs provided in this file cover the following functional blocks of CCU8:
 138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Note:
 140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU8_SLICE_)
 141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU8_)
 142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Timer(Compare mode) configuration:
 144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_COMPARE_CONFIG_t, 
 145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t and the initialization functions XMC_CCU8_SLICE_CompareInit(),
 146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Start and Stop the timer. (XMC_CCU8_SLICE_StartTimer(), XMC_CCU8_SLICE_StopTimer())
 149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU8_SLICE_SetTimerPe
 150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetTimerCompareMatch(), XMC_CCU8_SLICE_SetPrescaler(), XMC_CCU8_SLICE_SetDithe
 151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetPassiveLevel())
 152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure the dead time.(XMC_CCU8_SLICE_SetDeadTimeValue(), XMC_CCU8_SLICE_SetDeadTimePrescal
 153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU8_SLICE_EnableMultiChannelMode())
 154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
 155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Capture configuration:
 156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_CAPTURE_CONFIG_t and
 157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * function XMC_CCU8_SLICE_CaptureInit().
 158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure the capture functionality. (XMC_CCU8_SLICE_Capture0Config(), XMC_CCU8_SLICE_Capture
 161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    (XMC_CCU8_SLICE_GetCaptureRegisterValue())
 163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
 164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Function/Event configuration:
 165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_EVENT_CONFIG_t.
 166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
 167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Enable and Disable the events. (XMC_CCU8_SLICE_EnableEvent(), XMC_CCU8_SLICE_DisableEvent())
 169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU8_SLICE_StartConfig(), XMC_C
 170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU8_SLICE_ModulationConfig(), 
 171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_LoadConfig(), XMC_CCU8_SLICE_GateConfig())
 172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU8_SLICE_Directi
 173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Count the external events.(XMC_CCU8_SLICE_CountConfig())
 174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU8_SLICE_EnableTrap(), XMC_CCU8
 175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_TrapConfig())
 176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Interrupt configuration:
 178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @{
 181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * MACROS
 185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_INTERRUPT(interrupt) \
 187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     ((interrupt == XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH)              || \
 189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1)  || \
 190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1)|| \
 191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2)  || \
 192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2)|| \
 193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT0)                 || \
 194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT1)                 || \
 195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT2)                 || \
 196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_TRAP))
 197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      
 198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /* Macro to check if the slice ptr passed is valid */
 199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(cmp_channel) \
 200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     ((cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_1) || \
 201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****      (cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_2))
 202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * ENUMS
 205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Typedef for CCU8 Global data structure
 209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef CCU8_GLOBAL_TypeDef XMC_CCU8_MODULE_t;
 211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Typedef for CCU8 Slice data structure
 214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef CCU8_CC8_TypeDef XMC_CCU8_SLICE_t;
 216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Return Value of an API
 219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_STATUS
 221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_OK      = 0U, /**< API fulfils request */
 223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_ERROR       , /**< API cannot fulfil request */
 224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_RUNNING     , /**< The timer slice is currently running */
 225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_IDLE          /**< The timer slice is currently idle */
 226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_STATUS_t;
 227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CCU8 module clock
 230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_CLOCK
 232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_A     , /**< External clock-A */
 235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_B     , /**< External clock-B */
 236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_C       /**< External clock-C */
 237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_CLOCK_t;
 238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CCU8 set the shadow transfer type for multichannel mode
 241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER
 243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      only for slice
 246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      and hardware f
 248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      only for slice
 250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      and hardware f
 252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       only for slic
 254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       and hardware 
 256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       only for slic
 258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       and hardware 
 260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Operational modes of CCU8 slice
 264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODE
 266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_COMPARE  = 0U, /**< slice(CC8y) operates in Compare Mode */
 268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_CAPTURE        /**< slice(CC8y) operates in Capture Mode */
 269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODE_t;
 270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Slice Output selection
 273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT
 275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_0  = 1U, /**< Slice Output-0 */
 277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_1  = 2U, /**< Slice Output-1 */
 278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_2  = 4U, /**< Slice Output-2 */
 279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_3  = 8U  /**< Slice Output-3 */
 280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_t;
 281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer counting modes for the slice
 284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_MODE
 286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA        /**< Centre Aligned Mode */
 289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_MODE_t;
 290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer repetition mode for the slice
 293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_REPEAT_MODE
 295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U, /**< Repetitive mode: continuous mode of operation 
 297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE       /**< Single shot mode: Once a Period match/One matc
 298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      occurs timer goes to idle state */
 299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t;
 300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer counting direction for the CCU8 slice
 303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_DIR
 305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_DIR_t;
 309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Capture mode register sets
 312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_CAP_REG_SET
 314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_HIGH       /**< Capture register-0, Capture register-1 used */
 317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAP_REG_SET_t;
 318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Prescaler mode
 321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER_MODE
 323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider */
 326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_MODE_t;
 327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer output passive level
 330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL
 332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Compare Channel selection
 339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_COMPARE_CHANNEL
 341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_1  = 0U, /**< Compare Channel-1 */
 343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_2        /**< Compare Channel-2 */
 344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CHANNEL_t;
 345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer clock Divider
 348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER
 350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu8 */
 352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2      , /**< Slice Clock = fccu8/2 */
 353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4      , /**< Slice Clock = fccu8/4 */
 354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8      , /**< Slice Clock = fccu8/8 */
 355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16     , /**< Slice Clock = fccu8/16 */
 356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32     , /**< Slice Clock = fccu8/32 */
 357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_64     , /**< Slice Clock = fccu8/64 */
 358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_128    , /**< Slice Clock = fccu8/128 */
 359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_256    , /**< Slice Clock = fccu8/256 */
 360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_512    , /**< Slice Clock = fccu8/512 */
 361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu8/1024 */
 362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu8/2048 */
 363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu8/4096 */
 364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu8/8192 */
 365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu8/16384 */
 366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32768    /**< Slice Clock = fccu8/32768 */
 367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_t;
 368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Dead Time Generator Clock Divider
 371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_DTC_DIV
 373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_1  = 0U, /**< DTC clock = Slice Clock */
 375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_2      , /**< DTC clock = Slice Clock/2 */
 376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_4      , /**< DTC clock = Slice Clock/4 */
 377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_8        /**< DTC clock = Slice Clock/8 */
 378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DTC_DIV_t;
 379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The compare channel output which is routed to the slice output signal(STy).
 383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_STATUS
 385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1        = 0U, /**< Channel-1 status connected to Slice Status */
 387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_2            , /**< Channel-2 status connected to Slice Status */
 388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2      , /**< \b Wired \b AND of Channel-1 and Channel-2 stat
 389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     Slice status */
 390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if ((UC_SERIES == XMC13) || (UC_SERIES == XMC14)) || defined(DOXYGEN)
 391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2         /**< \b Wired \b OR of Channel-1 and Channel-2 statu
 392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     status. @note Only available for XMC1300 and XM
 393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_STATUS_t;
 395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Compare channel for which modulation has to be applied
 398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_CHANNEL
 400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE  = 0U, /**< No modulation */
 402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1         , /**< Modulation for Compare Channel-1 */
 403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_2         , /**< Modulation for Compare Channel-2 */
 404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2     /**< Modulation for Compare Channel-1 and Compare C
 405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_CHANNEL_t;
 406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Function list
 409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_FUNCTION
 411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_START           = 0U, /**< Start function */
 413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_STOP                , /**< Stop function */
 414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      generation */
 416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      generation */
 418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_GATING              , /**< Gating function */
 419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_LOAD                , /**< Load function */
 421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_COUNT               , /**< Counting function */
 422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_TRAP                  /**< Trap function */
 425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_FUNCTION_t;
 426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event list
 429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT
 431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_NONE  = 0U, /**< None */
 433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_0         , /**< Event-0 */
 434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_1         , /**< Event-1 */
 435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_2           /**< Event-2 */
 436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_t;
 437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Edge sensitivity
 440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY
 442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE          = 0U, /**< None */
 444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE       , /**< Rising Edge of the input signal ge
 445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                  event trigger */
 446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE      , /**< Falling Edge of the input signal g
 447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                  trigger */
 448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE           /**< Both Rising and Falling edges caus
 449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t;
 450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Level sensitivity
 453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY
 455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     /* Below enum items can be utilised specific to the functionality */
 459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_FILTER
 467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filtering is applied */
 469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES      , /**< Input should be stable for 3 clock cycles */
 470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES      , /**< Input should be stable for 5 clock cycles */
 471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES        /**< Input should be stable for 7 clock cycles */
 472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_FILTER_t;
 473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU8 slice.
 476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Interconnects are specific to each device.
 477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef uint8_t XMC_CCU8_SLICE_INPUT_t;
 479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_END_MODE
 485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_END_MODE_t;
 490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Actions that can be performed upon detection of an external Timer START event
 493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_START_MODE
 495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_START_MODE_t;
 499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Modulation of timer output signals
 502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_MODE
 504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_MODE_t;
 508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Trap exit mode
 511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TRAP_EXIT_MODE
 513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TRAP_EXIT_MODE_t;
 517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer clear on capture
 520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_CLEAR_MODE
 522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t;
 528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Multi Channel Shadow transfer request configuration options
 531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MCMS_ACTION
 533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 the actual registers upon MCS xfer 
 536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 register values to the actual regis
 538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 request */
 539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 Compare register values to the actu
 541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 MCS xfer request */
 542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MCMS_ACTION_t;
 543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Available Interrupt Event Ids
 546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_IRQ_ID
 548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH            = 0U , /**< Period match counting up */
 550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH               = 1U , /**< One match counting down */
 551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 2U , /**< Compare match counting up for channel 1
 552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 3U , /**< Compare match counting down for channel
 553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 4U , /**< Compare match counting up for channel 2
 554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 5U , /**< Compare match counting down for channel
 555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT0                  = 8U , /**< Event-0 occurrence */
 556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT1                  = 9U , /**< Event-1 occurrence */
 557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT2                  = 10U, /**< Event-2 occurrence */
 558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_TRAP                    = 11U  /**< Trap occurrence */
 559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_IRQ_ID_t;
 560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MULTI_IRQ_ID
 565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_PERIOD_MATCH            = 0x1U,   /**< Period match counting up */
 567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_ONE_MATCH               = 0x2U,   /**< One match counting down */
 568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 0x4U,   /**< Compare match counting up for 
 569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 0x8U,   /**< Compare match counting down fo
 570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 0x10U,  /**< Compare match counting up for 
 571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 0x20U,  /**< Compare match counting down fo
 572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT0                  = 0x100U, /**< Event-0 occurrence */
 573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT1                  = 0x200U, /**< Event-1 occurrence */
 574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT2                  = 0x400U, /**< Event-2 occurrence */
 575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MULTI_IRQ_ID_t;
 576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Service Request Lines for CCU8. Event are mapped to these SR lines and these are used to generat
 579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SR_ID
 581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SR_ID_t;
 587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Slice shadow transfer options.
 591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SHADOW_TRANSFER
 593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_0            = CCU8_GCSS_S0SE_Msk,  /**< Transfer Period, Compare 
 595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-0 */
 597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU8_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU8_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_1            = CCU8_GCSS_S1SE_Msk,  /**< Transfer Period, Compare 
 602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-1 */
 604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU8_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual registers for S
 606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU8_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_2            = CCU8_GCSS_S2SE_Msk,  /**< Transfer Period, Compare 
 609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-2 */
 611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU8_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU8_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 614:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 615:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_3            = CCU8_GCSS_S3SE_Msk,  /**< Transfer Period, Compare 
 616:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 617:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-3 */
 618:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU8_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 619:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 620:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU8_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 621:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 622:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SHADOW_TRANSFER_t;
 623:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 624:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if (UC_SERIES != XMC45) || defined(DOXYGEN)
 625:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 626:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Slice shadow transfer mode options.
 627:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Not available for XMC4500 series
 628:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 629:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE
 630:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 631:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U, /**< Shadow transfer is d
 632:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                One match. */
 633:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 634:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 635:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t;
 636:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 637:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 638:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU8V3) || defined(DOXYGEN) /* Defined for XMC1400 devices only */
 639:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 640:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy0 signal
 641:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 642:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 643:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT0
 644:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 645:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST1      = (uint32_t)0x0, /**< CCU8yST1 signal path is connected the CCU8x.O
 646:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST1  = (uint32_t)0x1, /**< Inverted CCU8yST1 signal path is connected th
 647:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST2      = (uint32_t)0x2, /**< CCU8yST2 signal path is connected the CCU8x.O
 648:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST2  = (uint32_t)0x3  /**< Inverted CCU8yST2 signal path is connected th
 649:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT0_t;
 650:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 651:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 652:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy1 signal
 653:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 654:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 655:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT1
 656:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 657:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST1      = (uint32_t)0x1, /**< CCU8yST1 signal path is connected the CCU8x.O
 658:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST1  = (uint32_t)0x0, /**< Inverted CCU8yST1 signal path is connected th
 659:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST2      = (uint32_t)0x3, /**< CCU8yST2 signal path is connected the CCU8x.O
 660:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST2  = (uint32_t)0x2  /**< Inverted CCU8yST2 signal path is connected th
 661:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT1_t;
 662:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 663:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 664:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Output sources for OUTy2 signal
 665:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 666:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 667:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT2
 668:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 669:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST2      = (uint32_t)0x0, /**< CCU8yST2 signal path is connected the CCU8x.O
 670:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST2  = (uint32_t)0x1, /**< Inverted CCU8yST2 signal path is connected th
 671:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST1      = (uint32_t)0x2, /**< CCU8yST1 signal path is connected the CCU8x.O
 672:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST1  = (uint32_t)0x3  /**< Inverted CCU8yST1 signal path is connected th
 673:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT2_t;
 674:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 675:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 676:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy3 signal
 677:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 678:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 679:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT3
 680:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 681:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST2      = (uint32_t)0x1, /**< CCU8yST2 signal path is connected the CCU8x.O
 682:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST2  = (uint32_t)0x0, /**< Inverted CCU8yST2 signal path is connected th
 683:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST1      = (uint32_t)0x3, /**< CCU8yST1 signal path is connected the CCU8x.O
 684:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST1  = (uint32_t)0x2  /**< Inverted CCU8yST1 signal path is connected th
 685:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT3_t;
 686:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 687:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 688:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 689:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 690:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output selector for CCU8x.OUT0-3
 691:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 692:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 693:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 694:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 695:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x20000, /**< CCU8yST1 signal path is connected the C
 696:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x20002, /**< Inverted CCU8yST1 signal path is connec
 697:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x40000, /**< CCU8yST1 signal path is connected the C
 698:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x40004, /**< Inverted CCU8yST1 signal path is connec
 699:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x80000, /**< CCU8yST2 signal path is connected the C
 700:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x80008, /**< Inverted CCU8yST2 signal path is connec
 701:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0x100000,/**< CCU8yST2 signal path is connected the C
 702:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0x100010 /**< Inverted CCU8yST2 signal path is connec
 703:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 704:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #else
 705:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 706:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 707:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x000C0, /**< CCU8yST1 signal path is connected the C
 708:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x000D0, /**< Inverted CCU8yST1 signal path is connec
 709:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST2      = (uint32_t)0x000E0, /**< CCU8yST2 signal path is connected the C
 710:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST2  = (uint32_t)0x000F0, /**< Inverted CCU8yST2 signal path is connec
 711:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x00D00, /**< CCU8yST1 signal path is connected the C
 712:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x00C00, /**< Inverted CCU8yST1 signal path is connec
 713:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST2      = (uint32_t)0x00F00, /**< CCU8yST2 signal path is connected the C
 714:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST2  = (uint32_t)0x00E00, /**< Inverted CCU8yST2 signal path is connec
 715:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x0C000, /**< CCU8yST2 signal path is connected the C
 716:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x0D000, /**< Inverted CCU8yST2 signal path is connec
 717:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST1      = (uint32_t)0x0E000, /**< CCU8yST1 signal path is connected the C
 718:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST1  = (uint32_t)0x0F000, /**< Inverted CCU8yST1 signal path is connec
 719:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0xD0000, /**< CCU8yST2 signal path is connected the C
 720:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST2  = (uint32_t)0xC0000, /**< Inverted CCU8yST2 signal path is connec
 721:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST1      = (uint32_t)0xF0000, /**< CCU8yST1 signal path is connected the C
 722:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0xE0000  /**< Inverted CCU8yST1 signal path is connec
 723:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 724:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 725:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 726:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Immediate write into configuration register
 727:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 728:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 729:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_WRITE_INTO
 730:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 731:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU8_CC8_STC_IRPC_Msk,                  /**< Imm
 732:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 733:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 734:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE1_CONFIGURATION = CCU8_CC8_STC_IRCC1_Msk,               /**< Imm
 735:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 736:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 737:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE2_CONFIGURATION = CCU8_CC8_STC_IRCC2_Msk,               /**< Imm
 738:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 739:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 740:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU8_CC8_STC_IRLC_Msk,           /**< Imm
 741:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 742:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                            Config
 743:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRDC_Msk,            /**< Imm
 744:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 745:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                            Config
 746:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRFC_Msk /**< Imm
 747:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 748:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Val
 749:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_WRITE_INTO_t;
 750:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 751:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 752:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 753:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 754:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 755:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 756:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 757:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 758:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU8_CC8_STC_ASPC_Msk,        
 759:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 760:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 761:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 762:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE1_SHADOW = CCU8_CC8_STC_ASCC1_Msk,     
 763:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 764:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 765:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 766:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE2_SHADOW = CCU8_CC8_STC_ASCC2_Msk,     
 767:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 768:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 769:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 770:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU8_CC8_STC_ASLC_Msk,        
 771:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 772:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 773:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU8_CC8_STC_ASDC_Msk,        
 774:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 775:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 776:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU8_CC8_STC_ASFC_
 777:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 778:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 779:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 780:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 781:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 782:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 783:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 784:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 785:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  CCU8 slice mask which can be used for the APIs as input where multi slice support is available
 786:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 787:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MASK
 788:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 789:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 790:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 791:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 792:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 793:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MASK_t;
 794:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 795:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 796:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects which signal is controlling the delay between the change at the CCU8 outputs and effect
 797:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 798:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_DELAY_INPUT
 799:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 800:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTA = 0 << CCU8_GPCHK_PCDS_Pos,
 801:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTB = 1 << CCU8_GPCHK_PCDS_Pos,
 802:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTC = 2 << CCU8_GPCHK_PCDS_Pos,
 803:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTD = 3 << CCU8_GPCHK_PCDS_Pos
 804:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_t;
 805:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 806:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 807:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 808:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects which signal contains the driver parity information
 809:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 810:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT
 811:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 812:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_0 = 0 << CCU8_GPCHK_PISEL_Pos,
 813:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_1 = 1 << CCU8_GPCHK_PISEL_Pos,
 814:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_2 = 2 << CCU8_GPCHK_PISEL_Pos,
 815:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_3 = 3 << CCU8_GPCHK_PISEL_Pos,
 816:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_t;
 817:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 818:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 819:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects if we have an odd or even parity
 820:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 821:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_TYPE
 822:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 823:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_TYPE_EVEN = 0 << CCU8_GPCHK_PCTS_Pos,
 824:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_TYPE_ODD = 1 << CCU8_GPCHK_PCTS_Pos,
 825:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_TYPE_t;
 826:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 827:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects suspend mode
 829:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 830:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SUSPEND_MODE
 831:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 832:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SUSPEND_MODE_IGNORE = 0 << CCU8_GCTRL_SUSCFG_Pos, /**< Suspend request ignored. The modu
 833:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SUSPEND_MODE_STOPS_INMEDIATELLY = 1 << CCU8_GCTRL_SUSCFG_Pos, /**< Stops all the running
 834:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SUSPEND_MODE_SAFE_STOP = 2 << CCU8_GCTRL_SUSCFG_Pos, /**< Stops the block immediately an
 835:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SUSPEND_MODE_WAIT_ROLL_OVER = 3 << CCU8_GCTRL_SUSCFG_Pos /**< Waits for the roll over of
 836:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SUSPEND_MODE_t;
 837:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 838:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 839:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * DATA STRUCTURES
 840:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 841:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 842:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 843:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 844:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Needed to configure the various aspects of an External Event.
 845:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This structure will not connect the external event with an external function.
 846:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 847:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_EVENT_CONFIG
 848:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 849:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event. 
 850:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 851:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                               This is needed for an edge sensitive 
 852:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 853:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                               This is needed for an level sensitive
 854:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 855:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_CONFIG_t;
 856:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 857:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /*Anonymous structure/union guard start*/
 858:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(__CC_ARM)
 859:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma push
 860:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma anon_unions
 861:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #elif defined(__TASKING__)
 862:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma warning 586
 863:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 864:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 865:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 866:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Dead Time configuration
 867:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 868:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_DEAD_TIME_CONFIG
 869:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 870:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 871:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 872:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 873:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 874:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel1 : 1; /**< Enable dead time for Compare Channel-1 */
 875:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel2 : 1; /**< Enable dead time for Compare Channel-2 */
 876:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 877:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 878:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Compare Channel-1? */
 879:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 880:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Compare Channel-2? */
 882:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t div : 2;                       /**< Dead time prescaler divider value.
 883:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Accepts enum ::XMC_CCU8_SLICE_DTC_DIV_t*/
 884:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 24;
 885:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 886:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dtc;
 887:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 888:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 889:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 890:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 891:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 892:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 893:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                       for compare channel-1. Range: [0x0 to 0xFF]
 894:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 895:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                        for compare channel-1. Range: [0x0 to 0xFF
 896:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 16;
 897:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 898:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dc1r;
 899:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 900:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 901:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 902:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 903:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 904:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 905:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 906:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 907:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 908:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 16;
 909:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 910:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dc2r;
 911:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 912:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t;
 913:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 914:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 915:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to compare 
 916:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 917:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 918:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_COMPARE_CONFIG
 919:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 920:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 921:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 922:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 923:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 924:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 925:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_COUNT_MODE_t */
 926:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 927:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t */
 928:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t shadow_xfer_clear : 1; /**< Should PR and CR shadow xfer happen when timer is cleare
 929:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 10;
 930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 931:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 932:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 1;
 933:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 934:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_MODE_t */
 935:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 8;
 936:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t mcm_ch1_enable : 1;     /**< Multi-Channel mode for compare channel 1 enable? */
 937:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t mcm_ch2_enable : 1;     /**< Multi-Channel mode for compare channel 2 enable? */
 938:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 939:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t slice_status : 2;       /**< Which of the two channels drives the slice status outpu
 940:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_STATUS_t*/
 941:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 1;
 942:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 943:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t tc;
 944:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 945:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 946:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 947:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 948:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 949:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out0 : 1; /**< ST and OUT passive levels Configuration for OUT0. 
 950:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 951:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out1 : 1; /**< ST and OUT passive levels Configuration for OUT1. 
 952:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 953:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out2 : 1; /**< ST and OUT passive levels Configuration for OUT2. 
 954:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 955:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out3 : 1; /**< ST and OUT passive levels Configuration for OUT3. 
 956:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 957:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 28;
 958:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 959:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t psl;
 960:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 961:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 962:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 963:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 964:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 965:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t asymmetric_pwm : 1;     /**< Should the PWM be a function of the 2 compare channels
 966:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             rather than period value? */
 967:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   #if !defined(CCU8V3)    /* Defined for all devices except XMC1400 */                             
 968:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out0 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT0? *
 969:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out1 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT1? *
 970:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out2 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT2? *
 971:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out3 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT3? *
 972:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 27;
 973:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   #else
 974:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 3;
 975:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out0 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 976:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT0_t 
 977:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS1 bit-field of CHC register. 
 978:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 979:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 980:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out1 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 981:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT1_t 
 982:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS2 bit-field of CHC register. 
 983:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 984:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 985:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out2 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 986:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT2_t 
 987:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS3 bit-field of CHC register.
 988:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 989:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 990:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out3 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 991:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT3_t 
 992:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS4 bit-field of CHC register.
 993:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 994:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 14;
 995:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   #endif
 996:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 997:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t chc;
 998:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 999:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
1000:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_t */
1001:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
1002:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
1003:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering 
1004:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
1005:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true*/
1006:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CONFIG_t;
1007:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1008:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1009:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to capture 
1010:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
1011:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1012:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_CAPTURE_CONFIG
1013:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1014:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
1015:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
1016:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
1017:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
1018:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 4;
1019:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
1020:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
1021:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                           Accepts enum ::XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t */
1022:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 4;
1023:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
1024:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
1025:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 3;
1026:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU8_SLI
1027:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 15;
1028:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
1029:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t tc;
1030:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
1031:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
1032:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
1033:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer */
1034:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAPTURE_CONFIG_t;
1035:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /*Anonymous structure/union guard end*/
1036:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(__CC_ARM)
1037:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma pop
1038:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #elif defined(__TASKING__)
1039:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma warning restore
1040:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1041:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
1042:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * API Prototypes
1043:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
1044:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #ifdef __cplusplus
1045:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** extern "C" {
1046:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1047:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1048:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidModule(const XMC_CCU8_MODULE_t *const module)
1049:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1050:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   bool tmp = false;
1051:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1052:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = (module == CCU80);
1053:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1054:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81)
1055:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (module == CCU81);
1056:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1057:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1058:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return tmp;  
1059:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } 
1060:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1061:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidSlice(const XMC_CCU8_SLICE_t *const slice)
1062:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1063:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   bool tmp = false;
1064:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1065:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = (slice == CCU80_CC80);
1066:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC81)  
1067:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC81);
1068:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1069:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC82)  
1070:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC82);
1071:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1072:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC83)  
1073:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC83);
1074:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1075:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81)  
1076:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC80);
1077:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC81)  
1078:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC81);
1079:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1080:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC82)  
1081:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC82);
1082:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1083:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC83)  
1084:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC83);
1085:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1086:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif 
1087:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  
1088:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return tmp;  
1089:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** } 
1090:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1091:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1092:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1093:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mcs_action multi-channel shadow transfer request configuration
1094:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1095:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1096:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1097:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1098:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Initialization of global register GCTRL.\n\n
1099:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  As part of module initialization, behaviour of the module upon detection
1100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU8_EnableModule().
1101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The API call would bring up the required CCU8 module and also initialize the module for
1102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  the required multi-channel shadow transfer.
1103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureInit().
1106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action);
1108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the CCU8 module and brings it to active state.\n\n
1116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
1117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this API before any operations are done on the CCU8 module. Invoked from  XMC_CCU8_Init()
1118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SetModuleClock()<BR>  XMC_CCU8_DisableModule()<BR>  XMC_CCU8_StartPrescaler().
1121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module);
1123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Brings the CCU8 module to reset state and enables gating of the clock signal(if applicable depen
1131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * on the device being selected).\n\n
1132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this API when a CCU8 module needs to be disabled completely.
1133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Any operation on the CCU8 module will have no effect after this API is called.
1134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableModule()<BR> XMC_CCU8_DisableModule().
1137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module);
1139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param clock Choice of input clock to the module
1143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.\n\n
1148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
1149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Call to this API is valid after the XMC_CCU8_Init().
1150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.<BR>
1153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock);
1155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<br>\n
1163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
1164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU8_Init()
1165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  (Mandatory to fully initialize the module).
1166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPres
1169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_StopPrescaler().
1170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
1172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 169              	 .loc 2 1174 0
 170 000a 4FF48073 	 mov r3,#256
 171 000e E360     	 str r3,[r4,#12]
 172              	.LBE21:
 173              	.LBE20:
 314:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Start the prescaler */
 315:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_StartPrescaler(module);
 316:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 317:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 174              	 .loc 1 317 0
 175 0010 2368     	 ldr r3,[r4]
 176              	.LVL13:
 318:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 177              	 .loc 1 318 0
 178 0012 23F44043 	 bic r3,r3,#49152
 179              	.LVL14:
 319:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 180              	 .loc 1 319 0
 181 0016 43EA8531 	 orr r1,r3,r5,lsl#14
 182              	.LVL15:
 320:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 321:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 183              	 .loc 1 321 0
 184 001a 2160     	 str r1,[r4]
 185 001c 38BD     	 pop {r3,r4,r5,pc}
 186              	 .cfi_endproc
 187              	.LFE235:
 189              	 .section .text.XMC_CCU8_SetModuleClock,"ax",%progbits
 190              	 .align 1
 191              	 .global XMC_CCU8_SetModuleClock
 192              	 .thumb
 193              	 .thumb_func
 195              	XMC_CCU8_SetModuleClock:
 196              	.LFB236:
 322:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 323:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 324:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to select CCU8 module clock */
 325:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock)
 326:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 197              	 .loc 1 326 0
 198              	 .cfi_startproc
 199              	 
 200              	 
 201              	 
 202              	.LVL16:
 327:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 328:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 329:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 330:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Clock", XMC_CCU8_SLICE_CHECK_CLOCK(clock));
 331:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 332:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 203              	 .loc 1 332 0
 204 0000 0368     	 ldr r3,[r0]
 205              	.LVL17:
 333:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t) CCU8_GCTRL_PCIS_Msk);
 206              	 .loc 1 333 0
 207 0002 23F03003 	 bic r3,r3,#48
 208              	.LVL18:
 334:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= ((uint32_t) clock) << CCU8_GCTRL_PCIS_Pos;
 209              	 .loc 1 334 0
 210 0006 43EA0111 	 orr r1,r3,r1,lsl#4
 211              	.LVL19:
 335:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 336:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 212              	 .loc 1 336 0
 213 000a 0160     	 str r1,[r0]
 214 000c 7047     	 bx lr
 215              	 .cfi_endproc
 216              	.LFE236:
 218              	 .section .text.XMC_CCU8_SLICE_CompareInit,"ax",%progbits
 219              	 .align 1
 220              	 .global XMC_CCU8_SLICE_CompareInit
 221              	 .thumb
 222              	 .thumb_func
 224              	XMC_CCU8_SLICE_CompareInit:
 225              	.LFB237:
 337:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 338:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 339:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure CC8 Slice in Compare mode */
 340:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
 341:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
 342:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 226              	 .loc 1 342 0
 227              	 .cfi_startproc
 228              	 
 229              	 
 230              	 
 231              	.LVL20:
 232              	.LBB22:
 233              	.LBB23:
1175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Starts the parity function.<br>\n
1184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this  API after XMC_CCU8_Init()
1185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR> XMC_CCU8_StopParity
1188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartParityChecker(XMC_CCU8_MODULE_t *const module)
1190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartParityChecker:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC = (uint32_t) CCU8_GIDLC_SPCH_Msk;
1193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.\n\n
1202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
1203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the slices of the module.
1204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8
1207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopPrescaler(XMC_CCU8_MODULE_t *const module)
1209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS = (uint32_t) CCU8_GIDLS_CPRB_Msk;
1212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the parity function.<br>\n
1221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartParityChecker()<BR>
1224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopParityChecker(XMC_CCU8_MODULE_t *const module)
1226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopParityChecker:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS = (uint32_t) CCU8_GIDLS_CPCH_Msk;
1229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.\n\n
1238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If clock is being supplied to the slices of the  module then returns as true. 
1239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler()<BR> XMC_CCU8_EnableClock()<BR>  XMC_CCU8
1242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsPrescalerRunning(XMC_CCU8_MODULE_t *const module)
1244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PRB_Msk) == CCU8_GSTAT_PRB_Msk));
1247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the parity checker.\n\n
1256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_StopParityChecker()<BR> XMC_CCU8_EnableClock()<BR>  
1259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsParityCheckerRunning(XMC_CCU8_MODULE_t *const module)
1261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PCRB_Msk) == CCU8_GSTAT_PCRB_Msk));
1264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
1269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively. 
1270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GIDLC.CS3I bits.\n\n
1277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
1278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the idle state simultaneously.
1279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock().
1282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableMultipleClocks(XMC_CCU8_MODULE_t *const module, const uint8_t c
1284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU8_IsValidModule(module)
1286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid clock mask", (clock_mask < 16U));
1287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC = (uint32_t) clock_mask;
1289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode   Selects suspend mode
1294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the entering in suspend mode for all the CCU8 slices.
1299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.
1302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SetSuspendMode(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SUSPEN
1304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU8_IsValidModule(module)
1306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GCTRL = (module->GCTRL & (uint32_t)~CCU8_GCTRL_SUSCFG_Msk) | mode;
1307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_init Pointer to slice configuration structure
1312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to compare mode, by configuring CC8yTC, CC8yCMC, CC8yPSC, CC8yDITH
1317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yFPCS, CC8yCHC registers.\n\n
1318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8 slice is configured with Timer configurations in this routine. Timer is stopped before initi
1319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable
1320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow transfer for the required values by calling XMC_CCU8_EnableShadowTransfer() with appr
1321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.
1324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
1326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init);
1327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param capture_init Pointer to slice configuration structure
1331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to capture mode, by configuring CC8yTC, CC8yCMC, CC8yPSC,CC8yFPCS 
1336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8 slice is configured with Capture configurations in  this routine. Timer is stopped before in
1337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable the sh
1338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * for the required  values by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask. 
1339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config().
1342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice,
1344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init);
1345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be Enabled.
1349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
1356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
1357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  slice whose clock needs to be enabled. Directly accessed register is GIDLC.
1358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR> 
1361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_numb
1363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));
1366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC = ((uint32_t) 1 << slice_number);
1368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
1379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
1380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is possible to disable clock at slice level using the module pointer.
1381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
1382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  
1385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_DisableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_num
1387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Slice Number", (slice_number < 4U));
1390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS = ((uint32_t) 1 << slice_number);
1392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param output Slice output.
1399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables slice outputs to be used to perform the parity check. 
1404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput()<BR>
1407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput(XMC_CCU8_MODULE_t *const module,
1409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Module Pointer", XMC_CCU8_IsVal
1411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Slice Number", (slice_number < 
1412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK |= (uint32_t)(((output & (1 << slice_number)) << CCU8_GPCHK_PCSEL0_Pos) |
1414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                               ((output & (2 << slice_number)) << CCU8_GPCHK_PCSEL1_Pos) |
1415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                               ((output & (4 << slice_number)) << CCU8_GPCHK_PCSEL2_Pos) |
1416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                               ((output & (8 << slice_number)) << CCU8_GPCHK_PCSEL3_Pos));
1417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param output Slice output ::XMC_CCU8_SLICE_OUTPUT_t.
1424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables slice outputs to be used to perform the parity check. 
1429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput()<BR>
1432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput(XMC_CCU8_MODULE_t *const module
1434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Module Pointer", XMC_CCU8_IsVal
1436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput:Invalid Slice Number", (slice_number <
1437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK &= (uint32_t)~(((output & (1 << slice_number)) << CCU8_GPCHK_PCSEL0_Pos) |
1439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                ((output & (2 << slice_number)) << CCU8_GPCHK_PCSEL1_Pos) |
1440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                ((output & (4 << slice_number)) << CCU8_GPCHK_PCSEL2_Pos) |
1441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                ((output & (8 << slice_number)) << CCU8_GPCHK_PCSEL3_Pos));
1442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input signal controlling the delay between the change at the CCU8 outputs and effective c
1447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects which signal is controlling the delay between the change at the CCU8 outputs and effecti
1452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>
1455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetDelayInput(XMC_CCU8_MODULE_t *const module, con
1457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PCDS_Msk) | input;
1460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input signal contains the driver parity information ::XMC_CCU8_PARITY_CHECKER_DRIVER_INPU
1465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects which signal contains the driver parity information.
1470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The signal must be selected throughout the input selector mux of each slice. The signal must be 
1471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker(), XMC_CCU8_SLICE_SetInput()<BR>.
1474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetDriverInput(XMC_CCU8_MODULE_t *const module, co
1476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PISEL_Msk) | input;
1479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param type odd or even parity ::XMC_CCU8_PARITY_CHECKER_TYPE_t.
1484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects if we have an odd or even parity.
1489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>.
1492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetType(XMC_CCU8_MODULE_t *const module, const XMC
1494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PCTS_Msk) | type;
1497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return status of parity checker. If >0 then an error is dectected
1503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns current value of the XOR chain.
1506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>
1509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint32_t XMC_CCU8_SLICE_ParityCheckerGetStatus(XMC_CCU8_MODULE_t *const module)
1511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return (module->GPCHK & CCU8_GPCHK_PCST_Msk);
1514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1518:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_path_msk configuration for output path selection.
1519:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *        combination of XMC_CCU8_OUT_PATH_t enum items can be used to create a mask.
1520:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
1521:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1522:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1523:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1524:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1525:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configure the out the path of the two compare channels with specified ST signal, by configuring 
1526:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  ^ CC8yCHC register.\n\n
1527:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
1528:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For the two compare channels it is possible to select either direct ST signal or inverted ST sig
1529:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \b out_path_msk is used to set the required out put path.
1530:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1531:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1532:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None
1533:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** */
1534:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk);
1535:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1536:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1537:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1538:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Start Function
1539:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param start_mode Behaviour of slice when the start function is activated
1540:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1541:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1542:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1543:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1544:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configures the Start Function of the slice, by configuring CC8yCMC.ENDS and CC8yTC.ENDM bits.\n
1545:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC8 ti
1546:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1547:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1548:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1549:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1550:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1551:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
1552:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_EVENT_t event,
1553:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode);
1554:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1555:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1556:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1557:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Stop Function
1558:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param end_mode Behaviour of slice when the stop function is activated
1559:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1560:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1561:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1562:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1563:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Stop function for the slice, by configuring CC8yCMC.STRTS and CC8yTC.STRM bits.\n
1564:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU8 tim
1565:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1566:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1567:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1568:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput()
1569:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1570:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
1571:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_EVENT_t event,
1572:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode);
1573:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1574:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1575:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1576:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External load Function
1577:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1578:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1579:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1580:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1581:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configures the Load Function for the slice, by configuring CC8yCMC.LDS bit.\n\n
1582:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1583:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 0,CC8yTIMER register is reloaded with the value from compare channel 1 
1584:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            compare channel 2\n
1585:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 1,CC8yTIMER register is reloaded with the value from period register\n
1586:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  
1587:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1588:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1589:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1590:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1591:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1592:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1593:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1594:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1595:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ch_num Select which compare channel value has to be loaded to the Timer register during e
1596:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1597:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1598:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1599:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1600:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Up on occurrence of the external load event, if CC8yTCST.CDIR set to 0, CC8yTIMER register can 
1601:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  with the value from compare channel 1 or compare channel 2\n
1602:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 0, compare channel 1 value is loaded to the CC8yTIMER register\n
1603:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 1, compare channel 2 value is loaded to the CC8yTIMER register\n
1604:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1605:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1606:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1607:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1608:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
1609:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1610:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1611:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1612:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Modulation Function
1613:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mod_mode Desired Modulation mode
1614:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Specify the channel(s) on which the modulation should be applied.
1615:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1616:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1617:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1618:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1619:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1620:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1621:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Output Modulation Function of the slice, by configuring CC8yCMC.MOS, CC8yTC.EMT a
1622:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTC.EMS bits.\n\n
1623:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1624:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1625:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the modulation function is configured as well.
1626:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1627:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1628:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1629:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1630:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
1631:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_EVENT_t event,
1632:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
1633:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel, 
1634:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const bool synch_with_pwm
1635:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      );
1636:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1637:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1638:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1639:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Function
1640:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1641:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1642:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1643:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1644:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Count Function of the slice, by configuring CC8yCMC.CNTS bit.\n\n
1645:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Count function is mapped with one of the 3 events. CCU8 slice can take an external
1646:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * signal to act as the counting event. The CCU8 slice would count the
1647:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * edges present on the \b event selected. 
1648:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1649:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1650:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1651:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1652:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1653:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1654:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1655:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1656:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event  Map an External event to the External Gating Function
1657:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1658:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1659:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1660:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1661:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Gating Function of the slice, by configuring CC8yCMC.GATES bit.\n\n
1662:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Gating function is mapped with one of the 3 events.  A CCU8 slice can use an input signal that w
1663:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1664:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1665:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1666:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1667:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1668:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1669:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1670:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1671:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1672:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-0 Function
1673:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1674:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1675:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1676:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1677:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Capture-0 Function of the slice, by configuring CC8yCMC.CAP0S bit.\n\n
1678:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events.  A CCU8 slice can be configured into captur
1679:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC0V and 
1680:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1681:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1682:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1683:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1684:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1685:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1686:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1687:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1688:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-1 Function
1689:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1690:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1691:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1692:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1693:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Capture-1 Function of the slice, by configuring CC8yCMC.CAP1S bit.\n\n
1694:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events. A CCU8 slice can be configured into capture
1695:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC2V
1696:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1697:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1698:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1699:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1700:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1701:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1702:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1703:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1704:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1705:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1706:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1707:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1708:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC8yTC.E
1709:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * In this mode the there is only one associated read address for all the capture registers.
1710:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Individual capture registers can still be accessed in this mode.
1711:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1712:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1713:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_GetCapturedValueFromFifo().
1714:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1715:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsExtendedCapReadEnabled(const XMC_CCU8_SLICE_t *const slice)
1716:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1717:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1718:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((bool)((slice->TC & (uint32_t) CCU8_CC8_TC_ECM_Msk) == (uint32_t)CCU8_CC8_TC_ECM_Msk));
1719:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1720:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1721:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1722:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1723:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1724:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number to check whether read value belongs to required slice or not
1725:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1726:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1727:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1728:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                     Range: [0x0 to 0xFFFF]
1729:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1730:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1731:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Read captured value from FIFO(ECRD register).\n\n
1732:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1733:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1734:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1735:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1736:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1737:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1738:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1739:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1740:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1741:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #else
1742:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1743:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1744:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param set The capture register set from which the captured value is to be retrieved
1745:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1746:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint32_t Returns the value captured in the \b slice_number
1747:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Range: [0x0 to 0xFFFF]
1748:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1749:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1750:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Read captured value from FIFO(CC8yECRD0 and CC8yECRD1).\n\n
1751:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1752:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1753:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1754:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1755:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1756:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1757:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1758:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1759:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1760:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice,
1761:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 		                                             const XMC_CCU8_SLICE_CAP_REG_SET_t set);
1762:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1763:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1764:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1765:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1766:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Direction Function
1767:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1768:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1769:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1770:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1771:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Count Direction of the slice, by configuring CC8yCMC.UDS bit.\n\n
1772:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1773:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTIMER count direction depending on an external signal.
1774:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1775:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1776:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1777:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1778:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
1779:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1780:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1781:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1782:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1783:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1784:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1785:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1786:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the status bit override Function of the slice, by configuring CC8yCMC.OFS bit.\n\n
1787:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1788:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * output of the timer's CC8yST1 signal depending on an external signal.
1789:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1790:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1791:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent().
1792:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1793:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice);
1794:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1795:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1796:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1797:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param exit_mode How should a previously logged trap state be exited?
1798:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1799:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1800:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1801:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1802:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1803:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1804:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Trap Function of the slice, by configuring CC8yCMC.TS, CC8yTC.TRPSE, and CC8yTC.T
1805:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1806:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1807:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1808:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1809:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1810:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1811:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1812:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1813:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
1814:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
1815:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                bool synch_with_pwm);
1816:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1817:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1818:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1819:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ev1_config Pointer to event 1 configuration data
1820:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ev2_config Pointer to event 2 configuration data
1821:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1822:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1823:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1824:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1825:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1826:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC8yINS reg
1827:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1828:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1829:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Event-2 input would be the override value.
1830:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1831:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1832:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig().
1833:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1834:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
1835:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
1836:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
1837:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1838:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1839:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1840:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1841:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param config Pointer to event configuration data.
1842:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1843:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1844:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1845:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1846:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures an External Event of the slice, by updating CC8yINS register .\n\n
1847:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1848:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1849:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1850:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1851:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1852:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1853:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR>  XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateCon
1854:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR> XMC_CCU8_SLICE_Capture1Config()<BR>  XMC_CCU8_SLICE_Directi
1855:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1856:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1857:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
1858:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_t event,
1859:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *config);
1860:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1861:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1862:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1863:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1864:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1865:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1866:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1867:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1868:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1869:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1870:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects an input for an external event, by configuring CC8yINS register.\n\n
1871:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1872:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This configures the CC8yINS.EVxIS for the selected event.
1873:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1874:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1875:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1876:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR> XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateConf
1877:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config()<BR> XMC_CCU8_SLICE_Directi
1878:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1879:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1880:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
1881:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_EVENT_t event,
1882:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_INPUT_t input);
1883:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1884:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1885:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1886:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be activated.
1887:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1888:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   using a bit wise OR operation
1889:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1890:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1891:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1892:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1893:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1894:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the trap feature, by setting CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TRAP
1895:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \a out_mask.\n\n
1896:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1897:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1898:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1899:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1900:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEven
1901:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInput().
1902:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1903:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_ma
1904:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1905:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1906:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
1907:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1908:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1909:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1910:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1911:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be deactivated.
1912:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1913:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   using a bit wise OR operation.
1914:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1915:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1916:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1917:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1918:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1919:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the trap feature, by clearing CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TR
1920:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \a out_mask.\n\n.\n\n
1921:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will revert the changes done by XMC_CCU8_SLICE_EnableTrap().
1922:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU8 slice.
1923:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1924:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1925:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableTrap().
1926:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1927:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_m
1928:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1929:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1930:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1931:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos);
1932:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1933:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1934:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1935:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1936:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1937:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1938:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1939:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1940:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC8yTCST.TRB bit.
1941:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1942:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1943:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
1944:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1945:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
1946:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1947:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1948:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
1949:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1950:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1951:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1952:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1953:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1954:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-1 is running else it returns
1955:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1956:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1957:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 1 (Either Running or stopped(idle)), by reading CC8y
1958:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-1.
1959:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1960:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1961:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr2Running().
1962:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1963:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr1Running(const XMC_CCU8_SLICE_t *const slice)
1964:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1965:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr1Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1966:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR1_Msk) == (uint32_t)CCU8_CC8_TCST_DTR1_Msk);
1967:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1968:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1969:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1970:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1971:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1972:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-2 is running else it returns
1973:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1974:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1975:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 2 (Either Running or stopped(idle)), by reading CC8y
1976:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-2.
1977:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1978:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1979:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr1Running().
1980:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1981:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr2Running(const XMC_CCU8_SLICE_t *const slice)
1982:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1983:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr2Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1984:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR2_Msk) == (uint32_t)CCU8_CC8_TCST_DTR2_Msk);
1985:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1986:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1987:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1988:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1989:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1990:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   ::XMC_CCU8_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1991:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1992:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1993:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the timer counting direction, by reading CC8yTCST.CDIR bit.\n\n
1994:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will return the direction in which the timer is currently
1995:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * incrementing(XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU8_SLICE_TIMER_COUNT_DIR_
1996:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1997:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1998:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
1999:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2000:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_DIR_t XMC_CCU8_SLICE_GetCountingDir(const XMC_CCU8_SLICE
2001:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2002:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2003:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU8_CC8_TCST_CDIR_Msk) >> CCU8_CC8_TC
2004:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2005:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2006:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2007:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2008:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2009:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2010:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2011:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Starts the timer counting operation, by setting CC8yTCSET.TRBS bit.\n\n
2012:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is necessary to have configured the CC8 slice before starting its timer.
2013:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
2014:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2015:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2016:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StopTimer().
2017:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2018:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
2019:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2020:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2021:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
2022:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2023:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2024:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2025:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2026:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2027:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2028:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2029:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2030:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the Timer.\n\n
2031:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC8yTCCLR.TRBC bit.
2032:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2033:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2034:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2035:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2036:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
2037:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2038:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2039:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 234              	 .loc 2 2039 0
 235 0000 0123     	 movs r3,#1
 236 0002 0361     	 str r3,[r0,#16]
 237              	.LBE23:
 238              	.LBE22:
 343:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 344:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
 345:../Libraries/XMCLib/src/xmc_ccu8.c ****              (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
 346:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Stops the timer */
 347:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_StopTimer(slice);
 348:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program the timer mode */
 349:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = compare_init->tc;
 239              	 .loc 1 349 0
 240 0004 0B68     	 ldr r3,[r1]
 241 0006 4361     	 str r3,[r0,#20]
 350:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable the timer concatenation */
 351:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 242              	 .loc 1 351 0
 243 0008 4B7B     	 ldrb r3,[r1,#13]
 244 000a C3F30013 	 ubfx r3,r3,#4,#1
 245 000e 1B05     	 lsls r3,r3,#20
 246 0010 4360     	 str r3,[r0,#4]
 352:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program initial prescaler divider value */
 353:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) compare_init->prescaler_initval;
 247              	 .loc 1 353 0
 248 0012 0B7B     	 ldrb r3,[r1,#12]
 249 0014 03F00F03 	 and r3,r3,#15
 250 0018 4362     	 str r3,[r0,#36]
 354:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program floating prescaler compare value */
 355:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPCS = (uint32_t) compare_init->float_limit;
 251              	 .loc 1 355 0
 252 001a 0B7B     	 ldrb r3,[r1,#12]
 253 001c 1B09     	 lsrs r3,r3,#4
 254 001e C362     	 str r3,[r0,#44]
 356:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program the dither compare value */
 357:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DITS = (uint32_t) compare_init->dither_limit;
 255              	 .loc 1 357 0
 256 0020 4B7B     	 ldrb r3,[r1,#13]
 257 0022 03F00F03 	 and r3,r3,#15
 258 0026 0362     	 str r3,[r0,#32]
 358:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program timer output passive level */
 359:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSL = (uint32_t) compare_init->psl;
 259              	 .loc 1 359 0
 260 0028 4B68     	 ldr r3,[r1,#4]
 261 002a 8361     	 str r3,[r0,#24]
 360:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Asymmetric PWM and Slice output routing configuration */
 361:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 362:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = (uint32_t) compare_init->chc;
 363:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 364:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 262              	 .loc 1 364 0
 263 002c 8B68     	 ldr r3,[r1,#8]
 264 002e 83F01403 	 eor r3,r3,#20
 265 0032 8364     	 str r3,[r0,#72]
 266 0034 7047     	 bx lr
 267              	 .cfi_endproc
 268              	.LFE237:
 270              	 .section .text.XMC_CCU8_SLICE_CaptureInit,"ax",%progbits
 271              	 .align 1
 272              	 .global XMC_CCU8_SLICE_CaptureInit
 273              	 .thumb
 274              	 .thumb_func
 276              	XMC_CCU8_SLICE_CaptureInit:
 277              	.LFB238:
 365:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 366:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 367:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 368:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure CC8 Slice in Capture mode */
 369:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice, 
 370:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init)
 371:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 278              	 .loc 1 371 0
 279              	 .cfi_startproc
 280              	 
 281              	 
 282              	 
 283              	.LVL21:
 284              	.LBB24:
 285              	.LBB25:
 286              	 .loc 2 2039 0
 287 0000 0123     	 movs r3,#1
 288 0002 0361     	 str r3,[r0,#16]
 289              	.LBE25:
 290              	.LBE24:
 372:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 373:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Capture Init Pointer is NULL", 
 374:../Libraries/XMCLib/src/xmc_ccu8.c ****              (XMC_CCU8_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);
 375:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Stops the timer */
 376:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_StopTimer(slice);
 377:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Capture mode configuration */
 378:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = capture_init->tc;
 291              	 .loc 1 378 0
 292 0004 0B68     	 ldr r3,[r1]
 293 0006 4361     	 str r3,[r0,#20]
 379:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable the timer concatenation */
 380:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = (uint32_t)capture_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 294              	 .loc 1 380 0
 295 0008 4B79     	 ldrb r3,[r1,#5]
 296 000a 03F00103 	 and r3,r3,#1
 297 000e 1B05     	 lsls r3,r3,#20
 298 0010 4360     	 str r3,[r0,#4]
 381:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program floating prescaler compare value */
 382:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPCS = (uint32_t) capture_init->float_limit;
 299              	 .loc 1 382 0
 300 0012 0B79     	 ldrb r3,[r1,#4]
 301 0014 1B09     	 lsrs r3,r3,#4
 302 0016 C362     	 str r3,[r0,#44]
 383:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program initial prescaler divider value */
 384:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) capture_init->prescaler_initval;
 303              	 .loc 1 384 0
 304 0018 0B79     	 ldrb r3,[r1,#4]
 305 001a 03F00F03 	 and r3,r3,#15
 306 001e 4362     	 str r3,[r0,#36]
 307 0020 7047     	 bx lr
 308              	 .cfi_endproc
 309              	.LFE238:
 311              	 .section .text.XMC_CCU8_SLICE_SetOutPath,"ax",%progbits
 312              	 .align 1
 313              	 .global XMC_CCU8_SLICE_SetOutPath
 314              	 .thumb
 315              	 .thumb_func
 317              	XMC_CCU8_SLICE_SetOutPath:
 318              	.LFB239:
 385:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 386:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 387:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the each output of the slice with either STx or inverted STx. */
 388:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk)
 389:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 319              	 .loc 1 389 0
 320              	 .cfi_startproc
 321              	 
 322              	 
 323              	 
 324              	.LVL22:
 390:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t chc;
 391:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetOutPath:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 392:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc = slice->CHC;
 325              	 .loc 1 392 0
 326 0000 836C     	 ldr r3,[r0,#72]
 327              	.LVL23:
 393:../Libraries/XMCLib/src/xmc_ccu8.c **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 394:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc &= ~((uint32_t)out_path_msk >> 16U);
 328              	 .loc 1 394 0
 329 0002 23EA1143 	 bic r3,r3,r1,lsr#16
 330              	.LVL24:
 395:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc |= ((uint32_t)out_path_msk & 0xFFFFU);
 331              	 .loc 1 395 0
 332 0006 89B2     	 uxth r1,r1
 333              	.LVL25:
 334 0008 1943     	 orrs r1,r1,r3
 335              	.LVL26:
 396:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 397:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc &= ~((uint32_t)((uint32_t)(out_path_msk & 0xCCCC0U) >> 2U));
 398:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc |= ((uint32_t)out_path_msk & 0x33330U);
 399:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 400:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = chc;
 336              	 .loc 1 400 0
 337 000a 8164     	 str r1,[r0,#72]
 338 000c 7047     	 bx lr
 339              	 .cfi_endproc
 340              	.LFE239:
 342              	 .section .text.XMC_CCU8_SetMultiChannelShadowTransferMode,"ax",%progbits
 343              	 .align 1
 344              	 .global XMC_CCU8_SetMultiChannelShadowTransferMode
 345              	 .thumb
 346              	 .thumb_func
 348              	XMC_CCU8_SetMultiChannelShadowTransferMode:
 349              	.LFB240:
 401:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 402:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 403:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. *
 404:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t sli
 405:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 350              	 .loc 1 405 0
 351              	 .cfi_startproc
 352              	 
 353              	 
 354              	 
 355              	.LVL27:
 406:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 407:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 408:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidM
 409:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 410:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 356              	 .loc 1 410 0
 357 0000 0368     	 ldr r3,[r0]
 358              	.LVL28:
 411:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 359              	 .loc 1 411 0
 360 0002 23EA1143 	 bic r3,r3,r1,lsr#16
 361              	.LVL29:
 412:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 362              	 .loc 1 412 0
 363 0006 89B2     	 uxth r1,r1
 364              	.LVL30:
 365 0008 1943     	 orrs r1,r1,r3
 366              	.LVL31:
 413:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 367              	 .loc 1 413 0
 368 000a 0160     	 str r1,[r0]
 369 000c 7047     	 bx lr
 370              	 .cfi_endproc
 371              	.LFE240:
 373              	 .section .text.XMC_CCU8_SLICE_StartConfig,"ax",%progbits
 374              	 .align 1
 375              	 .global XMC_CCU8_SLICE_StartConfig
 376              	 .thumb
 377              	 .thumb_func
 379              	XMC_CCU8_SLICE_StartConfig:
 380              	.LFB241:
 414:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 415:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 416:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 417:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Start trigger function of a slice*/
 418:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
 419:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_EVENT_t event,
 420:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode)
 421:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 381              	 .loc 1 421 0
 382              	 .cfi_startproc
 383              	 
 384              	 
 385              	 
 386              	.LVL32:
 422:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 423:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 424:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 425:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 426:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 427:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
 428:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
 429:../Libraries/XMCLib/src/xmc_ccu8.c ****               (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
 430:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 387              	 .loc 1 430 0
 388 0000 4368     	 ldr r3,[r0,#4]
 389              	.LVL33:
 431:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 432:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 390              	 .loc 1 432 0
 391 0002 23F00303 	 bic r3,r3,#3
 392              	.LVL34:
 433:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 393              	 .loc 1 433 0
 394 0006 1943     	 orrs r1,r1,r3
 395              	.LVL35:
 434:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 435:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 396              	 .loc 1 435 0
 397 0008 4160     	 str r1,[r0,#4]
 436:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 437:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc  = slice->TC;
 398              	 .loc 1 437 0
 399 000a 4369     	 ldr r3,[r0,#20]
 400              	.LVL36:
 438:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 439:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 401              	 .loc 1 439 0
 402 000c 012A     	 cmp r2,#1
 440:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 441:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 403              	 .loc 1 441 0
 404 000e 0CBF     	 ite eq
 405 0010 43F48063 	 orreq r3,r3,#1024
 406              	.LVL37:
 442:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 443:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 444:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 445:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 407              	 .loc 1 445 0
 408 0014 23F48063 	 bicne r3,r3,#1024
 409              	.LVL38:
 446:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 447:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 448:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 410              	 .loc 1 448 0
 411 0018 4361     	 str r3,[r0,#20]
 412 001a 7047     	 bx lr
 413              	 .cfi_endproc
 414              	.LFE241:
 416              	 .section .text.XMC_CCU8_SLICE_StopConfig,"ax",%progbits
 417              	 .align 1
 418              	 .global XMC_CCU8_SLICE_StopConfig
 419              	 .thumb
 420              	 .thumb_func
 422              	XMC_CCU8_SLICE_StopConfig:
 423              	.LFB242:
 449:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 450:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 451:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Stop trigger function of a slice */
 452:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
 453:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_EVENT_t event,
 454:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode)
 455:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 424              	 .loc 1 455 0
 425              	 .cfi_startproc
 426              	 
 427              	 
 428              	 
 429              	.LVL39:
 456:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 457:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 458:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 459:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 460:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 461:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode))
 462:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 463:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 430              	 .loc 1 463 0
 431 0000 4368     	 ldr r3,[r0,#4]
 432              	.LVL40:
 464:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the stop function */
 465:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 433              	 .loc 1 465 0
 434 0002 23F00C03 	 bic r3,r3,#12
 435              	.LVL41:
 466:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 436              	 .loc 1 466 0
 437 0006 43EA8101 	 orr r1,r3,r1,lsl#2
 438              	.LVL42:
 467:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 468:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 439              	 .loc 1 468 0
 440 000a 4160     	 str r1,[r0,#4]
 469:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 470:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the stop mode */
 471:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 441              	 .loc 1 471 0
 442 000c 4369     	 ldr r3,[r0,#20]
 443              	.LVL43:
 472:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 444              	 .loc 1 472 0
 445 000e 23F44073 	 bic r3,r3,#768
 446              	.LVL44:
 473:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 447              	 .loc 1 473 0
 448 0012 43EA0222 	 orr r2,r3,r2,lsl#8
 449              	.LVL45:
 474:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 475:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 450              	 .loc 1 475 0
 451 0016 4261     	 str r2,[r0,#20]
 452 0018 7047     	 bx lr
 453              	 .cfi_endproc
 454              	.LFE242:
 456              	 .section .text.XMC_CCU8_SLICE_LoadConfig,"ax",%progbits
 457              	 .align 1
 458              	 .global XMC_CCU8_SLICE_LoadConfig
 459              	 .thumb
 460              	 .thumb_func
 462              	XMC_CCU8_SLICE_LoadConfig:
 463              	.LFB243:
 476:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 477:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 478:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Load trigger function of a slice*/
 479:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 480:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 464              	 .loc 1 480 0
 465              	 .cfi_startproc
 466              	 
 467              	 
 468              	 
 469              	.LVL46:
 481:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 482:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 483:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 484:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 485:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 486:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 470              	 .loc 1 486 0
 471 0000 4368     	 ldr r3,[r0,#4]
 472              	.LVL47:
 487:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 488:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the load function */
 489:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 473              	 .loc 1 489 0
 474 0002 23F44053 	 bic r3,r3,#12288
 475              	.LVL48:
 490:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 476              	 .loc 1 490 0
 477 0006 43EA0131 	 orr r1,r3,r1,lsl#12
 478              	.LVL49:
 491:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 492:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 479              	 .loc 1 492 0
 480 000a 4160     	 str r1,[r0,#4]
 481 000c 7047     	 bx lr
 482              	 .cfi_endproc
 483              	.LFE243:
 485              	 .section .text.XMC_CCU8_SLICE_LoadSelector,"ax",%progbits
 486              	 .align 1
 487              	 .global XMC_CCU8_SLICE_LoadSelector
 488              	 .thumb
 489              	 .thumb_func
 491              	XMC_CCU8_SLICE_LoadSelector:
 492              	.LFB244:
 493:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 494:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 495:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure, which compare register value has to be loaded during external load event */
 496:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
 497:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 493              	 .loc 1 497 0
 494              	 .cfi_startproc
 495              	 
 496              	 
 497              	 
 498              	.LVL50:
 498:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 499:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 500:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 501:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNE
 502:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 503:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 499              	 .loc 1 503 0
 500 0000 4369     	 ldr r3,[r0,#20]
 501              	.LVL51:
 504:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 505:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the load function */
 506:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 502              	 .loc 1 506 0
 503 0002 23F08003 	 bic r3,r3,#128
 504              	.LVL52:
 507:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 505              	 .loc 1 507 0
 506 0006 43EAC111 	 orr r1,r3,r1,lsl#7
 507              	.LVL53:
 508:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 509:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 508              	 .loc 1 509 0
 509 000a 4161     	 str r1,[r0,#20]
 510 000c 7047     	 bx lr
 511              	 .cfi_endproc
 512              	.LFE244:
 514              	 .section .text.XMC_CCU8_SLICE_ModulationConfig,"ax",%progbits
 515              	 .align 1
 516              	 .global XMC_CCU8_SLICE_ModulationConfig
 517              	 .thumb
 518              	 .thumb_func
 520              	XMC_CCU8_SLICE_ModulationConfig:
 521              	.LFB245:
 510:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 511:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 512:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the slice modulation function */
 513:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
 514:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_EVENT_t event,
 515:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
 516:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
 517:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const bool synch_with_pwm)
 518:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 522              	 .loc 1 518 0
 523              	 .cfi_startproc
 524              	 
 525              	 
 526              	.LVL54:
 527 0000 10B5     	 push {r4,lr}
 528              	.LCFI4:
 529              	 .cfi_def_cfa_offset 8
 530              	 .cfi_offset 4,-8
 531              	 .cfi_offset 14,-4
 519:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 520:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 521:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 522:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
 523:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(even
 524:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid channel for modulation", 
 525:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
 526:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
 527:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
 528:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));
 529:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 530:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 532              	 .loc 1 530 0
 533 0002 4468     	 ldr r4,[r0,#4]
 534              	.LVL55:
 531:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 532:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the modulation function */
 533:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 535              	 .loc 1 533 0
 536 0004 24F44024 	 bic r4,r4,#786432
 537              	.LVL56:
 534:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 538              	 .loc 1 534 0
 539 0008 44EA8141 	 orr r1,r4,r1,lsl#18
 540              	.LVL57:
 535:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 536:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 541              	 .loc 1 536 0
 542 000c 4160     	 str r1,[r0,#4]
 537:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 538:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc  = slice->TC;
 543              	 .loc 1 538 0
 544 000e 4169     	 ldr r1,[r0,#20]
 545              	.LVL58:
 539:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 540:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, Modulation mode */
 541:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 546              	 .loc 1 541 0
 547 0010 012A     	 cmp r2,#1
 542:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 543:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 548              	 .loc 1 543 0
 549 0012 0CBF     	 ite eq
 550 0014 41F08072 	 orreq r2,r1,#16777216
 551              	.LVL59:
 544:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 545:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 546:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 547:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 552              	 .loc 1 547 0
 553 0018 21F08072 	 bicne r2,r1,#16777216
 554              	.LVL60:
 548:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 549:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 550:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Synchronization of modulation effect with PWM cycle */
 551:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(synch_with_pwm == true)
 555              	 .loc 1 551 0
 556 001c 9DF80810 	 ldrb r1,[sp,#8]
 557 0020 11B1     	 cbz r1,.L29
 552:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 553:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 558              	 .loc 1 553 0
 559 0022 42F40002 	 orr r2,r2,#8388608
 560              	.LVL61:
 561 0026 01E0     	 b .L30
 562              	.L29:
 554:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 555:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 556:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 557:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 563              	 .loc 1 557 0
 564 0028 22F40002 	 bic r2,r2,#8388608
 565              	.LVL62:
 566              	.L30:
 558:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 559:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 560:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure on which channel external modulation to be applied */
 561:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 567              	 .loc 1 561 0
 568 002c 22F0C052 	 bic r2,r2,#402653184
 569              	.LVL63:
 562:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 570              	 .loc 1 562 0
 571 0030 42EAC362 	 orr r2,r2,r3,lsl#27
 572              	.LVL64:
 563:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 564:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 573              	 .loc 1 564 0
 574 0034 4261     	 str r2,[r0,#20]
 575              	.LVL65:
 576 0036 10BD     	 pop {r4,pc}
 577              	 .cfi_endproc
 578              	.LFE245:
 580              	 .section .text.XMC_CCU8_SLICE_CountConfig,"ax",%progbits
 581              	 .align 1
 582              	 .global XMC_CCU8_SLICE_CountConfig
 583              	 .thumb
 584              	 .thumb_func
 586              	XMC_CCU8_SLICE_CountConfig:
 587              	.LFB246:
 565:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 566:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 567:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the slice count function */
 568:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 569:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 588              	 .loc 1 569 0
 589              	 .cfi_startproc
 590              	 
 591              	 
 592              	 
 593              	.LVL66:
 570:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 571:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 572:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 573:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 574:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 575:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 594              	 .loc 1 575 0
 595 0000 4368     	 ldr r3,[r0,#4]
 596              	.LVL67:
 576:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 577:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the count function */
 578:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 597              	 .loc 1 578 0
 598 0002 23F44043 	 bic r3,r3,#49152
 599              	.LVL68:
 579:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 600              	 .loc 1 579 0
 601 0006 43EA8131 	 orr r1,r3,r1,lsl#14
 602              	.LVL69:
 580:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 581:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 603              	 .loc 1 581 0
 604 000a 4160     	 str r1,[r0,#4]
 605 000c 7047     	 bx lr
 606              	 .cfi_endproc
 607              	.LFE246:
 609              	 .section .text.XMC_CCU8_SLICE_GateConfig,"ax",%progbits
 610              	 .align 1
 611              	 .global XMC_CCU8_SLICE_GateConfig
 612              	 .thumb
 613              	 .thumb_func
 615              	XMC_CCU8_SLICE_GateConfig:
 616              	.LFB247:
 582:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 583:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 584:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure slice gate function */
 585:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 586:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 617              	 .loc 1 586 0
 618              	 .cfi_startproc
 619              	 
 620              	 
 621              	 
 622              	.LVL70:
 587:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 588:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 589:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 590:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 591:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 592:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 623              	 .loc 1 592 0
 624 0000 4368     	 ldr r3,[r0,#4]
 625              	.LVL71:
 593:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 594:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 595:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 626              	 .loc 1 595 0
 627 0002 23F44073 	 bic r3,r3,#768
 628              	.LVL72:
 596:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 629              	 .loc 1 596 0
 630 0006 43EA0121 	 orr r1,r3,r1,lsl#8
 631              	.LVL73:
 597:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 598:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 632              	 .loc 1 598 0
 633 000a 4160     	 str r1,[r0,#4]
 634 000c 7047     	 bx lr
 635              	 .cfi_endproc
 636              	.LFE247:
 638              	 .section .text.XMC_CCU8_SLICE_Capture0Config,"ax",%progbits
 639              	 .align 1
 640              	 .global XMC_CCU8_SLICE_Capture0Config
 641              	 .thumb
 642              	 .thumb_func
 644              	XMC_CCU8_SLICE_Capture0Config:
 645              	.LFB248:
 599:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 600:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 601:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure Capture-0 function */
 602:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
 603:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 646              	 .loc 1 603 0
 647              	 .cfi_startproc
 648              	 
 649              	 
 650              	 
 651              	.LVL74:
 604:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 605:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 606:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 607:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 608:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 609:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 652              	 .loc 1 609 0
 653 0000 4368     	 ldr r3,[r0,#4]
 654              	.LVL75:
 610:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 611:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 612:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP0S_Msk);
 655              	 .loc 1 612 0
 656 0002 23F03003 	 bic r3,r3,#48
 657              	.LVL76:
 613:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP0S_Pos;
 658              	 .loc 1 613 0
 659 0006 43EA0111 	 orr r1,r3,r1,lsl#4
 660              	.LVL77:
 614:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 615:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 661              	 .loc 1 615 0
 662 000a 4160     	 str r1,[r0,#4]
 663 000c 7047     	 bx lr
 664              	 .cfi_endproc
 665              	.LFE248:
 667              	 .section .text.XMC_CCU8_SLICE_Capture1Config,"ax",%progbits
 668              	 .align 1
 669              	 .global XMC_CCU8_SLICE_Capture1Config
 670              	 .thumb
 671              	 .thumb_func
 673              	XMC_CCU8_SLICE_Capture1Config:
 674              	.LFB249:
 616:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 617:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 618:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure Capture-1 function */
 619:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
 620:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 675              	 .loc 1 620 0
 676              	 .cfi_startproc
 677              	 
 678              	 
 679              	 
 680              	.LVL78:
 621:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 622:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 623:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 624:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 625:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 626:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 627:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 681              	 .loc 1 627 0
 682 0000 4368     	 ldr r3,[r0,#4]
 683              	.LVL79:
 628:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 629:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 630:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP1S_Msk);
 684              	 .loc 1 630 0
 685 0002 23F0C003 	 bic r3,r3,#192
 686              	.LVL80:
 631:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP1S_Pos;
 687              	 .loc 1 631 0
 688 0006 43EA8111 	 orr r1,r3,r1,lsl#6
 689              	.LVL81:
 632:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 633:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 690              	 .loc 1 633 0
 691 000a 4160     	 str r1,[r0,#4]
 692 000c 7047     	 bx lr
 693              	 .cfi_endproc
 694              	.LFE249:
 696              	 .section .text.XMC_CCU8_SLICE_DirectionConfig,"ax",%progbits
 697              	 .align 1
 698              	 .global XMC_CCU8_SLICE_DirectionConfig
 699              	 .thumb
 700              	 .thumb_func
 702              	XMC_CCU8_SLICE_DirectionConfig:
 703              	.LFB250:
 634:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 635:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 636:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure direction function */
 637:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
 638:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 704              	 .loc 1 638 0
 705              	 .cfi_startproc
 706              	 
 707              	 
 708              	 
 709              	.LVL82:
 639:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 640:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 641:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 642:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event
 643:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 644:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 710              	 .loc 1 644 0
 711 0000 4368     	 ldr r3,[r0,#4]
 712              	.LVL83:
 645:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 646:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the direction function */
 647:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 713              	 .loc 1 647 0
 714 0002 23F44063 	 bic r3,r3,#3072
 715              	.LVL84:
 648:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 716              	 .loc 1 648 0
 717 0006 43EA8121 	 orr r1,r3,r1,lsl#10
 718              	.LVL85:
 649:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 650:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 719              	 .loc 1 650 0
 720 000a 4160     	 str r1,[r0,#4]
 721 000c 7047     	 bx lr
 722              	 .cfi_endproc
 723              	.LFE250:
 725              	 .section .text.XMC_CCU8_SLICE_StatusBitOverrideConfig,"ax",%progbits
 726              	 .align 1
 727              	 .global XMC_CCU8_SLICE_StatusBitOverrideConfig
 728              	 .thumb
 729              	 .thumb_func
 731              	XMC_CCU8_SLICE_StatusBitOverrideConfig:
 732              	.LFB251:
 651:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 652:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 653:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure slice status bit override function */
 654:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
 655:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 733              	 .loc 1 655 0
 734              	 .cfi_startproc
 735              	 
 736              	 
 737              	 
 738              	.LVL86:
 656:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 657:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 658:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
 659:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 660:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 739              	 .loc 1 660 0
 740 0000 4368     	 ldr r3,[r0,#4]
 741              	.LVL87:
 661:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 662:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Map status bit trigger override to Event 1 &
 663:../Libraries/XMCLib/src/xmc_ccu8.c ****          status bit value override to Event 2 */
 664:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 665:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 742              	 .loc 1 665 0
 743 0002 43F48033 	 orr r3,r3,#65536
 744              	.LVL88:
 666:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 667:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 745              	 .loc 1 667 0
 746 0006 4360     	 str r3,[r0,#4]
 747 0008 7047     	 bx lr
 748              	 .cfi_endproc
 749              	.LFE251:
 751              	 .section .text.XMC_CCU8_SLICE_TrapConfig,"ax",%progbits
 752              	 .align 1
 753              	 .global XMC_CCU8_SLICE_TrapConfig
 754              	 .thumb
 755              	 .thumb_func
 757              	XMC_CCU8_SLICE_TrapConfig:
 758              	.LFB252:
 668:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 669:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 670:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure trap function*/
 671:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
 672:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
 673:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const bool synch_with_pwm)
 674:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 759              	 .loc 1 674 0
 760              	 .cfi_startproc
 761              	 
 762              	 
 763              	 
 764              	.LVL89:
 675:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 676:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 677:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 678:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 679:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT
 680:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                              (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT
 681:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 682:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 765              	 .loc 1 682 0
 766 0000 4368     	 ldr r3,[r0,#4]
 767              	.LVL90:
 683:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 684:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Map trap function to Event 2 */
 685:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 686:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 768              	 .loc 1 686 0
 769 0002 43F40033 	 orr r3,r3,#131072
 770              	.LVL91:
 687:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 688:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 771              	 .loc 1 688 0
 772 0006 4360     	 str r3,[r0,#4]
 689:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 690:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 773              	 .loc 1 690 0
 774 0008 4369     	 ldr r3,[r0,#20]
 775              	.LVL92:
 691:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 692:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure synchronization option */
 693:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(synch_with_pwm == true)
 776              	 .loc 1 693 0
 777 000a 12B1     	 cbz r2,.L38
 694:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 695:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 778              	 .loc 1 695 0
 779 000c 43F40013 	 orr r3,r3,#2097152
 780              	.LVL93:
 781 0010 01E0     	 b .L39
 782              	.L38:
 696:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 697:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 698:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 699:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 783              	 .loc 1 699 0
 784 0012 23F40013 	 bic r3,r3,#2097152
 785              	.LVL94:
 786              	.L39:
 700:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 701:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 702:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure exit mode */
 703:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 787              	 .loc 1 703 0
 788 0016 0129     	 cmp r1,#1
 704:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 705:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 789              	 .loc 1 705 0
 790 0018 0CBF     	 ite eq
 791 001a 43F48003 	 orreq r3,r3,#4194304
 792              	.LVL95:
 706:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 707:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 708:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 709:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 793              	 .loc 1 709 0
 794 001e 23F48003 	 bicne r3,r3,#4194304
 795              	.LVL96:
 710:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 711:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 712:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 796              	 .loc 1 712 0
 797 0022 4361     	 str r3,[r0,#20]
 798              	.LVL97:
 799 0024 7047     	 bx lr
 800              	 .cfi_endproc
 801              	.LFE252:
 803              	 .section .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent,"ax",%progbits
 804              	 .align 1
 805              	 .global XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
 806              	 .thumb
 807              	 .thumb_func
 809              	XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:
 810              	.LFB253:
 713:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 714:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 715:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure a slice Status Bit Override event */
 716:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
 717:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
 718:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
 719:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 811              	 .loc 1 719 0
 812              	 .cfi_startproc
 813              	 
 814              	 
 815              	.LVL98:
 720:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 721:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 722:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Slice Pointer", XMC_CCU8_IsVal
 723:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 724:../Libraries/XMCLib/src/xmc_ccu8.c ****          XMC_CCU8_SLICE_IsInputvalid(ev1_config->mapped_input));
 725:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity", 
 726:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(ev1_config->edge));
 727:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity", 
 728:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((ev1_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 729:../Libraries/XMCLib/src/xmc_ccu8.c ****               (ev1_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 730:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 731:../Libraries/XMCLib/src/xmc_ccu8.c ****               XMC_CCU8_SLICE_CHECK_EVENT_FILTER(ev1_config->duration));
 732:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 733:../Libraries/XMCLib/src/xmc_ccu8.c ****           XMC_CCU8_SLICE_IsInputvalid(ev2_config->mapped_input));
 734:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 735:../Libraries/XMCLib/src/xmc_ccu8.c ****               XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(ev2_config->edge));
 736:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 737:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((ev2_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 738:../Libraries/XMCLib/src/xmc_ccu8.c ****               (ev2_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 739:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 740:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));
 741:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 742:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 743:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS2;
 744:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 745:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 1 */
 746:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV1EM_Pos);
 747:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS2_EV1EM_Pos;
 748:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 749:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 2 */
 750:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV2EM_Pos);
 751:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS2_EV2EM_Pos;
 752:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 753:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 1 */
 754:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV1LM_Pos);
 755:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS2_EV1LM_Pos;
 756:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 757:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 2 */
 758:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV2LM_Pos);
 759:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS2_EV2LM_Pos;
 760:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 761:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 1 */
 762:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF1M_Pos);
 763:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS2_LPF1M_Pos;
 764:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 765:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 2 */
 766:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF2M_Pos);
 767:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS2_LPF2M_Pos;
 768:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 769:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS2 = ins; 
 770:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 771:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 772:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the input for Event1 */
 773:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV1IS_Pos);
 774:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS1_EV1IS_Pos;
 775:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 776:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally, the input for Event2 */
 777:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
 778:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;
 779:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 780:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;  
 781:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 782:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 816              	 .loc 1 782 0
 817 0000 0368     	 ldr r3,[r0]
 818              	.LVL99:
 719:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 819              	 .loc 1 719 0
 820 0002 10B5     	 push {r4,lr}
 821              	.LCFI5:
 822              	 .cfi_def_cfa_offset 8
 823              	 .cfi_offset 4,-8
 824              	 .cfi_offset 14,-4
 783:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 784:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 1 */
 785:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 786:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 825              	 .loc 1 786 0
 826 0004 4C78     	 ldrb r4,[r1,#1]
 785:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 827              	 .loc 1 785 0
 828 0006 23F44023 	 bic r3,r3,#786432
 829              	.LVL100:
 830              	 .loc 1 786 0
 831 000a 43EA8443 	 orr r3,r3,r4,lsl#18
 832              	.LVL101:
 787:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 788:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 2 */
 789:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 790:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 833              	 .loc 1 790 0
 834 000e 5478     	 ldrb r4,[r2,#1]
 789:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 835              	 .loc 1 789 0
 836 0010 23F44013 	 bic r3,r3,#3145728
 837              	.LVL102:
 838              	 .loc 1 790 0
 839 0014 43EA0453 	 orr r3,r3,r4,lsl#20
 840              	.LVL103:
 791:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 792:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 1 */
 793:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 794:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 841              	 .loc 1 794 0
 842 0018 8C78     	 ldrb r4,[r1,#2]
 793:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 843              	 .loc 1 793 0
 844 001a 23F40003 	 bic r3,r3,#8388608
 845              	.LVL104:
 846              	 .loc 1 794 0
 847 001e 43EAC453 	 orr r3,r3,r4,lsl#23
 848              	.LVL105:
 795:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 796:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 2 */
 797:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 798:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 849              	 .loc 1 798 0
 850 0022 9478     	 ldrb r4,[r2,#2]
 797:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 851              	 .loc 1 797 0
 852 0024 23F08073 	 bic r3,r3,#16777216
 853              	.LVL106:
 854              	 .loc 1 798 0
 855 0028 43EA0463 	 orr r3,r3,r4,lsl#24
 856              	.LVL107:
 799:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 800:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 1 */
 801:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 802:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 857              	 .loc 1 802 0
 858 002c CC78     	 ldrb r4,[r1,#3]
 803:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 804:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 2 */
 805:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 806:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 807:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 808:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the input for Event1 */
 809:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 810:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 859              	 .loc 1 810 0
 860 002e 0978     	 ldrb r1,[r1]
 861              	.LVL108:
 801:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 862              	 .loc 1 801 0
 863 0030 23F0C053 	 bic r3,r3,#402653184
 864              	.LVL109:
 802:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 865              	 .loc 1 802 0
 866 0034 43EAC463 	 orr r3,r3,r4,lsl#27
 867              	.LVL110:
 806:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 868              	 .loc 1 806 0
 869 0038 D478     	 ldrb r4,[r2,#3]
 811:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 812:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally, the input for Event2 */
 813:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 814:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 870              	 .loc 1 814 0
 871 003a 1278     	 ldrb r2,[r2]
 872              	.LVL111:
 805:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 873              	 .loc 1 805 0
 874 003c 23F0C043 	 bic r3,r3,#1610612736
 875              	.LVL112:
 806:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 876              	 .loc 1 806 0
 877 0040 43EA4473 	 orr r3,r3,r4,lsl#29
 878              	.LVL113:
 809:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 879              	 .loc 1 809 0
 880 0044 23F0F003 	 bic r3,r3,#240
 881              	.LVL114:
 810:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 882              	 .loc 1 810 0
 883 0048 43EA0113 	 orr r3,r3,r1,lsl#4
 884              	.LVL115:
 813:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 885              	 .loc 1 813 0
 886 004c 23F47063 	 bic r3,r3,#3840
 887              	.LVL116:
 888              	 .loc 1 814 0
 889 0050 43EA0223 	 orr r3,r3,r2,lsl#8
 890              	.LVL117:
 815:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 816:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 891              	 .loc 1 816 0
 892 0054 0360     	 str r3,[r0]
 893 0056 10BD     	 pop {r4,pc}
 894              	 .cfi_endproc
 895              	.LFE253:
 897              	 .section .text.XMC_CCU8_SLICE_ConfigureEvent,"ax",%progbits
 898              	 .align 1
 899              	 .global XMC_CCU8_SLICE_ConfigureEvent
 900              	 .thumb
 901              	 .thumb_func
 903              	XMC_CCU8_SLICE_ConfigureEvent:
 904              	.LFB254:
 817:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 818:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 819:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 820:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure a slice trigger event */
 821:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
 822:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_EVENT_t event,
 823:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
 824:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 905              	 .loc 1 824 0
 906              	 .cfi_startproc
 907              	 
 908              	 
 909              	.LVL118:
 910 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 911              	.LCFI6:
 912              	 .cfi_def_cfa_offset 20
 913              	 .cfi_offset 4,-20
 914              	 .cfi_offset 5,-16
 915              	 .cfi_offset 6,-12
 916              	 .cfi_offset 7,-8
 917              	 .cfi_offset 14,-4
 825:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 826:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  pos;
 827:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  offset;
 828:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 829:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 830:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 831:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Input",  XMC_CCU8_SLICE_IsInputvalid(config->ma
 832:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Edge Sensitivity",
 833:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(config->edge));
 834:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Level Sensitivity", 
 835:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 836:../Libraries/XMCLib/src/xmc_ccu8.c ****               (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 837:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
 838:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));
 839:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 840:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Calculate offset with reference to event */
 841:../Libraries/XMCLib/src/xmc_ccu8.c ****   offset = ((uint8_t) event) - 1U;
 918              	 .loc 1 841 0
 919 0002 4C1E     	 subs r4,r1,#1
 920 0004 E4B2     	 uxtb r4,r4
 921              	.LVL119:
 842:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 843:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 844:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS2;
 845:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 846:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, configure the edge sensitivity */
 847:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
 848:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 849:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->edge) << pos;
 850:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 851:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the level */
 852:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
 853:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 854:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 855:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 856:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the debounce filter */
 857:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
 858:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 859:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 860:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 861:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS2 = ins;
 862:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 863:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 864:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 865:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally the input */
 866:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
 867:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 868:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 869:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 870:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;
 871:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 872:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 873:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 874:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 875:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, configure the edge sensitivity */
 876:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 922              	 .loc 1 876 0
 923 0006 6600     	 lsls r6,r4,#1
 924 0008 F6B2     	 uxtb r6,r6
 925 000a 06F1100C 	 add ip,r6,#16
 873:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 926              	 .loc 1 873 0
 927 000e 0568     	 ldr r5,[r0]
 928              	.LVL120:
 877:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 878:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->edge) << pos;
 929              	 .loc 1 878 0
 930 0010 5778     	 ldrb r7,[r2,#1]
 877:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 931              	 .loc 1 877 0
 932 0012 5FFA8CFC 	 uxtb ip,ip
 933 0016 0323     	 movs r3,#3
 934 0018 03FA0CFE 	 lsl lr,r3,ip
 879:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 880:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the level */
 881:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 935              	 .loc 1 881 0
 936 001c 1531     	 adds r1,r1,#21
 937              	.LVL121:
 878:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 938              	 .loc 1 878 0
 939 001e 07FA0CF7 	 lsl r7,r7,ip
 877:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 940              	 .loc 1 877 0
 941 0022 25EA0E0E 	 bic lr,r5,lr
 942              	.LVL122:
 882:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 943              	 .loc 1 882 0
 944 0026 5FFA81FC 	 uxtb ip,r1
 945 002a 0125     	 movs r5,#1
 946 002c 05FA0CF5 	 lsl r5,r5,ip
 878:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 947              	 .loc 1 878 0
 948 0030 4EEA070E 	 orr lr,lr,r7
 949              	.LVL123:
 950              	 .loc 1 882 0
 951 0034 2EEA0507 	 bic r7,lr,r5
 952              	.LVL124:
 883:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 953              	 .loc 1 883 0
 954 0038 9578     	 ldrb r5,[r2,#2]
 884:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 885:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the debounce filter */
 886:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 955              	 .loc 1 886 0
 956 003a 1936     	 adds r6,r6,#25
 887:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 957              	 .loc 1 887 0
 958 003c F6B2     	 uxtb r6,r6
 883:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 959              	 .loc 1 883 0
 960 003e 05FA0CF5 	 lsl r5,r5,ip
 961              	 .loc 1 887 0
 962 0042 B340     	 lsls r3,r3,r6
 883:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 963              	 .loc 1 883 0
 964 0044 3D43     	 orrs r5,r5,r7
 965              	.LVL125:
 966              	 .loc 1 887 0
 967 0046 25EA0301 	 bic r1,r5,r3
 968              	.LVL126:
 888:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 969              	 .loc 1 888 0
 970 004a D378     	 ldrb r3,[r2,#3]
 889:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 890:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally the input */
 891:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 892:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 893:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 971              	 .loc 1 893 0
 972 004c 1278     	 ldrb r2,[r2]
 973              	.LVL127:
 888:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 974              	 .loc 1 888 0
 975 004e B340     	 lsls r3,r3,r6
 891:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 976              	 .loc 1 891 0
 977 0050 A400     	 lsls r4,r4,#2
 978              	.LVL128:
 888:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 979              	 .loc 1 888 0
 980 0052 1943     	 orrs r1,r1,r3
 981              	.LVL129:
 892:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 982              	 .loc 1 892 0
 983 0054 E4B2     	 uxtb r4,r4
 984 0056 0F23     	 movs r3,#15
 985 0058 A340     	 lsls r3,r3,r4
 986 005a 21EA0303 	 bic r3,r1,r3
 987              	.LVL130:
 988              	 .loc 1 893 0
 989 005e A240     	 lsls r2,r2,r4
 990 0060 1343     	 orrs r3,r3,r2
 991              	.LVL131:
 894:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 895:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 992              	 .loc 1 895 0
 993 0062 0360     	 str r3,[r0]
 994 0064 F0BD     	 pop {r4,r5,r6,r7,pc}
 995              	 .cfi_endproc
 996              	.LFE254:
 998              	 .section .text.XMC_CCU8_SLICE_SetInput,"ax",%progbits
 999              	 .align 1
 1000              	 .global XMC_CCU8_SLICE_SetInput
 1001              	 .thumb
 1002              	 .thumb_func
 1004              	XMC_CCU8_SLICE_SetInput:
 1005              	.LFB255:
 896:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 897:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 898:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 899:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to bind an input to a slice trigger event */
 900:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
 901:../Libraries/XMCLib/src/xmc_ccu8.c ****                          const XMC_CCU8_SLICE_EVENT_t event,
 902:../Libraries/XMCLib/src/xmc_ccu8.c ****                              const XMC_CCU8_SLICE_INPUT_t input)
 903:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1006              	 .loc 1 903 0
 1007              	 .cfi_startproc
 1008              	 
 1009              	 
 1010              	.LVL132:
 904:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 905:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  pos;
 906:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  offset;
 907:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 908:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 909:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 910:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Input", XMC_CCU8_SLICE_IsInputvalid(input));
 911:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 912:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Calculate offset with reference to event */
 913:../Libraries/XMCLib/src/xmc_ccu8.c ****   offset = ((uint8_t) event) - 1U;
 1011              	 .loc 1 913 0
 1012 0000 0139     	 subs r1,r1,#1
 1013              	.LVL133:
 903:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 1014              	 .loc 1 903 0
 1015 0002 10B5     	 push {r4,lr}
 1016              	.LCFI7:
 1017              	 .cfi_def_cfa_offset 8
 1018              	 .cfi_offset 4,-8
 1019              	 .cfi_offset 14,-4
 914:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 915:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 916:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS1_EV0IS_Pos) + (uint8_t) (offset << 3U);
 917:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 918:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 919:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) input) << pos;
 920:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 921:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;
 922:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 923:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 924:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 1020              	 .loc 1 924 0
 1021 0004 8900     	 lsls r1,r1,#2
 925:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 1022              	 .loc 1 925 0
 1023 0006 0368     	 ldr r3,[r0]
 1024              	.LVL134:
 926:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1025              	 .loc 1 926 0
 1026 0008 C9B2     	 uxtb r1,r1
 1027 000a 0F24     	 movs r4,#15
 1028 000c 8C40     	 lsls r4,r4,r1
 1029 000e 23EA0403 	 bic r3,r3,r4
 1030              	.LVL135:
 927:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) input) << pos;
 1031              	 .loc 1 927 0
 1032 0012 8A40     	 lsls r2,r2,r1
 1033              	.LVL136:
 1034 0014 1A43     	 orrs r2,r2,r3
 1035              	.LVL137:
 928:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 929:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 1036              	 .loc 1 929 0
 1037 0016 0260     	 str r2,[r0]
 1038 0018 10BD     	 pop {r4,pc}
 1039              	 .cfi_endproc
 1040              	.LFE255:
 1042              	 .section .text.XMC_CCU8_SLICE_SetTimerRepeatMode,"ax",%progbits
 1043              	 .align 1
 1044              	 .global XMC_CCU8_SLICE_SetTimerRepeatMode
 1045              	 .thumb
 1046              	 .thumb_func
 1048              	XMC_CCU8_SLICE_SetTimerRepeatMode:
 1049              	.LFB256:
 930:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 931:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 932:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 933:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to program timer repeat mode - Single shot vs repeat  */
 934:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice,
 935:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t mode)
 936:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1050              	 .loc 1 936 0
 1051              	 .cfi_startproc
 1052              	 
 1053              	 
 1054              	 
 1055              	.LVL138:
 937:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 938:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 939:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
 940:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode", 
 941:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
 942:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mode == (mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT))));
 943:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 944:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1056              	 .loc 1 944 0
 1057 0000 4369     	 ldr r3,[r0,#20]
 1058              	.LVL139:
 945:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 946:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 1059              	 .loc 1 946 0
 1060 0002 11B9     	 cbnz r1,.L46
 947:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 948:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TSSM_Msk);
 1061              	 .loc 1 948 0
 1062 0004 23F00203 	 bic r3,r3,#2
 1063              	.LVL140:
 1064 0008 01E0     	 b .L47
 1065              	.L46:
 949:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 950:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 951:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 952:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TSSM_Msk;
 1066              	 .loc 1 952 0
 1067 000a 43F00203 	 orr r3,r3,#2
 1068              	.LVL141:
 1069              	.L47:
 953:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 954:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 955:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1070              	 .loc 1 955 0
 1071 000e 4361     	 str r3,[r0,#20]
 1072 0010 7047     	 bx lr
 1073              	 .cfi_endproc
 1074              	.LFE256:
 1076              	 .section .text.XMC_CCU8_SLICE_SetTimerCountingMode,"ax",%progbits
 1077              	 .align 1
 1078              	 .global XMC_CCU8_SLICE_SetTimerCountingMode
 1079              	 .thumb
 1080              	 .thumb_func
 1082              	XMC_CCU8_SLICE_SetTimerCountingMode:
 1083              	.LFB257:
 956:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 957:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 958:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs timer counting mode  */
 959:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
 960:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1084              	 .loc 1 960 0
 1085              	 .cfi_startproc
 1086              	 
 1087              	 
 1088              	 
 1089              	.LVL142:
 961:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 962:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 963:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
 964:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Timer Count Mode",
 965:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA) ||\
 966:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA)));
 967:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 968:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1090              	 .loc 1 968 0
 1091 0000 4369     	 ldr r3,[r0,#20]
 1092              	.LVL143:
 969:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 970:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA == mode)
 1093              	 .loc 1 970 0
 1094 0002 11B9     	 cbnz r1,.L49
 971:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 972:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TCM_Msk);
 1095              	 .loc 1 972 0
 1096 0004 23F00103 	 bic r3,r3,#1
 1097              	.LVL144:
 1098 0008 01E0     	 b .L50
 1099              	.L49:
 973:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 974:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 975:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 976:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TCM_Msk;
 1100              	 .loc 1 976 0
 1101 000a 43F00103 	 orr r3,r3,#1
 1102              	.LVL145:
 1103              	.L50:
 977:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 978:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 979:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1104              	 .loc 1 979 0
 1105 000e 4361     	 str r3,[r0,#20]
 1106 0010 7047     	 bx lr
 1107              	 .cfi_endproc
 1108              	.LFE257:
 1110              	 .section .text.XMC_CCU8_SLICE_SetTimerPeriodMatch,"ax",%progbits
 1111              	 .align 1
 1112              	 .global XMC_CCU8_SLICE_SetTimerPeriodMatch
 1113              	 .thumb
 1114              	 .thumb_func
 1116              	XMC_CCU8_SLICE_SetTimerPeriodMatch:
 1117              	.LFB258:
 980:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 981:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 982:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs period match value of the timer  */
 983:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
 984:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1118              	 .loc 1 984 0
 1119              	 .cfi_startproc
 1120              	 
 1121              	 
 1122              	 
 1123              	.LVL146:
 985:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
 986:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PRS = (uint32_t) period_val;
 1124              	 .loc 1 986 0
 1125 0000 4163     	 str r1,[r0,#52]
 1126 0002 7047     	 bx lr
 1127              	 .cfi_endproc
 1128              	.LFE258:
 1130              	 .section .text.XMC_CCU8_SLICE_GetCaptureRegisterValue,"ax",%progbits
 1131              	 .align 1
 1132              	 .global XMC_CCU8_SLICE_GetCaptureRegisterValue
 1133              	 .thumb
 1134              	 .thumb_func
 1136              	XMC_CCU8_SLICE_GetCaptureRegisterValue:
 1137              	.LFB259:
 987:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 988:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 989:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves desired capture register value */
 990:../Libraries/XMCLib/src/xmc_ccu8.c **** uint32_t XMC_CCU8_SLICE_GetCaptureRegisterValue(const XMC_CCU8_SLICE_t *const slice, const uint8_t 
 991:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1138              	 .loc 1 991 0
 1139              	 .cfi_startproc
 1140              	 
 1141              	 
 1142              	 
 1143              	.LVL147:
 992:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
 993:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
 994:../Libraries/XMCLib/src/xmc_ccu8.c ****   return(slice->CV[reg_num]);
 1144              	 .loc 1 994 0
 1145 0000 1C31     	 adds r1,r1,#28
 1146              	.LVL148:
 1147 0002 00EB8100 	 add r0,r0,r1,lsl#2
 1148              	.LVL149:
 1149 0006 4068     	 ldr r0,[r0,#4]
 995:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1150              	 .loc 1 995 0
 1151 0008 7047     	 bx lr
 1152              	 .cfi_endproc
 1153              	.LFE259:
 1155              	 .section .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue,"ax",%progbits
 1156              	 .align 1
 1157              	 .global XMC_CCU8_SLICE_GetLastCapturedTimerValue
 1158              	 .thumb
 1159              	 .thumb_func
 1161              	XMC_CCU8_SLICE_GetLastCapturedTimerValue:
 1162              	.LFB260:
 996:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 997:../Libraries/XMCLib/src/xmc_ccu8.c **** /* @brief Retrieves the latest captured timer value */
 998:../Libraries/XMCLib/src/xmc_ccu8.c **** XMC_CCU8_STATUS_t XMC_CCU8_SLICE_GetLastCapturedTimerValue(const XMC_CCU8_SLICE_t *const slice,
 999:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                            const XMC_CCU8_SLICE_CAP_REG_SET_t set,
1000:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                            uint32_t *val_ptr)
1001:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1163              	 .loc 1 1001 0
 1164              	 .cfi_startproc
 1165              	 
 1166              	 
 1167              	.LVL150:
1002:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1003:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_STATUS_t retval;
1004:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t i;
1005:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t start;
1006:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t end;
1007:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1008:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlic
1009:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Register Set",
1010:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((set == XMC_CCU8_SLICE_CAP_REG_SET_LOW) ||\
1011:../Libraries/XMCLib/src/xmc_ccu8.c ****               (set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)));
1012:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1013:../Libraries/XMCLib/src/xmc_ccu8.c ****   retval = XMC_CCU8_STATUS_ERROR;
1014:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1015:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First check if extended capture mode is enabled */
1016:../Libraries/XMCLib/src/xmc_ccu8.c ****   if((slice->TC) & CCU8_CC8_TC_ECM_Msk)
 1168              	 .loc 1 1016 0
 1169 0000 4369     	 ldr r3,[r0,#20]
1001:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 1170              	 .loc 1 1001 0
 1171 0002 30B5     	 push {r4,r5,lr}
 1172              	.LCFI8:
 1173              	 .cfi_def_cfa_offset 12
 1174              	 .cfi_offset 4,-12
 1175              	 .cfi_offset 5,-8
 1176              	 .cfi_offset 14,-4
 1177              	 .loc 1 1016 0
 1178 0004 DD06     	 lsls r5,r3,#27
 1179 0006 06D4     	 bmi .L59
1017:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1018:../Libraries/XMCLib/src/xmc_ccu8.c ****     /* Extended capture mode has been enabled. So start with the lowest capture register and work y
1019:../Libraries/XMCLib/src/xmc_ccu8.c ****     start = 0U;
1020:../Libraries/XMCLib/src/xmc_ccu8.c ****     end = XMC_CCU8_NUM_SLICES_PER_MODULE;
1021:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1022:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1023:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1024:../Libraries/XMCLib/src/xmc_ccu8.c ****     /* Extended capture mode is not enabled */
1025:../Libraries/XMCLib/src/xmc_ccu8.c ****     if(set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)
1026:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1027:../Libraries/XMCLib/src/xmc_ccu8.c ****       start = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
1028:../Libraries/XMCLib/src/xmc_ccu8.c ****       end   = (uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE;
1029:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1030:../Libraries/XMCLib/src/xmc_ccu8.c ****     else
1031:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1032:../Libraries/XMCLib/src/xmc_ccu8.c ****       start = 0U;
1033:../Libraries/XMCLib/src/xmc_ccu8.c ****       end = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
 1180              	 .loc 1 1033 0
 1181 0008 0129     	 cmp r1,#1
 1182 000a 0BBF     	 itete eq
 1183 000c 0424     	 moveq r4,#4
 1184 000e 0224     	 movne r4,#2
 1185 0010 0223     	 moveq r3,#2
 1186 0012 0023     	 movne r3,#0
 1187 0014 04E0     	 b .L55
 1188              	.L59:
1020:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 1189              	 .loc 1 1020 0
 1190 0016 0424     	 movs r4,#4
1019:../Libraries/XMCLib/src/xmc_ccu8.c ****     end = XMC_CCU8_NUM_SLICES_PER_MODULE;
 1191              	 .loc 1 1019 0
 1192 0018 0023     	 movs r3,#0
 1193              	.LVL151:
1034:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1035:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1036:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1037:../Libraries/XMCLib/src/xmc_ccu8.c ****   for(i=start; i<end; i++)
 1194              	 .loc 1 1037 0
 1195 001a 01E0     	 b .L55
 1196              	.LVL152:
 1197              	.L56:
 1198              	 .loc 1 1037 0 is_stmt 0 discriminator 2
 1199 001c 0133     	 adds r3,r3,#1
 1200              	.LVL153:
 1201 001e DBB2     	 uxtb r3,r3
 1202              	.LVL154:
 1203              	.L55:
 1204              	 .loc 1 1037 0 discriminator 1
 1205 0020 A342     	 cmp r3,r4
 1206 0022 0AD0     	 beq .L61
1038:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1039:../Libraries/XMCLib/src/xmc_ccu8.c ****     if( (slice->CV[i]) & CCU8_CC8_CV_FFL_Msk )
 1207              	 .loc 1 1039 0 is_stmt 1
 1208 0024 03F11C01 	 add r1,r3,#28
 1209 0028 00EB8101 	 add r1,r0,r1,lsl#2
 1210 002c 4D68     	 ldr r5,[r1,#4]
 1211 002e ED02     	 lsls r5,r5,#11
 1212 0030 F4D5     	 bpl .L56
1040:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1041:../Libraries/XMCLib/src/xmc_ccu8.c ****       *val_ptr = slice->CV[i];
 1213              	 .loc 1 1041 0
 1214 0032 4B68     	 ldr r3,[r1,#4]
 1215              	.LVL155:
 1216 0034 1360     	 str r3,[r2]
 1217              	.LVL156:
1042:../Libraries/XMCLib/src/xmc_ccu8.c ****       retval = XMC_CCU8_STATUS_OK;
 1218              	 .loc 1 1042 0
 1219 0036 0020     	 movs r0,#0
 1220              	.LVL157:
1043:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 1221              	 .loc 1 1043 0
 1222 0038 30BD     	 pop {r4,r5,pc}
 1223              	.LVL158:
 1224              	.L61:
1013:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 1225              	 .loc 1 1013 0
 1226 003a 0120     	 movs r0,#1
 1227              	.LVL159:
1044:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1045:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1046:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1047:../Libraries/XMCLib/src/xmc_ccu8.c ****   return retval;
1048:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1228              	 .loc 1 1048 0
 1229 003c 30BD     	 pop {r4,r5,pc}
 1230              	 .cfi_endproc
 1231              	.LFE260:
 1233              	 .section .text.XMC_CCU8_GetCapturedValueFromFifo,"ax",%progbits
 1234              	 .align 1
 1235              	 .global XMC_CCU8_GetCapturedValueFromFifo
 1236              	 .thumb
 1237              	 .thumb_func
 1239              	XMC_CCU8_GetCapturedValueFromFifo:
 1240              	.LFB261:
1049:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
1050:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1051:../Libraries/XMCLib/src/xmc_ccu8.c **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1052:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1241              	 .loc 1 1052 0
 1242              	 .cfi_startproc
 1243              	 
 1244              	 
 1245              	 
 1246              	.LVL160:
1053:../Libraries/XMCLib/src/xmc_ccu8.c ****   int32_t  cap;
1054:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t extracted_slice;
1055:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1056:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU8_IsValidModule(modu
1057:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1058:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First read the global fifo register */
1059:../Libraries/XMCLib/src/xmc_ccu8.c ****   cap = (int32_t) module->ECRD;
 1247              	 .loc 1 1059 0
 1248 0000 036D     	 ldr r3,[r0,#80]
 1249              	.LVL161:
1060:../Libraries/XMCLib/src/xmc_ccu8.c ****     
1061:../Libraries/XMCLib/src/xmc_ccu8.c ****   extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU8_ECRD_SPTR_Msk)) >> CCU8_ECRD_SPTR_Pos;
 1250              	 .loc 1 1061 0
 1251 0002 C3F30150 	 ubfx r0,r3,#20,#2
 1252              	.LVL162:
1062:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1063:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Return captured result only if it were applicable to this slice */
1064:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(extracted_slice != ((uint32_t)slice_number))
1065:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1066:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = -1;
1067:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1068:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1069:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (cap);
1070:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1253              	 .loc 1 1070 0
 1254 0006 8842     	 cmp r0,r1
 1255 0008 0CBF     	 ite eq
 1256 000a 1846     	 moveq r0,r3
 1257 000c 4FF0FF30 	 movne r0,#-1
 1258              	.LVL163:
 1259 0010 7047     	 bx lr
 1260              	 .cfi_endproc
 1261              	.LFE261:
 1263              	 .section .text.XMC_CCU8_SLICE_EnableDithering,"ax",%progbits
 1264              	 .align 1
 1265              	 .global XMC_CCU8_SLICE_EnableDithering
 1266              	 .thumb
 1267              	 .thumb_func
 1269              	XMC_CCU8_SLICE_EnableDithering:
 1270              	.LFB262:
1071:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
1072:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
1073:../Libraries/XMCLib/src/xmc_ccu8.c **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU
1074:../Libraries/XMCLib/src/xmc_ccu8.c **** {
1075:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cap;
1076:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1077:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
1078:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCapturedValueFromFifo:Invalid Register Set", 
1079:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((set == XMC_CCU8_SLICE_CAP_REG_SET_LOW) ||\
1080:../Libraries/XMCLib/src/xmc_ccu8.c ****               (set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)));
1081:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1082:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_CAP_REG_SET_LOW == set)
1083:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1084:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = slice->ECRD0;
1085:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1086:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1087:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1088:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = slice->ECRD1;
1089:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1090:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1091:../Libraries/XMCLib/src/xmc_ccu8.c ****   return cap;
1092:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1093:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
1094:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1095:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Enables PWM dithering feature */
1096:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
1097:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const bool period_dither,
1098:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const bool duty_dither,
1099:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const uint8_t spread)
1100:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1271              	 .loc 1 1100 0
 1272              	 .cfi_startproc
 1273              	 
 1274              	 
 1275              	.LVL164:
 1276 0000 10B5     	 push {r4,lr}
 1277              	.LCFI9:
 1278              	 .cfi_def_cfa_offset 8
 1279              	 .cfi_offset 4,-8
 1280              	 .cfi_offset 14,-4
1101:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
1102:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1103:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1104:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1105:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1281              	 .loc 1 1105 0
 1282 0002 4469     	 ldr r4,[r0,#20]
 1283              	.LVL165:
1106:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
 1284              	 .loc 1 1106 0
 1285 0004 24F4C044 	 bic r4,r4,#24576
 1286              	.LVL166:
1107:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1108:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(true == period_dither)
 1287              	 .loc 1 1108 0
 1288 0008 09B1     	 cbz r1,.L65
1109:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1110:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_PERIOD_MASK) << CCU8_CC8_TC_DITHE_Pos);
 1289              	 .loc 1 1110 0
 1290 000a 44F40054 	 orr r4,r4,#8192
 1291              	.LVL167:
 1292              	.L65:
1111:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1112:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(true == duty_dither)
 1293              	 .loc 1 1112 0
 1294 000e 0AB1     	 cbz r2,.L66
1113:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1114:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_DUTYCYCLE_MASK) << CCU8_CC8_TC_DITHE_Pos);
 1295              	 .loc 1 1114 0
 1296 0010 44F48044 	 orr r4,r4,#16384
 1297              	.LVL168:
 1298              	.L66:
1115:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1116:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1117:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1299              	 .loc 1 1117 0
 1300 0014 4461     	 str r4,[r0,#20]
 1301              	.LVL169:
 1302              	.LBB26:
 1303              	.LBB27:
2040:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2041:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2042:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2043:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2044:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2045:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2046:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2047:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2048:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Resets the timer count to zero, by setting CC8yTCCLR.TCC bit.\n\n
2049:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A timer which has been stopped can still retain the last counted value.
2050:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * After invoking this API the timer value will be cleared.
2051:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2052:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2053:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2054:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2055:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
2056:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2057:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2058:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
2059:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2060:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2061:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2062:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2063:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2064:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2065:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2066:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2067:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops and resets the timer count to zero, by setting CC8yTCCLR.TCC and CC8yTCCLR.TRBC bit.\n\n
2068:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2069:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2070:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2071:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2072:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopClearTimer(XMC_CCU8_SLICE_t *const slice)
2073:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2074:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2075:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = CCU8_CC8_TCCLR_TRBC_Msk | CCU8_CC8_TCCLR_TCC_Msk;
2076:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2077:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2078:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2079:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2080:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2081:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    ::XMC_CCU8_SLICE_MODE_t returns XMC_CCU8_SLICE_MODE_COMPARE if the slice is operating in comp
2082:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                          returns XMC_CCU8_SLICE_MODE_CAPTURE if the slice is operating in captur
2083:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2084:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2085:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
2086:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTC.CMOD bit.\n\n
2087:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Ensure that before invoking this API the CCU8 slice should be configured otherwise the output of
2088:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * invalid.
2089:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2090:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2091:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2092:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2093:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_MODE_t XMC_CCU8_SLICE_GetSliceMode(const XMC_CCU8_SLICE_t *const sli
2094:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2095:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2096:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_MODE_t)(((slice->TC) & CCU8_CC8_TC_CMOD_Msk) >> CCU8_CC8_TC_CMOD_Pos));
2097:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2098:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2099:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2100:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2101:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
2102:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2103:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2104:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2105:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2106:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC8yTC.TSSM b
2107:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
2108:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
2109:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * reaching the terminal count.
2110:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2111:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2112:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerRepeatMode().
2113:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2114:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_RE
2115:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2116:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2117:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2118:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
2119:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
2120:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
2121:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2122:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2123:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC8yTC.T
2124:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The timer will count upto the terminal count as specified in the period register and stops immed
2125:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
2126:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * all over again after reaching the terminal count.
2127:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2128:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2129:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerRepeatMode().
2130:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2131:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t XMC_CCU8_SLICE_GetTimerRepeatMode(
2132:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                     const XMC_CCU8_
2133:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2134:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
2135:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TSSM_Msk) >> CCU8_CC8_TC_T
2136:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2137:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2138:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2139:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
2140:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2141:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2142:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2143:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2144:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC8yTC.
2145:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
2146:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
2147:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
2148:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
2149:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * greater than the compare value.
2150:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2151:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2152:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerCountingMode().
2153:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2154:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
2155:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2156:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2157:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2158:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
2159:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
2160:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA if center aligned
2161:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2162:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2163:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC8yTC.TCM bit.\
2164:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2165:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2166:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCountingMode().
2167:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2168:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_MODE_t XMC_CCU8_SLICE_GetTimerCountingMode(
2169:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 		                                                                            const XMC_CCU8_SLICE_
2170:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2171:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
2172:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TCM_Msk) >> CCU8_CC8_TC_TCM
2173:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2174:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2175:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2176:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param period_val Timer period value
2177:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *        Range: [0x0 to 0xFFFF]
2178:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2179:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2180:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2181:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2182:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer period, by writing CC8yPRS register.\n\n
2183:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
2184:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
2185:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
2186:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual period register.
2187:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2188:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2189:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerPeriodMatch().
2190:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2191:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val);
2192:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2193:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2194:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2195:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2196:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer period value
2197:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2198:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2199:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2200:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the timer period value currently effective, by reading CC8yPR register.\n\n
2201:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
2202:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2203:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2204:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
2205:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
2206:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerPeri
2207:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2208:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2209:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2210:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
2211:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2212:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
2213:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2214:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
2215:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((uint16_t) slice->PR);
2216:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2217:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2218:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2219:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Select the compare channel to which the \b compare_val has to programmed.
2220:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2221:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2222:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2223:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2224:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2225:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare value, by writing CC8yCR1S and CC8yCR2S registers.\n\n
2226:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The PWM duty cycle is determined by this value.\n\n
2227:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2228:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with
2229:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
2230:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual compare register.
2231:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2232:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2233:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2234:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2235:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
2236:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
2237:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                          const uint16_t compare_val);
2238:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2239:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2240:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2241:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2242:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2243:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2244:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2245:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2246:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare1 value, by writing CC8yCR1S register.\n\n
2247:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
2248:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2249:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2250:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2251:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2252:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2253:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2254:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2255:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2256:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice, con
2257:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2258:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidS
2259:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->CR1S = (uint32_t) compare_val;
2260:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2261:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2262:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2263:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2264:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2265:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2266:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2267:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2268:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2269:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare2 value, by writing CC8yCR2S register.\n\n
2270:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
2271:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2272:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2273:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2274:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2275:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2276:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2277:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2278:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2279:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice, con
2280:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2281:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidS
2282:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->CR2S = (uint32_t) compare_val;
2283:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2284:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2285:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2286:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2287:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Select the compare channel to retrieve from.
2288:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2289:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer compare value
2290:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2291:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2292:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2293:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the timer compare value currently effective, by reading CC8yCR1S and CC8yCR2S register
2294:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
2295:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2296:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2297:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
2298:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
2299:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerComp
2300:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2301:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2302:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2303:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatch().
2304:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2305:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
2306:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel);
2307:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2308:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2309:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2310:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return 
2311:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint16_t Timer compare value
2312:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2313:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2314:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Gets the timer compare1 value, by reading CC8yCR1 register.\n\n
2315:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2316:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2317:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatchChannel1().
2318:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2319:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice)
2320:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2321:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidS
2322:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return slice->CR1;
2323:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2324:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2325:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2326:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2327:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return Timer compare value
2328:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint16_t Timer compare value
2329:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2330:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2331:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Gets the timer compare1 value, by reading CC8yCR2 register.\n\n
2332:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2333:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2334:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatchChannel2().
2335:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2336:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice)
2337:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2338:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidS
2339:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return slice->CR2;
2340:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2341:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2342:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2343:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2344:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
2345:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            Use ::XMC_CCU8_SHADOW_TRANSFER_t enum items to create a mask of choic
2346:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            using a bit wise OR operation.
2347:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2348:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2349:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2350:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2351:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
2352:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the GCSS register.\n\n
2353:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
2354:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * shadow transfer trigger after the API is called.
2355:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2356:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Any call to XMC_CCU8_SLICE_SetTimerPeriodMatch()<BR>  XMC_CCU8_SLICE_SetTimerCompareMatch()<BR> 
2357:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_XMC_CCU8_SLICE_SetPrescaler()<BR> XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureIni
2358:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be succeeded by this API.
2359:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2360:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2361:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2362:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2363:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t 
2364:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2365:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module)
2366:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
2367:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2368:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2369:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2370:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2371:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2372:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer value
2373:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2374:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2375:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2376:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the latest timer value, from CC8yTIMER register.\n\n
2377:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2378:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2379:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerValue().
2380:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2381:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerValue(const XMC_CCU8_SLICE_t *const slice)
2382:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2383:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2384:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((uint16_t) slice->TIMER);
2385:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2386:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2387:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2388:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
2389:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                  Range: [0x0 to 0xFFFF]
2390:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2391:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2392:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2393:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2394:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Loads a new timer value, by setting CC8yTIMER register.\n\n
2395:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
2396:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2397:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Request to load is ignored if the timer is running.
2398:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2399:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2400:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerValue().
2401:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2402:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t tim
2403:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2404:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2405:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TIMER = (uint32_t) timer_val;
2406:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2407:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2408:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2409:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param period_dither Boolean instruction on dithering of period match
2410:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param duty_dither Boolean instruction on dithering of compare match
2411:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param spread Dither compare value
2412:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2413:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2414:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2415:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2416:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC8yTC.DITHE and CC8yDITS bits
2417:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
2418:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
2419:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
2420:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
2421:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
2422:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_SetDitherCompareValue().
2423:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2424:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2425:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * After this API call, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask
2426:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * to transfer the dither value.
2427:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2428:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2429:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableDithering().
2430:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2431:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
2432:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const bool period_dither,
2433:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const bool duty_dither,
2434:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const uint8_t spread);
2435:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2436:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2437:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2438:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2439:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2440:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2441:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2442:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC8yTC.DITHE bits.\n\n
2443:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This disables the Dither mode that was set in XMC_CCU8_SLICE_EnableDithering().
2444:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will not clear the dither compare value.
2445:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2446:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2447:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2448:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2449:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableDithering(XMC_CCU8_SLICE_t *const slice)
2450:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2451:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
2452:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
2453:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2454:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2455:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2456:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2457:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2458:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2459:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2460:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2461:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the floating prescaler, by setting CC8yTC.FPE bit.\n\n
2462:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
2463:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
2464:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
2465:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2466:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2467:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue()<BR>  XMC_CCU8_SLICE_DisableFloatingPrescaler(
2468:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_XMC_CCU8_SLICE_SetPrescaler().
2469:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2470:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2471:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2472:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2473:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t) CCU8_CC8_TC_FPE_Msk;
2474:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2475:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2476:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2477:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2478:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2479:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2480:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2481:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2482:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the floating prescaler, by clearing CC8yTC.FPE bit.\n\n
2483:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would return the prescaler to the normal mode.
2484:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler that would be applied is the value present in CC8yPSC.
2485:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2486:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2487:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableFloatingPrescaler().
2488:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2489:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2490:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2491:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
2492:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_FPE_Msk);
2493:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2494:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2495:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2496:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2497:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param comp_val Dither compare value
2498:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2499:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2500:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2501:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2502:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2503:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Sets the dither spread/compare value, by setting CC8yDITS.DCVS bits.\n\n
2504:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
2505:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
2506:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU8_EnableShadowTransfer()
2507:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  * called with appropriate mask.
2508:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2509:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2510:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2511:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2512:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetDitherCompareValue(XMC_CCU8_SLICE_t *const slice, const uint
2513:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2514:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2515:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Dither compare value", (comp_val <= 15U)
2516:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2517:G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->DITS = comp_val;
 1304              	 .loc 2 2517 0
 1305 0016 0362     	 str r3,[r0,#32]
 1306 0018 10BD     	 pop {r4,pc}
 1307              	.LBE27:
 1308              	.LBE26:
 1309              	 .cfi_endproc
 1310              	.LFE262:
 1312              	 .section .text.XMC_CCU8_SLICE_SetPrescaler,"ax",%progbits
 1313              	 .align 1
 1314              	 .global XMC_CCU8_SLICE_SetPrescaler
 1315              	 .thumb
 1316              	 .thumb_func
 1318              	XMC_CCU8_SLICE_SetPrescaler:
 1319              	.LFB263:
1118:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1119:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_SetDitherCompareValue((XMC_CCU8_SLICE_t *)slice, (uint8_t)spread);
1120:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1121:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1122:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs Pre-scaler divider  */
1123:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_PRESCALER_t di
1124:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1320              	 .loc 1 1124 0
 1321              	 .cfi_startproc
 1322              	 
 1323              	 
 1324              	 
 1325              	.LVL170:
1125:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t fpc;
1126:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1127:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1128:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1129:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* If the prescaler is not running, update directly the divider*/
1130:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc = slice->FPC;
 1326              	 .loc 1 1130 0
 1327 0000 836A     	 ldr r3,[r0,#40]
 1328              	.LVL171:
1131:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 1329              	 .loc 1 1131 0
 1330 0002 23F47063 	 bic r3,r3,#3840
 1331              	.LVL172:
1132:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 1332              	 .loc 1 1132 0
 1333 0006 43EA0123 	 orr r3,r3,r1,lsl#8
 1334              	.LVL173:
1133:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPC = fpc;
 1335              	 .loc 1 1133 0
 1336 000a 8362     	 str r3,[r0,#40]
1134:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1135:../Libraries/XMCLib/src/xmc_ccu8.c ****   /*
1136:../Libraries/XMCLib/src/xmc_ccu8.c ****    * In any case, update the initial value of the divider which is to be loaded once the prescaler 
1137:../Libraries/XMCLib/src/xmc_ccu8.c ****    * compare value.
1138:../Libraries/XMCLib/src/xmc_ccu8.c ****    */
1139:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) div_val;
 1337              	 .loc 1 1139 0
 1338 000c 4162     	 str r1,[r0,#36]
 1339 000e 7047     	 bx lr
 1340              	 .cfi_endproc
 1341              	.LFE263:
 1343              	 .section .text.XMC_CCU8_SLICE_SetTimerCompareMatch,"ax",%progbits
 1344              	 .align 1
 1345              	 .global XMC_CCU8_SLICE_SetTimerCompareMatch
 1346              	 .thumb
 1347              	 .thumb_func
 1349              	XMC_CCU8_SLICE_SetTimerCompareMatch:
 1350              	.LFB264:
1140:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1141:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1142:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs timer compare match value for channel 1 or 2 */
1143:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
1144:../Libraries/XMCLib/src/xmc_ccu8.c ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1145:../Libraries/XMCLib/src/xmc_ccu8.c ****                                          const uint16_t compare_val)
1146:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1351              	 .loc 1 1146 0
 1352              	 .cfi_startproc
 1353              	 
 1354              	 
 1355              	 
 1356              	.LVL174:
1147:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1148:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANN
1149:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1150:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 1357              	 .loc 1 1150 0
 1358 0000 09B9     	 cbnz r1,.L75
1151:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1152:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->CR1S = (uint32_t) compare_val;
 1359              	 .loc 1 1152 0
 1360 0002 C263     	 str r2,[r0,#60]
 1361 0004 7047     	 bx lr
 1362              	.L75:
1153:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1154:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1155:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1156:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->CR2S = (uint32_t) compare_val;
 1363              	 .loc 1 1156 0
 1364 0006 4264     	 str r2,[r0,#68]
 1365 0008 7047     	 bx lr
 1366              	 .cfi_endproc
 1367              	.LFE264:
 1369              	 .section .text.XMC_CCU8_SLICE_GetTimerCompareMatch,"ax",%progbits
 1370              	 .align 1
 1371              	 .global XMC_CCU8_SLICE_GetTimerCompareMatch
 1372              	 .thumb
 1373              	 .thumb_func
 1375              	XMC_CCU8_SLICE_GetTimerCompareMatch:
 1376              	.LFB265:
1157:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1158:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1159:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1160:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Returns the timer compare match value for channel 1 or 2 */
1161:../Libraries/XMCLib/src/xmc_ccu8.c **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
1162:../Libraries/XMCLib/src/xmc_ccu8.c ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel)
1163:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1377              	 .loc 1 1163 0
 1378              	 .cfi_startproc
 1379              	 
 1380              	 
 1381              	 
 1382              	.LVL175:
1164:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint16_t compare_value;
1165:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1166:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1167:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch
1168:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1169:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 1383              	 .loc 1 1169 0
 1384 0000 09B9     	 cbnz r1,.L78
1170:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1171:../Libraries/XMCLib/src/xmc_ccu8.c ****     compare_value = (uint16_t) slice->CR1;
 1385              	 .loc 1 1171 0
 1386 0002 806B     	 ldr r0,[r0,#56]
 1387              	.LVL176:
 1388 0004 00E0     	 b .L80
 1389              	.LVL177:
 1390              	.L78:
1172:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1173:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1174:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1175:../Libraries/XMCLib/src/xmc_ccu8.c ****     compare_value = (uint16_t) slice->CR2;
 1391              	 .loc 1 1175 0
 1392 0006 006C     	 ldr r0,[r0,#64]
 1393              	.LVL178:
 1394              	.L80:
 1395 0008 80B2     	 uxth r0,r0
 1396              	.LVL179:
1176:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1177:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1178:../Libraries/XMCLib/src/xmc_ccu8.c ****   return(compare_value);
1179:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1397              	 .loc 1 1179 0
 1398 000a 7047     	 bx lr
 1399              	 .cfi_endproc
 1400              	.LFE265:
 1402              	 .section .text.XMC_CCU8_SLICE_SetInterruptNode,"ax",%progbits
 1403              	 .align 1
 1404              	 .global XMC_CCU8_SLICE_SetInterruptNode
 1405              	 .thumb
 1406              	 .thumb_func
 1408              	XMC_CCU8_SLICE_SetInterruptNode:
 1409              	.LFB266:
1180:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1181:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Binds a capcom event to an NVIC node  */
1182:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
1183:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_IRQ_ID_t event,
1184:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_SR_ID_t sr)
1185:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1410              	 .loc 1 1185 0
 1411              	 .cfi_startproc
 1412              	 
 1413              	 
 1414              	.LVL180:
 1415 0000 0929     	 cmp r1,#9
 1416 0002 30B5     	 push {r4,r5,lr}
 1417              	.LCFI10:
 1418              	 .cfi_def_cfa_offset 12
 1419              	 .cfi_offset 4,-12
 1420              	 .cfi_offset 5,-8
 1421              	 .cfi_offset 14,-4
 1422 0004 9CBF     	 itt ls
 1423 0006 094C     	 ldrls r4,.L84
 1424 0008 094D     	 ldrls r5,.L84+4
1186:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t srs;
1187:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t mask;
1188:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t pos;
1189:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1190:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
1191:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
1192:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event)
1193:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1194:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs = slice->SRS;
 1425              	 .loc 1 1194 0
 1426 000a D0F8A830 	 ldr r3,[r0,#168]
 1427              	.LVL181:
 1428 000e 99BF     	 ittee ls
 1429 0010 34F81140 	 ldrhls r4,[r4,r1,lsl#1]
 1430 0014 695C     	 ldrbls r1,[r5,r1]
 1431              	.LVL182:
 1432 0016 0C21     	 movhi r1,#12
 1433 0018 4FF44054 	 movhi r4,#12288
 1434              	.LVL183:
1195:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1196:../Libraries/XMCLib/src/xmc_ccu8.c ****   switch(event)
1197:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1198:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
1199:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
1200:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
1201:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_POSR_Pos;
1202:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
1203:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1204:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
1205:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
1206:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
1207:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_CM1SR_Pos;
1208:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
1209:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1210:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
1211:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
1212:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
1213:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_CM2SR_Pos;
1214:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
1215:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1216:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
1217:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
1218:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E0SR_Pos;
1219:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
1220:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1221:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
1222:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
1223:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E1SR_Pos;
1224:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
1225:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1226:../Libraries/XMCLib/src/xmc_ccu8.c ****     default:
1227:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
1228:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E2SR_Pos;
1229:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
1230:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1231:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1232:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs &= ~mask;
 1435              	 .loc 1 1232 0
 1436 001c 23EA0403 	 bic r3,r3,r4
 1437              	.LVL184:
1233:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs |= (uint32_t)sr << pos;
 1438              	 .loc 1 1233 0
 1439 0020 8A40     	 lsls r2,r2,r1
 1440              	.LVL185:
 1441 0022 1A43     	 orrs r2,r2,r3
 1442              	.LVL186:
1234:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1235:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->SRS = srs;
 1443              	 .loc 1 1235 0
 1444 0024 C0F8A820 	 str r2,[r0,#168]
 1445 0028 30BD     	 pop {r4,r5,pc}
 1446              	.LVL187:
 1447              	.L85:
 1448 002a 00BF     	 .align 2
 1449              	.L84:
 1450 002c 00000000 	 .word .LANCHOR0
 1451 0030 00000000 	 .word .LANCHOR1
 1452              	 .cfi_endproc
 1453              	.LFE266:
 1455              	 .section .text.XMC_CCU8_SLICE_SetPassiveLevel,"ax",%progbits
 1456              	 .align 1
 1457              	 .global XMC_CCU8_SLICE_SetPassiveLevel
 1458              	 .thumb
 1459              	 .thumb_func
 1461              	XMC_CCU8_SLICE_SetPassiveLevel:
 1462              	.LFB267:
1236:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1237:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1238:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Asserts passive level for the slice output */
1239:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetPassiveLevel(XMC_CCU8_SLICE_t *const slice,
1240:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const XMC_CCU8_SLICE_OUTPUT_t out,
1241:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
1242:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1463              	 .loc 1 1242 0
 1464              	 .cfi_startproc
 1465              	 
 1466              	 
 1467              	 
 1468              	.LVL188:
1243:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t psl;
1244:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1245:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1246:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Slice Output", XMC_CCU8_SLICE_CHECK_OUTPUT(out
1247:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Passive Level",
1248:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
1249:../Libraries/XMCLib/src/xmc_ccu8.c ****               (level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
1250:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1251:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl = slice->PSL;
 1469              	 .loc 1 1251 0
 1470 0000 8369     	 ldr r3,[r0,#24]
 1471              	.LVL189:
1252:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1253:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl &= ~((uint32_t) out);
 1472              	 .loc 1 1253 0
 1473 0002 23EA0103 	 bic r3,r3,r1
 1474              	.LVL190:
1254:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl |= (uint32_t) level << ((uint32_t)out >> 1U);
 1475              	 .loc 1 1254 0
 1476 0006 4908     	 lsrs r1,r1,#1
 1477              	.LVL191:
 1478 0008 8A40     	 lsls r2,r2,r1
 1479              	.LVL192:
 1480 000a 1343     	 orrs r3,r3,r2
 1481              	.LVL193:
1255:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1256:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program CC8 slice output passive level */
1257:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSL = psl;
 1482              	 .loc 1 1257 0
 1483 000c 8361     	 str r3,[r0,#24]
 1484 000e 7047     	 bx lr
 1485              	 .cfi_endproc
 1486              	.LFE267:
 1488              	 .section .text.XMC_CCU8_SLICE_DeadTimeInit,"ax",%progbits
 1489              	 .align 1
 1490              	 .global XMC_CCU8_SLICE_DeadTimeInit
 1491              	 .thumb
 1492              	 .thumb_func
 1494              	XMC_CCU8_SLICE_DeadTimeInit:
 1495              	.LFB268:
1258:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1259:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1260:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Initializes Dead time configuration for the slice outputs */
1261:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
1262:../Libraries/XMCLib/src/xmc_ccu8.c ****                                  const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
1263:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1496              	 .loc 1 1263 0
 1497              	 .cfi_startproc
 1498              	 
 1499              	 
 1500              	 
 1501              	.LVL194:
1264:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice)
1265:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1266:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time value for channel 1 */
1267:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC1R = config->dc1r;
 1502              	 .loc 1 1267 0
 1503 0000 4B68     	 ldr r3,[r1,#4]
 1504 0002 0365     	 str r3,[r0,#80]
1268:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time value for channel 2 */
1269:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC2R = config->dc2r;
 1505              	 .loc 1 1269 0
 1506 0004 8B68     	 ldr r3,[r1,#8]
 1507 0006 4365     	 str r3,[r0,#84]
1270:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time control configuration */
1271:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC = config->dtc;
 1508              	 .loc 1 1271 0
 1509 0008 0B68     	 ldr r3,[r1]
 1510 000a C364     	 str r3,[r0,#76]
 1511 000c 7047     	 bx lr
 1512              	 .cfi_endproc
 1513              	.LFE268:
 1515              	 .section .text.XMC_CCU8_SLICE_ConfigureDeadTime,"ax",%progbits
 1516              	 .align 1
 1517              	 .global XMC_CCU8_SLICE_ConfigureDeadTime
 1518              	 .thumb
 1519              	 .thumb_func
 1521              	XMC_CCU8_SLICE_ConfigureDeadTime:
 1522              	.LFB269:
1272:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1273:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1274:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Activates or deactivates dead time for compare channel and ST path */
1275:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureDeadTime(XMC_CCU8_SLICE_t *const slice, const uint8_t mask)
1276:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1523              	 .loc 1 1276 0
 1524              	 .cfi_startproc
 1525              	 
 1526              	 
 1527              	 
 1528              	.LVL195:
1277:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice)
1278:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Channel", (mask <= XMC_CCU8_SLICE_DEAD_TIME_
1279:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1280:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC &= ~((uint32_t) XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK);
 1529              	 .loc 1 1280 0
 1530 0000 C36C     	 ldr r3,[r0,#76]
 1531 0002 23F03F03 	 bic r3,r3,#63
 1532 0006 C364     	 str r3,[r0,#76]
1281:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC |= (uint32_t) mask;
 1533              	 .loc 1 1281 0
 1534 0008 C36C     	 ldr r3,[r0,#76]
 1535 000a 1943     	 orrs r1,r1,r3
 1536              	.LVL196:
 1537 000c C164     	 str r1,[r0,#76]
 1538 000e 7047     	 bx lr
 1539              	 .cfi_endproc
 1540              	.LFE269:
 1542              	 .section .text.XMC_CCU8_SLICE_SetDeadTimeValue,"ax",%progbits
 1543              	 .align 1
 1544              	 .global XMC_CCU8_SLICE_SetDeadTimeValue
 1545              	 .thumb
 1546              	 .thumb_func
 1548              	XMC_CCU8_SLICE_SetDeadTimeValue:
 1549              	.LFB270:
1282:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1283:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1284:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures rising edge delay and falling edge delay for dead time */
1285:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetDeadTimeValue(XMC_CCU8_SLICE_t *const slice,
1286:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1287:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const uint8_t rise_value,
1288:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const uint8_t fall_value)
1289:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1550              	 .loc 1 1289 0
 1551              	 .cfi_startproc
 1552              	 
 1553              	 
 1554              	 
 1555              	.LVL197:
 1556 0000 1B02     	 lsls r3,r3,#8
 1557              	.LVL198:
1290:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
1291:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(c
1292:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1293:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
1294:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1295:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->DC1R = (((uint32_t) fall_value) << CCU8_CC8_DC1R_DT1F_Pos) | ((uint32_t) rise_value);
 1558              	 .loc 1 1295 0
 1559 0002 1A43     	 orrs r2,r2,r3
 1560              	.LVL199:
1293:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 1561              	 .loc 1 1293 0
 1562 0004 09B9     	 cbnz r1,.L90
 1563              	 .loc 1 1295 0
 1564 0006 0265     	 str r2,[r0,#80]
 1565 0008 7047     	 bx lr
 1566              	.L90:
1296:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1297:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1298:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1299:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC2R = (((uint32_t) fall_value) << CCU8_CC8_DC2R_DT2F_Pos) | ((uint32_t) rise_value);
 1567              	 .loc 1 1299 0
 1568 000a 4265     	 str r2,[r0,#84]
 1569 000c 7047     	 bx lr
 1570              	 .cfi_endproc
 1571              	.LFE270:
 1573              	 .section .text.XMC_CCU8_SLICE_SetDeadTimePrescaler,"ax",%progbits
 1574              	 .align 1
 1575              	 .global XMC_CCU8_SLICE_SetDeadTimePrescaler
 1576              	 .thumb
 1577              	 .thumb_func
 1579              	XMC_CCU8_SLICE_SetDeadTimePrescaler:
 1580              	.LFB271:
1300:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1301:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1302:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1303:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures clock division factor for dead time */
1304:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetDeadTimePrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_DTC_DI
1305:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1581              	 .loc 1 1305 0
 1582              	 .cfi_startproc
 1583              	 
 1584              	 
 1585              	 
 1586              	.LVL200:
1306:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1307:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid divider value", XMC_CCU8_SLICE_CHECK_DTC_
1308:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1309:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC &= ~((uint32_t) CCU8_CC8_DTC_DTCC_Msk);
 1587              	 .loc 1 1309 0
 1588 0000 C36C     	 ldr r3,[r0,#76]
 1589 0002 23F0C003 	 bic r3,r3,#192
 1590 0006 C364     	 str r3,[r0,#76]
1310:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
 1591              	 .loc 1 1310 0
 1592 0008 C36C     	 ldr r3,[r0,#76]
 1593 000a 43EA8111 	 orr r1,r3,r1,lsl#6
 1594              	.LVL201:
 1595 000e C164     	 str r1,[r0,#76]
 1596 0010 7047     	 bx lr
 1597              	 .cfi_endproc
 1598              	.LFE271:
 1600              	 .section .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput,"ax",%progbits
 1601              	 .align 1
 1602              	 .global XMC_CCU8_SLICE_ConfigureStatusBitOutput
 1603              	 .thumb
 1604              	 .thumb_func
 1606              	XMC_CCU8_SLICE_ConfigureStatusBitOutput:
 1607              	.LFB272:
1311:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1312:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1313:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures status ST1, ST2 mapping to STy */
1314:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_ST
1315:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1608              	 .loc 1 1315 0
 1609              	 .cfi_startproc
 1610              	 
 1611              	 
 1612              	 
 1613              	.LVL202:
1316:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
1317:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_
1318:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1319:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 1614              	 .loc 1 1319 0
 1615 0000 4369     	 ldr r3,[r0,#20]
 1616 0002 23F0C043 	 bic r3,r3,#1610612736
 1617 0006 4361     	 str r3,[r0,#20]
1320:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 1618              	 .loc 1 1320 0
 1619 0008 4369     	 ldr r3,[r0,#20]
 1620 000a 43EA4171 	 orr r1,r3,r1,lsl#29
 1621              	.LVL203:
 1622 000e 4161     	 str r1,[r0,#20]
 1623 0010 7047     	 bx lr
 1624              	 .cfi_endproc
 1625              	.LFE272:
 1627              	 .section .rodata.CSWTCH.42,"a",%progbits
 1628              	 .align 1
 1629              	 .set .LANCHOR0,.+0
 1632              	CSWTCH.42:
 1633 0000 0300     	 .short 3
 1634 0002 0300     	 .short 3
 1635 0004 0C00     	 .short 12
 1636 0006 0C00     	 .short 12
 1637 0008 3000     	 .short 48
 1638 000a 3000     	 .short 48
 1639 000c 0030     	 .short 12288
 1640 000e 0030     	 .short 12288
 1641 0010 0003     	 .short 768
 1642 0012 000C     	 .short 3072
 1643              	 .section .rodata.CSWTCH.43,"a",%progbits
 1644              	 .set .LANCHOR1,.+0
 1647              	CSWTCH.43:
 1648 0000 00       	 .byte 0
 1649 0001 00       	 .byte 0
 1650 0002 02       	 .byte 2
 1651 0003 02       	 .byte 2
 1652 0004 04       	 .byte 4
 1653 0005 04       	 .byte 4
 1654 0006 0C       	 .byte 12
 1655 0007 0C       	 .byte 12
 1656 0008 08       	 .byte 8
 1657 0009 0A       	 .byte 10
 1658              	 .text
 1659              	.Letext0:
 1660              	 .file 3 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1661              	 .file 4 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1662              	 .file 5 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1663              	 .file 6 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc4_scu.h"
 1664              	 .file 7 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Include/core_cm4.h"
 1665              	 .file 8 "G:/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_ccu8.c
    {standard input}:20     .text.XMC_CCU8_EnableModule:00000000 $t
    {standard input}:25     .text.XMC_CCU8_EnableModule:00000000 XMC_CCU8_EnableModule
    {standard input}:85     .text.XMC_CCU8_EnableModule:00000028 $d
    {standard input}:93     .text.XMC_CCU8_DisableModule:00000000 $t
    {standard input}:98     .text.XMC_CCU8_DisableModule:00000000 XMC_CCU8_DisableModule
    {standard input}:133    .text.XMC_CCU8_DisableModule:0000001c $d
    {standard input}:141    .text.XMC_CCU8_Init:00000000 $t
    {standard input}:146    .text.XMC_CCU8_Init:00000000 XMC_CCU8_Init
    {standard input}:190    .text.XMC_CCU8_SetModuleClock:00000000 $t
    {standard input}:195    .text.XMC_CCU8_SetModuleClock:00000000 XMC_CCU8_SetModuleClock
    {standard input}:219    .text.XMC_CCU8_SLICE_CompareInit:00000000 $t
    {standard input}:224    .text.XMC_CCU8_SLICE_CompareInit:00000000 XMC_CCU8_SLICE_CompareInit
    {standard input}:271    .text.XMC_CCU8_SLICE_CaptureInit:00000000 $t
    {standard input}:276    .text.XMC_CCU8_SLICE_CaptureInit:00000000 XMC_CCU8_SLICE_CaptureInit
    {standard input}:312    .text.XMC_CCU8_SLICE_SetOutPath:00000000 $t
    {standard input}:317    .text.XMC_CCU8_SLICE_SetOutPath:00000000 XMC_CCU8_SLICE_SetOutPath
    {standard input}:343    .text.XMC_CCU8_SetMultiChannelShadowTransferMode:00000000 $t
    {standard input}:348    .text.XMC_CCU8_SetMultiChannelShadowTransferMode:00000000 XMC_CCU8_SetMultiChannelShadowTransferMode
    {standard input}:374    .text.XMC_CCU8_SLICE_StartConfig:00000000 $t
    {standard input}:379    .text.XMC_CCU8_SLICE_StartConfig:00000000 XMC_CCU8_SLICE_StartConfig
    {standard input}:417    .text.XMC_CCU8_SLICE_StopConfig:00000000 $t
    {standard input}:422    .text.XMC_CCU8_SLICE_StopConfig:00000000 XMC_CCU8_SLICE_StopConfig
    {standard input}:457    .text.XMC_CCU8_SLICE_LoadConfig:00000000 $t
    {standard input}:462    .text.XMC_CCU8_SLICE_LoadConfig:00000000 XMC_CCU8_SLICE_LoadConfig
    {standard input}:486    .text.XMC_CCU8_SLICE_LoadSelector:00000000 $t
    {standard input}:491    .text.XMC_CCU8_SLICE_LoadSelector:00000000 XMC_CCU8_SLICE_LoadSelector
    {standard input}:515    .text.XMC_CCU8_SLICE_ModulationConfig:00000000 $t
    {standard input}:520    .text.XMC_CCU8_SLICE_ModulationConfig:00000000 XMC_CCU8_SLICE_ModulationConfig
    {standard input}:581    .text.XMC_CCU8_SLICE_CountConfig:00000000 $t
    {standard input}:586    .text.XMC_CCU8_SLICE_CountConfig:00000000 XMC_CCU8_SLICE_CountConfig
    {standard input}:610    .text.XMC_CCU8_SLICE_GateConfig:00000000 $t
    {standard input}:615    .text.XMC_CCU8_SLICE_GateConfig:00000000 XMC_CCU8_SLICE_GateConfig
    {standard input}:639    .text.XMC_CCU8_SLICE_Capture0Config:00000000 $t
    {standard input}:644    .text.XMC_CCU8_SLICE_Capture0Config:00000000 XMC_CCU8_SLICE_Capture0Config
    {standard input}:668    .text.XMC_CCU8_SLICE_Capture1Config:00000000 $t
    {standard input}:673    .text.XMC_CCU8_SLICE_Capture1Config:00000000 XMC_CCU8_SLICE_Capture1Config
    {standard input}:697    .text.XMC_CCU8_SLICE_DirectionConfig:00000000 $t
    {standard input}:702    .text.XMC_CCU8_SLICE_DirectionConfig:00000000 XMC_CCU8_SLICE_DirectionConfig
    {standard input}:726    .text.XMC_CCU8_SLICE_StatusBitOverrideConfig:00000000 $t
    {standard input}:731    .text.XMC_CCU8_SLICE_StatusBitOverrideConfig:00000000 XMC_CCU8_SLICE_StatusBitOverrideConfig
    {standard input}:752    .text.XMC_CCU8_SLICE_TrapConfig:00000000 $t
    {standard input}:757    .text.XMC_CCU8_SLICE_TrapConfig:00000000 XMC_CCU8_SLICE_TrapConfig
    {standard input}:804    .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:00000000 $t
    {standard input}:809    .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:00000000 XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
    {standard input}:898    .text.XMC_CCU8_SLICE_ConfigureEvent:00000000 $t
    {standard input}:903    .text.XMC_CCU8_SLICE_ConfigureEvent:00000000 XMC_CCU8_SLICE_ConfigureEvent
    {standard input}:999    .text.XMC_CCU8_SLICE_SetInput:00000000 $t
    {standard input}:1004   .text.XMC_CCU8_SLICE_SetInput:00000000 XMC_CCU8_SLICE_SetInput
    {standard input}:1043   .text.XMC_CCU8_SLICE_SetTimerRepeatMode:00000000 $t
    {standard input}:1048   .text.XMC_CCU8_SLICE_SetTimerRepeatMode:00000000 XMC_CCU8_SLICE_SetTimerRepeatMode
    {standard input}:1077   .text.XMC_CCU8_SLICE_SetTimerCountingMode:00000000 $t
    {standard input}:1082   .text.XMC_CCU8_SLICE_SetTimerCountingMode:00000000 XMC_CCU8_SLICE_SetTimerCountingMode
    {standard input}:1111   .text.XMC_CCU8_SLICE_SetTimerPeriodMatch:00000000 $t
    {standard input}:1116   .text.XMC_CCU8_SLICE_SetTimerPeriodMatch:00000000 XMC_CCU8_SLICE_SetTimerPeriodMatch
    {standard input}:1131   .text.XMC_CCU8_SLICE_GetCaptureRegisterValue:00000000 $t
    {standard input}:1136   .text.XMC_CCU8_SLICE_GetCaptureRegisterValue:00000000 XMC_CCU8_SLICE_GetCaptureRegisterValue
    {standard input}:1156   .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue:00000000 $t
    {standard input}:1161   .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue:00000000 XMC_CCU8_SLICE_GetLastCapturedTimerValue
    {standard input}:1234   .text.XMC_CCU8_GetCapturedValueFromFifo:00000000 $t
    {standard input}:1239   .text.XMC_CCU8_GetCapturedValueFromFifo:00000000 XMC_CCU8_GetCapturedValueFromFifo
    {standard input}:1264   .text.XMC_CCU8_SLICE_EnableDithering:00000000 $t
    {standard input}:1269   .text.XMC_CCU8_SLICE_EnableDithering:00000000 XMC_CCU8_SLICE_EnableDithering
    {standard input}:1313   .text.XMC_CCU8_SLICE_SetPrescaler:00000000 $t
    {standard input}:1318   .text.XMC_CCU8_SLICE_SetPrescaler:00000000 XMC_CCU8_SLICE_SetPrescaler
    {standard input}:1344   .text.XMC_CCU8_SLICE_SetTimerCompareMatch:00000000 $t
    {standard input}:1349   .text.XMC_CCU8_SLICE_SetTimerCompareMatch:00000000 XMC_CCU8_SLICE_SetTimerCompareMatch
    {standard input}:1370   .text.XMC_CCU8_SLICE_GetTimerCompareMatch:00000000 $t
    {standard input}:1375   .text.XMC_CCU8_SLICE_GetTimerCompareMatch:00000000 XMC_CCU8_SLICE_GetTimerCompareMatch
    {standard input}:1403   .text.XMC_CCU8_SLICE_SetInterruptNode:00000000 $t
    {standard input}:1408   .text.XMC_CCU8_SLICE_SetInterruptNode:00000000 XMC_CCU8_SLICE_SetInterruptNode
    {standard input}:1450   .text.XMC_CCU8_SLICE_SetInterruptNode:0000002c $d
    {standard input}:1456   .text.XMC_CCU8_SLICE_SetPassiveLevel:00000000 $t
    {standard input}:1461   .text.XMC_CCU8_SLICE_SetPassiveLevel:00000000 XMC_CCU8_SLICE_SetPassiveLevel
    {standard input}:1489   .text.XMC_CCU8_SLICE_DeadTimeInit:00000000 $t
    {standard input}:1494   .text.XMC_CCU8_SLICE_DeadTimeInit:00000000 XMC_CCU8_SLICE_DeadTimeInit
    {standard input}:1516   .text.XMC_CCU8_SLICE_ConfigureDeadTime:00000000 $t
    {standard input}:1521   .text.XMC_CCU8_SLICE_ConfigureDeadTime:00000000 XMC_CCU8_SLICE_ConfigureDeadTime
    {standard input}:1543   .text.XMC_CCU8_SLICE_SetDeadTimeValue:00000000 $t
    {standard input}:1548   .text.XMC_CCU8_SLICE_SetDeadTimeValue:00000000 XMC_CCU8_SLICE_SetDeadTimeValue
    {standard input}:1574   .text.XMC_CCU8_SLICE_SetDeadTimePrescaler:00000000 $t
    {standard input}:1579   .text.XMC_CCU8_SLICE_SetDeadTimePrescaler:00000000 XMC_CCU8_SLICE_SetDeadTimePrescaler
    {standard input}:1601   .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput:00000000 $t
    {standard input}:1606   .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput:00000000 XMC_CCU8_SLICE_ConfigureStatusBitOutput
    {standard input}:1628   .rodata.CSWTCH.42:00000000 $d
    {standard input}:1632   .rodata.CSWTCH.42:00000000 CSWTCH.42
    {standard input}:1647   .rodata.CSWTCH.43:00000000 CSWTCH.43
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.ca5ae67a873a4952d630d8e4120b9e3e
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4e89a3f145accdcb1100c37260c088e6
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.65.5c0d35eb1a6853ff8300ab2ec1b944b0
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.57f124f9262f3dbf77da6a6506ffb430
                           .group:00000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:00000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1500.3eca65ed9ba7f90e09c1ffcb0b3f5724
                           .group:00000000 wm4.xmc_common.h.98.806f17e888fd51d0e4be2ad115163551
                           .group:00000000 wm4.xmc4_ccu8_map.h.49.6c690c5d16bf8cdaea590e216ba7175f
                           .group:00000000 wm4.xmc_ccu8.h.186.ad848396822e582a68759c62baef1e53
                           .group:00000000 wm4.xmc4_scu.h.90.f49c0839764a6c1240876a5f2e586200

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_EnableClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
