   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_can.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
  20              	 .align 1
  21              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
  26              	.LFB229:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2019-05-07
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_can.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_can.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_can.c ****  * 
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_can.c ****  * 
  21:../Libraries/XMCLib/src/xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_can.c ****  *
  39:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  41:../Libraries/XMCLib/src/xmc_can.c ****  *
  42:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:../Libraries/XMCLib/src/xmc_can.c ****  *
  50:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  51:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:../Libraries/XMCLib/src/xmc_can.c ****  *
  53:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  54:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:../Libraries/XMCLib/src/xmc_can.c ****  *
  56:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  57:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  58:../Libraries/XMCLib/src/xmc_can.c ****  *
  59:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  60:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br> 
  61:../Libraries/XMCLib/src/xmc_can.c ****  *
  62:../Libraries/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  63:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  64:../Libraries/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  65:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  66:../Libraries/XMCLib/src/xmc_can.c ****  *
  67:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-06-21:
  68:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx()
  69:../Libraries/XMCLib/src/xmc_can.c ****  *
  70:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-11-12:
  71:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed assertion at XMC_CAN_InitEx()
  72:../Libraries/XMCLib/src/xmc_can.c ****  *
  73:../Libraries/XMCLib/src/xmc_can.c ****  * 2019-05-07:
  74:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed compilation warnings
  75:../Libraries/XMCLib/src/xmc_can.c ****  *
  76:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  77:../Libraries/XMCLib/src/xmc_can.c ****  *
  78:../Libraries/XMCLib/src/xmc_can.c ****  */ 
  79:../Libraries/XMCLib/src/xmc_can.c **** 
  80:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  81:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  82:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  83:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  84:../Libraries/XMCLib/src/xmc_can.c **** 
  85:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
  86:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
  87:../Libraries/XMCLib/src/xmc_can.c **** 
  88:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  89:../Libraries/XMCLib/src/xmc_can.c **** {
  90:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
  91:../Libraries/XMCLib/src/xmc_can.c **** }
  92:../Libraries/XMCLib/src/xmc_can.c **** 
  93:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  94:../Libraries/XMCLib/src/xmc_can.c **** {
  95:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
  96:../Libraries/XMCLib/src/xmc_can.c **** }
  97:../Libraries/XMCLib/src/xmc_can.c **** 
  98:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  99:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
 100:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
 101:../Libraries/XMCLib/src/xmc_can.c **** 
 102:../Libraries/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
 103:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
 104:../Libraries/XMCLib/src/xmc_can.c **** 
 105:../Libraries/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
 106:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
 107:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
 108:../Libraries/XMCLib/src/xmc_can.c **** 
 109:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 110:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 111:../Libraries/XMCLib/src/xmc_can.c **** 
 112:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG1 15
 113:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG2 7
 114:../Libraries/XMCLib/src/xmc_can.c **** 
 115:../Libraries/XMCLib/src/xmc_can.c **** 
 116:../Libraries/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 117:../Libraries/XMCLib/src/xmc_can.c ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 118:../Libraries/XMCLib/src/xmc_can.c **** {
  28              	 .loc 1 118 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
 119:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 120:../Libraries/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
  33              	 .loc 1 120 0
  34 0000 91E80C00 	 ldmia r1,{r2,r3}
 118:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
  35              	 .loc 1 118 0
  36 0004 F0B5     	 push {r4,r5,r6,r7,lr}
  37              	.LCFI0:
  38              	 .cfi_def_cfa_offset 20
  39              	 .cfi_offset 4,-20
  40              	 .cfi_offset 5,-16
  41              	 .cfi_offset 6,-12
  42              	 .cfi_offset 7,-8
  43              	 .cfi_offset 14,-4
  44              	 .loc 1 120 0
  45 0006 B2FBF3FE 	 udiv lr,r2,r3
  46 000a 03FB1E23 	 mls r3,r3,lr,r2
  47 000e 1BBB     	 cbnz r3,.L8
  48              	.LVL1:
  49              	.LBB29:
 121:../Libraries/XMCLib/src/xmc_can.c ****   {
 122:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t prescaler;
 123:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t div8 = 0;
 124:../Libraries/XMCLib/src/xmc_can.c **** 
 125:../Libraries/XMCLib/src/xmc_can.c ****   /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler 
 126:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 127:../Libraries/XMCLib/src/xmc_can.c **** 
 128:../Libraries/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 129:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
  50              	 .loc 1 129 0
  51 0010 1927     	 movs r7,#25
  52              	.LVL2:
  53              	.L7:
 130:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg1 = 0;
 131:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg2 = 0;
 132:../Libraries/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 133:../Libraries/XMCLib/src/xmc_can.c ****     {
 134:../Libraries/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 135:../Libraries/XMCLib/src/xmc_can.c ****       if ((fcan_div % ntq) == 0)
  54              	 .loc 1 135 0
  55 0012 BEFBF7F2 	 udiv r2,lr,r7
  56 0016 07FB12E5 	 mls r5,r7,r2,lr
  57 001a D5B9     	 cbnz r5,.L3
  58              	.LVL3:
 136:../Libraries/XMCLib/src/xmc_can.c ****       {
 137:../Libraries/XMCLib/src/xmc_can.c ****     	div8 = 0;
 138:../Libraries/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
 139:../Libraries/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
  59              	 .loc 1 139 0
  60 001c 531E     	 subs r3,r2,#1
  61 001e B3F5007F 	 cmp r3,#512
  62 0022 16D2     	 bcs .L3
 140:../Libraries/XMCLib/src/xmc_can.c ****         {
 141:../Libraries/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
  63              	 .loc 1 141 0
  64 0024 3F2A     	 cmp r2,#63
  65 0026 02D9     	 bls .L4
 142:../Libraries/XMCLib/src/xmc_can.c ****           {
 143:../Libraries/XMCLib/src/xmc_can.c ****             /* consider prescaler >=64, if it is integer divisible by 8*/
 144:../Libraries/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) != 0)
  66              	 .loc 1 144 0
  67 0028 5307     	 lsls r3,r2,#29
  68 002a 13D1     	 bne .L5
 145:../Libraries/XMCLib/src/xmc_can.c ****             {
 146:../Libraries/XMCLib/src/xmc_can.c ****               continue;
 147:../Libraries/XMCLib/src/xmc_can.c ****             }
 148:../Libraries/XMCLib/src/xmc_can.c ****             else
 149:../Libraries/XMCLib/src/xmc_can.c ****             {
 150:../Libraries/XMCLib/src/xmc_can.c ****               div8 = 1;
  69              	 .loc 1 150 0
  70 002c 0125     	 movs r5,#1
  71              	.L4:
  72              	.LVL4:
 151:../Libraries/XMCLib/src/xmc_can.c ****             }
 152:../Libraries/XMCLib/src/xmc_can.c ****           }
 153:../Libraries/XMCLib/src/xmc_can.c **** 
 154:../Libraries/XMCLib/src/xmc_can.c ****           tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
  73              	 .loc 1 154 0
  74 002e 0C89     	 ldrh r4,[r1,#8]
  75 0030 7B1E     	 subs r3,r7,#1
  76 0032 6343     	 muls r3,r4,r3
  77 0034 42F21074 	 movw r4,#10000
  78 0038 B3FBF4F3 	 udiv r3,r3,r4
  79              	.LVL5:
 155:../Libraries/XMCLib/src/xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 156:../Libraries/XMCLib/src/xmc_can.c **** 
 157:../Libraries/XMCLib/src/xmc_can.c ****           if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
  80              	 .loc 1 157 0
  81 003c DC1E     	 subs r4,r3,#3
  82 003e 0C2C     	 cmp r4,#12
  83 0040 07D8     	 bhi .L3
 155:../Libraries/XMCLib/src/xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
  84              	 .loc 1 155 0 discriminator 1
  85 0042 FE1A     	 subs r6,r7,r3
  86              	.LVL6:
  87              	 .loc 1 157 0 discriminator 1
  88 0044 F41E     	 subs r4,r6,#3
  89 0046 042C     	 cmp r4,#4
  90 0048 03D8     	 bhi .L3
 158:../Libraries/XMCLib/src/xmc_can.c ****         		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_
  91              	 .loc 1 158 0 discriminator 1
  92 004a 4C89     	 ldrh r4,[r1,#10]
 155:../Libraries/XMCLib/src/xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
  93              	 .loc 1 155 0 discriminator 1
  94 004c 013E     	 subs r6,r6,#1
  95              	.LVL7:
  96              	 .loc 1 158 0 discriminator 1
  97 004e A642     	 cmp r6,r4
  98 0050 04D2     	 bcs .L6
  99              	.LVL8:
 100              	.L3:
 159:../Libraries/XMCLib/src/xmc_can.c ****           {
 160:../Libraries/XMCLib/src/xmc_can.c ****             break;
 161:../Libraries/XMCLib/src/xmc_can.c ****           }
 162:../Libraries/XMCLib/src/xmc_can.c **** 
 163:../Libraries/XMCLib/src/xmc_can.c **** 
 164:../Libraries/XMCLib/src/xmc_can.c ****         }
 165:../Libraries/XMCLib/src/xmc_can.c ****       }
 166:../Libraries/XMCLib/src/xmc_can.c ****       --ntq;
 101              	 .loc 1 166 0
 102 0052 013F     	 subs r7,r7,#1
 103              	.LVL9:
 104              	.L5:
 132:../Libraries/XMCLib/src/xmc_can.c ****     {
 105              	 .loc 1 132 0
 106 0054 072F     	 cmp r7,#7
 107 0056 DCD8     	 bhi .L7
 108              	.LVL10:
 109              	.L8:
 110              	.LBE29:
 167:../Libraries/XMCLib/src/xmc_can.c ****     }
 168:../Libraries/XMCLib/src/xmc_can.c **** 
 169:../Libraries/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 170:../Libraries/XMCLib/src/xmc_can.c ****     {
 171:../Libraries/XMCLib/src/xmc_can.c **** 
 172:../Libraries/XMCLib/src/xmc_can.c **** 
 173:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 174:../Libraries/XMCLib/src/xmc_can.c **** 
 175:../Libraries/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 176:../Libraries/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 177:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 178:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 179:../Libraries/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 180:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 181:../Libraries/XMCLib/src/xmc_can.c **** 
 182:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 183:../Libraries/XMCLib/src/xmc_can.c **** 
 184:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 185:../Libraries/XMCLib/src/xmc_can.c ****     }
 186:../Libraries/XMCLib/src/xmc_can.c ****   }
 187:../Libraries/XMCLib/src/xmc_can.c **** 
 188:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 111              	 .loc 1 188 0
 112 0058 0120     	 movs r0,#1
 113              	.LVL11:
 114 005a F0BD     	 pop {r4,r5,r6,r7,pc}
 115              	.LVL12:
 116              	.L6:
 117              	.LBB34:
 118              	.LBB30:
 119              	.LBB31:
 120              	 .file 2 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_can.h"
   1:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2017-11-09
   4:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  69:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  70:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  71:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  72:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  73:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  74:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  75:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  76:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  77:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  78:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  79:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  80:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  81:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  82:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  83:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  84:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  85:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  86:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  87:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  88:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  89:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  90:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  91:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  92:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  93:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  94:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
  96:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
  97:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
  98:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
  99:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 100:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 101:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 102:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 103:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 104:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 105:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 106:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 107:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 108:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 109:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 110:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 111:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 112:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 113:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 114:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 115:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 116:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 117:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 118:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 119:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 120:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 121:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 122:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 123:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 124:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 125:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 126:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 127:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 128:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
 129:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 130:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 131:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 132:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 133:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 134:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
 135:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 136:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 137:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 138:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 139:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 140:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 141:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 142:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 143:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 144:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 145:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 146:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 147:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 148:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 149:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 150:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 151:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 152:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 153:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 154:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 155:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 157:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 158:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 159:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 160:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 161:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 162:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 163:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 164:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 165:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 166:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 167:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 168:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 169:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 170:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 171:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 172:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 173:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 174:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 175:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 176:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 177:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 178:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 179:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 180:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 181:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 182:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 183:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 184:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 185:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 186:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 187:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 188:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 189:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 190:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 191:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 192:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 193:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 194:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 195:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 196:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 197:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 198:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 199:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 200:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 201:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 202:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 203:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 204:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 205:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 206:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 207:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 208:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 209:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 210:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 211:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 212:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 213:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 214:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 215:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 216:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 217:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 218:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 219:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 220:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 221:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 222:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 224:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 226:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 227:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 228:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 229:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 230:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 231:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 232:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 233:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 234:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 235:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 236:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 237:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 238:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 239:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 240:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 241:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 242:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 243:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 244:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 245:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 246:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 247:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 248:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 249:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 250:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 251:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 252:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 253:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 254:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 255:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 256:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 257:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 258:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 259:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 260:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 261:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 262:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 263:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 264:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 265:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 266:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 267:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 268:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 269:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 270:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 271:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 272:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 273:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 274:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 275:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 276:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 277:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 278:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 279:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 280:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 281:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 282:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 283:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 284:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 285:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 286:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 287:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 288:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 289:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 290:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 291:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 292:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 293:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 294:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 295:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 296:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 297:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 298:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 299:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 300:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 301:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 302:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 303:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 304:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 305:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 306:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 307:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 308:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 309:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 310:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 311:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 312:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 313:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 314:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 315:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 316:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 317:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 318:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 319:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 320:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 321:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 322:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 323:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 324:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 325:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 326:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 327:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 328:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 329:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 330:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 331:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 332:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 333:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 334:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 335:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 336:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 337:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 338:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 339:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 340:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 341:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 342:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 343:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 344:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 345:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 346:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 347:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 348:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 349:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 350:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 351:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 352:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 353:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 354:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 355:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 356:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 357:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 358:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 359:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 360:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 361:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 362:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 363:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 364:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 365:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 366:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 367:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 368:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 369:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 370:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 371:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 372:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 373:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 374:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 375:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 376:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 377:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 378:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 379:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 380:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 381:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 382:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 383:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 384:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 385:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 386:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 387:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 388:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 389:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 391:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 393:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 394:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 395:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 396:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 397:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 398:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 399:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 400:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 401:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 402:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 403:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 404:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 405:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 406:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 407:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 408:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 409:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 410:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 411:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 412:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 413:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 414:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 415:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 416:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 417:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 418:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 419:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 420:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 421:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 422:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 423:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 424:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 425:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 426:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 427:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 428:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 429:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 430:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 431:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 432:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 433:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 435:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 437:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 438:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 439:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 440:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 441:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 442:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 443:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 444:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 445:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 446:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 447:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 448:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 449:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 450:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 451:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 452:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {  
 453:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 454:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 455:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 456:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
 457:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 458:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 459:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 460:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 462:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 464:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 465:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 466:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 467:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 468:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 469:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 470:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 471:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 472:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 473:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 474:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 475:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 476:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 477:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 478:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 479:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 480:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 481:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 482:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 483:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 484:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 485:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 486:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 487:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 488:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 489:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 490:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 491:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 492:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 493:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 494:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 495:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 496:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 497:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 498:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 499:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 500:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 501:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 502:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 503:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 504:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 505:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 506:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 507:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 508:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 509:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 510:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 511:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 512:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 513:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 514:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 515:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 516:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 517:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 518:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 519:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 520:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 521:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 522:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 523:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 524:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 525:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 526:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 527:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 528:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 529:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 530:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 531:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 532:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 533:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 534:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 535:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 536:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 537:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 538:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 539:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****     };
 540:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 541:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 542:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   };
 543:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 544:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 545:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 546:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 547:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 548:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 549:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 550:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 551:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 552:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 553:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 554:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 555:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 556:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 557:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 558:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 559:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 560:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 561:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****     };
 562:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 563:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   };
 564:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 565:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 566:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 567:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 568:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****     };
 569:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 570:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   };
 571:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 572:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 573:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 574:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 575:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 576:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 577:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 578:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 579:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 580:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****       };
 581:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 582:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 583:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 584:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 585:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 586:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 587:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 588:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 589:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 590:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 591:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 592:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 593:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 594:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 595:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 596:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 597:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 598:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 599:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 600:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 601:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 602:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 603:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 604:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 605:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 606:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 607:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 608:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 609:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 610:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 611:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 612:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 613:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 614:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 615:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 616:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 617:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 618:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 619:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 620:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 621:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 622:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 623:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 624:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 625:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 627:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 628:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 629:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 630:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 631:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 632:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 633:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 634:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 635:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 636:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 637:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 639:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 640:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 641:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 642:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 643:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 644:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 645:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 646:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 647:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 648:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 649:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 650:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 652:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 653:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 654:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 655:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 656:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 658:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 659:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 660:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 661:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 662:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 663:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 664:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 665:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 666:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 667:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 668:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 669:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 670:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 671:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 672:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 673:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 674:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 675:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 677:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 678:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 679:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 680:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 681:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 682:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 684:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 685:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 686:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 687:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 688:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 689:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 690:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 691:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 694:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 696:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 697:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 698:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 699:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 700:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 701:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 702:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 703:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 704:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 705:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 706:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 707:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 708:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 709:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 710:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 711:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 712:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 713:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 714:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 715:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 716:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 717:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 718:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 719:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 720:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 721:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 723:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 724:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 725:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 726:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 727:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 728:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 729:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 730:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 731:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 732:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 733:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 734:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 735:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 736:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 737:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 739:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 740:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 741:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 742:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 743:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 744:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 745:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 746:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 747:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 748:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 749:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 750:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 751:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 752:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 753:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 754:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 755:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 756:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 757:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 758:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 759:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 760:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 761:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 762:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 763:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 764:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 765:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 766:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 767:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 768:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 769:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 770:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 771:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 772:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 773:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 774:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 776:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 777:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 779:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 780:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 781:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
 782:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 785:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 786:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 787:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 788:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 789:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 790:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 791:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 792:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 793:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 795:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 796:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 797:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 798:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 799:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 800:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 801:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 802:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 803:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 804:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 805:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 806:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 807:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 808:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 809:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 810:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 811:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 812:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 813:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 815:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 816:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 817:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 818:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 819:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 820:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 822:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 824:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 825:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 827:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 828:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
 829:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 830:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 831:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 832:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 833:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 834:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 835:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 836:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 837:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 838:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 839:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 840:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 841:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 844:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 847:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 848:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 849:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 850:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 851:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 853:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 854:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 855:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 856:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 857:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 858:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 859:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 860:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 866:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 867:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 868:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 869:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 870:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 871:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 872:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 873:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 874:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 875:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 876:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 877:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 878:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 879:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 880:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 881:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 882:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 883:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 884:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 885:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 886:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 887:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 889:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 890:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 891:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 892:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 893:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 894:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 895:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 896:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 897:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 898:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 899:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 900:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 901:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 902:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 903:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 905:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 906:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 908:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 909:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 910:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 911:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 912:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 913:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 914:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 915:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 916:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 917:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 919:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 920:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 921:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 922:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 923:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 924:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 925:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 927:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 928:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 930:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 931:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 932:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 933:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 934:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 935:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 936:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 937:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 938:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 939:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 940:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 941:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 942:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 943:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 944:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 946:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 947:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 948:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 949:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 950:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 951:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 952:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 953:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 955:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 956:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 957:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 958:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 959:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 960:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 961:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 962:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 963:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 964:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 965:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 966:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 967:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 968:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 969:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 970:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 971:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 972:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 974:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 975:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 976:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 977:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 979:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 980:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 981:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 982:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 983:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 984:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 986:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 987:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 988:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 989:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 990:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 991:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 992:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 993:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 994:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 995:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 996:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 997:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
 998:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 999:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1000:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1002:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1003:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1005:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1006:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1007:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1008:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1009:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1010:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1011:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1012:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1022:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1025:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1028:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1030:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1031:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1034:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1035:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1036:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1038:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1039:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1041:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1042:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1043:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1044:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1045:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1046:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1047:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1048:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1049:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1050:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1051:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1052:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1053:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1054:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1055:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1056:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1057:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1058:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1059:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1061:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1062:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1063:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1064:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1065:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1066:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1067:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1068:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1069:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1070:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1071:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1072:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1073:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1074:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1075:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1077:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1078:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1079:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1080:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1081:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1083:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1084:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1086:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1087:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1088:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1089:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1090:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1091:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1092:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1093:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1094:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1095:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1096:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1097:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1098:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1099:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1100:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1101:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1102:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1103:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1105:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1106:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1107:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1108:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1109:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1110:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1112:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1113:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1114:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1115:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1116:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1117:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1118:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1119:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1120:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1121:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1122:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1123:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1124:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1125:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1126:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1127:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1128:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1129:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1130:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1131:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1132:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1133:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1134:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1135:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1136:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1137:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1139:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1140:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1141:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1142:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1143:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1144:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1145:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1146:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1147:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1148:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1149:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1150:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1151:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1152:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1153:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1155:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1156:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1157:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1158:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1159:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1161:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1162:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1164:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1165:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1166:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1167:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1168:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1169:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1170:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1171:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1172:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1173:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1174:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1175:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1176:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1177:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1178:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1179:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1180:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1181:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1182:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1184:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1185:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1186:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1187:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1188:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1189:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1190:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1191:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1192:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1193:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1194:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1195:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1196:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1197:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1198:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1199:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1200:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1201:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1202:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1203:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1204:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1205:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1207:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1208:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1209:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1210:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1211:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1212:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1213:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1214:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1215:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1216:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1217:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1218:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1219:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1220:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1221:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1222:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1223:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1224:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1225:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1227:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1228:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1229:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1230:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1231:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1232:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1233:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1234:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1235:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1236:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1240:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1241:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1242:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1243:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1244:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1245:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1246:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1247:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1248:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1249:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1250:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1251:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1252:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1253:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1254:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1255:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1256:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1257:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1258:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1259:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1260:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1261:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1262:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1263:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1264:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1265:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1266:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1267:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1268:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1269:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1271:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1272:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1273:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1274:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 121              	 .loc 2 1274 0
 122 005c 0168     	 ldr r1,[r0]
 123              	.LVL13:
 124 005e 41F04001 	 orr r1,r1,#64
 125 0062 0160     	 str r1,[r0]
 126              	.LBE31:
 127              	.LBE30:
 177:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 128              	 .loc 1 177 0
 129 0064 013C     	 subs r4,r4,#1
 176:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 130              	 .loc 1 176 0
 131 0066 711E     	 subs r1,r6,#1
 132 0068 0903     	 lsls r1,r1,#12
 177:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 133              	 .loc 1 177 0
 134 006a A401     	 lsls r4,r4,#6
 135 006c E4B2     	 uxtb r4,r4
 176:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 136              	 .loc 1 176 0
 137 006e 01F4E041 	 and r1,r1,#28672
 138 0072 2143     	 orrs r1,r1,r4
 139 0074 41EAC531 	 orr r1,r1,r5,lsl#15
 178:../Libraries/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 140              	 .loc 1 178 0
 141 0078 013B     	 subs r3,r3,#1
 142              	.LVL14:
 179:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 143              	 .loc 1 179 0
 144 007a 05EB4505 	 add r5,r5,r5,lsl#1
 145              	.LVL15:
 146 007e EA40     	 lsrs r2,r2,r5
 147              	.LVL16:
 178:../Libraries/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 148              	 .loc 1 178 0
 149 0080 1B02     	 lsls r3,r3,#8
 150              	.LVL17:
 151 0082 03F47063 	 and r3,r3,#3840
 179:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 152              	 .loc 1 179 0
 153 0086 013A     	 subs r2,r2,#1
 154 0088 1943     	 orrs r1,r1,r3
 155 008a 02F03F02 	 and r2,r2,#63
 156 008e 41EA0203 	 orr r3,r1,r2
 176:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 157              	 .loc 1 176 0
 158 0092 0361     	 str r3,[r0,#16]
 159              	.LVL18:
 160              	.LBB32:
 161              	.LBB33:
1275:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1276:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1277:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1278:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1279:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1281:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1283:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1284:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1285:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1286:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1288:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1289:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1290:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1291:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1292:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1293:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1294:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 162              	 .loc 2 1294 0
 163 0094 0368     	 ldr r3,[r0]
 164 0096 23F04003 	 bic r3,r3,#64
 165 009a 0360     	 str r3,[r0]
 166              	.LBE33:
 167              	.LBE32:
 184:../Libraries/XMCLib/src/xmc_can.c ****     }
 168              	 .loc 1 184 0
 169 009c 0020     	 movs r0,#0
 170              	.LVL19:
 171              	.LBE34:
 189:../Libraries/XMCLib/src/xmc_can.c **** }
 172              	 .loc 1 189 0
 173 009e F0BD     	 pop {r4,r5,r6,r7,pc}
 174              	 .cfi_endproc
 175              	.LFE229:
 177              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 178              	 .align 1
 179              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 180              	 .thumb
 181              	 .thumb_func
 183              	XMC_CAN_NODE_NominalBitTimeConfigure:
 184              	.LFB230:
 190:../Libraries/XMCLib/src/xmc_can.c **** 
 191:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 192:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 193:../Libraries/XMCLib/src/xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 194:../Libraries/XMCLib/src/xmc_can.c **** {
 185              	 .loc 1 194 0
 186              	 .cfi_startproc
 187              	 
 188              	 
 189              	.LVL20:
 190              	.LBB35:
 195:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 196:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 197:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 198:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 199:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 200:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 201:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 202:../Libraries/XMCLib/src/xmc_can.c **** 
 203:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 204:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 205:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 206:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 207:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 208:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 209:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 210:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 211:../Libraries/XMCLib/src/xmc_can.c ****        
 212:../Libraries/XMCLib/src/xmc_can.c ****   /*
 213:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 214:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 215:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 216:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 217:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 218:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 219:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 220:../Libraries/XMCLib/src/xmc_can.c ****    *
 221:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 222:../Libraries/XMCLib/src/xmc_can.c ****    *
 223:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 224:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 225:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 226:../Libraries/XMCLib/src/xmc_can.c ****    */
 227:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 228:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 229:../Libraries/XMCLib/src/xmc_can.c ****   {
 230:../Libraries/XMCLib/src/xmc_can.c **** 
 231:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 191              	 .loc 1 231 0
 192 0000 0B68     	 ldr r3,[r1]
 193              	.LBE35:
 194:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 194              	 .loc 1 194 0
 195 0002 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
 196              	.LCFI1:
 197              	 .cfi_def_cfa_offset 28
 198              	 .cfi_offset 4,-28
 199              	 .cfi_offset 5,-24
 200              	 .cfi_offset 6,-20
 201              	 .cfi_offset 7,-16
 202              	 .cfi_offset 8,-12
 203              	 .cfi_offset 9,-8
 204              	 .cfi_offset 14,-4
 205              	.LBB36:
 206              	 .loc 1 231 0
 207 0006 4FF00A08 	 mov r8,#10
 208 000a 08FB03F8 	 mul r8,r8,r3
 232:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 209              	 .loc 1 232 0
 210 000e D1F804E0 	 ldr lr,[r1,#4]
 211              	.LBE36:
 200:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 212              	 .loc 1 200 0
 213 0012 0023     	 movs r3,#0
 201:../Libraries/XMCLib/src/xmc_can.c **** 
 214              	 .loc 1 201 0
 215 0014 42F21079 	 movw r9,#10000
 197:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 216              	 .loc 1 197 0
 217 0018 1E46     	 mov r6,r3
 228:../Libraries/XMCLib/src/xmc_can.c ****   {
 218              	 .loc 1 228 0
 219 001a 0127     	 movs r7,#1
 220              	.LVL21:
 221              	.L22:
 222              	.LBB37:
 233:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 234:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 235:../Libraries/XMCLib/src/xmc_can.c **** 
 236:../Libraries/XMCLib/src/xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 223              	 .loc 1 236 0
 224 001c 0A22     	 movs r2,#10
 231:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 225              	 .loc 1 231 0
 226 001e B8FBF7F4 	 udiv r4,r8,r7
 227              	.LVL22:
 232:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 228              	 .loc 1 232 0
 229 0022 B4FBFEFC 	 udiv ip,r4,lr
 230              	.LVL23:
 231              	 .loc 1 236 0
 232 0026 BCFBF2F5 	 udiv r5,ip,r2
 233 002a 02FB15CC 	 mls ip,r2,r5,ip
 234              	.LVL24:
 235 002e BCF1050F 	 cmp ip,#5
 236 0032 9446     	 mov ip,r2
 237 0034 01D9     	 bls .L14
 238              	.LVL25:
 237:../Libraries/XMCLib/src/xmc_can.c ****   {
 238:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 239:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud++;
 239              	 .loc 1 239 0
 240 0036 0135     	 adds r5,r5,#1
 241              	.LVL26:
 242 0038 00E0     	 b .L15
 243              	.LVL27:
 244              	.L14:
 240:../Libraries/XMCLib/src/xmc_can.c ****   }
 241:../Libraries/XMCLib/src/xmc_can.c ****   else
 242:../Libraries/XMCLib/src/xmc_can.c ****   {
 243:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 244:../Libraries/XMCLib/src/xmc_can.c ****   }
 245:../Libraries/XMCLib/src/xmc_can.c **** 
 246:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_tbaud > 0U)
 245              	 .loc 1 246 0
 246 003a 25B1     	 cbz r5,.L16
 247              	.L15:
 247:../Libraries/XMCLib/src/xmc_can.c ****   {
 248:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 248              	 .loc 1 248 0
 249 003c 0CFB05F2 	 mul r2,ip,r5
 250 0040 B4FBF2F2 	 udiv r2,r4,r2
 251              	.LVL28:
 252 0044 02E0     	 b .L17
 253              	.LVL29:
 254              	.L16:
 249:../Libraries/XMCLib/src/xmc_can.c ****   }
 250:../Libraries/XMCLib/src/xmc_can.c ****   else
 251:../Libraries/XMCLib/src/xmc_can.c ****   {
 252:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 253:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 255              	 .loc 1 253 0
 256 0046 0125     	 movs r5,#1
 257              	.LVL30:
 252:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 258              	 .loc 1 252 0
 259 0048 B4FBF2F2 	 udiv r2,r4,r2
 260              	.LVL31:
 261              	.L17:
 254:../Libraries/XMCLib/src/xmc_can.c ****   }
 255:../Libraries/XMCLib/src/xmc_can.c **** 
 256:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 262              	 .loc 1 256 0
 263 004c 7245     	 cmp r2,lr
 257:../Libraries/XMCLib/src/xmc_can.c ****   {
 258:../Libraries/XMCLib/src/xmc_can.c ****   error = temp_baudrate - can_bit_time->baudrate;
 264              	 .loc 1 258 0
 265 004e 2CBF     	 ite cs
 266 0050 CEEB0202 	 rsbcs r2,lr,r2
 267              	.LVL32:
 259:../Libraries/XMCLib/src/xmc_can.c ****   }
 260:../Libraries/XMCLib/src/xmc_can.c ****   else
 261:../Libraries/XMCLib/src/xmc_can.c ****   {
 262:../Libraries/XMCLib/src/xmc_can.c ****   error = can_bit_time->baudrate - temp_baudrate;
 268              	 .loc 1 262 0
 269 0054 C2EB0E02 	 rsbcc r2,r2,lr
 270              	.LVL33:
 263:../Libraries/XMCLib/src/xmc_can.c ****   }
 264:../Libraries/XMCLib/src/xmc_can.c **** 
 265:../Libraries/XMCLib/src/xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 271              	 .loc 1 265 0
 272 0058 142D     	 cmp r5,#20
 273 005a 07D8     	 bhi .L20
 274              	 .loc 1 265 0 is_stmt 0 discriminator 1
 275 005c 9145     	 cmp r9,r2
 276 005e 05D9     	 bls .L20
 277              	.LVL34:
 266:../Libraries/XMCLib/src/xmc_can.c ****   {
 267:../Libraries/XMCLib/src/xmc_can.c ****     best_brp = temp_brp;
 268:../Libraries/XMCLib/src/xmc_can.c ****     best_tbaud = temp_tbaud;
 269:../Libraries/XMCLib/src/xmc_can.c ****     best_error = (error);
 270:../Libraries/XMCLib/src/xmc_can.c **** 
 271:../Libraries/XMCLib/src/xmc_can.c ****     if (error < 1000U)
 278              	 .loc 1 271 0 is_stmt 1
 279 0060 B2F57A7F 	 cmp r2,#1000
 280 0064 06D3     	 bcc .L27
 281 0066 9146     	 mov r9,r2
 282 0068 2B46     	 mov r3,r5
 283 006a 3E46     	 mov r6,r7
 284              	.LVL35:
 285              	.L20:
 286              	.LBE37:
 228:../Libraries/XMCLib/src/xmc_can.c ****   {
 287              	 .loc 1 228 0 discriminator 2
 288 006c 0137     	 adds r7,r7,#1
 289              	.LVL36:
 290 006e 412F     	 cmp r7,#65
 291 0070 D4D1     	 bne .L22
 292 0072 01E0     	 b .L21
 293              	.LVL37:
 294              	.L27:
 295 0074 2B46     	 mov r3,r5
 296 0076 3E46     	 mov r6,r7
 297              	.LVL38:
 298              	.L21:
 299              	.LBB38:
 272:../Libraries/XMCLib/src/xmc_can.c ****     {
 273:../Libraries/XMCLib/src/xmc_can.c ****       break;
 274:../Libraries/XMCLib/src/xmc_can.c ****     }
 275:../Libraries/XMCLib/src/xmc_can.c ****    }
 276:../Libraries/XMCLib/src/xmc_can.c ****   }
 277:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 278:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 279:../Libraries/XMCLib/src/xmc_can.c **** 
 280:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 281:../Libraries/XMCLib/src/xmc_can.c ****   {
 282:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 283:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t error;
 284:../Libraries/XMCLib/src/xmc_can.c ****   if (tempSamplePoint >= can_bit_time->sample_point)
 300              	 .loc 1 284 0
 301 0078 0F89     	 ldrh r7,[r1,#8]
 302              	.LVL39:
 303              	.LBE38:
 278:../Libraries/XMCLib/src/xmc_can.c **** 
 304              	 .loc 1 278 0
 305 007a 42F2107E 	 movw lr,#10000
 198:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 306              	 .loc 1 198 0
 307 007e 0124     	 movs r4,#1
 308              	.LVL40:
 280:../Libraries/XMCLib/src/xmc_can.c ****   {
 309              	 .loc 1 280 0
 310 0080 4025     	 movs r5,#64
 311              	.LVL41:
 312              	.L26:
 313 0082 42F21072 	 movw r2,#10000
 314 0086 05FB0222 	 mla r2,r5,r2,r2
 315              	.LBB39:
 282:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t error;
 316              	 .loc 1 282 0
 317 008a B2FBF3F2 	 udiv r2,r2,r3
 318              	.LVL42:
 319              	 .loc 1 284 0
 320 008e BA42     	 cmp r2,r7
 321 0090 05D3     	 bcc .L23
 285:../Libraries/XMCLib/src/xmc_can.c ****   {
 286:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 322              	 .loc 1 286 0
 323 0092 D21B     	 subs r2,r2,r7
 324              	.LVL43:
 287:../Libraries/XMCLib/src/xmc_can.c ****   }
 288:../Libraries/XMCLib/src/xmc_can.c ****   else
 289:../Libraries/XMCLib/src/xmc_can.c ****   {
 290:../Libraries/XMCLib/src/xmc_can.c ****     error = can_bit_time->sample_point  - tempSamplePoint;
 291:../Libraries/XMCLib/src/xmc_can.c ****   }
 292:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 325              	 .loc 1 292 0
 326 0094 9645     	 cmp lr,r2
 327 0096 07D9     	 bls .L24
 328 0098 9646     	 mov lr,r2
 329              	.LVL44:
 330 009a 2C46     	 mov r4,r5
 331 009c 04E0     	 b .L24
 332              	.LVL45:
 333              	.L23:
 290:../Libraries/XMCLib/src/xmc_can.c ****   }
 334              	 .loc 1 290 0
 335 009e BA1A     	 subs r2,r7,r2
 336              	.LVL46:
 337              	 .loc 1 292 0
 338 00a0 9645     	 cmp lr,r2
 339 00a2 88BF     	 it hi
 340 00a4 2C46     	 movhi r4,r5
 341 00a6 02E0     	 b .L25
 342              	.LVL47:
 343              	.L24:
 344              	.LBE39:
 280:../Libraries/XMCLib/src/xmc_can.c ****   {
 345              	 .loc 1 280 0 discriminator 2
 346 00a8 013D     	 subs r5,r5,#1
 347              	.LVL48:
 348 00aa 022D     	 cmp r5,#2
 349 00ac E9D1     	 bne .L26
 350              	.LVL49:
 351              	.L25:
 352              	.LBB40:
 353              	.LBB41:
1274:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 354              	 .loc 2 1274 0
 355 00ae 0268     	 ldr r2,[r0]
 356              	.LVL50:
 357 00b0 42F04002 	 orr r2,r2,#64
 358 00b4 0260     	 str r2,[r0]
 359              	.LBE41:
 360              	.LBE40:
 293:../Libraries/XMCLib/src/xmc_can.c ****     {
 294:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 295:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 296:../Libraries/XMCLib/src/xmc_can.c ****     }
 297:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 298:../Libraries/XMCLib/src/xmc_can.c ****     {
 299:../Libraries/XMCLib/src/xmc_can.c ****       break;
 300:../Libraries/XMCLib/src/xmc_can.c ****     }
 301:../Libraries/XMCLib/src/xmc_can.c ****   }
 302:../Libraries/XMCLib/src/xmc_can.c **** 
 303:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 304:../Libraries/XMCLib/src/xmc_can.c **** 
 305:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 306:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 307:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 308:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 361              	 .loc 1 308 0
 362 00b6 4A89     	 ldrh r2,[r1,#10]
 363 00b8 013A     	 subs r2,r2,#1
 309:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 310:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 364              	 .loc 1 310 0
 365 00ba 013E     	 subs r6,r6,#1
 366              	.LVL51:
 308:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 367              	 .loc 1 308 0
 368 00bc 9201     	 lsls r2,r2,#6
 309:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 369              	 .loc 1 309 0
 370 00be 611E     	 subs r1,r4,#1
 371              	.LVL52:
 372              	 .loc 1 310 0
 373 00c0 06F03F06 	 and r6,r6,#63
 374              	.LVL53:
 308:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 375              	 .loc 1 308 0
 376 00c4 D2B2     	 uxtb r2,r2
 309:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 377              	 .loc 1 309 0
 378 00c6 0902     	 lsls r1,r1,#8
 379 00c8 3243     	 orrs r2,r2,r6
 380 00ca 01F47061 	 and r1,r1,#3840
 381 00ce 1143     	 orrs r1,r1,r2
 382 00d0 9A1E     	 subs r2,r3,#2
 307:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 383              	 .loc 1 307 0
 384 00d2 131B     	 subs r3,r2,r4
 385              	.LVL54:
 386 00d4 1B03     	 lsls r3,r3,#12
 387 00d6 03F4E043 	 and r3,r3,#28672
 388              	 .loc 1 310 0
 389 00da 0B43     	 orrs r3,r3,r1
 307:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 390              	 .loc 1 307 0
 391 00dc 0361     	 str r3,[r0,#16]
 392              	.LVL55:
 393              	.LBB42:
 394              	.LBB43:
 395              	 .loc 2 1294 0
 396 00de 0368     	 ldr r3,[r0]
 397 00e0 23F04003 	 bic r3,r3,#64
 398 00e4 0360     	 str r3,[r0]
 399 00e6 BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 400              	.LBE43:
 401              	.LBE42:
 402              	 .cfi_endproc
 403              	.LFE230:
 405              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 406              	 .align 1
 407              	 .global XMC_CAN_AllocateMOtoNodeList
 408              	 .thumb
 409              	 .thumb_func
 411              	XMC_CAN_AllocateMOtoNodeList:
 412              	.LFB231:
 311:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 312:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 313:../Libraries/XMCLib/src/xmc_can.c **** }
 314:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 315:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 316:../Libraries/XMCLib/src/xmc_can.c **** {
 413              	 .loc 1 316 0
 414              	 .cfi_startproc
 415              	 
 416              	 
 417              	 
 418              	.LVL56:
 419              	.L32:
 420              	.LBB48:
 421              	.LBB49:
 671:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 422              	 .loc 2 671 0 discriminator 1
 423 0000 D0F8C431 	 ldr r3,[r0,#452]
 424              	.LBE49:
 425              	.LBE48:
 317:../Libraries/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 318:../Libraries/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 426              	 .loc 1 318 0 discriminator 1
 427 0004 13F4407F 	 tst r3,#768
 428 0008 FAD1     	 bne .L32
 429              	.LVL57:
 430              	.LBB50:
 431              	.LBB51:
 703:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 432              	 .loc 2 703 0
 433 000a 1204     	 lsls r2,r2,#16
 434              	.LVL58:
 702:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 435              	 .loc 2 702 0
 436 000c 42F00202 	 orr r2,r2,#2
 437              	.LBE51:
 438              	.LBE50:
 319:../Libraries/XMCLib/src/xmc_can.c ****   {
 320:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 321:../Libraries/XMCLib/src/xmc_can.c ****   };
 322:../Libraries/XMCLib/src/xmc_can.c **** 
 323:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 324:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 439              	 .loc 1 324 0
 440 0010 0131     	 adds r1,r1,#1
 441              	.LVL59:
 442              	.LBB53:
 443              	.LBB52:
 703:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 444              	 .loc 2 703 0
 445 0012 42EA0161 	 orr r1,r2,r1,lsl#24
 702:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 446              	 .loc 2 702 0
 447 0016 C0F8C411 	 str r1,[r0,#452]
 448 001a 7047     	 bx lr
 449              	.LBE52:
 450              	.LBE53:
 451              	 .cfi_endproc
 452              	.LFE231:
 454              	 .section .text.XMC_CAN_Disable,"ax",%progbits
 455              	 .align 1
 456              	 .global XMC_CAN_Disable
 457              	 .thumb
 458              	 .thumb_func
 460              	XMC_CAN_Disable:
 461              	.LFB232:
 325:../Libraries/XMCLib/src/xmc_can.c **** }
 326:../Libraries/XMCLib/src/xmc_can.c **** 
 327:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 328:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 329:../Libraries/XMCLib/src/xmc_can.c **** {
 462              	 .loc 1 329 0
 463              	 .cfi_startproc
 464              	 
 465              	 
 466              	 
 467              	.LVL60:
 330:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 331:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 468              	 .loc 1 331 0
 469 0000 0123     	 movs r3,#1
 470 0002 0360     	 str r3,[r0]
 332:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 333:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 471              	 .loc 1 333 0
 472 0004 0148     	 ldr r0,.L35
 473              	.LVL61:
 474 0006 FFF7FEBF 	 b XMC_SCU_RESET_AssertPeripheralReset
 475              	.LVL62:
 476              	.L36:
 477 000a 00BF     	 .align 2
 478              	.L35:
 479 000c 10000010 	 .word 268435472
 480              	 .cfi_endproc
 481              	.LFE232:
 483              	 .section .text.XMC_CAN_Enable,"ax",%progbits
 484              	 .align 1
 485              	 .global XMC_CAN_Enable
 486              	 .thumb
 487              	 .thumb_func
 489              	XMC_CAN_Enable:
 490              	.LFB233:
 334:../Libraries/XMCLib/src/xmc_can.c **** #endif
 335:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 336:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 337:../Libraries/XMCLib/src/xmc_can.c **** #endif
 338:../Libraries/XMCLib/src/xmc_can.c **** }
 339:../Libraries/XMCLib/src/xmc_can.c **** 
 340:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 341:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 342:../Libraries/XMCLib/src/xmc_can.c **** {
 491              	 .loc 1 342 0
 492              	 .cfi_startproc
 493              	 
 494              	 
 495              	.LVL63:
 496 0000 10B5     	 push {r4,lr}
 497              	.LCFI2:
 498              	 .cfi_def_cfa_offset 8
 499              	 .cfi_offset 4,-8
 500              	 .cfi_offset 14,-4
 501              	 .loc 1 342 0
 502 0002 0446     	 mov r4,r0
 343:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 344:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 345:../Libraries/XMCLib/src/xmc_can.c **** #endif
 346:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 347:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 503              	 .loc 1 347 0
 504 0004 0548     	 ldr r0,.L40
 505              	.LVL64:
 506 0006 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 507              	.LVL65:
 348:../Libraries/XMCLib/src/xmc_can.c **** #endif
 349:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 350:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 508              	 .loc 1 350 0
 509 000a 2368     	 ldr r3,[r4]
 510 000c 23F00103 	 bic r3,r3,#1
 511 0010 2360     	 str r3,[r4]
 512              	.L38:
 351:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 513              	 .loc 1 351 0 discriminator 1
 514 0012 2368     	 ldr r3,[r4]
 515 0014 9B07     	 lsls r3,r3,#30
 516 0016 FCD4     	 bmi .L38
 352:../Libraries/XMCLib/src/xmc_can.c ****   {
 353:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 354:../Libraries/XMCLib/src/xmc_can.c ****   };
 355:../Libraries/XMCLib/src/xmc_can.c **** }
 517              	 .loc 1 355 0
 518 0018 10BD     	 pop {r4,pc}
 519              	.LVL66:
 520              	.L41:
 521 001a 00BF     	 .align 2
 522              	.L40:
 523 001c 10000010 	 .word 268435472
 524              	 .cfi_endproc
 525              	.LFE233:
 527              	 .section .text.XMC_CAN_Init,"ax",%progbits
 528              	 .align 1
 529              	 .global XMC_CAN_Init
 530              	 .thumb
 531              	 .thumb_func
 533              	XMC_CAN_Init:
 534              	.LFB234:
 356:../Libraries/XMCLib/src/xmc_can.c **** 
 357:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 358:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 359:../Libraries/XMCLib/src/xmc_can.c **** {
 360:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 361:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 362:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 363:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 364:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 365:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 366:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 367:../Libraries/XMCLib/src/xmc_can.c **** 
 368:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 369:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 370:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 371:../Libraries/XMCLib/src/xmc_can.c **** 
 372:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 373:../Libraries/XMCLib/src/xmc_can.c **** 
 374:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 375:../Libraries/XMCLib/src/xmc_can.c **** 
 376:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 377:../Libraries/XMCLib/src/xmc_can.c **** 
 378:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 379:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 380:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 381:../Libraries/XMCLib/src/xmc_can.c **** 
 382:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 383:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 384:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 385:../Libraries/XMCLib/src/xmc_can.c **** 
 386:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 387:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 388:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 389:../Libraries/XMCLib/src/xmc_can.c **** 
 390:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 391:../Libraries/XMCLib/src/xmc_can.c **** 
 392:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 393:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 394:../Libraries/XMCLib/src/xmc_can.c **** 
 395:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 396:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 397:../Libraries/XMCLib/src/xmc_can.c **** 
 398:../Libraries/XMCLib/src/xmc_can.c **** }
 399:../Libraries/XMCLib/src/xmc_can.c **** 
 400:../Libraries/XMCLib/src/xmc_can.c **** #else
 401:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 402:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 403:../Libraries/XMCLib/src/xmc_can.c **** {
 535              	 .loc 1 403 0
 536              	 .cfi_startproc
 537              	 
 538              	 
 539              	.LVL67:
 540 0000 70B5     	 push {r4,r5,r6,lr}
 541              	.LCFI3:
 542              	 .cfi_def_cfa_offset 16
 543              	 .cfi_offset 4,-16
 544              	 .cfi_offset 5,-12
 545              	 .cfi_offset 6,-8
 546              	 .cfi_offset 14,-4
 547              	 .loc 1 403 0
 548 0002 0E46     	 mov r6,r1
 549 0004 0546     	 mov r5,r0
 404:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 405:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 406:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 407:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 408:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 409:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 410:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 411:../Libraries/XMCLib/src/xmc_can.c **** 
 412:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 550              	 .loc 1 412 0
 551 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 552              	.LVL68:
 553 000a 0446     	 mov r4,r0
 554              	.LVL69:
 413:../Libraries/XMCLib/src/xmc_can.c **** 
 414:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 415:../Libraries/XMCLib/src/xmc_can.c **** 
 416:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 417:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 555              	 .loc 1 417 0
 556 000c 2846     	 mov r0,r5
 557              	.LVL70:
 558 000e FFF7FEFF 	 bl XMC_CAN_Enable
 559              	.LVL71:
 418:../Libraries/XMCLib/src/xmc_can.c **** 
 419:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 420:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 560              	 .loc 1 420 0
 561 0012 B4FBF6F2 	 udiv r2,r4,r6
 562 0016 C2F58062 	 rsb r2,r2,#1024
 563              	.LVL72:
 564              	.LBB54:
 565              	.LBB55:
  90:../Libraries/XMCLib/src/xmc_can.c **** }
 566              	 .loc 1 90 0
 567 001a 002A     	 cmp r2,#0
 568              	.LBE55:
 569              	.LBE54:
 570              	.LBB57:
 571              	.LBB58:
  95:../Libraries/XMCLib/src/xmc_can.c **** }
 572              	 .loc 1 95 0
 573 001c 40F2FF31 	 movw r1,#1023
 574              	.LBE58:
 575              	.LBE57:
 576              	.LBB61:
 577              	.LBB56:
  90:../Libraries/XMCLib/src/xmc_can.c **** }
 578              	 .loc 1 90 0
 579 0020 38BF     	 it cc
 580 0022 0022     	 movcc r2,#0
 581              	.LVL73:
 582              	.LBE56:
 583              	.LBE61:
 584              	.LBB62:
 585              	.LBB59:
  95:../Libraries/XMCLib/src/xmc_can.c **** }
 586              	 .loc 1 95 0
 587 0024 8A42     	 cmp r2,r1
 588              	.LBE59:
 589              	.LBE62:
 421:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 422:../Libraries/XMCLib/src/xmc_can.c **** 
 423:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 424:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 590              	 .loc 1 424 0
 591 0026 4FEA9613 	 lsr r3,r6,#6
 592              	.LBB63:
 593              	.LBB60:
  95:../Libraries/XMCLib/src/xmc_can.c **** }
 594              	 .loc 1 95 0
 595 002a 28BF     	 it cs
 596 002c 0A46     	 movcs r2,r1
 597              	.LVL74:
 598              	.LBE60:
 599              	.LBE63:
 425:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 600              	 .loc 1 425 0
 601 002e A009     	 lsrs r0,r4,#6
 602              	.LVL75:
 426:../Libraries/XMCLib/src/xmc_can.c **** 
 427:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 603              	 .loc 1 427 0
 604 0030 9B02     	 lsls r3,r3,#10
 605              	.LVL76:
 606 0032 B3FBF0F3 	 udiv r3,r3,r0
 607              	.LVL77:
 608              	.LBB64:
 609              	.LBB65:
  95:../Libraries/XMCLib/src/xmc_can.c **** }
 610              	 .loc 1 95 0
 611 0036 8B42     	 cmp r3,r1
 612 0038 28BF     	 it cs
 613 003a 0B46     	 movcs r3,r1
 614              	.LVL78:
 615              	.LBE65:
 616              	.LBE64:
 428:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 617              	 .loc 1 428 0
 618 003c 5843     	 muls r0,r3,r0
 619              	.LVL79:
 620 003e 800A     	 lsrs r0,r0,#10
 621              	.LVL80:
 421:../Libraries/XMCLib/src/xmc_can.c **** 
 622              	 .loc 1 421 0
 623 0040 C2F58061 	 rsb r1,r2,#1024
 624 0044 B4FBF1F4 	 udiv r4,r4,r1
 625              	.LVL81:
 429:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 430:../Libraries/XMCLib/src/xmc_can.c **** 
 431:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 626              	 .loc 1 431 0
 627 0048 A6EB8011 	 sub r1,r6,r0,lsl#6
 628 004c 341B     	 subs r4,r6,r4
 629              	.LVL82:
 432:../Libraries/XMCLib/src/xmc_can.c **** 
 433:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 630              	 .loc 1 433 0
 631 004e 8C42     	 cmp r4,r1
 632 0050 98BF     	 it ls
 633 0052 1346     	 movls r3,r2
 434:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 435:../Libraries/XMCLib/src/xmc_can.c **** 
 436:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 634              	 .loc 1 436 0
 635 0054 EA68     	 ldr r2,[r5,#12]
 636 0056 22F44342 	 bic r2,r2,#49920
 637 005a 22F0FF02 	 bic r2,r2,#255
 638 005e EA60     	 str r2,[r5,#12]
 437:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 639              	 .loc 1 437 0
 640 0060 EA68     	 ldr r2,[r5,#12]
 433:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 641              	 .loc 1 433 0
 642 0062 8CBF     	 ite hi
 643 0064 0221     	 movhi r1,#2
 644 0066 0121     	 movls r1,#1
 645              	.LVL83:
 646 0068 1343     	 orrs r3,r3,r2
 647              	 .loc 1 437 0
 648 006a 43EA8133 	 orr r3,r3,r1,lsl#14
 649 006e EB60     	 str r3,[r5,#12]
 650 0070 70BD     	 pop {r4,r5,r6,pc}
 651              	 .cfi_endproc
 652              	.LFE234:
 654              	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 655              	 .align 1
 656              	 .global XMC_CAN_SetBaudrateClockSource
 657              	 .thumb
 658              	 .thumb_func
 660              	XMC_CAN_SetBaudrateClockSource:
 661              	.LFB235:
 438:../Libraries/XMCLib/src/xmc_can.c **** }
 439:../Libraries/XMCLib/src/xmc_can.c **** #endif
 440:../Libraries/XMCLib/src/xmc_can.c **** 
 441:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 442:../Libraries/XMCLib/src/xmc_can.c **** {
 662              	 .loc 1 442 0
 663              	 .cfi_startproc
 664              	 
 665              	 
 666              	 
 667              	.LVL84:
 668 0000 7047     	 bx lr
 669              	 .cfi_endproc
 670              	.LFE235:
 672              	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 673              	 .align 1
 674              	 .global XMC_CAN_GetBaudrateClockSource
 675              	 .thumb
 676              	 .thumb_func
 678              	XMC_CAN_GetBaudrateClockSource:
 679              	.LFB236:
 443:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 444:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 445:../Libraries/XMCLib/src/xmc_can.c **** #else
 446:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 447:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(source);
 448:../Libraries/XMCLib/src/xmc_can.c **** #endif
 449:../Libraries/XMCLib/src/xmc_can.c **** }
 450:../Libraries/XMCLib/src/xmc_can.c **** 
 451:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 452:../Libraries/XMCLib/src/xmc_can.c **** {
 680              	 .loc 1 452 0
 681              	 .cfi_startproc
 682              	 
 683              	 
 684              	 
 685              	.LVL85:
 453:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 454:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 455:../Libraries/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4) 
 456:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 457:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 458:../Libraries/XMCLib/src/xmc_can.c **** #endif    
 459:../Libraries/XMCLib/src/xmc_can.c **** }
 686              	 .loc 1 459 0
 687 0000 0120     	 movs r0,#1
 688              	.LVL86:
 689 0002 7047     	 bx lr
 690              	 .cfi_endproc
 691              	.LFE236:
 693              	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 694              	 .align 1
 695              	 .global XMC_CAN_GetBaudrateClockFrequency
 696              	 .thumb
 697              	 .thumb_func
 699              	XMC_CAN_GetBaudrateClockFrequency:
 700              	.LFB237:
 460:../Libraries/XMCLib/src/xmc_can.c **** 
 461:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 462:../Libraries/XMCLib/src/xmc_can.c **** {
 701              	 .loc 1 462 0
 702              	 .cfi_startproc
 703              	 
 704              	 
 705              	 
 706              	.LVL87:
 463:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency;
 464:../Libraries/XMCLib/src/xmc_can.c **** 
 465:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 466:../Libraries/XMCLib/src/xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 467:../Libraries/XMCLib/src/xmc_can.c ****   {
 468:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 469:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 470:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 471:../Libraries/XMCLib/src/xmc_can.c ****       break;
 472:../Libraries/XMCLib/src/xmc_can.c **** #else
 473:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 474:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 475:../Libraries/XMCLib/src/xmc_can.c ****       break;
 476:../Libraries/XMCLib/src/xmc_can.c **** #endif
 477:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 478:../Libraries/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 479:../Libraries/XMCLib/src/xmc_can.c ****       break;
 480:../Libraries/XMCLib/src/xmc_can.c **** 
 481:../Libraries/XMCLib/src/xmc_can.c ****     default:
 482:../Libraries/XMCLib/src/xmc_can.c ****       frequency = 0;
 483:../Libraries/XMCLib/src/xmc_can.c ****       break;
 484:../Libraries/XMCLib/src/xmc_can.c ****   }
 485:../Libraries/XMCLib/src/xmc_can.c **** #else
 486:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 487:../Libraries/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 707              	 .loc 1 487 0
 708 0000 FFF7FEBF 	 b XMC_SCU_CLOCK_GetPeripheralClockFrequency
 709              	.LVL88:
 710              	 .cfi_endproc
 711              	.LFE237:
 713              	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 714              	 .align 1
 715              	 .global XMC_CAN_InitEx
 716              	 .thumb
 717              	 .thumb_func
 719              	XMC_CAN_InitEx:
 720              	.LFB238:
 488:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 489:../Libraries/XMCLib/src/xmc_can.c **** 
 490:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 491:../Libraries/XMCLib/src/xmc_can.c **** }
 492:../Libraries/XMCLib/src/xmc_can.c **** 
 493:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 494:../Libraries/XMCLib/src/xmc_can.c **** {
 721              	 .loc 1 494 0
 722              	 .cfi_startproc
 723              	 
 724              	 
 725              	.LVL89:
 726 0000 70B5     	 push {r4,r5,r6,lr}
 727              	.LCFI4:
 728              	 .cfi_def_cfa_offset 16
 729              	 .cfi_offset 4,-16
 730              	 .cfi_offset 5,-12
 731              	 .cfi_offset 6,-8
 732              	 .cfi_offset 14,-4
 733              	 .loc 1 494 0
 734 0002 0546     	 mov r5,r0
 735              	.LVL90:
 736 0004 1446     	 mov r4,r2
 737              	.LBB66:
 738              	.LBB67:
 487:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 739              	 .loc 1 487 0
 740 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 741              	.LVL91:
 742 000a 0646     	 mov r6,r0
 743              	.LVL92:
 744              	.LBE67:
 745              	.LBE66:
 495:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 496:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 497:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 498:../Libraries/XMCLib/src/xmc_can.c **** 
 499:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 500:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 501:../Libraries/XMCLib/src/xmc_can.c **** 
 502:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 503:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 746              	 .loc 1 503 0
 747 000c 2846     	 mov r0,r5
 748              	.LVL93:
 749 000e FFF7FEFF 	 bl XMC_CAN_Enable
 750              	.LVL94:
 504:../Libraries/XMCLib/src/xmc_can.c **** 
 505:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 506:../Libraries/XMCLib/src/xmc_can.c **** 
 507:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 508:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 751              	 .loc 1 508 0
 752 0012 B6FBF4F0 	 udiv r0,r6,r4
 753 0016 C0F58060 	 rsb r0,r0,#1024
 754              	.LVL95:
 755              	.LBB68:
 756              	.LBB69:
  90:../Libraries/XMCLib/src/xmc_can.c **** }
 757              	 .loc 1 90 0
 758 001a 0028     	 cmp r0,#0
 759 001c 38BF     	 it cc
 760 001e 0020     	 movcc r0,#0
 761              	.LVL96:
 762              	.LBE69:
 763              	.LBE68:
 764              	.LBB70:
 765              	.LBB71:
  95:../Libraries/XMCLib/src/xmc_can.c **** }
 766              	 .loc 1 95 0
 767 0020 40F2FF33 	 movw r3,#1023
 768 0024 9842     	 cmp r0,r3
 769 0026 28BF     	 it cs
 770 0028 1846     	 movcs r0,r3
 771              	.LVL97:
 772              	.LBE71:
 773              	.LBE70:
 509:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 510:../Libraries/XMCLib/src/xmc_can.c **** 
 511:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 774              	 .loc 1 511 0
 775 002a EB68     	 ldr r3,[r5,#12]
 776 002c 23F44343 	 bic r3,r3,#49920
 777 0030 23F0FF03 	 bic r3,r3,#255
 778 0034 EB60     	 str r3,[r5,#12]
 512:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 779              	 .loc 1 512 0
 780 0036 EB68     	 ldr r3,[r5,#12]
 781 0038 43F48043 	 orr r3,r3,#16384
 782 003c 0343     	 orrs r3,r3,r0
 783 003e EB60     	 str r3,[r5,#12]
 509:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 784              	 .loc 1 509 0
 785 0040 C0F58060 	 rsb r0,r0,#1024
 786              	.LVL98:
 513:../Libraries/XMCLib/src/xmc_can.c **** 
 514:../Libraries/XMCLib/src/xmc_can.c ****   return freq_n;
 515:../Libraries/XMCLib/src/xmc_can.c **** }
 787              	 .loc 1 515 0
 788 0044 B6FBF0F0 	 udiv r0,r6,r0
 789              	.LVL99:
 790 0048 70BD     	 pop {r4,r5,r6,pc}
 791              	 .cfi_endproc
 792              	.LFE238:
 794              	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 795              	 .align 1
 796              	 .global XMC_CAN_MO_SetIdentifier
 797              	 .thumb
 798              	 .thumb_func
 800              	XMC_CAN_MO_SetIdentifier:
 801              	.LFB239:
 516:../Libraries/XMCLib/src/xmc_can.c **** 
 517:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 518:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 519:../Libraries/XMCLib/src/xmc_can.c **** {
 802              	 .loc 1 519 0
 803              	 .cfi_startproc
 804              	 
 805              	 
 806              	.LVL100:
 520:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 807              	 .loc 1 520 0
 808 0000 0368     	 ldr r3,[r0]
 809 0002 9A69     	 ldr r2,[r3,#24]
 810 0004 9200     	 lsls r2,r2,#2
 519:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 811              	 .loc 1 519 0
 812 0006 10B5     	 push {r4,lr}
 813              	.LCFI5:
 814              	 .cfi_def_cfa_offset 8
 815              	 .cfi_offset 4,-8
 816              	 .cfi_offset 14,-4
 521:../Libraries/XMCLib/src/xmc_can.c ****   {
 522:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 817              	 .loc 1 522 0
 818 0008 57BF     	 itett pl
 819 000a 9A69     	 ldrpl r2,[r3,#24]
 523:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 524:../Libraries/XMCLib/src/xmc_can.c ****   }
 525:../Libraries/XMCLib/src/xmc_can.c ****   else
 526:../Libraries/XMCLib/src/xmc_can.c ****   {
 527:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 820              	 .loc 1 527 0
 821 000c 9C69     	 ldrmi r4,[r3,#24]
 523:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 822              	 .loc 1 523 0
 823 000e 8C04     	 lslpl r4,r1,#18
 824 0010 24F06044 	 bicpl r4,r4,#-536870912
 522:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 825              	 .loc 1 522 0
 826 0014 52BF     	 itee pl
 827 0016 02F06042 	 andpl r2,r2,#-536870912
 528:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 828              	 .loc 1 528 0
 829 001a 21F06042 	 bicmi r2,r1,#-536870912
 527:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 830              	 .loc 1 527 0
 831 001e 04F06044 	 andmi r4,r4,#-536870912
 832 0022 2243     	 orrs r2,r2,r4
 833 0024 9A61     	 str r2,[r3,#24]
 529:../Libraries/XMCLib/src/xmc_can.c ****   }
 530:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 834              	 .loc 1 530 0
 835 0026 4368     	 ldr r3,[r0,#4]
 836 0028 61F31C03 	 bfi r3,r1,#0,#29
 837 002c 4360     	 str r3,[r0,#4]
 838 002e 10BD     	 pop {r4,pc}
 839              	 .cfi_endproc
 840              	.LFE239:
 842              	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 843              	 .align 1
 844              	 .global XMC_CAN_MO_GetIdentifier
 845              	 .thumb
 846              	 .thumb_func
 848              	XMC_CAN_MO_GetIdentifier:
 849              	.LFB240:
 531:../Libraries/XMCLib/src/xmc_can.c **** }
 532:../Libraries/XMCLib/src/xmc_can.c **** 
 533:../Libraries/XMCLib/src/xmc_can.c **** 
 534:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 535:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 536:../Libraries/XMCLib/src/xmc_can.c **** {
 850              	 .loc 1 536 0
 851              	 .cfi_startproc
 852              	 
 853              	 
 854              	 
 855              	.LVL101:
 537:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 538:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 856              	 .loc 1 538 0
 857 0000 0368     	 ldr r3,[r0]
 858 0002 9A69     	 ldr r2,[r3,#24]
 539:../Libraries/XMCLib/src/xmc_can.c ****   {
 540:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STD
 859              	 .loc 1 540 0
 860 0004 9869     	 ldr r0,[r3,#24]
 861              	.LVL102:
 538:../Libraries/XMCLib/src/xmc_can.c ****   {
 862              	 .loc 1 538 0
 863 0006 9300     	 lsls r3,r2,#2
 864              	 .loc 1 540 0
 865 0008 54BF     	 ite pl
 866 000a C0F38A40 	 ubfxpl r0,r0,#18,#11
 867              	.LVL103:
 541:../Libraries/XMCLib/src/xmc_can.c ****   }
 542:../Libraries/XMCLib/src/xmc_can.c ****   else
 543:../Libraries/XMCLib/src/xmc_can.c ****   {
 544:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 868              	 .loc 1 544 0
 869 000e 20F06040 	 bicmi r0,r0,#-536870912
 870              	.LVL104:
 545:../Libraries/XMCLib/src/xmc_can.c ****   }
 546:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 547:../Libraries/XMCLib/src/xmc_can.c **** }
 871              	 .loc 1 547 0
 872 0012 7047     	 bx lr
 873              	 .cfi_endproc
 874              	.LFE240:
 876              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 877              	 .align 1
 878              	 .global XMC_CAN_MO_GetAcceptanceMask
 879              	 .thumb
 880              	 .thumb_func
 882              	XMC_CAN_MO_GetAcceptanceMask:
 883              	.LFB241:
 548:../Libraries/XMCLib/src/xmc_can.c **** 
 549:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 550:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 551:../Libraries/XMCLib/src/xmc_can.c **** {
 884              	 .loc 1 551 0
 885              	 .cfi_startproc
 886              	 
 887              	 
 888              	 
 889              	.LVL105:
 552:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 553:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 890              	 .loc 1 553 0
 891 0000 0368     	 ldr r3,[r0]
 892 0002 DA68     	 ldr r2,[r3,#12]
 893 0004 9100     	 lsls r1,r2,#2
 894 0006 06D4     	 bmi .L57
 554:../Libraries/XMCLib/src/xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 895              	 .loc 1 554 0
 896 0008 9A69     	 ldr r2,[r3,#24]
 897 000a 9200     	 lsls r2,r2,#2
 898 000c 03D4     	 bmi .L57
 555:../Libraries/XMCLib/src/xmc_can.c ****   {
 556:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 899              	 .loc 1 556 0
 900 000e D868     	 ldr r0,[r3,#12]
 901              	.LVL106:
 902 0010 C0F38A40 	 ubfx r0,r0,#18,#11
 903              	.LVL107:
 904 0014 7047     	 bx lr
 905              	.LVL108:
 906              	.L57:
 557:../Libraries/XMCLib/src/xmc_can.c ****   }
 558:../Libraries/XMCLib/src/xmc_can.c ****   else
 559:../Libraries/XMCLib/src/xmc_can.c ****   {
 560:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 907              	 .loc 1 560 0
 908 0016 D868     	 ldr r0,[r3,#12]
 909              	.LVL109:
 910 0018 20F06040 	 bic r0,r0,#-536870912
 911              	.LVL110:
 561:../Libraries/XMCLib/src/xmc_can.c ****   }
 562:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 563:../Libraries/XMCLib/src/xmc_can.c **** }
 912              	 .loc 1 563 0
 913 001c 7047     	 bx lr
 914              	 .cfi_endproc
 915              	.LFE241:
 917              	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 918              	 .align 1
 919              	 .global XMC_CAN_MO_SetAcceptanceMask
 920              	 .thumb
 921              	 .thumb_func
 923              	XMC_CAN_MO_SetAcceptanceMask:
 924              	.LFB242:
 564:../Libraries/XMCLib/src/xmc_can.c **** 
 565:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask of the MO */
 566:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 567:../Libraries/XMCLib/src/xmc_can.c **** {
 925              	 .loc 1 567 0
 926              	 .cfi_startproc
 927              	 
 928              	 
 929              	.LVL111:
 568:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 930              	 .loc 1 568 0
 931 0000 0368     	 ldr r3,[r0]
 932 0002 DA68     	 ldr r2,[r3,#12]
 567:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 933              	 .loc 1 567 0
 934 0004 10B5     	 push {r4,lr}
 935              	.LCFI6:
 936              	 .cfi_def_cfa_offset 8
 937              	 .cfi_offset 4,-8
 938              	 .cfi_offset 14,-4
 939              	 .loc 1 568 0
 940 0006 9400     	 lsls r4,r2,#2
 941 0008 08D4     	 bmi .L60
 569:../Libraries/XMCLib/src/xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 942              	 .loc 1 569 0
 943 000a 9A69     	 ldr r2,[r3,#24]
 944 000c 9200     	 lsls r2,r2,#2
 945 000e 05D4     	 bmi .L60
 570:../Libraries/XMCLib/src/xmc_can.c ****   {
 571:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 946              	 .loc 1 571 0
 947 0010 DA68     	 ldr r2,[r3,#12]
 948 0012 02F06042 	 and r2,r2,#-536870912
 949 0016 42EA8142 	 orr r2,r2,r1,lsl#18
 950 001a 05E0     	 b .L62
 951              	.L60:
 572:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 573:../Libraries/XMCLib/src/xmc_can.c ****   }
 574:../Libraries/XMCLib/src/xmc_can.c ****   else
 575:../Libraries/XMCLib/src/xmc_can.c ****   {
 576:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 952              	 .loc 1 576 0
 953 001c DC68     	 ldr r4,[r3,#12]
 577:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 954              	 .loc 1 577 0
 955 001e 21F06042 	 bic r2,r1,#-536870912
 576:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 956              	 .loc 1 576 0
 957 0022 04F06044 	 and r4,r4,#-536870912
 958 0026 2243     	 orrs r2,r2,r4
 959              	.L62:
 960 0028 DA60     	 str r2,[r3,#12]
 578:../Libraries/XMCLib/src/xmc_can.c ****   }
 579:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 961              	 .loc 1 579 0
 962 002a 8368     	 ldr r3,[r0,#8]
 963 002c 61F31C03 	 bfi r3,r1,#0,#29
 964 0030 8360     	 str r3,[r0,#8]
 965 0032 10BD     	 pop {r4,pc}
 966              	 .cfi_endproc
 967              	.LFE242:
 969              	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 970              	 .align 1
 971              	 .global XMC_CAN_MO_UpdateData
 972              	 .thumb
 973              	 .thumb_func
 975              	XMC_CAN_MO_UpdateData:
 976              	.LFB244:
 580:../Libraries/XMCLib/src/xmc_can.c **** }
 581:../Libraries/XMCLib/src/xmc_can.c **** 
 582:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 583:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 584:../Libraries/XMCLib/src/xmc_can.c **** {
 585:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 586:../Libraries/XMCLib/src/xmc_can.c ****   
 587:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 588:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 589:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 590:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 591:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 592:../Libraries/XMCLib/src/xmc_can.c ****   
 593:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 594:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 595:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 596:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 597:../Libraries/XMCLib/src/xmc_can.c ****   {
 598:../Libraries/XMCLib/src/xmc_can.c ****     ; /*Do nothing*/
 599:../Libraries/XMCLib/src/xmc_can.c ****   }
 600:../Libraries/XMCLib/src/xmc_can.c ****   else
 601:../Libraries/XMCLib/src/xmc_can.c ****   {
 602:../Libraries/XMCLib/src/xmc_can.c **** 
 603:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 604:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 605:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 606:../Libraries/XMCLib/src/xmc_can.c ****     {
 607:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 608:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 609:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 610:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 611:../Libraries/XMCLib/src/xmc_can.c **** 
 612:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 613:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 614:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 615:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 616:../Libraries/XMCLib/src/xmc_can.c ****     }
 617:../Libraries/XMCLib/src/xmc_can.c ****     else
 618:../Libraries/XMCLib/src/xmc_can.c ****     {
 619:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 620:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 621:../Libraries/XMCLib/src/xmc_can.c ****     }
 622:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 623:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 624:../Libraries/XMCLib/src/xmc_can.c ****     {
 625:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 626:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 627:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 628:../Libraries/XMCLib/src/xmc_can.c **** 
 629:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 630:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 631:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 632:../Libraries/XMCLib/src/xmc_can.c ****     }
 633:../Libraries/XMCLib/src/xmc_can.c ****     else
 634:../Libraries/XMCLib/src/xmc_can.c ****     {
 635:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 636:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 637:../Libraries/XMCLib/src/xmc_can.c **** 
 638:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 639:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 640:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 641:../Libraries/XMCLib/src/xmc_can.c ****     }
 642:../Libraries/XMCLib/src/xmc_can.c **** 
 643:../Libraries/XMCLib/src/xmc_can.c ****   }
 644:../Libraries/XMCLib/src/xmc_can.c **** }
 645:../Libraries/XMCLib/src/xmc_can.c **** 
 646:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 647:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 648:../Libraries/XMCLib/src/xmc_can.c **** {
 977              	 .loc 1 648 0
 978              	 .cfi_startproc
 979              	 
 980              	 
 981              	 
 982              	.LVL112:
 649:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 650:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 651:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 983              	 .loc 1 651 0
 984 0000 037E     	 ldrb r3,[r0,#24]
 985 0002 012B     	 cmp r3,#1
 986 0004 14D1     	 bne .L65
 987              	.LVL113:
 988              	.LBB74:
 989              	.LBB75:
 652:../Libraries/XMCLib/src/xmc_can.c ****   {
 653:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 990              	 .loc 1 653 0
 991 0006 0368     	 ldr r3,[r0]
 992 0008 2022     	 movs r2,#32
 993 000a DA61     	 str r2,[r3,#28]
 654:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 655:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 994              	 .loc 1 655 0
 995 000c 0368     	 ldr r3,[r0]
 656:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 996              	 .loc 1 656 0
 997 000e 017B     	 ldrb r1,[r0,#12]
 655:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 998              	 .loc 1 655 0
 999 0010 1A68     	 ldr r2,[r3]
 1000              	 .loc 1 656 0
 1001 0012 0906     	 lsls r1,r1,#24
 1002 0014 01F07061 	 and r1,r1,#251658240
 655:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1003              	 .loc 1 655 0
 1004 0018 22F07062 	 bic r2,r2,#251658240
 1005 001c 0A43     	 orrs r2,r2,r1
 1006 001e 1A60     	 str r2,[r3]
 657:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 658:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 1007              	 .loc 1 658 0
 1008 0020 0269     	 ldr r2,[r0,#16]
 1009 0022 1A61     	 str r2,[r3,#16]
 659:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 1010              	 .loc 1 659 0
 1011 0024 4269     	 ldr r2,[r0,#20]
 1012 0026 5A61     	 str r2,[r3,#20]
 660:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 661:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 1013              	 .loc 1 661 0
 1014 0028 024A     	 ldr r2,.L66
 1015 002a DA61     	 str r2,[r3,#28]
 1016              	.LVL114:
 1017 002c 0020     	 movs r0,#0
 1018              	.LVL115:
 1019 002e 7047     	 bx lr
 1020              	.LVL116:
 1021              	.L65:
 1022              	.LBE75:
 1023              	.LBE74:
 662:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 663:../Libraries/XMCLib/src/xmc_can.c ****   }
 664:../Libraries/XMCLib/src/xmc_can.c ****   else
 665:../Libraries/XMCLib/src/xmc_can.c ****   {
 666:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1024              	 .loc 1 666 0
 1025 0030 0320     	 movs r0,#3
 1026              	.LVL117:
 667:../Libraries/XMCLib/src/xmc_can.c ****   }
 668:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 669:../Libraries/XMCLib/src/xmc_can.c **** }
 1027              	 .loc 1 669 0
 1028 0032 7047     	 bx lr
 1029              	.L67:
 1030              	 .align 2
 1031              	.L66:
 1032 0034 40002800 	 .word 2621504
 1033              	 .cfi_endproc
 1034              	.LFE244:
 1036              	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1037              	 .align 1
 1038              	 .global XMC_CAN_MO_Config
 1039              	 .thumb
 1040              	 .thumb_func
 1042              	XMC_CAN_MO_Config:
 1043              	.LFB243:
 584:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 1044              	 .loc 1 584 0
 1045              	 .cfi_startproc
 1046              	 
 1047              	 
 1048              	.LVL118:
 588:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1049              	 .loc 1 588 0
 1050 0000 0268     	 ldr r2,[r0]
 590:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1051              	 .loc 1 590 0
 1052 0002 9168     	 ldr r1,[r2,#8]
 588:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1053              	 .loc 1 588 0
 1054 0004 02F13843 	 add r3,r2,#-1207959552
 590:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1055              	 .loc 1 590 0
 1056 0008 21F47F41 	 bic r1,r1,#65280
 584:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 1057              	 .loc 1 584 0
 1058 000c 10B5     	 push {r4,lr}
 1059              	.LCFI7:
 1060              	 .cfi_def_cfa_offset 8
 1061              	 .cfi_offset 4,-8
 1062              	 .cfi_offset 14,-4
 588:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1063              	 .loc 1 588 0
 1064 000e A3F5A833 	 sub r3,r3,#86016
 1065              	.LVL119:
 590:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1066              	 .loc 1 590 0
 1067 0012 9160     	 str r1,[r2,#8]
 591:../Libraries/XMCLib/src/xmc_can.c ****   
 1068              	 .loc 1 591 0
 1069 0014 9168     	 ldr r1,[r2,#8]
 589:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1070              	 .loc 1 589 0
 1071 0016 DB00     	 lsls r3,r3,#3
 1072              	.LVL120:
 1073 0018 23F0FF03 	 bic r3,r3,#255
 591:../Libraries/XMCLib/src/xmc_can.c ****   
 1074              	 .loc 1 591 0
 1075 001c 0B43     	 orrs r3,r3,r1
 1076 001e 9360     	 str r3,[r2,#8]
 593:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1077              	 .loc 1 593 0
 1078 0020 037E     	 ldrb r3,[r0,#24]
 1079 0022 012B     	 cmp r3,#1
 584:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 1080              	 .loc 1 584 0
 1081 0024 0446     	 mov r4,r0
 593:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1082              	 .loc 1 593 0
 1083 0026 28D8     	 bhi .L68
 604:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1084              	 .loc 1 604 0
 1085 0028 2023     	 movs r3,#32
 1086 002a D361     	 str r3,[r2,#28]
 605:../Libraries/XMCLib/src/xmc_can.c ****     {
 1087              	 .loc 1 605 0
 1088 002c C379     	 ldrb r3,[r0,#7]
 1089 002e 4268     	 ldr r2,[r0,#4]
 1090              	.LVL121:
 1091 0030 13F0200F 	 tst r3,#32
 608:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1092              	 .loc 1 608 0
 1093 0034 08BF     	 it eq
 1094 0036 02F06041 	 andeq r1,r2,#-536870912
 1095              	.LVL122:
 1096 003a 0368     	 ldr r3,[r0]
 609:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1097              	 .loc 1 609 0
 1098 003c 03BF     	 ittte eq
 1099 003e 41EA8242 	 orreq r2,r1,r2,lsl#18
 1100              	.LVL123:
 610:../Libraries/XMCLib/src/xmc_can.c **** 
 1101              	 .loc 1 610 0
 1102 0042 9A61     	 streq r2,[r3,#24]
 612:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1103              	 .loc 1 612 0
 1104 0044 8168     	 ldreq r1,[r0,#8]
 1105              	.LVL124:
 619:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1106              	 .loc 1 619 0
 1107 0046 9A61     	 strne r2,[r3,#24]
 613:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1108              	 .loc 1 613 0
 1109 0048 06BF     	 itte eq
 1110 004a 01F06042 	 andeq r2,r1,#-536870912
 1111              	.LVL125:
 614:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1112              	 .loc 1 614 0
 1113 004e 42EA8142 	 orreq r2,r2,r1,lsl#18
 1114              	.LVL126:
 620:../Libraries/XMCLib/src/xmc_can.c ****     }
 1115              	 .loc 1 620 0
 1116 0052 8268     	 ldrne r2,[r0,#8]
 1117              	.LVL127:
 1118 0054 DA60     	 str r2,[r3,#12]
 623:../Libraries/XMCLib/src/xmc_can.c ****     {
 1119              	 .loc 1 623 0
 1120 0056 027E     	 ldrb r2,[r0,#24]
 1121 0058 012A     	 cmp r2,#1
 1122 005a 08D1     	 bne .L72
 626:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1123              	 .loc 1 626 0
 1124 005c FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 1125              	.LVL128:
 627:../Libraries/XMCLib/src/xmc_can.c **** 
 1126              	 .loc 1 627 0
 1127 0060 2368     	 ldr r3,[r4]
 1128 0062 4FF00062 	 mov r2,#134217728
 1129 0066 DA61     	 str r2,[r3,#28]
 630:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 1130              	 .loc 1 630 0
 1131 0068 2368     	 ldr r3,[r4]
 1132 006a 044A     	 ldr r2,.L75
 1133 006c 04E0     	 b .L74
 1134              	.LVL129:
 1135              	.L72:
 636:../Libraries/XMCLib/src/xmc_can.c **** 
 1136              	 .loc 1 636 0
 1137 006e 4FF40062 	 mov r2,#2048
 1138 0072 DA61     	 str r2,[r3,#28]
 639:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 1139              	 .loc 1 639 0
 1140 0074 0368     	 ldr r3,[r0]
 1141 0076 024A     	 ldr r2,.L75+4
 1142              	.LVL130:
 1143              	.L74:
 1144 0078 DA61     	 str r2,[r3,#28]
 1145              	.L68:
 1146 007a 10BD     	 pop {r4,pc}
 1147              	.LVL131:
 1148              	.L76:
 1149              	 .align 2
 1150              	.L75:
 1151 007c C0002006 	 .word 102760640
 1152 0080 4006A000 	 .word 10487360
 1153              	 .cfi_endproc
 1154              	.LFE243:
 1156              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 1157              	 .align 1
 1158              	 .global XMC_CAN_MO_Transmit
 1159              	 .thumb
 1160              	 .thumb_func
 1162              	XMC_CAN_MO_Transmit:
 1163              	.LFB245:
 670:../Libraries/XMCLib/src/xmc_can.c **** 
 671:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 672:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 673:../Libraries/XMCLib/src/xmc_can.c **** {
 1164              	 .loc 1 673 0
 1165              	 .cfi_startproc
 1166              	 
 1167              	 
 1168              	 
 1169              	.LVL132:
 674:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 675:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 1170              	 .loc 1 675 0
 1171 0000 0368     	 ldr r3,[r0]
 1172 0002 D969     	 ldr r1,[r3,#28]
 1173              	.LVL133:
 676:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 1174              	 .loc 1 676 0
 1175 0004 DA69     	 ldr r2,[r3,#28]
 1176              	.LVL134:
 677:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 678:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 1177              	 .loc 1 678 0
 1178 0006 8906     	 lsls r1,r1,#26
 1179              	.LVL135:
 1180 0008 06D5     	 bpl .L79
 679:../Libraries/XMCLib/src/xmc_can.c ****   {
 680:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 681:../Libraries/XMCLib/src/xmc_can.c ****   }
 682:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 683:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 1181              	 .loc 1 683 0
 1182 000a D205     	 lsls r2,r2,#23
 1183              	.LVL136:
 1184 000c 06D4     	 bmi .L80
 684:../Libraries/XMCLib/src/xmc_can.c ****   {
 685:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 686:../Libraries/XMCLib/src/xmc_can.c ****   }
 687:../Libraries/XMCLib/src/xmc_can.c ****   else
 688:../Libraries/XMCLib/src/xmc_can.c ****   {
 689:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 690:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 1185              	 .loc 1 690 0
 1186 000e 4FF0E062 	 mov r2,#117440512
 1187 0012 DA61     	 str r2,[r3,#28]
 1188              	.LVL137:
 691:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1189              	 .loc 1 691 0
 1190 0014 0020     	 movs r0,#0
 1191              	.LVL138:
 1192 0016 7047     	 bx lr
 1193              	.LVL139:
 1194              	.L79:
 680:../Libraries/XMCLib/src/xmc_can.c ****   }
 1195              	 .loc 1 680 0
 1196 0018 0420     	 movs r0,#4
 1197              	.LVL140:
 1198 001a 7047     	 bx lr
 1199              	.LVL141:
 1200              	.L80:
 685:../Libraries/XMCLib/src/xmc_can.c ****   }
 1201              	 .loc 1 685 0
 1202 001c 0220     	 movs r0,#2
 1203              	.LVL142:
 692:../Libraries/XMCLib/src/xmc_can.c ****   }
 693:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 694:../Libraries/XMCLib/src/xmc_can.c **** }
 1204              	 .loc 1 694 0
 1205 001e 7047     	 bx lr
 1206              	 .cfi_endproc
 1207              	.LFE245:
 1209              	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 1210              	 .align 1
 1211              	 .global XMC_CAN_MO_ReceiveData
 1212              	 .thumb
 1213              	 .thumb_func
 1215              	XMC_CAN_MO_ReceiveData:
 1216              	.LFB246:
 695:../Libraries/XMCLib/src/xmc_can.c **** 
 696:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 697:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 698:../Libraries/XMCLib/src/xmc_can.c **** {
 1217              	 .loc 1 698 0
 1218              	 .cfi_startproc
 1219              	 
 1220              	 
 1221              	 
 1222              	.LVL143:
 699:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 700:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 701:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 702:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 1223              	 .loc 1 702 0
 1224 0000 0268     	 ldr r2,[r0]
 1225 0002 D169     	 ldr r1,[r2,#28]
 1226              	.LVL144:
 703:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 1227              	 .loc 1 703 0
 1228 0004 D369     	 ldr r3,[r2,#28]
 1229              	.LVL145:
 704:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 705:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 1230              	 .loc 1 705 0
 1231 0006 0905     	 lsls r1,r1,#20
 1232              	.LVL146:
 1233 0008 10D4     	 bmi .L84
 706:../Libraries/XMCLib/src/xmc_can.c ****   {
 707:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 708:../Libraries/XMCLib/src/xmc_can.c ****   }
 709:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 710:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 1234              	 .loc 1 710 0
 1235 000a 5B07     	 lsls r3,r3,#29
 1236              	.LVL147:
 1237 000c 10D4     	 bmi .L85
 1238              	.LVL148:
 1239              	.L87:
 711:../Libraries/XMCLib/src/xmc_can.c ****   {
 712:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 713:../Libraries/XMCLib/src/xmc_can.c ****   }
 714:../Libraries/XMCLib/src/xmc_can.c ****   else
 715:../Libraries/XMCLib/src/xmc_can.c ****   {
 716:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 717:../Libraries/XMCLib/src/xmc_can.c ****     do
 718:../Libraries/XMCLib/src/xmc_can.c ****     {
 719:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 1240              	 .loc 1 719 0 discriminator 2
 1241 000e 1369     	 ldr r3,[r2,#16]
 1242 0010 0361     	 str r3,[r0,#16]
 720:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 1243              	 .loc 1 720 0 discriminator 2
 1244 0012 5369     	 ldr r3,[r2,#20]
 1245 0014 4361     	 str r3,[r0,#20]
 721:../Libraries/XMCLib/src/xmc_can.c **** 
 722:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 1246              	 .loc 1 722 0 discriminator 2
 1247 0016 D369     	 ldr r3,[r2,#28]
 1248              	.LVL149:
 723:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1249              	 .loc 1 723 0 discriminator 2
 1250 0018 D169     	 ldr r1,[r2,#28]
 722:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1251              	 .loc 1 722 0 discriminator 2
 1252 001a C3F38003 	 ubfx r3,r3,#2,#1
 1253              	.LVL150:
 1254              	 .loc 1 723 0 discriminator 2
 1255 001e C1F3C001 	 ubfx r1,r1,#3,#1
 1256              	.LVL151:
 724:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 1257              	 .loc 1 724 0 discriminator 2
 1258 0022 3BB1     	 cbz r3,.L86
 1259              	 .loc 1 724 0 is_stmt 0 discriminator 1
 1260 0024 0029     	 cmp r1,#0
 1261 0026 F2D1     	 bne .L87
 725:../Libraries/XMCLib/src/xmc_can.c **** 
 726:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1262              	 .loc 1 726 0 is_stmt 1
 1263 0028 0846     	 mov r0,r1
 1264              	.LVL152:
 1265 002a 7047     	 bx lr
 1266              	.LVL153:
 1267              	.L84:
 707:../Libraries/XMCLib/src/xmc_can.c ****   }
 1268              	 .loc 1 707 0
 1269 002c 0320     	 movs r0,#3
 1270              	.LVL154:
 1271 002e 7047     	 bx lr
 1272              	.LVL155:
 1273              	.L85:
 712:../Libraries/XMCLib/src/xmc_can.c ****   }
 1274              	 .loc 1 712 0
 1275 0030 0220     	 movs r0,#2
 1276              	.LVL156:
 1277 0032 7047     	 bx lr
 1278              	.LVL157:
 1279              	.L86:
 1280              	 .loc 1 726 0
 1281 0034 1846     	 mov r0,r3
 1282              	.LVL158:
 727:../Libraries/XMCLib/src/xmc_can.c ****   }
 728:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 729:../Libraries/XMCLib/src/xmc_can.c **** }
 1283              	 .loc 1 729 0
 1284 0036 7047     	 bx lr
 1285              	 .cfi_endproc
 1286              	.LFE246:
 1288              	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 1289              	 .align 1
 1290              	 .global XMC_CAN_MO_Receive
 1291              	 .thumb
 1292              	 .thumb_func
 1294              	XMC_CAN_MO_Receive:
 1295              	.LFB247:
 730:../Libraries/XMCLib/src/xmc_can.c **** 
 731:../Libraries/XMCLib/src/xmc_can.c **** 
 732:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 733:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 734:../Libraries/XMCLib/src/xmc_can.c **** {
 1296              	 .loc 1 734 0
 1297              	 .cfi_startproc
 1298              	 
 1299              	 
 1300              	 
 1301              	.LVL159:
 735:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 736:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 737:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 738:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 1302              	 .loc 1 738 0
 1303 0000 0368     	 ldr r3,[r0]
 1304 0002 DA69     	 ldr r2,[r3,#28]
 1305              	.LVL160:
 739:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 1306              	 .loc 1 739 0
 1307 0004 DB69     	 ldr r3,[r3,#28]
 1308              	.LVL161:
 740:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 741:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 1309              	 .loc 1 741 0
 1310 0006 1205     	 lsls r2,r2,#20
 1311              	.LVL162:
 1312 0008 4ED4     	 bmi .L96
 742:../Libraries/XMCLib/src/xmc_can.c ****   {
 743:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 744:../Libraries/XMCLib/src/xmc_can.c ****   }
 745:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 746:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 1313              	 .loc 1 746 0
 1314 000a 5907     	 lsls r1,r3,#29
 1315 000c 4ED4     	 bmi .L97
 1316              	.LVL163:
 1317              	.L100:
 747:../Libraries/XMCLib/src/xmc_can.c ****   {
 748:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 749:../Libraries/XMCLib/src/xmc_can.c ****   }
 750:../Libraries/XMCLib/src/xmc_can.c ****   else
 751:../Libraries/XMCLib/src/xmc_can.c ****   {
 752:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 753:../Libraries/XMCLib/src/xmc_can.c ****     do
 754:../Libraries/XMCLib/src/xmc_can.c ****     {
 755:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 1318              	 .loc 1 755 0
 1319 000e 0368     	 ldr r3,[r0]
 1320 0010 0822     	 movs r2,#8
 1321 0012 DA61     	 str r2,[r3,#28]
 756:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 1322              	 .loc 1 756 0
 1323 0014 0368     	 ldr r3,[r0]
 1324 0016 C279     	 ldrb r2,[r0,#7]
 1325 0018 9969     	 ldr r1,[r3,#24]
 1326 001a C1F34071 	 ubfx r1,r1,#29,#1
 1327 001e D9B9     	 cbnz r1,.L91
 757:../Libraries/XMCLib/src/xmc_can.c ****       {
 758:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 1328              	 .loc 1 758 0
 1329 0020 61F34512 	 bfi r2,r1,#5,#1
 1330 0024 C271     	 strb r2,[r0,#7]
 759:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 1331              	 .loc 1 759 0
 1332 0026 9A69     	 ldr r2,[r3,#24]
 1333 0028 4168     	 ldr r1,[r0,#4]
 1334 002a C2F38A42 	 ubfx r2,r2,#18,#11
 1335 002e 62F31C01 	 bfi r1,r2,#0,#29
 1336 0032 4160     	 str r1,[r0,#4]
 760:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 1337              	 .loc 1 760 0
 1338 0034 D968     	 ldr r1,[r3,#12]
 1339 0036 C27A     	 ldrb r2,[r0,#11]
 1340 0038 C1F34071 	 ubfx r1,r1,#29,#1
 1341 003c 61F34512 	 bfi r2,r1,#5,#1
 1342 0040 C272     	 strb r2,[r0,#11]
 761:../Libraries/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 762:../Libraries/XMCLib/src/xmc_can.c ****         {
 763:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 1343              	 .loc 1 763 0
 1344 0042 D968     	 ldr r1,[r3,#12]
 761:../Libraries/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 1345              	 .loc 1 761 0
 1346 0044 12F0200F 	 tst r2,#32
 1347 0048 8268     	 ldr r2,[r0,#8]
 1348              	 .loc 1 763 0
 1349 004a 18BF     	 it ne
 1350 004c C1F38A41 	 ubfxne r1,r1,#18,#11
 764:../Libraries/XMCLib/src/xmc_can.c ****         }
 765:../Libraries/XMCLib/src/xmc_can.c ****         else
 766:../Libraries/XMCLib/src/xmc_can.c ****         {
 767:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 1351              	 .loc 1 767 0
 1352 0050 61F31C02 	 bfi r2,r1,#0,#29
 1353 0054 8260     	 str r2,[r0,#8]
 1354 0056 13E0     	 b .L93
 1355              	.L91:
 768:../Libraries/XMCLib/src/xmc_can.c ****         }
 769:../Libraries/XMCLib/src/xmc_can.c ****       }
 770:../Libraries/XMCLib/src/xmc_can.c ****       else
 771:../Libraries/XMCLib/src/xmc_can.c ****       {
 772:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 1356              	 .loc 1 772 0
 1357 0058 42F02002 	 orr r2,r2,#32
 1358 005c C271     	 strb r2,[r0,#7]
 773:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 1359              	 .loc 1 773 0
 1360 005e 9969     	 ldr r1,[r3,#24]
 1361 0060 4268     	 ldr r2,[r0,#4]
 1362 0062 61F31C02 	 bfi r2,r1,#0,#29
 1363 0066 4260     	 str r2,[r0,#4]
 774:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 1364              	 .loc 1 774 0
 1365 0068 D968     	 ldr r1,[r3,#12]
 1366 006a 8268     	 ldr r2,[r0,#8]
 1367 006c 61F31C02 	 bfi r2,r1,#0,#29
 1368 0070 8260     	 str r2,[r0,#8]
 775:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 1369              	 .loc 1 775 0
 1370 0072 DA68     	 ldr r2,[r3,#12]
 1371 0074 C17A     	 ldrb r1,[r0,#11]
 1372 0076 C2F34072 	 ubfx r2,r2,#29,#1
 1373 007a 62F34511 	 bfi r1,r2,#5,#1
 1374 007e C172     	 strb r1,[r0,#11]
 1375              	.L93:
 776:../Libraries/XMCLib/src/xmc_can.c ****       }
 777:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 1376              	 .loc 1 777 0
 1377 0080 1A68     	 ldr r2,[r3]
 1378 0082 C2F30362 	 ubfx r2,r2,#24,#4
 1379 0086 0273     	 strb r2,[r0,#12]
 778:../Libraries/XMCLib/src/xmc_can.c **** 
 779:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 1380              	 .loc 1 779 0
 1381 0088 1A69     	 ldr r2,[r3,#16]
 1382 008a 0261     	 str r2,[r0,#16]
 780:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 1383              	 .loc 1 780 0
 1384 008c 5A69     	 ldr r2,[r3,#20]
 1385 008e 4261     	 str r2,[r0,#20]
 781:../Libraries/XMCLib/src/xmc_can.c **** 
 782:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 1386              	 .loc 1 782 0
 1387 0090 DA69     	 ldr r2,[r3,#28]
 1388              	.LVL164:
 783:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1389              	 .loc 1 783 0
 1390 0092 DB69     	 ldr r3,[r3,#28]
 784:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 1391              	 .loc 1 784 0
 1392 0094 5207     	 lsls r2,r2,#29
 1393              	.LVL165:
 783:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1394              	 .loc 1 783 0
 1395 0096 C3F3C003 	 ubfx r3,r3,#3,#1
 1396              	.LVL166:
 1397              	 .loc 1 784 0
 1398 009a 01D5     	 bpl .L94
 1399              	 .loc 1 784 0 is_stmt 0 discriminator 1
 1400 009c 002B     	 cmp r3,#0
 1401 009e B6D1     	 bne .L100
 1402              	.L94:
 785:../Libraries/XMCLib/src/xmc_can.c **** 
 786:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 1403              	 .loc 1 786 0 is_stmt 1
 1404 00a0 0023     	 movs r3,#0
 1405              	.LVL167:
 1406 00a2 0376     	 strb r3,[r0,#24]
 1407              	.LVL168:
 787:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1408              	 .loc 1 787 0
 1409 00a4 1846     	 mov r0,r3
 1410              	.LVL169:
 1411 00a6 7047     	 bx lr
 1412              	.LVL170:
 1413              	.L96:
 743:../Libraries/XMCLib/src/xmc_can.c ****   }
 1414              	 .loc 1 743 0
 1415 00a8 0320     	 movs r0,#3
 1416              	.LVL171:
 1417 00aa 7047     	 bx lr
 1418              	.LVL172:
 1419              	.L97:
 748:../Libraries/XMCLib/src/xmc_can.c ****   }
 1420              	 .loc 1 748 0
 1421 00ac 0220     	 movs r0,#2
 1422              	.LVL173:
 788:../Libraries/XMCLib/src/xmc_can.c ****   }
 789:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 790:../Libraries/XMCLib/src/xmc_can.c **** }
 1423              	 .loc 1 790 0
 1424 00ae 7047     	 bx lr
 1425              	 .cfi_endproc
 1426              	.LFE247:
 1428              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 1429              	 .align 1
 1430              	 .global XMC_CAN_NODE_EnableEvent
 1431              	 .thumb
 1432              	 .thumb_func
 1434              	XMC_CAN_NODE_EnableEvent:
 1435              	.LFB248:
 791:../Libraries/XMCLib/src/xmc_can.c **** 
 792:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 793:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 794:../Libraries/XMCLib/src/xmc_can.c **** {
 1436              	 .loc 1 794 0
 1437              	 .cfi_startproc
 1438              	 
 1439              	 
 1440              	 
 1441              	.LVL174:
 795:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 1442              	 .loc 1 795 0
 1443 0000 B1F5800F 	 cmp r1,#4194304
 796:../Libraries/XMCLib/src/xmc_can.c ****   {
 797:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 1444              	 .loc 1 797 0
 1445 0004 15BF     	 itete ne
 1446 0006 0368     	 ldrne r3,[r0]
 798:../Libraries/XMCLib/src/xmc_can.c ****   }
 799:../Libraries/XMCLib/src/xmc_can.c ****   else
 800:../Libraries/XMCLib/src/xmc_can.c ****   {
 801:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 1447              	 .loc 1 801 0
 1448 0008 8369     	 ldreq r3,[r0,#24]
 797:../Libraries/XMCLib/src/xmc_can.c ****   }
 1449              	 .loc 1 797 0
 1450 000a 1943     	 orrne r1,r1,r3
 1451              	.LVL175:
 1452              	 .loc 1 801 0
 1453 000c 43F48003 	 orreq r3,r3,#4194304
 797:../Libraries/XMCLib/src/xmc_can.c ****   }
 1454              	 .loc 1 797 0
 1455 0010 14BF     	 ite ne
 1456 0012 0160     	 strne r1,[r0]
 1457              	 .loc 1 801 0
 1458 0014 8361     	 streq r3,[r0,#24]
 1459 0016 7047     	 bx lr
 1460              	 .cfi_endproc
 1461              	.LFE248:
 1463              	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 1464              	 .align 1
 1465              	 .global XMC_CAN_NODE_DisableEvent
 1466              	 .thumb
 1467              	 .thumb_func
 1469              	XMC_CAN_NODE_DisableEvent:
 1470              	.LFB249:
 802:../Libraries/XMCLib/src/xmc_can.c ****   }
 803:../Libraries/XMCLib/src/xmc_can.c **** }
 804:../Libraries/XMCLib/src/xmc_can.c **** 
 805:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 806:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 807:../Libraries/XMCLib/src/xmc_can.c **** {
 1471              	 .loc 1 807 0
 1472              	 .cfi_startproc
 1473              	 
 1474              	 
 1475              	 
 1476              	.LVL176:
 808:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 1477              	 .loc 1 808 0
 1478 0000 B1F5800F 	 cmp r1,#4194304
 809:../Libraries/XMCLib/src/xmc_can.c ****   {
 810:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 1479              	 .loc 1 810 0
 1480 0004 15BF     	 itete ne
 1481 0006 0368     	 ldrne r3,[r0]
 811:../Libraries/XMCLib/src/xmc_can.c ****   }
 812:../Libraries/XMCLib/src/xmc_can.c ****   else
 813:../Libraries/XMCLib/src/xmc_can.c ****   {
 814:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 1482              	 .loc 1 814 0
 1483 0008 8369     	 ldreq r3,[r0,#24]
 810:../Libraries/XMCLib/src/xmc_can.c ****   }
 1484              	 .loc 1 810 0
 1485 000a 23EA0101 	 bicne r1,r3,r1
 1486              	.LVL177:
 1487              	 .loc 1 814 0
 1488 000e 23F48003 	 biceq r3,r3,#4194304
 810:../Libraries/XMCLib/src/xmc_can.c ****   }
 1489              	 .loc 1 810 0
 1490 0012 14BF     	 ite ne
 1491 0014 0160     	 strne r1,[r0]
 1492              	 .loc 1 814 0
 1493 0016 8361     	 streq r3,[r0,#24]
 1494 0018 7047     	 bx lr
 1495              	 .cfi_endproc
 1496              	.LFE249:
 1498              	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 1499              	 .align 1
 1500              	 .global XMC_CAN_TXFIFO_Transmit
 1501              	 .thumb
 1502              	 .thumb_func
 1504              	XMC_CAN_TXFIFO_Transmit:
 1505              	.LFB250:
 815:../Libraries/XMCLib/src/xmc_can.c ****   }
 816:../Libraries/XMCLib/src/xmc_can.c **** }
 817:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 818:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 819:../Libraries/XMCLib/src/xmc_can.c **** {
 1506              	 .loc 1 819 0
 1507              	 .cfi_startproc
 1508              	 
 1509              	 
 1510              	 
 1511              	.LVL178:
 820:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 821:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 1512              	 .loc 1 821 0
 1513 0000 0368     	 ldr r3,[r0]
 1514 0002 D969     	 ldr r1,[r3,#28]
 1515              	.LVL179:
 822:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 1516              	 .loc 1 822 0
 1517 0004 DA69     	 ldr r2,[r3,#28]
 1518              	.LVL180:
 823:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 1519              	 .loc 1 823 0
 1520 0006 5B68     	 ldr r3,[r3,#4]
 1521              	.LVL181:
 824:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 825:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 826:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 1522              	 .loc 1 826 0
 1523 0008 8906     	 lsls r1,r1,#26
 1524              	.LVL182:
 1525 000a 0DD5     	 bpl .L111
 827:../Libraries/XMCLib/src/xmc_can.c ****   {
 828:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 829:../Libraries/XMCLib/src/xmc_can.c ****   }
 830:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 831:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 1526              	 .loc 1 831 0
 1527 000c D205     	 lsls r2,r2,#23
 1528              	.LVL183:
 1529 000e 0DD4     	 bmi .L112
 823:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 1530              	 .loc 1 823 0
 1531 0010 C3F30743 	 ubfx r3,r3,#16,#8
 1532              	.LVL184:
 824:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 1533              	 .loc 1 824 0
 1534 0014 03F11073 	 add r3,r3,#37748736
 1535 0018 03F52863 	 add r3,r3,#2688
 1536 001c 5B01     	 lsls r3,r3,#5
 832:../Libraries/XMCLib/src/xmc_can.c ****   {
 833:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 834:../Libraries/XMCLib/src/xmc_can.c ****   }
 835:../Libraries/XMCLib/src/xmc_can.c ****   else
 836:../Libraries/XMCLib/src/xmc_can.c ****   {
 837:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 1537              	 .loc 1 837 0
 1538 001e 4FF0E062 	 mov r2,#117440512
 1539 0022 DA61     	 str r2,[r3,#28]
 1540              	.LVL185:
 838:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1541              	 .loc 1 838 0
 1542 0024 0020     	 movs r0,#0
 1543              	.LVL186:
 1544 0026 7047     	 bx lr
 1545              	.LVL187:
 1546              	.L111:
 828:../Libraries/XMCLib/src/xmc_can.c ****   }
 1547              	 .loc 1 828 0
 1548 0028 0420     	 movs r0,#4
 1549              	.LVL188:
 1550 002a 7047     	 bx lr
 1551              	.LVL189:
 1552              	.L112:
 833:../Libraries/XMCLib/src/xmc_can.c ****   }
 1553              	 .loc 1 833 0
 1554 002c 0220     	 movs r0,#2
 1555              	.LVL190:
 839:../Libraries/XMCLib/src/xmc_can.c ****   }
 840:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 841:../Libraries/XMCLib/src/xmc_can.c **** }
 1556              	 .loc 1 841 0
 1557 002e 7047     	 bx lr
 1558              	 .cfi_endproc
 1559              	.LFE250:
 1561              	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 1562              	 .align 1
 1563              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 1564              	 .thumb
 1565              	 .thumb_func
 1567              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 1568              	.LFB251:
 842:../Libraries/XMCLib/src/xmc_can.c **** 
 843:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 844:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 845:../Libraries/XMCLib/src/xmc_can.c **** {
 1569              	 .loc 1 845 0
 1570              	 .cfi_startproc
 1571              	 
 1572              	 
 1573              	 
 1574              	.LVL191:
 1575 0000 82B0     	 sub sp,sp,#8
 1576              	.LCFI8:
 1577              	 .cfi_def_cfa_offset 8
 846:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1578              	 .loc 1 846 0
 1579 0002 0268     	 ldr r2,[r0]
 845:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1580              	 .loc 1 845 0
 1581 0004 0191     	 str r1,[sp,#4]
 1582              	 .loc 1 846 0
 1583 0006 1368     	 ldr r3,[r2]
 847:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 848:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 849:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 850:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 851:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1584              	 .loc 1 851 0
 1585 0008 9DF80410 	 ldrb r1,[sp,#4]
 846:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 1586              	 .loc 1 846 0
 1587 000c 23F00F03 	 bic r3,r3,#15
 1588 0010 43F00203 	 orr r3,r3,#2
 1589 0014 1360     	 str r3,[r2]
 848:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1590              	 .loc 1 848 0
 1591 0016 5368     	 ldr r3,[r2,#4]
 1592 0018 03F07F43 	 and r3,r3,#-16777216
 1593 001c 0B43     	 orrs r3,r3,r1
 852:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 853:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 1594              	 .loc 1 853 0
 1595 001e 9DF80510 	 ldrb r1,[sp,#5]
 1596 0022 43EA0123 	 orr r3,r3,r1,lsl#8
 852:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1597              	 .loc 1 852 0
 1598 0026 9DF80610 	 ldrb r1,[sp,#6]
 1599 002a 43EA0143 	 orr r3,r3,r1,lsl#16
 848:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1600              	 .loc 1 848 0
 1601 002e 5360     	 str r3,[r2,#4]
 854:../Libraries/XMCLib/src/xmc_can.c **** }
 1602              	 .loc 1 854 0
 1603 0030 02B0     	 add sp,sp,#8
 1604              	.LCFI9:
 1605              	 .cfi_def_cfa_offset 0
 1606              	 
 1607 0032 7047     	 bx lr
 1608              	 .cfi_endproc
 1609              	.LFE251:
 1611              	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 1612              	 .align 1
 1613              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 1614              	 .thumb
 1615              	 .thumb_func
 1617              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 1618              	.LFB252:
 855:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 856:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 857:../Libraries/XMCLib/src/xmc_can.c **** {
 1619              	 .loc 1 857 0
 1620              	 .cfi_startproc
 1621              	 
 1622              	 
 1623              	 
 1624              	.LVL192:
 1625 0000 82B0     	 sub sp,sp,#8
 1626              	.LCFI10:
 1627              	 .cfi_def_cfa_offset 8
 858:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1628              	 .loc 1 858 0
 1629 0002 0268     	 ldr r2,[r0]
 857:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1630              	 .loc 1 857 0
 1631 0004 0191     	 str r1,[sp,#4]
 1632              	 .loc 1 858 0
 1633 0006 1368     	 ldr r3,[r2]
 859:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 860:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 861:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 862:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 863:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1634              	 .loc 1 863 0
 1635 0008 9DF80410 	 ldrb r1,[sp,#4]
 858:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 1636              	 .loc 1 858 0
 1637 000c 23F00F03 	 bic r3,r3,#15
 1638 0010 43F00103 	 orr r3,r3,#1
 1639 0014 1360     	 str r3,[r2]
 860:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1640              	 .loc 1 860 0
 1641 0016 5368     	 ldr r3,[r2,#4]
 1642 0018 03F07F43 	 and r3,r3,#-16777216
 1643 001c 0B43     	 orrs r3,r3,r1
 864:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 865:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 1644              	 .loc 1 865 0
 1645 001e 9DF80510 	 ldrb r1,[sp,#5]
 1646 0022 43EA0123 	 orr r3,r3,r1,lsl#8
 864:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1647              	 .loc 1 864 0
 1648 0026 9DF80610 	 ldrb r1,[sp,#6]
 1649 002a 43EA0143 	 orr r3,r3,r1,lsl#16
 860:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1650              	 .loc 1 860 0
 1651 002e 5360     	 str r3,[r2,#4]
 866:../Libraries/XMCLib/src/xmc_can.c **** }
 1652              	 .loc 1 866 0
 1653 0030 02B0     	 add sp,sp,#8
 1654              	.LCFI11:
 1655              	 .cfi_def_cfa_offset 0
 1656              	 
 1657 0032 7047     	 bx lr
 1658              	 .cfi_endproc
 1659              	.LFE252:
 1661              	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 1662              	 .align 1
 1663              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 1664              	 .thumb
 1665              	 .thumb_func
 1667              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 1668              	.LFB253:
 867:../Libraries/XMCLib/src/xmc_can.c **** 
 868:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 869:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 870:../Libraries/XMCLib/src/xmc_can.c **** {
 1669              	 .loc 1 870 0
 1670              	 .cfi_startproc
 1671              	 
 1672              	 
 1673              	 
 1674              	.LVL193:
 1675 0000 82B0     	 sub sp,sp,#8
 1676              	.LCFI12:
 1677              	 .cfi_def_cfa_offset 8
 871:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1678              	 .loc 1 871 0
 1679 0002 0368     	 ldr r3,[r0]
 870:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1680              	 .loc 1 870 0
 1681 0004 0191     	 str r1,[sp,#4]
 1682              	 .loc 1 871 0
 1683 0006 1A68     	 ldr r2,[r3]
 872:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 873:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 874:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1684              	 .loc 1 874 0
 1685 0008 9DF80610 	 ldrb r1,[sp,#6]
 871:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 1686              	 .loc 1 871 0
 1687 000c 22F00F02 	 bic r2,r2,#15
 1688 0010 42F00302 	 orr r2,r2,#3
 1689 0014 1A60     	 str r2,[r3]
 873:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1690              	 .loc 1 873 0
 1691 0016 5A68     	 ldr r2,[r3,#4]
 1692 0018 22F47F02 	 bic r2,r2,#16711680
 1693 001c 42EA0142 	 orr r2,r2,r1,lsl#16
 1694 0020 5A60     	 str r2,[r3,#4]
 875:../Libraries/XMCLib/src/xmc_can.c **** 
 876:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 1695              	 .loc 1 876 0
 1696 0022 024A     	 ldr r2,.L116
 1697 0024 DA61     	 str r2,[r3,#28]
 877:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 878:../Libraries/XMCLib/src/xmc_can.c **** }
 1698              	 .loc 1 878 0
 1699 0026 02B0     	 add sp,sp,#8
 1700              	.LCFI13:
 1701              	 .cfi_def_cfa_offset 0
 1702              	 
 1703 0028 7047     	 bx lr
 1704              	.L117:
 1705 002a 00BF     	 .align 2
 1706              	.L116:
 1707 002c 00040002 	 .word 33555456
 1708              	 .cfi_endproc
 1709              	.LFE253:
 1711              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 1712              	 .align 1
 1713              	 .global XMC_CAN_GATEWAY_InitSourceObject
 1714              	 .thumb
 1715              	 .thumb_func
 1717              	XMC_CAN_GATEWAY_InitSourceObject:
 1718              	.LFB254:
 879:../Libraries/XMCLib/src/xmc_can.c **** 
 880:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 881:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 882:../Libraries/XMCLib/src/xmc_can.c **** {
 1719              	 .loc 1 882 0
 1720              	 .cfi_startproc
 1721              	 
 1722              	 
 1723              	 
 1724              	.LVL194:
 1725 0000 82B0     	 sub sp,sp,#8
 1726              	.LCFI14:
 1727              	 .cfi_def_cfa_offset 8
 1728              	 .loc 1 882 0
 1729 0002 02AB     	 add r3,sp,#8
 1730 0004 03E90600 	 stmdb r3,{r1,r2}
 883:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 884:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 1731              	 .loc 1 884 0
 1732 0008 9DF80330 	 ldrb r3,[sp,#3]
 883:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 1733              	 .loc 1 883 0
 1734 000c 0168     	 ldr r1,[r0]
 1735              	 .loc 1 884 0
 1736 000e 1B02     	 lsls r3,r3,#8
 1737 0010 03F48072 	 and r2,r3,#256
 885:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 1738              	 .loc 1 885 0
 1739 0014 9DF80530 	 ldrb r3,[sp,#5]
 1740 0018 9B02     	 lsls r3,r3,#10
 1741 001a 03F48063 	 and r3,r3,#1024
 884:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 1742              	 .loc 1 884 0
 1743 001e 1343     	 orrs r3,r3,r2
 886:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 1744              	 .loc 1 886 0
 1745 0020 9DF80420 	 ldrb r2,[sp,#4]
 1746 0024 5202     	 lsls r2,r2,#9
 1747 0026 02F40072 	 and r2,r2,#512
 1748 002a 43F00403 	 orr r3,r3,#4
 1749 002e 1343     	 orrs r3,r3,r2
 887:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 1750              	 .loc 1 887 0
 1751 0030 9DF80620 	 ldrb r2,[sp,#6]
 1752 0034 D202     	 lsls r2,r2,#11
 1753 0036 02F40062 	 and r2,r2,#2048
 886:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 1754              	 .loc 1 886 0
 1755 003a 1343     	 orrs r3,r3,r2
 883:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 1756              	 .loc 1 883 0
 1757 003c 0B60     	 str r3,[r1]
 888:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 889:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 890:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 1758              	 .loc 1 890 0
 1759 003e 9DF80120 	 ldrb r2,[sp,#1]
 888:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 1760              	 .loc 1 888 0
 1761 0042 9DF80030 	 ldrb r3,[sp]
 1762 0046 43EA0223 	 orr r3,r3,r2,lsl#8
 889:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 1763              	 .loc 1 889 0
 1764 004a 9DF80220 	 ldrb r2,[sp,#2]
 888:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 1765              	 .loc 1 888 0
 1766 004e 43EA0243 	 orr r3,r3,r2,lsl#16
 1767 0052 4B60     	 str r3,[r1,#4]
 891:../Libraries/XMCLib/src/xmc_can.c **** }
 1768              	 .loc 1 891 0
 1769 0054 02B0     	 add sp,sp,#8
 1770              	.LCFI15:
 1771              	 .cfi_def_cfa_offset 0
 1772              	 
 1773 0056 7047     	 bx lr
 1774              	 .cfi_endproc
 1775              	.LFE254:
 1777              	 .text
 1778              	.Letext0:
 1779              	 .file 3 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1780              	 .file 4 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1781              	 .file 5 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1782              	 .file 6 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc4_scu.h"
 1783              	 .file 7 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Include/core_cm4.h"
 1784              	 .file 8 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 1785              	 .file 9 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:20     .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:25     .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:178    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:183    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:406    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:411    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:455    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:460    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:479    .text.XMC_CAN_Disable:0000000c $d
    {standard input}:484    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:489    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:523    .text.XMC_CAN_Enable:0000001c $d
    {standard input}:528    .text.XMC_CAN_Init:00000000 $t
    {standard input}:533    .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:655    .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:660    .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:673    .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:678    .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:694    .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:699    .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:714    .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:719    .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:795    .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:800    .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:843    .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:848    .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:877    .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:882    .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:918    .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:923    .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:970    .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:975    .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:1032   .text.XMC_CAN_MO_UpdateData:00000034 $d
    {standard input}:1037   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1042   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:1151   .text.XMC_CAN_MO_Config:0000007c $d
    {standard input}:1157   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:1162   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:1210   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:1215   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:1289   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:1294   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:1429   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:1434   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:1464   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:1469   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:1499   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:1504   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:1562   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:1567   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:1612   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:1617   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:1662   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:1667   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:1707   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:0000002c $d
    {standard input}:1712   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:1717   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.ca5ae67a873a4952d630d8e4120b9e3e
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4e89a3f145accdcb1100c37260c088e6
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.65.5c0d35eb1a6853ff8300ab2ec1b944b0
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.57f124f9262f3dbf77da6a6506ffb430
                           .group:00000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:00000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1500.3eca65ed9ba7f90e09c1ffcb0b3f5724
                           .group:00000000 wm4.xmc_common.h.98.806f17e888fd51d0e4be2ad115163551
                           .group:00000000 wm4.xmc4_scu.h.90.f49c0839764a6c1240876a5f2e586200
                           .group:00000000 wm4.xmc_can_map.h.53.acf344f754863d08777806bac8258159
                           .group:00000000 wm4.xmc_can.h.165.b8cbf26258050f21ae0d7187b2c799e4

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GetPeripheralClockFrequency
