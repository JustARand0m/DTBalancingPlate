   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_ccu4.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU4_EnableModule,"ax",%progbits
  20              	 .align 1
  21              	 .global XMC_CCU4_EnableModule
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_CCU4_EnableModule:
  26              	.LFB219:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_ccu4.c"
   1:../Libraries/XMCLib/src/xmc_ccu4.c **** /**
   2:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @file xmc_ccu4.c
   3:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @date 2017-04-27
   4:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
   5:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_ccu4.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
   9:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_ccu4.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_ccu4.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_ccu4.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 
  18:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_ccu4.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 
  21:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_ccu4.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_ccu4.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_ccu4.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_ccu4.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_ccu4.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_ccu4.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_ccu4.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_ccu4.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_ccu4.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  36:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_ccu4.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  39:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  42:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  45:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-07-01:
  46:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - In XMC_CCU4_SLICE_StartConfig(), Options in XMC_ASSERT check for start mode is corrected. 
  47:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  48:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-07-24:
  49:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  50:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  51:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-08-17:
  52:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Start of prescaler XMC_CCU4_StartPrescaler() is invoked in XMC_CCU4_Init() API. <br>
  53:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Bug fix XMC_CCU4_SLICE_ConfigureEvent() during the level setting for XMC14 devices. <br>
  54:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_EnableShadowTransfer() definition is removed, since the API is made as inline. <b
  55:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  56:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-10-07:
  57:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  58:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - DOC updates for the newly added APIs.
  59:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  60:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2017-02-25:
  61:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_lAssertReset(), XMC_CCU4_lDeassertReset(), XMC_CCU4_lGateClock() and XMC_CCU4_lUn
  62:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  63:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2017-04-27:
  64:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU4_SLICE_PRESCALER_t
  65:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  66:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @endcond
  67:../Libraries/XMCLib/src/xmc_ccu4.c ****  */
  68:../Libraries/XMCLib/src/xmc_ccu4.c ****  
  69:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_ccu4.c ****  * HEADER FILES
  71:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_ccu4.c **** #include "xmc_ccu4.h"
  73:../Libraries/XMCLib/src/xmc_ccu4.c **** 
  74:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU40)
  75:../Libraries/XMCLib/src/xmc_ccu4.c **** #include "xmc_scu.h"
  76:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_ccu4.c ****  * MACROS
  78:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  79:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_NUM_SLICES_PER_MODULE          (4U)
  80:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_DITHER_PERIOD_MASK       (1U)
  81:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK    (2U)
  82:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK   (3U)
  83:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK  (1U)
  84:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK (3U)
  85:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
  86:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK  CCU4_CC4_INS1_EV0IS_Msk
  87:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
  88:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK  CCU4_CC4_INS_EV0IS_Msk
  89:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
  90:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GIDLC_CLOCK_MASK               (15U)
  91:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE0_MASK               (1U)
  92:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE1_MASK               (16U)
  93:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE2_MASK               (256U)
  94:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE3_MASK               (4096U)
  95:../Libraries/XMCLib/src/xmc_ccu4.c **** 
  96:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro to check if the clock selected enum passed is valid */
  97:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_CLOCK(clock) \
  98:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((clock == XMC_CCU4_CLOCK_SCU)        || \
  99:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_A) || \
 100:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_B) || \
 101:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_C))
 102:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 103:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the event ID is valid*/
 104:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EVENT_ID(event_id) \
 105:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((event_id == XMC_CCU4_SLICE_EVENT_NONE)|| \
 106:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_0)   || \
 107:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_1)   || \
 108:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_2))
 109:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 110:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the edge sensitivity is valid*/
 111:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(edge) \
 112:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE)        || \
 113:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE) || \
 114:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE)|| \
 115:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE))
 116:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 117:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the filter clock cycles are valid */
 118:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EVENT_FILTER(cycles) \
 119:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((cycles == XMC_CCU4_SLICE_EVENT_FILTER_DISABLED) || \
 120:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES) || \
 121:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES) || \
 122:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES))
 123:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 124:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the Multi-channel input related action is valid*/
 125:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action) \
 126:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR)      || \
 127:../Libraries/XMCLib/src/xmc_ccu4.c ****      (mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP) || \
 128:../Libraries/XMCLib/src/xmc_ccu4.c ****      (mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT))
 129:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 130:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the SR line is valid*/
 131:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_SR_ID(id) \
 132:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((id == XMC_CCU4_SLICE_SR_ID_0) || \
 133:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_1) || \
 134:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_2) || \
 135:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_3))
 136:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 137:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro to check if the end mode enum passed is valid */
 138:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_CHECK_END_MODE(end_mode) \
 139:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_STOP) || \
 140:../Libraries/XMCLib/src/xmc_ccu4.c ****      (end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR) || \
 141:../Libraries/XMCLib/src/xmc_ccu4.c ****      (end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR))
 142:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 143:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
 144:../Libraries/XMCLib/src/xmc_ccu4.c ****  * LOCAL ROUTINES
 145:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
 146:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 147:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
 148:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 149:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 150:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 151:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 152:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 153:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 154:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 155:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 156:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 157:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 158:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 159:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 160:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 161:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 162:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 163:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 164:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 165:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 166:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 167:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 168:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 169:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 170:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 171:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 172:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 173:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
 174:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 175:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 176:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 177:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
 178:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 179:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 180:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 181:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 182:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 183:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 184:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 185:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 186:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 187:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 188:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 189:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 190:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 191:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 192:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 193:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 194:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 195:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 196:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 197:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 198:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 199:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 200:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 201:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 202:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 203:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
 204:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 205:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 206:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 207:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 208:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 209:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lGateClock(const XMC_CCU4_MODULE_t *const module)
 210:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 211:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 212:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 213:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 214:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 215:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 216:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 217:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 218:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 219:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 220:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 221:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 222:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 223:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 224:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 225:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 226:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 227:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 228:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 229:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 230:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 231:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 232:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 233:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 234:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 235:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 236:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
 237:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 238:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 239:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 240:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
 241:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 242:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 243:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 244:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 245:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 246:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 247:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 248:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 249:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 250:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 251:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 252:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 253:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 254:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 255:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 256:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 257:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 258:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 259:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 260:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 261:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 262:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 263:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 264:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 265:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 266:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
 267:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 268:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 269:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 270:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 271:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined (XMC_ASSERT_ENABLE)
 272:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsInputvalid(XMC_CCU4_SLICE_INPUT_t input)
 273:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 274:../Libraries/XMCLib/src/xmc_ccu4.c **** #if (UC_SERIES == XMC14)
 275:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (input < 48U);
 276:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 277:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (input < 16U);
 278:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 279:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 280:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 281:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
 282:../Libraries/XMCLib/src/xmc_ccu4.c ****  * API IMPLEMENTATION
 283:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
 284:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 285:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
 286:../Libraries/XMCLib/src/xmc_ccu4.c **** {
  28              	 .loc 1 286 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 10B5     	 push {r4,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 8
  36              	 .cfi_offset 4,-8
  37              	 .cfi_offset 14,-4
  38              	 .loc 1 286 0
  39 0002 0446     	 mov r4,r0
 287:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 288:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 289:../Libraries/XMCLib/src/xmc_ccu4.c **** #if UC_FAMILY == XMC4
 290:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable CCU4 module clock */
 291:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
  40              	 .loc 1 291 0
  41 0004 1020     	 movs r0,#16
  42              	.LVL1:
  43 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableClock
  44              	.LVL2:
  45              	.LBB8:
  46              	.LBB9:
 179:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
  47              	 .loc 1 179 0
  48 000a 0C4B     	 ldr r3,.L8
  49 000c 9C42     	 cmp r4,r3
  50 000e 01D1     	 bne .L2
 181:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
  51              	 .loc 1 181 0
  52 0010 0420     	 movs r0,#4
  53 0012 0DE0     	 b .L6
  54              	.L2:
 184:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
  55              	 .loc 1 184 0
  56 0014 0A4B     	 ldr r3,.L8+4
  57 0016 9C42     	 cmp r4,r3
  58 0018 01D1     	 bne .L3
 186:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
  59              	 .loc 1 186 0
  60 001a 0820     	 movs r0,#8
  61 001c 08E0     	 b .L6
  62              	.L3:
 190:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
  63              	 .loc 1 190 0
  64 001e 094B     	 ldr r3,.L8+8
  65 0020 9C42     	 cmp r4,r3
  66 0022 01D1     	 bne .L4
 192:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
  67              	 .loc 1 192 0
  68 0024 1020     	 movs r0,#16
  69 0026 03E0     	 b .L6
  70              	.L4:
 196:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
  71              	 .loc 1 196 0
  72 0028 074B     	 ldr r3,.L8+12
  73 002a 9C42     	 cmp r4,r3
  74 002c 04D1     	 bne .L1
 198:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
  75              	 .loc 1 198 0
  76 002e 0748     	 ldr r0,.L8+16
  77              	.L6:
  78              	.LBE9:
  79              	.LBE8:
 292:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 293:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 294:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 295:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lUngateClock(module);
 296:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 297:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 298:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 299:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lDeassertReset(module);
 300:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 301:../Libraries/XMCLib/src/xmc_ccu4.c **** }
  80              	 .loc 1 301 0
  81 0030 BDE81040 	 pop {r4,lr}
  82              	.LCFI1:
  83              	 .cfi_remember_state
  84              	 .cfi_restore 14
  85              	 .cfi_restore 4
  86              	 .cfi_def_cfa_offset 0
  87              	.LVL3:
  88              	.LBB11:
  89              	.LBB10:
 198:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
  90              	 .loc 1 198 0
  91 0034 FFF7FEBF 	 b XMC_SCU_RESET_DeassertPeripheralReset
  92              	.LVL4:
  93              	.L1:
  94              	.LCFI2:
  95              	 .cfi_restore_state
  96 0038 10BD     	 pop {r4,pc}
  97              	.LVL5:
  98              	.L9:
  99 003a 00BF     	 .align 2
 100              	.L8:
 101 003c 00C00040 	 .word 1073790976
 102 0040 00000140 	 .word 1073807360
 103 0044 00400140 	 .word 1073823744
 104 0048 00400048 	 .word 1207975936
 105 004c 01000010 	 .word 268435457
 106              	.LBE10:
 107              	.LBE11:
 108              	 .cfi_endproc
 109              	.LFE219:
 111              	 .section .text.XMC_CCU4_DisableModule,"ax",%progbits
 112              	 .align 1
 113              	 .global XMC_CCU4_DisableModule
 114              	 .thumb
 115              	 .thumb_func
 117              	XMC_CCU4_DisableModule:
 118              	.LFB220:
 302:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 303:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
 304:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 119              	 .loc 1 304 0
 120              	 .cfi_startproc
 121              	 
 122              	 
 123              	 
 124              	.LVL6:
 125              	.LBB14:
 126              	.LBB15:
 149:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 127              	 .loc 1 149 0
 128 0000 0A4B     	 ldr r3,.L16
 129 0002 9842     	 cmp r0,r3
 130 0004 01D1     	 bne .L11
 151:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 131              	 .loc 1 151 0
 132 0006 0420     	 movs r0,#4
 133              	.LVL7:
 134 0008 0DE0     	 b .L15
 135              	.LVL8:
 136              	.L11:
 154:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 137              	 .loc 1 154 0
 138 000a 094B     	 ldr r3,.L16+4
 139 000c 9842     	 cmp r0,r3
 140 000e 01D1     	 bne .L12
 156:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 141              	 .loc 1 156 0
 142 0010 0820     	 movs r0,#8
 143              	.LVL9:
 144 0012 08E0     	 b .L15
 145              	.LVL10:
 146              	.L12:
 160:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 147              	 .loc 1 160 0
 148 0014 074B     	 ldr r3,.L16+8
 149 0016 9842     	 cmp r0,r3
 150 0018 01D1     	 bne .L13
 162:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 151              	 .loc 1 162 0
 152 001a 1020     	 movs r0,#16
 153              	.LVL11:
 154 001c 03E0     	 b .L15
 155              	.LVL12:
 156              	.L13:
 166:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 157              	 .loc 1 166 0
 158 001e 064B     	 ldr r3,.L16+12
 159 0020 9842     	 cmp r0,r3
 160 0022 02D1     	 bne .L10
 168:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 161              	 .loc 1 168 0
 162 0024 0548     	 ldr r0,.L16+16
 163              	.LVL13:
 164              	.L15:
 165 0026 FFF7FEBF 	 b XMC_SCU_RESET_AssertPeripheralReset
 166              	.LVL14:
 167              	.L10:
 168 002a 7047     	 bx lr
 169              	.L17:
 170              	 .align 2
 171              	.L16:
 172 002c 00C00040 	 .word 1073790976
 173 0030 00000140 	 .word 1073807360
 174 0034 00400140 	 .word 1073823744
 175 0038 00400048 	 .word 1207975936
 176 003c 01000010 	 .word 268435457
 177              	.LBE15:
 178              	.LBE14:
 179              	 .cfi_endproc
 180              	.LFE220:
 182              	 .section .text.XMC_CCU4_Init,"ax",%progbits
 183              	 .align 1
 184              	 .global XMC_CCU4_Init
 185              	 .thumb
 186              	 .thumb_func
 188              	XMC_CCU4_Init:
 189              	.LFB221:
 305:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 306:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 307:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 308:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lAssertReset(module);
 309:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 310:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 311:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 312:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lGateClock(module);
 313:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 314:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 315:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 316:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to initialize CCU4 global resources  */
 317:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
 318:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 190              	 .loc 1 318 0
 191              	 .cfi_startproc
 192              	 
 193              	 
 194              	.LVL15:
 195 0000 38B5     	 push {r3,r4,r5,lr}
 196              	.LCFI3:
 197              	 .cfi_def_cfa_offset 16
 198              	 .cfi_offset 3,-16
 199              	 .cfi_offset 4,-12
 200              	 .cfi_offset 5,-8
 201              	 .cfi_offset 14,-4
 202              	 .loc 1 318 0
 203 0002 0446     	 mov r4,r0
 204 0004 0D46     	 mov r5,r1
 319:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 320:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 321:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
 322:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));
 323:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 324:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable CCU4 module */
 325:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_EnableModule(module);
 205              	 .loc 1 325 0
 206 0006 FFF7FEFF 	 bl XMC_CCU4_EnableModule
 207              	.LVL16:
 208              	.LBB16:
 209              	.LBB17:
 210              	 .file 2 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc_ccu4.h"
   1:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
   2:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @date 2019-03-30
   4:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   5:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @cond
   6:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
   7:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   9:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * All rights reserved.                        
  11:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                             
  12:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * following conditions are met:   
  14:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  15:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer.                        
  17:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  18:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  21:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * products derived from this software without specific prior written permission.                  
  23:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  24:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  32:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  35:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  36:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Change History
  37:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * --------------
  38:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  39:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-02-20:
  40:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Initial <br>
  41:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Documentation updates <br>
  42:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  43:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-06-20:
  44:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  46:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-07-22:
  47:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  48:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  49:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-08-17:
  50:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  51:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  52:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  53:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  54:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-09-29:
  55:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  56:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       settings.
  57:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  58:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-10-07:
  59:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  60:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  61:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  62:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  63:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  64:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-03-09:
  65:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Optimization of write only registers 
  66:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  67:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-05-20:
  68:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SLICE_StopClearTimer()
  69:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed implementation of XMC_CCU4_SLICE_StopTimer() and XMC_CCU4_SLICE_ClearTimer() to av
  70:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  71:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2017-04-27:
  72:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU4_SLICE_PRESCALER_t
  73:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  74:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2017-09-15:
  75:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Fix XMC_CCU4_SLICE_SetShadowTransferMode()
  76:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  77:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2019-03-30:
  78:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed XMC_CCU4_StartPrescaler(), XMC_CCU4_StopPrescaler(), XMC_CCU4_EnableMultipleClocks
  79:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed XMC_CCU4_SLICE_SetEvent(), XMC_CCU4_SLICE_ClearEvent() to avoid RMW access
  80:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SetSuspendMode(), XMC_CCU4_SLICE_GetPrescaler()
  81:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  82:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @endcond
  83:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  84:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  85:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifndef XMC_CCU4_H
  86:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_H
  87:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  88:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
  89:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * HEADER FILES
  90:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  91:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc_common.h"
  92:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40)
  93:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  94:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC1
  95:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc1_ccu4_map.h"
  96:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  97:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  98:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC4
  99:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc4_ccu4_map.h"
 100:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 101:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 102:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 103:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
 104:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 105:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 106:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 107:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 108:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup CCU4
 109:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
 110:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 111:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
 112:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
 113:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
 114:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 peripheral.\n
 115:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 116:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 117:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 118:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 119:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 120:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Note:
 121:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 122:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 123:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 124:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 125:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 126:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 127:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 128:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 129:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 130:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 131:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 132:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 133:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 134:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 135:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Capture configuration:
 136:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 137:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 138:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 139:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 140:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 141:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 142:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 143:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 144:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Function/Event configuration:
 145:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 146:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 147:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 148:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 149:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 150:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(), 
 151:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 152:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 153:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 154:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 155:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 156:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 157:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Interrupt configuration:
 158:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 159:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 160:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 161:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 162:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 163:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * MACROS
 164:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 165:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 166:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 167:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 168:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 169:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 170:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 171:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 172:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 173:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 174:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 175:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 176:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 177:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * ENUMS
 178:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 179:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 180:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 181:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 182:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 183:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 184:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 185:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 186:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 187:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 188:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 189:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 190:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 191:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Return Value of an API
 192:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 193:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 194:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 195:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 196:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR       , /**< API cannot fulfil the request */
 197:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING     , /**< The timer slice is currently running */
 198:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 199:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 200:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 201:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 202:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 module clock
 203:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 204:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 205:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 206:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 207:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A     , /**< External clock-A */
 208:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B     , /**< External clock-B */
 209:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 210:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 211:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 212:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 213:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 214:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 215:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 216:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 217:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 218:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 219:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 220:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 221:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 222:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 223:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 224:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 225:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 226:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 227:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 228:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 229:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 230:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 231:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 232:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 233:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 234:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 235:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 236:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 237:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 238:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 239:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 240:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 241:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 242:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 243:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 244:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 245:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer counting modes for the slice
 246:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 247:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 248:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 249:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 250:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 251:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 252:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 253:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 254:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer repetition mode for the slice
 255:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 256:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 257:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 258:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 259:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 260:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 261:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 262:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 263:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 264:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 265:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 266:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 267:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 268:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 269:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 270:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 271:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 272:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 273:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Capture mode register sets
 274:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 275:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 276:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 277:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 278:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 279:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 280:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 281:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 282:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prescaler mode
 283:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 284:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 285:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 286:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 287:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 288:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 289:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 290:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 291:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer output passive level
 292:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 293:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 294:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 295:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 296:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 297:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 298:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 299:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 300:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer clock Divider
 301:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 302:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 303:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 304:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 305:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2      , /**< Slice Clock = fccu4/2 */
 306:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4      , /**< Slice Clock = fccu4/4 */
 307:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8      , /**< Slice Clock = fccu4/8 */
 308:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16     , /**< Slice Clock = fccu4/16 */
 309:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32     , /**< Slice Clock = fccu4/32 */
 310:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64     , /**< Slice Clock = fccu4/64 */
 311:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128    , /**< Slice Clock = fccu4/128 */
 312:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256    , /**< Slice Clock = fccu4/256 */
 313:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512    , /**< Slice Clock = fccu4/512 */
 314:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu4/1024 */
 315:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu4/2048 */
 316:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu4/4096 */
 317:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu4/8192 */
 318:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu4/16384 */
 319:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 320:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 321:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 322:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 323:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Function list
 324:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 325:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 326:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 327:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 328:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP                , /**< Stop function */
 329:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 330:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 331:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 332:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 333:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING              , /**< Gating function */
 334:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 335:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD                , /**< Load function */
 336:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT               , /**< Counting function */
 337:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 338:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 339:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 340:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 341:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 342:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 343:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event list
 344:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 345:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 346:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 347:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 348:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0         , /**< Event-0 */
 349:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1         , /**< Event-1 */
 350:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 351:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 352:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 353:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 354:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 355:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 356:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 357:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 358:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 359:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE      , /**< Rising Edge of the input signal gen
 360:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE     , /**< Falling Edge of the input signal ge
 361:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 trigger */
 362:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 363:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 364:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 365:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 366:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 367:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 368:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 369:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 370:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 371:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 372:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 373:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 374:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 375:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 376:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 377:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 378:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 379:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 380:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 381:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 382:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 383:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES      , /**< 3 clock cycles */
 384:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES      , /**< 5 clock cycles */
 385:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 386:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 387:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 388:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 389:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 390:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Interconnects are specific to each device.
 391:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 392:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 393:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 394:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 395:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 396:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 397:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 398:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 399:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 400:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 401:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 402:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 403:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 404:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 405:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 406:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 407:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 408:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 409:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 410:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 411:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 412:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 413:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 414:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Modulation of timer output signals
 415:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 416:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 417:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 418:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 419:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 420:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 421:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 422:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 423:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Trap exit mode
 424:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 425:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 426:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 427:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 428:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 429:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 430:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 431:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 432:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer clear on capture
 433:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 434:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 435:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 436:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 437:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 438:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 439:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 440:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 441:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 442:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 443:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 444:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 445:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 446:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 447:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 448:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 449:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 450:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 register values to the actual regis
 451:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 request */
 452:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 453:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 Compare register values to the actu
 454:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 MCS xfer request */
 455:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 456:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 457:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 458:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids
 459:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 460:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 461:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 462:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U , /**< Period match counting up */
 463:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U , /**< Period match -> One match counting down */
 464:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U , /**< Compare match counting up */
 465:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U , /**< Compare match counting down */
 466:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U , /**< Event-0 occurrence */
 467:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U , /**< Event-1 occurrence */
 468:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 469:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 470:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 471:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 472:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 473:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 474:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 475:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 476:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 477:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 478:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 479:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 480:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 481:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 482:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 483:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 484:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 485:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 486:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 487:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 488:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 489:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 490:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 491:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 492:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 493:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 494:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 495:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 496:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 497:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 498:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer options.
 499:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 500:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 501:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 502:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 503:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 504:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-0 */
 505:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 506:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 507:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 508:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 509:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 510:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 511:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-1 */
 512:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 513:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual registers for S
 514:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 515:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 516:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 517:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 518:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-2 */
 519:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 520:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 521:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 522:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 523:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 524:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 525:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-3 */
 526:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 527:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 528:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 529:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 530:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 531:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 532:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 533:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 534:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 535:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Only available for XMC1400 series
 536:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 537:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 538:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 539:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 540:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                 One match. */
 541:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 542:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 543:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t; 
 544:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 545:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 546:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 547:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Immediate write into configuration register
 548:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 549:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 550:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 551:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 552:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 553:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 554:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 555:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 556:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 557:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 558:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 559:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 560:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 561:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 562:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 563:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 564:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 565:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 566:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Val
 567:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 568:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 569:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 570:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 571:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 572:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 573:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 574:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 575:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 576:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 577:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 578:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 579:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 580:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 581:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 582:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 583:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 584:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 585:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 586:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 587:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 588:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 589:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 590:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 591:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 592:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 593:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 594:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 595:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 596:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 597:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 598:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 599:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 600:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 601:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 602:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 603:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 604:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 605:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 606:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 607:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 608:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 609:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects suspend mode
 610:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 611:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SUSPEND_MODE
 612:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 613:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_IGNORE = 0 << CCU4_GCTRL_SUSCFG_Pos, /**< Suspend request ignored. The modu
 614:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_STOPS_INMEDIATELLY = 1 << CCU4_GCTRL_SUSCFG_Pos, /**< Stops all the running
 615:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_SAFE_STOP = 2 << CCU4_GCTRL_SUSCFG_Pos, /**< Stops the block immediately an
 616:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_WAIT_ROLL_OVER = 3 << CCU4_GCTRL_SUSCFG_Pos /**< Waits for the roll over of
 617:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SUSPEND_MODE_t;
 618:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 619:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 620:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 621:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DATA STRUCTURES
 622:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 623:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 624:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 625:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 626:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 627:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 628:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 629:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 630:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 631:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 632:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 633:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 634:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 635:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an level sensitive
 636:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 637:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 638:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 639:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 640:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 641:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma push
 642:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma anon_unions
 643:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 644:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning 586
 645:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 646:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 647:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 648:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 649:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 650:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 651:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 652:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 653:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 654:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 655:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 656:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 657:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 658:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 659:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 660:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 661:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 662:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 10;
 663:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 664:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 665:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 1;
 666:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 667:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 668:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 8;
 669:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 670:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 6;
 671:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 672:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 673:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 674:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 675:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 676:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 677:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 678:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 679:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 680:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 681:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 682:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 683:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 684:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 685:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 686:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 687:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 688:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 689:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 690:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 691:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 692:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 693:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 694:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 695:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 696:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 697:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 698:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 699:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 700:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 3;
 701:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 702:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 15;
 703:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 704:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 705:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 706:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 707:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 708:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 709:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 710:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 711:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 712:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma pop
 713:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 714:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning restore
 715:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 716:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 717:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * API Prototypes
 718:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 719:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 720:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifdef __cplusplus
 721:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** extern "C" {
 722:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 723:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 724:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 725:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 726:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 727:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 728:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (module == CCU40);
 729:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 730:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41) 
 731:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 732:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 733:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 734:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 735:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 736:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 737:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 738:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 739:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 740:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 741:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 742:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 743:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 744:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 745:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 746:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 747:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 748:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 749:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 750:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC41)  
 751:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 752:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 753:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC42)  
 754:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 755:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 756:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC43)  
 757:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 758:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 759:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)  
 760:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 761:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC41)  
 762:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 763:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 764:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC42)  
 765:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 766:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 767:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC43)  
 768:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 769:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 770:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 771:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)  
 772:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 773:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC41)  
 774:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 775:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 776:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC42)  
 777:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 778:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 779:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC43)  
 780:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 781:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 782:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 783:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)  
 784:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 785:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC41)  
 786:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 787:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 788:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC42)  
 789:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 790:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 791:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC43)  
 792:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 793:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 794:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 795:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 796:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 797:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 798:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 799:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 800:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 801:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 802:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 803:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 804:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 805:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 806:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 807:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 808:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 809:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 810:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 811:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 812:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 813:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 814:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 815:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 816:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 817:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 818:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 819:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 820:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 821:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 822:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 823:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 824:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 825:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 826:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 827:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 828:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 829:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.<BR>
 830:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 831:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 832:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 833:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 834:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 835:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 836:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 837:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 838:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 839:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 840:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 841:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 842:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 843:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 844:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 845:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 846:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 847:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 848:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 849:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 850:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 851:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 852:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 853:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 854:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 855:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * on the device being selected).<BR>\n
 856:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 857:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 858:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 859:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 860:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 861:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 862:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 863:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 864:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 865:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 866:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 867:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 868:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 869:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 870:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 871:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 872:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 873:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 874:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 875:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 876:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 877:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 878:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 879:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 880:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 881:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 882:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 211              	 .loc 2 882 0
 212 000a 4FF48073 	 mov r3,#256
 213 000e E360     	 str r3,[r4,#12]
 214              	.LBE17:
 215              	.LBE16:
 326:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Start the prescaler */
 327:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_StartPrescaler(module);
 328:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 329:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 216              	 .loc 1 329 0
 217 0010 2368     	 ldr r3,[r4]
 218              	.LVL17:
 330:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 219              	 .loc 1 330 0
 220 0012 23F44043 	 bic r3,r3,#49152
 221              	.LVL18:
 331:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 222              	 .loc 1 331 0
 223 0016 43EA8531 	 orr r1,r3,r5,lsl#14
 224              	.LVL19:
 332:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 333:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 225              	 .loc 1 333 0
 226 001a 2160     	 str r1,[r4]
 227 001c 38BD     	 pop {r3,r4,r5,pc}
 228              	 .cfi_endproc
 229              	.LFE221:
 231              	 .section .text.XMC_CCU4_SetModuleClock,"ax",%progbits
 232              	 .align 1
 233              	 .global XMC_CCU4_SetModuleClock
 234              	 .thumb
 235              	 .thumb_func
 237              	XMC_CCU4_SetModuleClock:
 238              	.LFB222:
 334:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 335:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 336:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to select CCU4 module clock */
 337:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
 338:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 239              	 .loc 1 338 0
 240              	 .cfi_startproc
 241              	 
 242              	 
 243              	 
 244              	.LVL20:
 339:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 340:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 341:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 342:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));
 343:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 344:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 245              	 .loc 1 344 0
 246 0000 0368     	 ldr r3,[r0]
 247              	.LVL21:
 345:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 248              	 .loc 1 345 0
 249 0002 23F03003 	 bic r3,r3,#48
 250              	.LVL22:
 346:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 251              	 .loc 1 346 0
 252 0006 43EA0111 	 orr r1,r3,r1,lsl#4
 253              	.LVL23:
 347:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 348:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 254              	 .loc 1 348 0
 255 000a 0160     	 str r1,[r0]
 256 000c 7047     	 bx lr
 257              	 .cfi_endproc
 258              	.LFE222:
 260              	 .section .text.XMC_CCU4_SetMultiChannelShadowTransferMode,"ax",%progbits
 261              	 .align 1
 262              	 .global XMC_CCU4_SetMultiChannelShadowTransferMode
 263              	 .thumb
 264              	 .thumb_func
 266              	XMC_CCU4_SetMultiChannelShadowTransferMode:
 267              	.LFB223:
 349:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 350:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 351:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. *
 352:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t sli
 353:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 268              	 .loc 1 353 0
 269              	 .cfi_startproc
 270              	 
 271              	 
 272              	 
 273              	.LVL24:
 354:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 355:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 356:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidM
 357:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 358:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 274              	 .loc 1 358 0
 275 0000 0368     	 ldr r3,[r0]
 276              	.LVL25:
 359:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 277              	 .loc 1 359 0
 278 0002 23EA1143 	 bic r3,r3,r1,lsr#16
 279              	.LVL26:
 360:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 280              	 .loc 1 360 0
 281 0006 89B2     	 uxth r1,r1
 282              	.LVL27:
 283 0008 1943     	 orrs r1,r1,r3
 284              	.LVL28:
 361:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 285              	 .loc 1 361 0
 286 000a 0160     	 str r1,[r0]
 287 000c 7047     	 bx lr
 288              	 .cfi_endproc
 289              	.LFE223:
 291              	 .section .text.XMC_CCU4_SLICE_CompareInit,"ax",%progbits
 292              	 .align 1
 293              	 .global XMC_CCU4_SLICE_CompareInit
 294              	 .thumb
 295              	 .thumb_func
 297              	XMC_CCU4_SLICE_CompareInit:
 298              	.LFB224:
 362:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 363:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 364:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure CC4 Slice as Timer */
 365:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 366:../Libraries/XMCLib/src/xmc_ccu4.c ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
 367:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 299              	 .loc 1 367 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303              	 
 304              	.LVL29:
 368:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 369:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
 370:../Libraries/XMCLib/src/xmc_ccu4.c ****              (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
 371:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 372:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the timer mode */
 373:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = compare_init->tc;
 305              	 .loc 1 373 0
 306 0000 0B68     	 ldr r3,[r1]
 307 0002 4361     	 str r3,[r0,#20]
 374:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable the timer concatenation */
 375:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 308              	 .loc 1 375 0
 309 0004 4B79     	 ldrb r3,[r1,#5]
 310 0006 C3F34013 	 ubfx r3,r3,#5,#1
 311 000a 1B05     	 lsls r3,r3,#20
 312 000c 4360     	 str r3,[r0,#4]
 376:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial prescaler divider value */
 377:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) compare_init->prescaler_initval;
 313              	 .loc 1 377 0
 314 000e 0B79     	 ldrb r3,[r1,#4]
 315 0010 03F00F03 	 and r3,r3,#15
 316 0014 4362     	 str r3,[r0,#36]
 378:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the dither compare value */
 379:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->DITS = (uint32_t) compare_init->dither_limit;
 317              	 .loc 1 379 0
 318 0016 4B79     	 ldrb r3,[r1,#5]
 319 0018 03F00F03 	 and r3,r3,#15
 320 001c 0362     	 str r3,[r0,#32]
 380:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program timer output passive level */
 381:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSL = (uint32_t) compare_init->passive_level;
 321              	 .loc 1 381 0
 322 001e 4B79     	 ldrb r3,[r1,#5]
 323 0020 C3F30013 	 ubfx r3,r3,#4,#1
 324 0024 8361     	 str r3,[r0,#24]
 382:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program floating prescaler compare value */
 383:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPCS = (uint32_t) compare_init->float_limit;
 325              	 .loc 1 383 0
 326 0026 0B79     	 ldrb r3,[r1,#4]
 327 0028 1B09     	 lsrs r3,r3,#4
 328 002a C362     	 str r3,[r0,#44]
 329 002c 7047     	 bx lr
 330              	 .cfi_endproc
 331              	.LFE224:
 333              	 .section .text.XMC_CCU4_SLICE_CaptureInit,"ax",%progbits
 334              	 .align 1
 335              	 .global XMC_CCU4_SLICE_CaptureInit
 336              	 .thumb
 337              	 .thumb_func
 339              	XMC_CCU4_SLICE_CaptureInit:
 340              	.LFB225:
 384:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 385:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 386:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure CC4 Slice for Capture */
 387:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
 388:../Libraries/XMCLib/src/xmc_ccu4.c ****                             const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
 389:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 341              	 .loc 1 389 0
 342              	 .cfi_startproc
 343              	 
 344              	 
 345              	 
 346              	.LVL30:
 390:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 391:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
 392:../Libraries/XMCLib/src/xmc_ccu4.c ****              (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);
 393:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 394:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the capture mode */
 395:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = capture_init->tc;
 347              	 .loc 1 395 0
 348 0000 0B68     	 ldr r3,[r1]
 349 0002 4361     	 str r3,[r0,#20]
 396:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable the timer concatenation */
 397:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 350              	 .loc 1 397 0
 351 0004 4B79     	 ldrb r3,[r1,#5]
 352 0006 03F00103 	 and r3,r3,#1
 353 000a 1B05     	 lsls r3,r3,#20
 354 000c 4360     	 str r3,[r0,#4]
 398:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial prescaler divider value */
 399:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) capture_init->prescaler_initval;
 355              	 .loc 1 399 0
 356 000e 0B79     	 ldrb r3,[r1,#4]
 357 0010 03F00F03 	 and r3,r3,#15
 358 0014 4362     	 str r3,[r0,#36]
 400:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial floating prescaler compare value */
 401:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPCS = (uint32_t) capture_init->float_limit;
 359              	 .loc 1 401 0
 360 0016 0B79     	 ldrb r3,[r1,#4]
 361 0018 1B09     	 lsrs r3,r3,#4
 362 001a C362     	 str r3,[r0,#44]
 363 001c 7047     	 bx lr
 364              	 .cfi_endproc
 365              	.LFE225:
 367              	 .section .text.XMC_CCU4_SLICE_StartConfig,"ax",%progbits
 368              	 .align 1
 369              	 .global XMC_CCU4_SLICE_StartConfig
 370              	 .thumb
 371              	 .thumb_func
 373              	XMC_CCU4_SLICE_StartConfig:
 374              	.LFB226:
 402:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 403:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 404:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 405:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Start trigger function of a slice */
 406:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
 407:../Libraries/XMCLib/src/xmc_ccu4.c ****                             const XMC_CCU4_SLICE_EVENT_t event,
 408:../Libraries/XMCLib/src/xmc_ccu4.c ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode)
 409:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 375              	 .loc 1 409 0
 376              	 .cfi_startproc
 377              	 
 378              	 
 379              	 
 380              	.LVL31:
 410:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 411:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 412:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 413:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 414:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 415:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
 416:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
 417:../Libraries/XMCLib/src/xmc_ccu4.c ****               (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
 418:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the stop function */
 419:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 381              	 .loc 1 419 0
 382 0000 4368     	 ldr r3,[r0,#4]
 383              	.LVL32:
 420:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 384              	 .loc 1 420 0
 385 0002 23F00303 	 bic r3,r3,#3
 386              	.LVL33:
 421:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 387              	 .loc 1 421 0
 388 0006 1943     	 orrs r1,r1,r3
 389              	.LVL34:
 422:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 423:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 390              	 .loc 1 423 0
 391 0008 4160     	 str r1,[r0,#4]
 424:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 425:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc  = slice->TC;
 392              	 .loc 1 425 0
 393 000a 4369     	 ldr r3,[r0,#20]
 394              	.LVL35:
 426:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure the start mode */
 427:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 395              	 .loc 1 427 0
 396 000c 012A     	 cmp r2,#1
 428:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 429:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 397              	 .loc 1 429 0
 398 000e 0CBF     	 ite eq
 399 0010 43F48063 	 orreq r3,r3,#1024
 400              	.LVL36:
 430:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 431:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 432:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 433:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 401              	 .loc 1 433 0
 402 0014 23F48063 	 bicne r3,r3,#1024
 403              	.LVL37:
 434:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 435:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 436:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 404              	 .loc 1 436 0
 405 0018 4361     	 str r3,[r0,#20]
 406 001a 7047     	 bx lr
 407              	 .cfi_endproc
 408              	.LFE226:
 410              	 .section .text.XMC_CCU4_SLICE_StopConfig,"ax",%progbits
 411              	 .align 1
 412              	 .global XMC_CCU4_SLICE_StopConfig
 413              	 .thumb
 414              	 .thumb_func
 416              	XMC_CCU4_SLICE_StopConfig:
 417              	.LFB227:
 437:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 438:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 439:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Stop trigger function of a slice */
 440:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
 441:../Libraries/XMCLib/src/xmc_ccu4.c ****                            const XMC_CCU4_SLICE_EVENT_t event,
 442:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode)
 443:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 418              	 .loc 1 443 0
 419              	 .cfi_startproc
 420              	 
 421              	 
 422              	 
 423              	.LVL38:
 444:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 445:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 446:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 447:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 448:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 449:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
 450:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 451:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the stop function */
 452:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 424              	 .loc 1 452 0
 425 0000 4368     	 ldr r3,[r0,#4]
 426              	.LVL39:
 453:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 427              	 .loc 1 453 0
 428 0002 23F00C03 	 bic r3,r3,#12
 429              	.LVL40:
 454:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 430              	 .loc 1 454 0
 431 0006 43EA8101 	 orr r1,r3,r1,lsl#2
 432              	.LVL41:
 455:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 456:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 433              	 .loc 1 456 0
 434 000a 4160     	 str r1,[r0,#4]
 457:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 458:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure the stop mode */
 459:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 435              	 .loc 1 459 0
 436 000c 4369     	 ldr r3,[r0,#20]
 437              	.LVL42:
 460:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 438              	 .loc 1 460 0
 439 000e 23F44073 	 bic r3,r3,#768
 440              	.LVL43:
 461:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 441              	 .loc 1 461 0
 442 0012 43EA0222 	 orr r2,r3,r2,lsl#8
 443              	.LVL44:
 462:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 463:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 444              	 .loc 1 463 0
 445 0016 4261     	 str r2,[r0,#20]
 446 0018 7047     	 bx lr
 447              	 .cfi_endproc
 448              	.LFE227:
 450              	 .section .text.XMC_CCU4_SLICE_LoadConfig,"ax",%progbits
 451              	 .align 1
 452              	 .global XMC_CCU4_SLICE_LoadConfig
 453              	 .thumb
 454              	 .thumb_func
 456              	XMC_CCU4_SLICE_LoadConfig:
 457              	.LFB228:
 464:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 465:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 466:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Load trigger function of a slice */
 467:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 468:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 458              	 .loc 1 468 0
 459              	 .cfi_startproc
 460              	 
 461              	 
 462              	 
 463              	.LVL45:
 469:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 470:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 471:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 472:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 473:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 474:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the load function */
 475:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 464              	 .loc 1 475 0
 465 0000 4368     	 ldr r3,[r0,#4]
 466              	.LVL46:
 476:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 467              	 .loc 1 476 0
 468 0002 23F44053 	 bic r3,r3,#12288
 469              	.LVL47:
 477:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 470              	 .loc 1 477 0
 471 0006 43EA0131 	 orr r1,r3,r1,lsl#12
 472              	.LVL48:
 478:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 479:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 473              	 .loc 1 479 0
 474 000a 4160     	 str r1,[r0,#4]
 475 000c 7047     	 bx lr
 476              	 .cfi_endproc
 477              	.LFE228:
 479              	 .section .text.XMC_CCU4_SLICE_ModulationConfig,"ax",%progbits
 480              	 .align 1
 481              	 .global XMC_CCU4_SLICE_ModulationConfig
 482              	 .thumb
 483              	 .thumb_func
 485              	XMC_CCU4_SLICE_ModulationConfig:
 486              	.LFB229:
 480:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 481:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 482:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the slice modulation function */
 483:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
 484:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_EVENT_t event,
 485:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
 486:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const bool synch_with_pwm)
 487:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 487              	 .loc 1 487 0
 488              	 .cfi_startproc
 489              	 
 490              	 
 491              	.LVL49:
 492 0000 30B5     	 push {r4,r5,lr}
 493              	.LCFI4:
 494              	 .cfi_def_cfa_offset 12
 495              	 .cfi_offset 4,-12
 496              	 .cfi_offset 5,-8
 497              	 .cfi_offset 14,-4
 488:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 489:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 490:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 491:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
 492:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(even
 493:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
 494:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
 495:../Libraries/XMCLib/src/xmc_ccu4.c ****               (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
 496:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 497:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc  = slice->TC;
 498              	 .loc 1 497 0
 499 0002 4469     	 ldr r4,[r0,#20]
 500              	.LVL50:
 498:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 501              	 .loc 1 498 0
 502 0004 4568     	 ldr r5,[r0,#4]
 503              	.LVL51:
 499:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 500:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the modulation function */
 501:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 504              	 .loc 1 501 0
 505 0006 25F44025 	 bic r5,r5,#786432
 506              	.LVL52:
 502:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 503:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 504:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 505:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Modulation mode */
 506:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 507              	 .loc 1 506 0
 508 000a 012A     	 cmp r2,#1
 502:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 509              	 .loc 1 502 0
 510 000c 45EA8141 	 orr r1,r5,r1,lsl#18
 511              	.LVL53:
 503:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 512              	 .loc 1 503 0
 513 0010 4160     	 str r1,[r0,#4]
 507:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 508:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 514              	 .loc 1 508 0
 515 0012 0CBF     	 ite eq
 516 0014 44F08072 	 orreq r2,r4,#16777216
 517              	.LVL54:
 509:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 510:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 511:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 512:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 518              	 .loc 1 512 0
 519 0018 24F08072 	 bicne r2,r4,#16777216
 520              	.LVL55:
 513:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 514:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 515:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Synchronization of modulation effect with PWM cycle */
 516:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (synch_with_pwm == (bool) true)
 521              	 .loc 1 516 0
 522 001c 13B1     	 cbz r3,.L31
 517:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 518:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 523              	 .loc 1 518 0
 524 001e 42F40002 	 orr r2,r2,#8388608
 525              	.LVL56:
 526 0022 01E0     	 b .L32
 527              	.L31:
 519:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 520:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 521:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 522:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 528              	 .loc 1 522 0
 529 0024 22F40002 	 bic r2,r2,#8388608
 530              	.LVL57:
 531              	.L32:
 523:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 524:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 525:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 532              	 .loc 1 525 0
 533 0028 4261     	 str r2,[r0,#20]
 534 002a 30BD     	 pop {r4,r5,pc}
 535              	 .cfi_endproc
 536              	.LFE229:
 538              	 .section .text.XMC_CCU4_SLICE_CountConfig,"ax",%progbits
 539              	 .align 1
 540              	 .global XMC_CCU4_SLICE_CountConfig
 541              	 .thumb
 542              	 .thumb_func
 544              	XMC_CCU4_SLICE_CountConfig:
 545              	.LFB230:
 526:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 527:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 528:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the slice count function */
 529:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 530:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 546              	 .loc 1 530 0
 547              	 .cfi_startproc
 548              	 
 549              	 
 550              	 
 551              	.LVL58:
 531:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 532:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 533:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 534:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 535:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 536:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the count function */
 537:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 552              	 .loc 1 537 0
 553 0000 4368     	 ldr r3,[r0,#4]
 554              	.LVL59:
 538:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 555              	 .loc 1 538 0
 556 0002 23F44043 	 bic r3,r3,#49152
 557              	.LVL60:
 539:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 558              	 .loc 1 539 0
 559 0006 43EA8131 	 orr r1,r3,r1,lsl#14
 560              	.LVL61:
 540:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 541:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 561              	 .loc 1 541 0
 562 000a 4160     	 str r1,[r0,#4]
 563 000c 7047     	 bx lr
 564              	 .cfi_endproc
 565              	.LFE230:
 567              	 .section .text.XMC_CCU4_SLICE_GateConfig,"ax",%progbits
 568              	 .align 1
 569              	 .global XMC_CCU4_SLICE_GateConfig
 570              	 .thumb
 571              	 .thumb_func
 573              	XMC_CCU4_SLICE_GateConfig:
 574              	.LFB231:
 542:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 543:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 544:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure slice gate function */
 545:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 546:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 575              	 .loc 1 546 0
 576              	 .cfi_startproc
 577              	 
 578              	 
 579              	 
 580              	.LVL62:
 547:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 548:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 549:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 550:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 551:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 552:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 553:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 581              	 .loc 1 553 0
 582 0000 4368     	 ldr r3,[r0,#4]
 583              	.LVL63:
 554:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 584              	 .loc 1 554 0
 585 0002 23F44073 	 bic r3,r3,#768
 586              	.LVL64:
 555:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 587              	 .loc 1 555 0
 588 0006 43EA0121 	 orr r1,r3,r1,lsl#8
 589              	.LVL65:
 556:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 557:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 590              	 .loc 1 557 0
 591 000a 4160     	 str r1,[r0,#4]
 592 000c 7047     	 bx lr
 593              	 .cfi_endproc
 594              	.LFE231:
 596              	 .section .text.XMC_CCU4_SLICE_Capture0Config,"ax",%progbits
 597              	 .align 1
 598              	 .global XMC_CCU4_SLICE_Capture0Config
 599              	 .thumb
 600              	 .thumb_func
 602              	XMC_CCU4_SLICE_Capture0Config:
 603              	.LFB232:
 558:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 559:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 560:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure Capture-0 function */
 561:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
 562:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 604              	 .loc 1 562 0
 605              	 .cfi_startproc
 606              	 
 607              	 
 608              	 
 609              	.LVL66:
 563:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 564:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 565:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 566:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 567:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 568:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 569:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 610              	 .loc 1 569 0
 611 0000 4368     	 ldr r3,[r0,#4]
 612              	.LVL67:
 570:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 613              	 .loc 1 570 0
 614 0002 23F03003 	 bic r3,r3,#48
 615              	.LVL68:
 571:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 616              	 .loc 1 571 0
 617 0006 43EA0111 	 orr r1,r3,r1,lsl#4
 618              	.LVL69:
 572:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 573:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 619              	 .loc 1 573 0
 620 000a 4160     	 str r1,[r0,#4]
 621 000c 7047     	 bx lr
 622              	 .cfi_endproc
 623              	.LFE232:
 625              	 .section .text.XMC_CCU4_SLICE_Capture1Config,"ax",%progbits
 626              	 .align 1
 627              	 .global XMC_CCU4_SLICE_Capture1Config
 628              	 .thumb
 629              	 .thumb_func
 631              	XMC_CCU4_SLICE_Capture1Config:
 632              	.LFB233:
 574:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 575:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 576:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure Capture-1 function */
 577:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
 578:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 633              	 .loc 1 578 0
 634              	 .cfi_startproc
 635              	 
 636              	 
 637              	 
 638              	.LVL70:
 579:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 580:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 581:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 582:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 583:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 584:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 585:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 639              	 .loc 1 585 0
 640 0000 4368     	 ldr r3,[r0,#4]
 641              	.LVL71:
 586:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 642              	 .loc 1 586 0
 643 0002 23F0C003 	 bic r3,r3,#192
 644              	.LVL72:
 587:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 645              	 .loc 1 587 0
 646 0006 43EA8111 	 orr r1,r3,r1,lsl#6
 647              	.LVL73:
 588:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 589:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 648              	 .loc 1 589 0
 649 000a 4160     	 str r1,[r0,#4]
 650 000c 7047     	 bx lr
 651              	 .cfi_endproc
 652              	.LFE233:
 654              	 .section .text.XMC_CCU4_SLICE_DirectionConfig,"ax",%progbits
 655              	 .align 1
 656              	 .global XMC_CCU4_SLICE_DirectionConfig
 657              	 .thumb
 658              	 .thumb_func
 660              	XMC_CCU4_SLICE_DirectionConfig:
 661              	.LFB234:
 590:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 591:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 592:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure direction function */
 593:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
 594:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 662              	 .loc 1 594 0
 663              	 .cfi_startproc
 664              	 
 665              	 
 666              	 
 667              	.LVL74:
 595:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 596:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 597:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 598:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event
 599:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 600:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the direction function */
 601:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 668              	 .loc 1 601 0
 669 0000 4368     	 ldr r3,[r0,#4]
 670              	.LVL75:
 602:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 671              	 .loc 1 602 0
 672 0002 23F44063 	 bic r3,r3,#3072
 673              	.LVL76:
 603:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 674              	 .loc 1 603 0
 675 0006 43EA8121 	 orr r1,r3,r1,lsl#10
 676              	.LVL77:
 604:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 605:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 677              	 .loc 1 605 0
 678 000a 4160     	 str r1,[r0,#4]
 679 000c 7047     	 bx lr
 680              	 .cfi_endproc
 681              	.LFE234:
 683              	 .section .text.XMC_CCU4_SLICE_StatusBitOverrideConfig,"ax",%progbits
 684              	 .align 1
 685              	 .global XMC_CCU4_SLICE_StatusBitOverrideConfig
 686              	 .thumb
 687              	 .thumb_func
 689              	XMC_CCU4_SLICE_StatusBitOverrideConfig:
 690              	.LFB235:
 606:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 607:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 608:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure slice status bit override function */
 609:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
 610:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 691              	 .loc 1 610 0
 692              	 .cfi_startproc
 693              	 
 694              	 
 695              	 
 696              	.LVL78:
 611:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 612:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 613:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
 614:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 615:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the override function */
 616:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 697              	 .loc 1 616 0
 698 0000 4368     	 ldr r3,[r0,#4]
 699              	.LVL79:
 617:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Map status bit trigger override to Event 1 & 
 618:../Libraries/XMCLib/src/xmc_ccu4.c ****          status bit value override to Event 2 */
 619:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 620:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 700              	 .loc 1 620 0
 701 0002 43F48033 	 orr r3,r3,#65536
 702              	.LVL80:
 621:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 622:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 703              	 .loc 1 622 0
 704 0006 4360     	 str r3,[r0,#4]
 705 0008 7047     	 bx lr
 706              	 .cfi_endproc
 707              	.LFE235:
 709              	 .section .text.XMC_CCU4_SLICE_TrapConfig,"ax",%progbits
 710              	 .align 1
 711              	 .global XMC_CCU4_SLICE_TrapConfig
 712              	 .thumb
 713              	 .thumb_func
 715              	XMC_CCU4_SLICE_TrapConfig:
 716              	.LFB236:
 623:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 624:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 625:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure trap function */
 626:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
 627:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
 628:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const bool synch_with_pwm)
 629:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 717              	 .loc 1 629 0
 718              	 .cfi_startproc
 719              	 
 720              	 
 721              	 
 722              	.LVL81:
 630:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 631:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 632:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 633:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 634:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT
 635:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                              (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT
 636:../Libraries/XMCLib/src/xmc_ccu4.c ****     
 637:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Map trap function to Event 2 */
 638:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 723              	 .loc 1 638 0
 724 0000 4368     	 ldr r3,[r0,#4]
 725              	.LVL82:
 639:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 640:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 726              	 .loc 1 640 0
 727 0002 43F40033 	 orr r3,r3,#131072
 728              	.LVL83:
 641:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 729              	 .loc 1 641 0
 730 0006 4360     	 str r3,[r0,#4]
 642:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 643:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure synchronization option */
 644:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 731              	 .loc 1 644 0
 732 0008 4369     	 ldr r3,[r0,#20]
 733              	.LVL84:
 645:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 646:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (synch_with_pwm == (bool) true)
 734              	 .loc 1 646 0
 735 000a 12B1     	 cbz r2,.L40
 647:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 648:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 736              	 .loc 1 648 0
 737 000c 43F40013 	 orr r3,r3,#2097152
 738              	.LVL85:
 739 0010 01E0     	 b .L41
 740              	.L40:
 649:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 650:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 651:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 652:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 741              	 .loc 1 652 0
 742 0012 23F40013 	 bic r3,r3,#2097152
 743              	.LVL86:
 744              	.L41:
 653:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 654:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 655:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure exit mode */
 656:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 745              	 .loc 1 656 0
 746 0016 0129     	 cmp r1,#1
 657:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 658:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 747              	 .loc 1 658 0
 748 0018 0CBF     	 ite eq
 749 001a 43F48003 	 orreq r3,r3,#4194304
 750              	.LVL87:
 659:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 660:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 661:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 662:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 751              	 .loc 1 662 0
 752 001e 23F48003 	 bicne r3,r3,#4194304
 753              	.LVL88:
 663:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 664:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 665:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 754              	 .loc 1 665 0
 755 0022 4361     	 str r3,[r0,#20]
 756              	.LVL89:
 757 0024 7047     	 bx lr
 758              	 .cfi_endproc
 759              	.LFE236:
 761              	 .section .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent,"ax",%progbits
 762              	 .align 1
 763              	 .global XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
 764              	 .thumb
 765              	 .thumb_func
 767              	XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:
 768              	.LFB237:
 666:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 667:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 668:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure a slice Status Bit Override event */
 669:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
 670:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
 671:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
 672:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 769              	 .loc 1 672 0
 770              	 .cfi_startproc
 771              	 
 772              	 
 773              	.LVL90:
 673:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 674:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 675:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Slice Pointer", XMC_CCU4_IsVal
 676:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 677:../Libraries/XMCLib/src/xmc_ccu4.c ****          XMC_CCU4_SLICE_IsInputvalid(ev1_config->mapped_input));
 678:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 679:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(ev1_config->edge));
 680:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 681:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((ev1_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 682:../Libraries/XMCLib/src/xmc_ccu4.c ****               (ev1_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 683:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 684:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(ev1_config->duration));
 685:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 686:../Libraries/XMCLib/src/xmc_ccu4.c ****          XMC_CCU4_SLICE_IsInputvalid(ev2_config->mapped_input));
 687:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 688:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(ev2_config->edge));
 689:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 690:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 691:../Libraries/XMCLib/src/xmc_ccu4.c ****               (ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 692:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period", 
 693:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));
 694:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 695:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS2;
 696:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 697:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 1 */
 698:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV1EM_Pos);
 699:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS2_EV1EM_Pos;
 700:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 701:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 2 */
 702:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV2EM_Pos);
 703:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS2_EV2EM_Pos;
 704:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 705:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 1 */
 706:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV1LM_Pos);
 707:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS2_EV1LM_Pos;
 708:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 709:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 2 */
 710:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV2LM_Pos);
 711:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS2_EV2LM_Pos;
 712:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 713:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 1 */
 714:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF1M_Pos);
 715:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS2_LPF1M_Pos;
 716:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 717:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 2 */
 718:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF2M_Pos);
 719:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS2_LPF2M_Pos;
 720:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 721:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS2 = ins;
 722:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 723:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 724:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 725:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the input for Event1 */
 726:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV1IS_Pos);
 727:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS1_EV1IS_Pos;
 728:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 729:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally, the input for Event2 */
 730:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
 731:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
 732:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 733:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 734:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 735:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 774              	 .loc 1 735 0
 775 0000 0368     	 ldr r3,[r0]
 776              	.LVL91:
 672:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 777              	 .loc 1 672 0
 778 0002 10B5     	 push {r4,lr}
 779              	.LCFI5:
 780              	 .cfi_def_cfa_offset 8
 781              	 .cfi_offset 4,-8
 782              	 .cfi_offset 14,-4
 736:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 737:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 1 */
 738:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 739:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 783              	 .loc 1 739 0
 784 0004 4C78     	 ldrb r4,[r1,#1]
 738:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 785              	 .loc 1 738 0
 786 0006 23F44023 	 bic r3,r3,#786432
 787              	.LVL92:
 788              	 .loc 1 739 0
 789 000a 43EA8443 	 orr r3,r3,r4,lsl#18
 790              	.LVL93:
 740:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 741:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 2 */
 742:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 743:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 791              	 .loc 1 743 0
 792 000e 5478     	 ldrb r4,[r2,#1]
 742:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 793              	 .loc 1 742 0
 794 0010 23F44013 	 bic r3,r3,#3145728
 795              	.LVL94:
 796              	 .loc 1 743 0
 797 0014 43EA0453 	 orr r3,r3,r4,lsl#20
 798              	.LVL95:
 744:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 745:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 1 */
 746:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 747:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 799              	 .loc 1 747 0
 800 0018 8C78     	 ldrb r4,[r1,#2]
 746:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 801              	 .loc 1 746 0
 802 001a 23F40003 	 bic r3,r3,#8388608
 803              	.LVL96:
 804              	 .loc 1 747 0
 805 001e 43EAC453 	 orr r3,r3,r4,lsl#23
 806              	.LVL97:
 748:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 749:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 2 */
 750:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 751:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 807              	 .loc 1 751 0
 808 0022 9478     	 ldrb r4,[r2,#2]
 750:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 809              	 .loc 1 750 0
 810 0024 23F08073 	 bic r3,r3,#16777216
 811              	.LVL98:
 812              	 .loc 1 751 0
 813 0028 43EA0463 	 orr r3,r3,r4,lsl#24
 814              	.LVL99:
 752:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 753:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 1 */
 754:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 755:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 815              	 .loc 1 755 0
 816 002c CC78     	 ldrb r4,[r1,#3]
 756:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 757:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 2 */
 758:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 759:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 760:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 761:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the input for Event1 */
 762:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 763:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 817              	 .loc 1 763 0
 818 002e 0978     	 ldrb r1,[r1]
 819              	.LVL100:
 754:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 820              	 .loc 1 754 0
 821 0030 23F0C053 	 bic r3,r3,#402653184
 822              	.LVL101:
 755:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 823              	 .loc 1 755 0
 824 0034 43EAC463 	 orr r3,r3,r4,lsl#27
 825              	.LVL102:
 759:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 826              	 .loc 1 759 0
 827 0038 D478     	 ldrb r4,[r2,#3]
 764:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 765:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally, the input for Event2 */
 766:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 767:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 828              	 .loc 1 767 0
 829 003a 1278     	 ldrb r2,[r2]
 830              	.LVL103:
 758:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 831              	 .loc 1 758 0
 832 003c 23F0C043 	 bic r3,r3,#1610612736
 833              	.LVL104:
 759:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 834              	 .loc 1 759 0
 835 0040 43EA4473 	 orr r3,r3,r4,lsl#29
 836              	.LVL105:
 762:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 837              	 .loc 1 762 0
 838 0044 23F0F003 	 bic r3,r3,#240
 839              	.LVL106:
 763:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 840              	 .loc 1 763 0
 841 0048 43EA0113 	 orr r3,r3,r1,lsl#4
 842              	.LVL107:
 766:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 843              	 .loc 1 766 0
 844 004c 23F47063 	 bic r3,r3,#3840
 845              	.LVL108:
 846              	 .loc 1 767 0
 847 0050 43EA0223 	 orr r3,r3,r2,lsl#8
 848              	.LVL109:
 768:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 769:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 849              	 .loc 1 769 0
 850 0054 0360     	 str r3,[r0]
 851 0056 10BD     	 pop {r4,pc}
 852              	 .cfi_endproc
 853              	.LFE237:
 855              	 .section .text.XMC_CCU4_SLICE_ConfigureEvent,"ax",%progbits
 856              	 .align 1
 857              	 .global XMC_CCU4_SLICE_ConfigureEvent
 858              	 .thumb
 859              	 .thumb_func
 861              	XMC_CCU4_SLICE_ConfigureEvent:
 862              	.LFB238:
 770:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 771:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 772:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 773:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure a slice trigger event */
 774:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
 775:../Libraries/XMCLib/src/xmc_ccu4.c ****                                    const XMC_CCU4_SLICE_EVENT_t event,
 776:../Libraries/XMCLib/src/xmc_ccu4.c ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
 777:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 863              	 .loc 1 777 0
 864              	 .cfi_startproc
 865              	 
 866              	 
 867              	.LVL110:
 868 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 869              	.LCFI6:
 870              	 .cfi_def_cfa_offset 20
 871              	 .cfi_offset 4,-20
 872              	 .cfi_offset 5,-16
 873              	 .cfi_offset 6,-12
 874              	 .cfi_offset 7,-8
 875              	 .cfi_offset 14,-4
 778:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 779:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  pos;
 780:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  offset;
 781:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 782:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 783:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 784:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(config->map
 785:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Edge Sensitivity",
 786:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(config->edge));
 787:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Level Sensitivity",
 788:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 789:../Libraries/XMCLib/src/xmc_ccu4.c ****               (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 790:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
 791:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
 792:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Calculate offset with reference to event */
 793:../Libraries/XMCLib/src/xmc_ccu4.c ****   offset = ((uint8_t) event) - 1U;
 876              	 .loc 1 793 0
 877 0002 4C1E     	 subs r4,r1,#1
 878 0004 E4B2     	 uxtb r4,r4
 879              	.LVL111:
 794:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 795:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 796:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS2;
 797:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 798:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, configure the edge sensitivity */
 799:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
 800:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 801:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->edge) << pos;
 802:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 803:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the level */
 804:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
 805:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 806:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 807:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 808:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the debounce filter */
 809:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
 810:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 811:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 812:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 813:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS2 = ins;
 814:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 815:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 816:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 817:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally the input */
 818:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
 819:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 820:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 821:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 822:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 823:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 824:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 825:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 826:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 827:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, configure the edge sensitivity */
 828:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 880              	 .loc 1 828 0
 881 0006 6600     	 lsls r6,r4,#1
 882 0008 F6B2     	 uxtb r6,r6
 883 000a 06F1100C 	 add ip,r6,#16
 825:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 884              	 .loc 1 825 0
 885 000e 0568     	 ldr r5,[r0]
 886              	.LVL112:
 829:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 830:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->edge) << pos;
 887              	 .loc 1 830 0
 888 0010 5778     	 ldrb r7,[r2,#1]
 829:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 889              	 .loc 1 829 0
 890 0012 5FFA8CFC 	 uxtb ip,ip
 891 0016 0323     	 movs r3,#3
 892 0018 03FA0CFE 	 lsl lr,r3,ip
 831:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 832:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the level */
 833:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 893              	 .loc 1 833 0
 894 001c 1531     	 adds r1,r1,#21
 895              	.LVL113:
 830:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 896              	 .loc 1 830 0
 897 001e 07FA0CF7 	 lsl r7,r7,ip
 829:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 898              	 .loc 1 829 0
 899 0022 25EA0E0E 	 bic lr,r5,lr
 900              	.LVL114:
 834:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 901              	 .loc 1 834 0
 902 0026 5FFA81FC 	 uxtb ip,r1
 903 002a 0125     	 movs r5,#1
 904 002c 05FA0CF5 	 lsl r5,r5,ip
 830:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 905              	 .loc 1 830 0
 906 0030 4EEA070E 	 orr lr,lr,r7
 907              	.LVL115:
 908              	 .loc 1 834 0
 909 0034 2EEA0507 	 bic r7,lr,r5
 910              	.LVL116:
 835:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 911              	 .loc 1 835 0
 912 0038 9578     	 ldrb r5,[r2,#2]
 836:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 837:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the debounce filter */
 838:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 913              	 .loc 1 838 0
 914 003a 1936     	 adds r6,r6,#25
 839:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 915              	 .loc 1 839 0
 916 003c F6B2     	 uxtb r6,r6
 835:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 917              	 .loc 1 835 0
 918 003e 05FA0CF5 	 lsl r5,r5,ip
 919              	 .loc 1 839 0
 920 0042 B340     	 lsls r3,r3,r6
 835:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 921              	 .loc 1 835 0
 922 0044 3D43     	 orrs r5,r5,r7
 923              	.LVL117:
 924              	 .loc 1 839 0
 925 0046 25EA0301 	 bic r1,r5,r3
 926              	.LVL118:
 840:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 927              	 .loc 1 840 0
 928 004a D378     	 ldrb r3,[r2,#3]
 841:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 842:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally the input */
 843:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 844:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 845:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 929              	 .loc 1 845 0
 930 004c 1278     	 ldrb r2,[r2]
 931              	.LVL119:
 840:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 932              	 .loc 1 840 0
 933 004e B340     	 lsls r3,r3,r6
 843:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 934              	 .loc 1 843 0
 935 0050 A400     	 lsls r4,r4,#2
 936              	.LVL120:
 840:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 937              	 .loc 1 840 0
 938 0052 1943     	 orrs r1,r1,r3
 939              	.LVL121:
 844:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 940              	 .loc 1 844 0
 941 0054 E4B2     	 uxtb r4,r4
 942 0056 0F23     	 movs r3,#15
 943 0058 A340     	 lsls r3,r3,r4
 944 005a 21EA0303 	 bic r3,r1,r3
 945              	.LVL122:
 946              	 .loc 1 845 0
 947 005e A240     	 lsls r2,r2,r4
 948 0060 1343     	 orrs r3,r3,r2
 949              	.LVL123:
 846:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 847:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 950              	 .loc 1 847 0
 951 0062 0360     	 str r3,[r0]
 952 0064 F0BD     	 pop {r4,r5,r6,r7,pc}
 953              	 .cfi_endproc
 954              	.LFE238:
 956              	 .section .text.XMC_CCU4_SLICE_SetInput,"ax",%progbits
 957              	 .align 1
 958              	 .global XMC_CCU4_SLICE_SetInput
 959              	 .thumb
 960              	 .thumb_func
 962              	XMC_CCU4_SLICE_SetInput:
 963              	.LFB239:
 848:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 849:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 850:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 851:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to bind an input to a slice trigger event */
 852:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
 853:../Libraries/XMCLib/src/xmc_ccu4.c ****                          const XMC_CCU4_SLICE_EVENT_t event,
 854:../Libraries/XMCLib/src/xmc_ccu4.c ****                              const XMC_CCU4_SLICE_INPUT_t input)
 855:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 964              	 .loc 1 855 0
 965              	 .cfi_startproc
 966              	 
 967              	 
 968              	.LVL124:
 856:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 857:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  pos;
 858:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  offset;
 859:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 860:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 861:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 862:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
 863:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 864:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Calculate offset with reference to event */
 865:../Libraries/XMCLib/src/xmc_ccu4.c ****   offset = ((uint8_t) event) - 1U;
 969              	 .loc 1 865 0
 970 0000 0139     	 subs r1,r1,#1
 971              	.LVL125:
 855:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 972              	 .loc 1 855 0
 973 0002 10B5     	 push {r4,lr}
 974              	.LCFI7:
 975              	 .cfi_def_cfa_offset 8
 976              	 .cfi_offset 4,-8
 977              	 .cfi_offset 14,-4
 866:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 867:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 868:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t) (offset << 3U);
 869:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 870:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 871:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 872:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) input) << pos;
 873:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 874:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 875:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 876:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 978              	 .loc 1 876 0
 979 0004 8900     	 lsls r1,r1,#2
 877:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 878:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 980              	 .loc 1 878 0
 981 0006 0368     	 ldr r3,[r0]
 982              	.LVL126:
 879:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 983              	 .loc 1 879 0
 984 0008 C9B2     	 uxtb r1,r1
 985 000a 0F24     	 movs r4,#15
 986 000c 8C40     	 lsls r4,r4,r1
 987 000e 23EA0403 	 bic r3,r3,r4
 988              	.LVL127:
 880:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) input) << pos;
 989              	 .loc 1 880 0
 990 0012 8A40     	 lsls r2,r2,r1
 991              	.LVL128:
 992 0014 1A43     	 orrs r2,r2,r3
 993              	.LVL129:
 881:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 882:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 994              	 .loc 1 882 0
 995 0016 0260     	 str r2,[r0]
 996 0018 10BD     	 pop {r4,pc}
 997              	 .cfi_endproc
 998              	.LFE239:
 1000              	 .section .text.XMC_CCU4_SLICE_SetTimerRepeatMode,"ax",%progbits
 1001              	 .align 1
 1002              	 .global XMC_CCU4_SLICE_SetTimerRepeatMode
 1003              	 .thumb
 1004              	 .thumb_func
 1006              	XMC_CCU4_SLICE_SetTimerRepeatMode:
 1007              	.LFB240:
 883:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 884:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 885:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 886:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to program timer repeat mode - Single shot vs repeat */
 887:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
 888:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1008              	 .loc 1 888 0
 1009              	 .cfi_startproc
 1010              	 
 1011              	 
 1012              	 
 1013              	.LVL130:
 889:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
 890:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
 891:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
 892:../Libraries/XMCLib/src/xmc_ccu4.c ****           (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
 893:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 894:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 895:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 896:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 1014              	 .loc 1 896 0
 1015 0000 4369     	 ldr r3,[r0,#20]
 894:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 1016              	 .loc 1 894 0
 1017 0002 11B9     	 cbnz r1,.L48
 1018              	 .loc 1 896 0
 1019 0004 23F00203 	 bic r3,r3,#2
 1020 0008 01E0     	 b .L50
 1021              	.L48:
 897:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 898:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 899:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 900:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 1022              	 .loc 1 900 0
 1023 000a 43F00203 	 orr r3,r3,#2
 1024              	.L50:
 1025 000e 4361     	 str r3,[r0,#20]
 1026 0010 7047     	 bx lr
 1027              	 .cfi_endproc
 1028              	.LFE240:
 1030              	 .section .text.XMC_CCU4_SLICE_SetTimerCountingMode,"ax",%progbits
 1031              	 .align 1
 1032              	 .global XMC_CCU4_SLICE_SetTimerCountingMode
 1033              	 .thumb
 1034              	 .thumb_func
 1036              	XMC_CCU4_SLICE_SetTimerCountingMode:
 1037              	.LFB241:
 901:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 902:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 903:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 904:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Programs timer counting mode */
 905:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
 906:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1038              	 .loc 1 906 0
 1039              	 .cfi_startproc
 1040              	 
 1041              	 
 1042              	 
 1043              	.LVL131:
 907:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
 908:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLI
 909:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                                               (mode == XMC_CCU4_SLI
 910:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 911:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 912:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 913:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 1044              	 .loc 1 913 0
 1045 0000 4369     	 ldr r3,[r0,#20]
 911:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 1046              	 .loc 1 911 0
 1047 0002 11B9     	 cbnz r1,.L52
 1048              	 .loc 1 913 0
 1049 0004 23F00103 	 bic r3,r3,#1
 1050 0008 01E0     	 b .L54
 1051              	.L52:
 914:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 915:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 916:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 917:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 1052              	 .loc 1 917 0
 1053 000a 43F00103 	 orr r3,r3,#1
 1054              	.L54:
 1055 000e 4361     	 str r3,[r0,#20]
 1056 0010 7047     	 bx lr
 1057              	 .cfi_endproc
 1058              	.LFE241:
 1060              	 .section .text.XMC_CCU4_SLICE_GetCaptureRegisterValue,"ax",%progbits
 1061              	 .align 1
 1062              	 .global XMC_CCU4_SLICE_GetCaptureRegisterValue
 1063              	 .thumb
 1064              	 .thumb_func
 1066              	XMC_CCU4_SLICE_GetCaptureRegisterValue:
 1067              	.LFB242:
 918:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 919:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 920:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 921:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Retrieves desired capture register value */
 922:../Libraries/XMCLib/src/xmc_ccu4.c **** uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t 
 923:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1068              	 .loc 1 923 0
 1069              	 .cfi_startproc
 1070              	 
 1071              	 
 1072              	 
 1073              	.LVL132:
 924:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
 925:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
 926:../Libraries/XMCLib/src/xmc_ccu4.c ****   return(slice->CV[reg_num]);
 1074              	 .loc 1 926 0
 1075 0000 1C31     	 adds r1,r1,#28
 1076              	.LVL133:
 1077 0002 00EB8100 	 add r0,r0,r1,lsl#2
 1078              	.LVL134:
 1079 0006 4068     	 ldr r0,[r0,#4]
 927:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1080              	 .loc 1 927 0
 1081 0008 7047     	 bx lr
 1082              	 .cfi_endproc
 1083              	.LFE242:
 1085              	 .section .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue,"ax",%progbits
 1086              	 .align 1
 1087              	 .global XMC_CCU4_SLICE_GetLastCapturedTimerValue
 1088              	 .thumb
 1089              	 .thumb_func
 1091              	XMC_CCU4_SLICE_GetLastCapturedTimerValue:
 1092              	.LFB243:
 928:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 929:../Libraries/XMCLib/src/xmc_ccu4.c **** /* @brief Retrieves the latest captured timer value */
 930:../Libraries/XMCLib/src/xmc_ccu4.c **** XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
 931:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                            const XMC_CCU4_SLICE_CAP_REG_SET_t set,
 932:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                            uint32_t *val_ptr)
 933:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1093              	 .loc 1 933 0
 1094              	 .cfi_startproc
 1095              	 
 1096              	 
 1097              	.LVL135:
 934:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_STATUS_t retval;
 935:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t i;
 936:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t start;
 937:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t end;
 938:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 939:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlic
 940:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLI
 941:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                                                (set == XMC_CCU4_SLI
 942:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 943:../Libraries/XMCLib/src/xmc_ccu4.c ****   retval = XMC_CCU4_STATUS_ERROR;
 944:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 945:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First check if extended capture mode is enabled */
 946:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 1098              	 .loc 1 946 0
 1099 0000 4369     	 ldr r3,[r0,#20]
 933:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_STATUS_t retval;
 1100              	 .loc 1 933 0
 1101 0002 30B5     	 push {r4,r5,lr}
 1102              	.LCFI8:
 1103              	 .cfi_def_cfa_offset 12
 1104              	 .cfi_offset 4,-12
 1105              	 .cfi_offset 5,-8
 1106              	 .cfi_offset 14,-4
 1107              	 .loc 1 946 0
 1108 0004 DD06     	 lsls r5,r3,#27
 1109 0006 06D4     	 bmi .L62
 947:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 948:../Libraries/XMCLib/src/xmc_ccu4.c ****     /* Extended capture mode has been enabled. So start with the lowest capture register and work y
 949:../Libraries/XMCLib/src/xmc_ccu4.c ****     start = 0U;
 950:../Libraries/XMCLib/src/xmc_ccu4.c ****     end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 951:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 952:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 953:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 954:../Libraries/XMCLib/src/xmc_ccu4.c ****     /* Extended capture mode is not enabled */
 955:../Libraries/XMCLib/src/xmc_ccu4.c ****     if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 956:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 957:../Libraries/XMCLib/src/xmc_ccu4.c ****       start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 958:../Libraries/XMCLib/src/xmc_ccu4.c ****       end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 959:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 960:../Libraries/XMCLib/src/xmc_ccu4.c ****     else
 961:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 962:../Libraries/XMCLib/src/xmc_ccu4.c ****       start = 0U;
 963:../Libraries/XMCLib/src/xmc_ccu4.c ****       end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 1110              	 .loc 1 963 0
 1111 0008 0129     	 cmp r1,#1
 1112 000a 0BBF     	 itete eq
 1113 000c 0424     	 moveq r4,#4
 1114 000e 0224     	 movne r4,#2
 1115 0010 0223     	 moveq r3,#2
 1116 0012 0023     	 movne r3,#0
 1117 0014 04E0     	 b .L58
 1118              	.L62:
 950:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 1119              	 .loc 1 950 0
 1120 0016 0424     	 movs r4,#4
 949:../Libraries/XMCLib/src/xmc_ccu4.c ****     end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 1121              	 .loc 1 949 0
 1122 0018 0023     	 movs r3,#0
 1123              	.LVL136:
 964:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 965:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 966:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 967:../Libraries/XMCLib/src/xmc_ccu4.c ****   for(i=start; i < end; i++)
 1124              	 .loc 1 967 0
 1125 001a 01E0     	 b .L58
 1126              	.LVL137:
 1127              	.L59:
 1128              	 .loc 1 967 0 is_stmt 0 discriminator 2
 1129 001c 0133     	 adds r3,r3,#1
 1130              	.LVL138:
 1131 001e DBB2     	 uxtb r3,r3
 1132              	.LVL139:
 1133              	.L58:
 1134              	 .loc 1 967 0 discriminator 1
 1135 0020 A342     	 cmp r3,r4
 1136 0022 0AD0     	 beq .L64
 968:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 969:../Libraries/XMCLib/src/xmc_ccu4.c ****     if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 1137              	 .loc 1 969 0 is_stmt 1
 1138 0024 03F11C01 	 add r1,r3,#28
 1139 0028 00EB8101 	 add r1,r0,r1,lsl#2
 1140 002c 4D68     	 ldr r5,[r1,#4]
 1141 002e ED02     	 lsls r5,r5,#11
 1142 0030 F4D5     	 bpl .L59
 970:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 971:../Libraries/XMCLib/src/xmc_ccu4.c ****       *val_ptr = slice->CV[i];
 1143              	 .loc 1 971 0
 1144 0032 4B68     	 ldr r3,[r1,#4]
 1145              	.LVL140:
 1146 0034 1360     	 str r3,[r2]
 1147              	.LVL141:
 972:../Libraries/XMCLib/src/xmc_ccu4.c ****       retval = XMC_CCU4_STATUS_OK;
 1148              	 .loc 1 972 0
 1149 0036 0020     	 movs r0,#0
 1150              	.LVL142:
 973:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 1151              	 .loc 1 973 0
 1152 0038 30BD     	 pop {r4,r5,pc}
 1153              	.LVL143:
 1154              	.L64:
 943:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 1155              	 .loc 1 943 0
 1156 003a 0120     	 movs r0,#1
 1157              	.LVL144:
 974:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 975:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 976:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 977:../Libraries/XMCLib/src/xmc_ccu4.c ****   return retval;
 978:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1158              	 .loc 1 978 0
 1159 003c 30BD     	 pop {r4,r5,pc}
 1160              	 .cfi_endproc
 1161              	.LFE243:
 1163              	 .section .text.XMC_CCU4_GetCapturedValueFromFifo,"ax",%progbits
 1164              	 .align 1
 1165              	 .global XMC_CCU4_GetCapturedValueFromFifo
 1166              	 .thumb
 1167              	 .thumb_func
 1169              	XMC_CCU4_GetCapturedValueFromFifo:
 1170              	.LFB244:
 979:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 980:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
 981:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
 982:../Libraries/XMCLib/src/xmc_ccu4.c **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
 983:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1171              	 .loc 1 983 0
 1172              	 .cfi_startproc
 1173              	 
 1174              	 
 1175              	 
 1176              	.LVL145:
 984:../Libraries/XMCLib/src/xmc_ccu4.c ****   int32_t   cap;
 985:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t  extracted_slice;
 986:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 987:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(modu
 988:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 989:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First read the global fifo register */
 990:../Libraries/XMCLib/src/xmc_ccu4.c ****   cap = (int32_t) module->ECRD;
 1177              	 .loc 1 990 0
 1178 0000 036D     	 ldr r3,[r0,#80]
 1179              	.LVL146:
 991:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 992:../Libraries/XMCLib/src/xmc_ccu4.c ****   extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 1180              	 .loc 1 992 0
 1181 0002 C3F30150 	 ubfx r0,r3,#20,#2
 1182              	.LVL147:
 993:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 994:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Return captured result only if it were applicable to this slice */
 995:../Libraries/XMCLib/src/xmc_ccu4.c ****   if(extracted_slice != ((uint32_t)slice_number))
 996:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 997:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = -1;
 998:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 999:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1000:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (cap);
1001:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1183              	 .loc 1 1001 0
 1184 0006 8842     	 cmp r0,r1
 1185 0008 0CBF     	 ite eq
 1186 000a 1846     	 moveq r0,r3
 1187 000c 4FF0FF30 	 movne r0,#-1
 1188              	.LVL148:
 1189 0010 7047     	 bx lr
 1190              	 .cfi_endproc
 1191              	.LFE244:
 1193              	 .section .text.XMC_CCU4_SLICE_EnableDithering,"ax",%progbits
 1194              	 .align 1
 1195              	 .global XMC_CCU4_SLICE_EnableDithering
 1196              	 .thumb
 1197              	 .thumb_func
 1199              	XMC_CCU4_SLICE_EnableDithering:
 1200              	.LFB245:
1002:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
1003:../Libraries/XMCLib/src/xmc_ccu4.c **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1004:../Libraries/XMCLib/src/xmc_ccu4.c ****                                              const XMC_CCU4_SLICE_CAP_REG_SET_t set)
1005:../Libraries/XMCLib/src/xmc_ccu4.c **** {
1006:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cap;
1007:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1008:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1009:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCapturedValueFromFifo:Invalid Register Set", 
1010:../Libraries/XMCLib/src/xmc_ccu4.c ****       ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
1011:../Libraries/XMCLib/src/xmc_ccu4.c ****        (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
1012:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1013:../Libraries/XMCLib/src/xmc_ccu4.c ****   if(XMC_CCU4_SLICE_CAP_REG_SET_LOW == set)
1014:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1015:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = slice->ECRD0;
1016:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1017:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
1018:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1019:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = slice->ECRD1;
1020:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1021:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1022:../Libraries/XMCLib/src/xmc_ccu4.c ****   return cap;
1023:../Libraries/XMCLib/src/xmc_ccu4.c **** }
1024:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
1025:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1026:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Enables PWM dithering feature */
1027:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1028:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const bool period_dither,
1029:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const bool duty_dither,
1030:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const uint8_t spread)
1031:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1201              	 .loc 1 1031 0
 1202              	 .cfi_startproc
 1203              	 
 1204              	 
 1205              	.LVL149:
 1206 0000 10B5     	 push {r4,lr}
 1207              	.LCFI9:
 1208              	 .cfi_def_cfa_offset 8
 1209              	 .cfi_offset 4,-8
 1210              	 .cfi_offset 14,-4
1032:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
1033:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1034:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1035:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1036:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 1211              	 .loc 1 1036 0
 1212 0002 4469     	 ldr r4,[r0,#20]
 1213              	.LVL150:
1037:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 1214              	 .loc 1 1037 0
 1215 0004 24F4C044 	 bic r4,r4,#24576
 1216              	.LVL151:
1038:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1039:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((bool) true == period_dither)
 1217              	 .loc 1 1039 0
 1218 0008 09B1     	 cbz r1,.L68
1040:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1041:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 1219              	 .loc 1 1041 0
 1220 000a 44F40054 	 orr r4,r4,#8192
 1221              	.LVL152:
 1222              	.L68:
1042:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1043:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((bool) true == duty_dither)
 1223              	 .loc 1 1043 0
 1224 000e 0AB1     	 cbz r2,.L69
1044:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1045:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 1225              	 .loc 1 1045 0
 1226 0010 44F48044 	 orr r4,r4,#16384
 1227              	.LVL153:
 1228              	.L69:
1046:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1047:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1048:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 1229              	 .loc 1 1048 0
 1230 0014 4461     	 str r4,[r0,#20]
 1231              	.LVL154:
 1232              	.LBB18:
 1233              	.LBB19:
 883:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 884:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 885:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 886:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 887:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 888:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 889:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 890:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 891:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 892:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 893:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 894:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 895:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 896:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 897:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 898:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 899:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 900:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 901:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 902:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS = (uint32_t) CCU4_GIDLS_CPRB_Msk;
 903:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 904:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 905:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 906:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 907:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 908:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 909:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 910:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 911:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 912:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 913:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * module then returns as true.
 914:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 915:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 916:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 917:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 918:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 919:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 920:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 921:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 922:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 923:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 924:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 925:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 926:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 927:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 928:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 929:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 930:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 931:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 932:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 933:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 934:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 935:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 936:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the idle state simultaneously.
 937:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 938:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 939:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 940:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 941:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 942:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 943:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 944:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 945:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 946:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC = (uint32_t) clock_mask;
 947:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 948:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 949:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 950:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 951:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 952:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 953:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 954:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 955:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 956:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 957:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 958:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 959:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 960:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 961:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 962:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 963:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 964:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 965:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 966:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 967:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 968:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 969:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 970:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC = ((uint32_t) 1) << slice_number;
 971:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 972:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 973:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 974:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 975:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 976:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 977:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 978:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 979:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 980:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 981:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
 982:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
 983:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
 984:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
 985:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
 986:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 987:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 988:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
 989:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 990:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
 991:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 992:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 993:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
 994:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 995:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS = ((uint32_t) 1) << slice_number;
 996:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 997:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 998:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 999:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU8 module
1000:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode   Selects suspend mode
1001:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1002:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1003:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1004:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1005:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the entering in suspend mode for all the CCU8 slices.
1006:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1007:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1008:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
1009:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1010:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SetSuspendMode(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SUSPEN
1011:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1012:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
1013:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCTRL = (module->GCTRL & (uint32_t)~CCU4_GCTRL_SUSCFG_Msk) | mode;
1014:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1015:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1016:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1017:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1018:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
1019:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1020:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1021:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1022:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1023:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
1024:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n 
1025:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
1026:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
1027:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
1028:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1029:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1030:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
1031:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1032:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
1033:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
1034:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1035:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1036:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1037:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
1038:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1039:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1040:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1041:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1042:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
1043:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
1044:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1045:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with appropriate mask.
1046:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1047:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1048:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1049:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1050:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1051:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1052:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1053:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1054:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1055:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1056:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1057:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1058:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1059:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1060:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1061:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1062:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1063:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1064:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1065:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1066:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1067:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1068:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1069:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1070:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1071:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1072:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1073:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1074:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1075:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1076:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1077:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1078:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1079:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1080:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1081:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1082:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1083:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1084:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1085:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1086:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1087:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1088:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1089:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1090:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1091:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1092:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1093:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1094:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1095:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1096:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1097:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1098:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1099:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1100:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1101:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1102:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1103:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1104:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1105:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1106:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1107:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1108:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1109:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1110:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1111:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1112:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1113:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1114:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1115:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1116:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1117:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1118:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1119:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1120:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1121:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1122:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1123:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1124:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the modulation function is configured as well.
1125:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1126:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1127:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1128:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1129:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1130:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1131:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1132:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const bool synch_with_pwm);
1133:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1134:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1135:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1136:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1137:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1138:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1139:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1140:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1141:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1142:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1143:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1144:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * edges present on the \b event selected.
1145:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1146:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1147:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1148:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1149:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1150:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1151:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1152:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1153:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1154:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1155:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1156:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1157:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1158:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1159:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1160:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1161:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1162:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1163:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1164:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1165:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1166:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1167:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1168:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1169:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1170:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1171:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1172:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1173:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1174:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1175:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1176:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1177:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1178:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1179:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1180:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1181:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1182:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1183:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1184:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1185:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1186:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1187:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1188:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1189:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1190:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1191:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1192:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1193:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1194:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1195:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1196:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1197:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1198:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1199:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1200:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1201:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1202:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1203:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1204:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1205:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1206:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1207:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1208:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1209:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1210:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1211:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1212:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1213:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1214:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1215:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1216:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1217:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1218:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1219:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1220:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1221:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1222:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1223:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1224:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1225:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1226:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1227:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1228:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1229:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1230:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1231:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1232:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1233:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1234:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1235:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1236:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series 
1237:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1238:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1239:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #else
1240:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1241:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1242:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1243:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1244:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1245:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1246:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1247:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1248:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1249:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1250:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1251:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1252:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1253:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1254:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1255:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1256:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1257:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1258:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1259:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                             const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1260:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
1261:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1262:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1263:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1264:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1265:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1266:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1267:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1268:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1269:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1270:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1271:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1272:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1273:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1274:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1275:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1276:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1277:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1278:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1279:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1280:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1281:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1282:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1283:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1284:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1285:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1286:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal. 
1287:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1288:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1289:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1290:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1291:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1292:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1293:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1294:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1295:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1296:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1297:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1298:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1299:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1300:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1301:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1302:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1303:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1304:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1305:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1306:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1307:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1308:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1309:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1310:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1311:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1312:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                bool synch_with_pwm);
1313:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1314:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1315:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1316:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1317:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1318:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1319:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1320:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1321:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1322:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1323:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1324:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1325:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1326:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1327:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Event-2 input would be the override value.
1328:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1329:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1330:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1331:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1332:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1333:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
1334:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
1335:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1336:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1337:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1338:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1339:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1340:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1341:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1342:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1343:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1344:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1345:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1346:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1347:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1348:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1349:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1350:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1351:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1352:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1353:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1354:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1355:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1356:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1357:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1358:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1359:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1360:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1361:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1362:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1363:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1364:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1365:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1366:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1367:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1368:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1369:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1370:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1371:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1372:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1373:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1374:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1375:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1376:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1377:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1378:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1379:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1380:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1381:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1382:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1383:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1384:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1385:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1386:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1387:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1388:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1389:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n
1390:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1391:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1392:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1393:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1394:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1395:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1396:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1397:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1398:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1399:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1400:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
1401:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1402:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1403:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1404:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1405:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1406:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1407:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1408:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1409:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1410:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1411:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1412:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1413:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1414:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1415:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1416:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1417:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1418:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1419:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1420:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1421:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1422:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1423:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1424:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1425:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1426:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1427:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1428:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1429:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1430:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1431:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1432:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1433:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1434:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1435:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1436:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1437:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1438:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1439:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1440:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1441:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1442:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1443:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1444:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1445:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1446:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1447:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1448:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1449:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1450:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1451:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1452:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1453:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1454:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1455:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1456:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_TC
1457:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1458:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1459:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1460:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1461:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1462:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1463:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1464:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1465:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1466:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1467:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1468:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1469:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1470:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1471:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1472:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1473:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1474:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1475:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1476:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1477:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1478:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1479:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1480:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1481:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1482:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1483:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1484:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1485:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1486:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1487:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1488:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1489:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1490:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1491:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1492:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1493:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
1494:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1495:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1496:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1497:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1498:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1499:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1500:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1501:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1502:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1503:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1504:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1505:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1506:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1507:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1508:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1509:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1510:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1511:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1512:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1513:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1514:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1515:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1516:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1517:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1518:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1519:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1520:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1521:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops and resets the timer count to zero, by setting CC4yTCCLR.TCC and CC4yTCCLR.TRBC bit.\n\n
1522:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1523:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1524:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1525:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1526:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopClearTimer(XMC_CCU4_SLICE_t *const slice)
1527:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1528:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1529:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = CCU4_CC4_TCCLR_TRBC_Msk | CCU4_CC4_TCCLR_TCC_Msk;
1530:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1531:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1532:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1533:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1534:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1535:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1536:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1537:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1538:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1539:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1540:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1541:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1542:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * invalid.
1543:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1544:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1545:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1546:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1547:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1548:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1549:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1550:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1551:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1552:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1553:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1554:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1555:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1556:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1557:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1558:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1559:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1560:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1561:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1562:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * reaching the terminal count.
1563:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1564:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1565:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1566:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1567:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1568:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1569:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1570:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1571:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1572:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1573:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1574:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1575:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1576:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1577:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1578:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1579:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * all over again after reaching the terminal count.
1580:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1581:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1582:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1583:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1584:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1585:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                            const XMC_CCU4_SLICE_
1586:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1587:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1588:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_T
1589:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1590:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1591:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1592:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1593:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1594:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1595:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1596:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1597:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1598:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1599:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1600:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1601:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1602:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * greater than the compare value.
1603:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1604:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1605:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1606:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1607:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1608:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1609:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1610:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1611:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1612:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1613:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1614:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1615:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1616:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1617:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1618:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1619:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1620:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1621:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1622:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                           const XMC_CCU4_SLICE_t
1623:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1624:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1625:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TCM
1626:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1627:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1628:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1629:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_val Timer period value
1630:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1631:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1632:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1633:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1634:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1635:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1636:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1637:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1638:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1639:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1640:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1641:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1642:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1643:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1644:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1645:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1646:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1647:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
1648:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1649:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1650:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1651:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1652:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1653:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1654:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1655:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1656:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1657:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1658:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1659:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1660:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1661:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1662:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1663:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1664:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1665:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1666:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1667:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1668:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1669:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1670:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1671:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1672:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->PR);
1673:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1674:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1675:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1676:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1677:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_val Timer compare value
1678:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1679:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1680:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1681:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1682:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1683:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1684:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1685:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1686:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1687:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1688:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1689:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1690:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1691:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1692:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1693:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1694:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1695:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
1696:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1697:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1698:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1699:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1700:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1701:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1702:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1703:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1704:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1705:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1706:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1707:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1708:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1709:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1710:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1711:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1712:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1713:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1714:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1715:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1716:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1717:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1718:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1719:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1720:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1721:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->CR);
1722:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1723:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1724:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1725:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1726:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1727:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1728:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                              using a bit wise OR operation.
1729:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1730:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1731:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1732:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1733:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1734:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the GCSS register.\n\n
1735:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1736:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1737:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1738:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1739:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1740:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be succeeded by this API.
1741:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1742:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1743:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1744:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1745:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1746:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1747:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1748:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1749:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
1750:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1751:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1752:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1753:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1754:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1755:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer value
1756:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1757:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1758:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1759:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the latest timer value, from CC4yTIMER register.\n\n
1760:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1761:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1762:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerValue().
1763:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1764:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
1765:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1766:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1767:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->TIMER);
1768:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1769:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1770:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1771:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
1772:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  Range: [0x0 to 0xFFFF]
1773:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1774:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1775:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1776:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1777:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Loads a new timer value, by setting CC4yTIMER register.\n\n
1778:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1779:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1780:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Request to load is ignored if the timer is running.
1781:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1782:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1783:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerValue().
1784:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1785:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t tim
1786:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1787:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1788:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TIMER = (uint32_t) timer_val;
1789:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1790:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1791:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1792:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_dither Boolean instruction on dithering of period match
1793:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param duty_dither Boolean instruction on dithering of compare match
1794:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param spread Dither compare value
1795:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1796:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1797:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1798:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1799:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC4yTC.DITHE and CC4yDITS bits
1800:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
1801:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
1802:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
1803:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
1804:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
1805:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetDitherCompareValue().
1806:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1807:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1808:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After this API call, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask
1809:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to transfer the dither value.
1810:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1811:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1812:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableDithering().
1813:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1814:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1815:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool period_dither,
1816:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool duty_dither,
1817:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const uint8_t spread);
1818:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1819:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1820:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1821:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1822:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1823:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1824:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1825:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC4yTC.DITHE bits.\n\n
1826:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This disables the Dither mode that was set in XMC_CCU4_SLICE_EnableDithering().
1827:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will not clear the dither compare value.
1828:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1829:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1830:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1831:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1832:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableDithering(XMC_CCU4_SLICE_t *const slice)
1833:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1834:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1835:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
1836:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1837:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1838:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1839:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1840:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1841:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1842:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1843:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1844:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the floating prescaler, by setting CC4yTC.FPE bit.\n\n
1845:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
1846:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
1847:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
1848:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1849:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1850:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue()<BR> XMC_CCU4_SLICE_DisableFloatingPrescaler()
1851:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1852:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1853:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1854:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1855:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
1856:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_FPE_Msk;
1857:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1858:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1859:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1860:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1861:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1862:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1863:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1864:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1865:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the floating prescaler, by clearing CC4yTC.FPE bit.\n\n
1866:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would return the prescaler to the normal mode.
1867:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler that would be applied is the value present in CC4yPSC.
1868:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1869:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1870:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableFloatingPrescaler().
1871:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1872:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1873:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1874:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1875:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_FPE_Msk);
1876:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1877:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1878:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1879:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1880:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param comp_val Dither compare value
1881:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1882:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1883:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1884:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1885:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1886:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Sets the dither spread/compare value, by setting CC4yDITS.DCVS bits.\n\n
1887:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
1888:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
1889:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU4_EnableShadowTransfer()
1890:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * called with appropriate mask.
1891:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1892:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1893:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1894:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1895:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint
1896:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1897:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
1898:G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->DITS = comp_val;
 1234              	 .loc 2 1898 0
 1235 0016 0362     	 str r3,[r0,#32]
 1236 0018 10BD     	 pop {r4,pc}
 1237              	.LBE19:
 1238              	.LBE18:
 1239              	 .cfi_endproc
 1240              	.LFE245:
 1242              	 .section .text.XMC_CCU4_SLICE_SetPrescaler,"ax",%progbits
 1243              	 .align 1
 1244              	 .global XMC_CCU4_SLICE_SetPrescaler
 1245              	 .thumb
 1246              	 .thumb_func
 1248              	XMC_CCU4_SLICE_SetPrescaler:
 1249              	.LFB246:
1049:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1050:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
1051:../Libraries/XMCLib/src/xmc_ccu4.c **** }
1052:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1053:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Programs Pre-scalar divider  */
1054:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t di
1055:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1250              	 .loc 1 1055 0
 1251              	 .cfi_startproc
 1252              	 
 1253              	 
 1254              	 
 1255              	.LVL155:
1056:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t fpc;
1057:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1058:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1059:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1060:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc = slice->FPC;
 1256              	 .loc 1 1060 0
 1257 0000 836A     	 ldr r3,[r0,#40]
 1258              	.LVL156:
1061:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 1259              	 .loc 1 1061 0
 1260 0002 23F47063 	 bic r3,r3,#3840
 1261              	.LVL157:
1062:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 1262              	 .loc 1 1062 0
 1263 0006 43EA0123 	 orr r3,r3,r1,lsl#8
 1264              	.LVL158:
1063:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPC = fpc;
 1265              	 .loc 1 1063 0
 1266 000a 8362     	 str r3,[r0,#40]
1064:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* 
1065:../Libraries/XMCLib/src/xmc_ccu4.c ****    * In any case, update the initial value of the divider which is to be loaded once the prescaler 
1066:../Libraries/XMCLib/src/xmc_ccu4.c ****    * compare value.
1067:../Libraries/XMCLib/src/xmc_ccu4.c ****    */
1068:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) div_val;
 1267              	 .loc 1 1068 0
 1268 000c 4162     	 str r1,[r0,#36]
 1269 000e 7047     	 bx lr
 1270              	 .cfi_endproc
 1271              	.LFE246:
 1273              	 .section .text.XMC_CCU4_SLICE_SetInterruptNode,"ax",%progbits
 1274              	 .align 1
 1275              	 .global XMC_CCU4_SLICE_SetInterruptNode
 1276              	 .thumb
 1277              	 .thumb_func
 1279              	XMC_CCU4_SLICE_SetInterruptNode:
 1280              	.LFB247:
1069:../Libraries/XMCLib/src/xmc_ccu4.c **** }
1070:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1071:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Binds a capcom event to an NVIC node  */
1072:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
1073:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_IRQ_ID_t event,
1074:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_SR_ID_t sr)
1075:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1281              	 .loc 1 1075 0
 1282              	 .cfi_startproc
 1283              	 
 1284              	 
 1285              	.LVL159:
 1286 0000 0929     	 cmp r1,#9
 1287 0002 30B5     	 push {r4,r5,lr}
 1288              	.LCFI10:
 1289              	 .cfi_def_cfa_offset 12
 1290              	 .cfi_offset 4,-12
 1291              	 .cfi_offset 5,-8
 1292              	 .cfi_offset 14,-4
 1293 0004 9CBF     	 itt ls
 1294 0006 094C     	 ldrls r4,.L80
 1295 0008 094D     	 ldrls r5,.L80+4
1076:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t srs;
1077:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t pos;
1078:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t mask;
1079:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1080:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1081:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
1082:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event)
1083:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1084:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs = slice->SRS;
 1296              	 .loc 1 1084 0
 1297 000a D0F8A830 	 ldr r3,[r0,#168]
 1298              	.LVL160:
 1299 000e 99BF     	 ittee ls
 1300 0010 645C     	 ldrbls r4,[r4,r1]
 1301 0012 35F81110 	 ldrhls r1,[r5,r1,lsl#1]
 1302              	.LVL161:
 1303 0016 4FF44051 	 movhi r1,#12288
 1304 001a 0C24     	 movhi r4,#12
 1305              	.LVL162:
1085:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1086:../Libraries/XMCLib/src/xmc_ccu4.c ****   switch(event)
1087:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1088:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
1089:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
1090:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
1091:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_POSR_Pos;
1092:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
1093:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1094:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
1095:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
1096:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
1097:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_CMSR_Pos;
1098:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
1099:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1100:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
1101:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
1102:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E0SR_Pos;
1103:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
1104:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1105:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
1106:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
1107:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E1SR_Pos;
1108:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
1109:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1110:../Libraries/XMCLib/src/xmc_ccu4.c ****     default:
1111:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
1112:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E2SR_Pos;
1113:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
1114:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1115:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1116:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs &= ~mask; 
 1306              	 .loc 1 1116 0
 1307 001c 23EA0103 	 bic r3,r3,r1
 1308              	.LVL163:
1117:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs |= (uint32_t)sr << pos;
 1309              	 .loc 1 1117 0
 1310 0020 A240     	 lsls r2,r2,r4
 1311              	.LVL164:
 1312 0022 1A43     	 orrs r2,r2,r3
 1313              	.LVL165:
1118:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->SRS = srs;
 1314              	 .loc 1 1118 0
 1315 0024 C0F8A820 	 str r2,[r0,#168]
 1316 0028 30BD     	 pop {r4,r5,pc}
 1317              	.LVL166:
 1318              	.L81:
 1319 002a 00BF     	 .align 2
 1320              	.L80:
 1321 002c 00000000 	 .word .LANCHOR0
 1322 0030 00000000 	 .word .LANCHOR1
 1323              	 .cfi_endproc
 1324              	.LFE247:
 1326              	 .section .text.XMC_CCU4_SLICE_SetPassiveLevel,"ax",%progbits
 1327              	 .align 1
 1328              	 .global XMC_CCU4_SLICE_SetPassiveLevel
 1329              	 .thumb
 1330              	 .thumb_func
 1332              	XMC_CCU4_SLICE_SetPassiveLevel:
 1333              	.LFB248:
1119:../Libraries/XMCLib/src/xmc_ccu4.c **** }
1120:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1121:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Asserts passive level for the slice output */
1122:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
1123:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
1124:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1334              	 .loc 1 1124 0
 1335              	 .cfi_startproc
 1336              	 
 1337              	 
 1338              	 
 1339              	.LVL167:
1125:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t psl; 
1126:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1127:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1128:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTP
1129:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                                       (level == XMC_CCU4_SLICE_OUTP
1130:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1131:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl = slice->PSL;
 1340              	 .loc 1 1131 0
 1341 0000 8369     	 ldr r3,[r0,#24]
 1342              	.LVL168:
1132:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 1343              	 .loc 1 1132 0
 1344 0002 23F00103 	 bic r3,r3,#1
 1345              	.LVL169:
1133:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl |= (uint32_t) level;
 1346              	 .loc 1 1133 0
 1347 0006 1943     	 orrs r1,r1,r3
 1348              	.LVL170:
1134:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1135:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program CC4 slice output passive level */
1136:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSL = psl;
 1349              	 .loc 1 1136 0
 1350 0008 8161     	 str r1,[r0,#24]
 1351 000a 7047     	 bx lr
 1352              	 .cfi_endproc
 1353              	.LFE248:
 1355              	 .section .rodata.CSWTCH.36,"a",%progbits
 1356              	 .set .LANCHOR0,.+0
 1359              	CSWTCH.36:
 1360 0000 00       	 .byte 0
 1361 0001 00       	 .byte 0
 1362 0002 02       	 .byte 2
 1363 0003 02       	 .byte 2
 1364 0004 0C       	 .byte 12
 1365 0005 0C       	 .byte 12
 1366 0006 0C       	 .byte 12
 1367 0007 0C       	 .byte 12
 1368 0008 08       	 .byte 8
 1369 0009 0A       	 .byte 10
 1370              	 .section .rodata.CSWTCH.37,"a",%progbits
 1371              	 .align 1
 1372              	 .set .LANCHOR1,.+0
 1375              	CSWTCH.37:
 1376 0000 0300     	 .short 3
 1377 0002 0300     	 .short 3
 1378 0004 0C00     	 .short 12
 1379 0006 0C00     	 .short 12
 1380 0008 0030     	 .short 12288
 1381 000a 0030     	 .short 12288
 1382 000c 0030     	 .short 12288
 1383 000e 0030     	 .short 12288
 1384 0010 0003     	 .short 768
 1385 0012 000C     	 .short 3072
 1386              	 .text
 1387              	.Letext0:
 1388              	 .file 3 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1389              	 .file 4 "c:\\program files\\dave_4\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1390              	 .file 5 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1391              	 .file 6 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/XMCLib/inc/xmc4_scu.h"
 1392              	 .file 7 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Include/core_cm4.h"
 1393              	 .file 8 "G:/DT/dt_g1_balancing_plate_wise20192020/XMC/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_ccu4.c
    {standard input}:20     .text.XMC_CCU4_EnableModule:00000000 $t
    {standard input}:25     .text.XMC_CCU4_EnableModule:00000000 XMC_CCU4_EnableModule
    {standard input}:101    .text.XMC_CCU4_EnableModule:0000003c $d
    {standard input}:112    .text.XMC_CCU4_DisableModule:00000000 $t
    {standard input}:117    .text.XMC_CCU4_DisableModule:00000000 XMC_CCU4_DisableModule
    {standard input}:172    .text.XMC_CCU4_DisableModule:0000002c $d
    {standard input}:183    .text.XMC_CCU4_Init:00000000 $t
    {standard input}:188    .text.XMC_CCU4_Init:00000000 XMC_CCU4_Init
    {standard input}:232    .text.XMC_CCU4_SetModuleClock:00000000 $t
    {standard input}:237    .text.XMC_CCU4_SetModuleClock:00000000 XMC_CCU4_SetModuleClock
    {standard input}:261    .text.XMC_CCU4_SetMultiChannelShadowTransferMode:00000000 $t
    {standard input}:266    .text.XMC_CCU4_SetMultiChannelShadowTransferMode:00000000 XMC_CCU4_SetMultiChannelShadowTransferMode
    {standard input}:292    .text.XMC_CCU4_SLICE_CompareInit:00000000 $t
    {standard input}:297    .text.XMC_CCU4_SLICE_CompareInit:00000000 XMC_CCU4_SLICE_CompareInit
    {standard input}:334    .text.XMC_CCU4_SLICE_CaptureInit:00000000 $t
    {standard input}:339    .text.XMC_CCU4_SLICE_CaptureInit:00000000 XMC_CCU4_SLICE_CaptureInit
    {standard input}:368    .text.XMC_CCU4_SLICE_StartConfig:00000000 $t
    {standard input}:373    .text.XMC_CCU4_SLICE_StartConfig:00000000 XMC_CCU4_SLICE_StartConfig
    {standard input}:411    .text.XMC_CCU4_SLICE_StopConfig:00000000 $t
    {standard input}:416    .text.XMC_CCU4_SLICE_StopConfig:00000000 XMC_CCU4_SLICE_StopConfig
    {standard input}:451    .text.XMC_CCU4_SLICE_LoadConfig:00000000 $t
    {standard input}:456    .text.XMC_CCU4_SLICE_LoadConfig:00000000 XMC_CCU4_SLICE_LoadConfig
    {standard input}:480    .text.XMC_CCU4_SLICE_ModulationConfig:00000000 $t
    {standard input}:485    .text.XMC_CCU4_SLICE_ModulationConfig:00000000 XMC_CCU4_SLICE_ModulationConfig
    {standard input}:539    .text.XMC_CCU4_SLICE_CountConfig:00000000 $t
    {standard input}:544    .text.XMC_CCU4_SLICE_CountConfig:00000000 XMC_CCU4_SLICE_CountConfig
    {standard input}:568    .text.XMC_CCU4_SLICE_GateConfig:00000000 $t
    {standard input}:573    .text.XMC_CCU4_SLICE_GateConfig:00000000 XMC_CCU4_SLICE_GateConfig
    {standard input}:597    .text.XMC_CCU4_SLICE_Capture0Config:00000000 $t
    {standard input}:602    .text.XMC_CCU4_SLICE_Capture0Config:00000000 XMC_CCU4_SLICE_Capture0Config
    {standard input}:626    .text.XMC_CCU4_SLICE_Capture1Config:00000000 $t
    {standard input}:631    .text.XMC_CCU4_SLICE_Capture1Config:00000000 XMC_CCU4_SLICE_Capture1Config
    {standard input}:655    .text.XMC_CCU4_SLICE_DirectionConfig:00000000 $t
    {standard input}:660    .text.XMC_CCU4_SLICE_DirectionConfig:00000000 XMC_CCU4_SLICE_DirectionConfig
    {standard input}:684    .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:00000000 $t
    {standard input}:689    .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:00000000 XMC_CCU4_SLICE_StatusBitOverrideConfig
    {standard input}:710    .text.XMC_CCU4_SLICE_TrapConfig:00000000 $t
    {standard input}:715    .text.XMC_CCU4_SLICE_TrapConfig:00000000 XMC_CCU4_SLICE_TrapConfig
    {standard input}:762    .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:00000000 $t
    {standard input}:767    .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:00000000 XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
    {standard input}:856    .text.XMC_CCU4_SLICE_ConfigureEvent:00000000 $t
    {standard input}:861    .text.XMC_CCU4_SLICE_ConfigureEvent:00000000 XMC_CCU4_SLICE_ConfigureEvent
    {standard input}:957    .text.XMC_CCU4_SLICE_SetInput:00000000 $t
    {standard input}:962    .text.XMC_CCU4_SLICE_SetInput:00000000 XMC_CCU4_SLICE_SetInput
    {standard input}:1001   .text.XMC_CCU4_SLICE_SetTimerRepeatMode:00000000 $t
    {standard input}:1006   .text.XMC_CCU4_SLICE_SetTimerRepeatMode:00000000 XMC_CCU4_SLICE_SetTimerRepeatMode
    {standard input}:1031   .text.XMC_CCU4_SLICE_SetTimerCountingMode:00000000 $t
    {standard input}:1036   .text.XMC_CCU4_SLICE_SetTimerCountingMode:00000000 XMC_CCU4_SLICE_SetTimerCountingMode
    {standard input}:1061   .text.XMC_CCU4_SLICE_GetCaptureRegisterValue:00000000 $t
    {standard input}:1066   .text.XMC_CCU4_SLICE_GetCaptureRegisterValue:00000000 XMC_CCU4_SLICE_GetCaptureRegisterValue
    {standard input}:1086   .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue:00000000 $t
    {standard input}:1091   .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue:00000000 XMC_CCU4_SLICE_GetLastCapturedTimerValue
    {standard input}:1164   .text.XMC_CCU4_GetCapturedValueFromFifo:00000000 $t
    {standard input}:1169   .text.XMC_CCU4_GetCapturedValueFromFifo:00000000 XMC_CCU4_GetCapturedValueFromFifo
    {standard input}:1194   .text.XMC_CCU4_SLICE_EnableDithering:00000000 $t
    {standard input}:1199   .text.XMC_CCU4_SLICE_EnableDithering:00000000 XMC_CCU4_SLICE_EnableDithering
    {standard input}:1243   .text.XMC_CCU4_SLICE_SetPrescaler:00000000 $t
    {standard input}:1248   .text.XMC_CCU4_SLICE_SetPrescaler:00000000 XMC_CCU4_SLICE_SetPrescaler
    {standard input}:1274   .text.XMC_CCU4_SLICE_SetInterruptNode:00000000 $t
    {standard input}:1279   .text.XMC_CCU4_SLICE_SetInterruptNode:00000000 XMC_CCU4_SLICE_SetInterruptNode
    {standard input}:1321   .text.XMC_CCU4_SLICE_SetInterruptNode:0000002c $d
    {standard input}:1327   .text.XMC_CCU4_SLICE_SetPassiveLevel:00000000 $t
    {standard input}:1332   .text.XMC_CCU4_SLICE_SetPassiveLevel:00000000 XMC_CCU4_SLICE_SetPassiveLevel
    {standard input}:1359   .rodata.CSWTCH.36:00000000 CSWTCH.36
    {standard input}:1371   .rodata.CSWTCH.37:00000000 $d
    {standard input}:1375   .rodata.CSWTCH.37:00000000 CSWTCH.37
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.ca5ae67a873a4952d630d8e4120b9e3e
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.features.h.22.bee0aee4a3878f51861c775df98fa3ea
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fe7d912fc917043c98742c35eddd8cff
                           .group:00000000 wm4.config.h.216.aad1ef7bee4fb69981cb38ce62f84d9c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.4e89a3f145accdcb1100c37260c088e6
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.xmc_device.h.65.5c0d35eb1a6853ff8300ab2ec1b944b0
                           .group:00000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.57f124f9262f3dbf77da6a6506ffb430
                           .group:00000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:00000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:00000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:00000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:00000000 wm4.xmc_device.h.1500.3eca65ed9ba7f90e09c1ffcb0b3f5724
                           .group:00000000 wm4.xmc_common.h.98.806f17e888fd51d0e4be2ad115163551
                           .group:00000000 wm4.xmc4_ccu4_map.h.52.bc30e2611b29f8dfd82b8d766e443456
                           .group:00000000 wm4.xmc4_scu.h.90.f49c0839764a6c1240876a5f2e586200

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_EnableClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
